<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtt&#39;s Blog</title>
  
  
  <link href="http://conquers.github.io/atom.xml" rel="self"/>
  
  <link href="http://conquers.github.io/"/>
  <updated>2023-07-20T02:36:58.403Z</updated>
  <id>http://conquers.github.io/</id>
  
  <author>
    <name>wtt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Es功能实现案例</title>
    <link href="http://conquers.github.io/posts/98542065.html"/>
    <id>http://conquers.github.io/posts/98542065.html</id>
    <published>2023-07-18T02:28:41.000Z</published>
    <updated>2023-07-20T02:36:58.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Es功能实现案例"><a href="#Es功能实现案例" class="headerlink" title="Es功能实现案例"></a>Es功能实现案例</h2><ul><li>需求：<ul><li>设置一张优惠券满足A出版社，B类别，排除id为1的商品，额外添加id为2的商品，在结果中可以继续搜索，筛选，排序等</li></ul></li><li>实现<ul><li>sql</li><li>Es</li></ul></li></ul><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">结果<span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> publisher_name <span class="hljs-operator">=</span> A <span class="hljs-keyword">and</span> class_name <span class="hljs-operator">=</span> B<br>结果<span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>结果 <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">from</span> (结果<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> 结果<span class="hljs-number">2</span>) <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">!=</span> <span class="hljs-number">2</span><br><br>实现排序：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (排序条件)<br>实现使用名字再次搜索：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> title <span class="hljs-keyword">like</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%title%&#x27;</span><br>实现筛选：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> (筛选条件)<br><br></code></pre></td></tr></table></figure><h3 id="Es-Java"><a href="#Es-Java" class="headerlink" title="Es(Java)"></a>Es(Java)</h3><p>在 <code>sql</code>  中可以使用 <code>union</code> 和子查询，在 <code>Es</code> 中，像这类问题，需要使用多个 <code>boolQuery</code> ，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><span class="hljs-comment">// 排除商品</span><br>boolQueryBuilder.mustNot(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, notUseGoodsIdByCouponId));<br><br><span class="hljs-comment">// 满足A出版社，B类别，额外添加id为2的商品</span><br>boolQueryBuilder.must(QueryBuilders.boolQuery()<br>        .should(QueryBuilders.boolQuery()<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>        .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>实现排序：省略<br>实现使用名字再次搜索：boolQueryBuilder.must(QueryBuilders.wildcardQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;*&quot;</span> + title + <span class="hljs-string">&quot;*&quot;</span>));<br>实现筛选：boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;筛选字段&quot;</span>, 筛选条件));<br></code></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出版社为空，类别为空，会出现没有结果的问题<br>问题分析：查看 <code>DSL</code> 语句发现参数为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;className&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br>或者<br><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;publisherName&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>问题解决：暴力的办法，应该有更好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(classTypeByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(publisherByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Es功能实现案例&quot;&gt;&lt;a href=&quot;#Es功能实现案例&quot; class=&quot;headerlink&quot; title=&quot;Es功能实现案例&quot;&gt;&lt;/a&gt;Es功能实现案例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需求：&lt;ul&gt;
&lt;li&gt;设置一张优惠券满足A出版社，B类别，排除id为1的商品，</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>JUC并发编程</title>
    <link href="http://conquers.github.io/posts/eb9166f8.html"/>
    <id>http://conquers.github.io/posts/eb9166f8.html</id>
    <published>2023-07-11T01:54:30.000Z</published>
    <updated>2023-08-15T01:10:09.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h1><h2 id="一、进程与线程"><a href="#一、进程与线程" class="headerlink" title="一、进程与线程"></a>一、进程与线程</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><blockquote><p>进程</p></blockquote><p>进程：程序是静止的，进程实体的运行过程就是进程，是系统进行<strong>资源分配的基本单位</strong></p><p>进程的特征：并发性、异步性、动态性、独立性、结构性</p><blockquote><p>线程</p></blockquote><p>线程：线程是属于进程的，是一个基本的 CPU 执行单元，是程序执行流的最小单元。线程是进程中的一个实体，是系统<strong>独立调度的基本单位</strong>，线程本身不拥有系统资源，只拥有一点在运行中必不可少的资源，与同属一个进程的其他线程共享进程所拥有的全部资源</p><p>关系：一个进程可以包含多个线程，这就是多线程，比如看视频是进程，图画、声音、广告等就是多个线程</p><p>线程的作用：使多道程序更好的并发执行，提高资源利用率和系统吞吐量，增强操作系统的并发性能</p><p>并发并行：</p><ul><li>并行：在同一时刻，有多个指令在多个 CPU 上<strong>同时</strong>执行</li><li>并发：在同一时刻，有多个指令在单个 CPU 上<strong>交替</strong>执行</li></ul><p>同步异步：</p><ul><li>需要等待结果返回，才能继续运行就是同步</li><li>不需要等待结果返回，就能继续运行就是异步</li></ul><h3 id="1-2-对比"><a href="#1-2-对比" class="headerlink" title="1.2 对比"></a>1.2 对比</h3><p>线程进程对比：</p><ul><li><p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</p></li><li><p>进程拥有共享的资源，如内存空间等，供其<strong>内部的线程共享</strong></p></li><li><p>进程间通信较为复杂</p><ul><li><p>同一台计算机的进程通信称为 <code>IPC</code>（<code>Inter-process communication</code>）</p><ul><li><p>信号量：信号量是一个计数器，用于多进程对共享数据的访问，解决同步相关的问题并避免竞争条件</p></li><li><p>共享存储：多个进程可以访问同一块内存空间，需要使用信号量用来同步对共享存储的访问</p></li><li><p>管道通信：管道是用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件 pipe 文件，该文件同一时间只允许一个进程访问，所以只支持<strong>半双工通信</strong></p><ul><li>匿名管道（<code>Pipes</code>）：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信</li><li>命名管道（<code>Names Pipes</code>）：以磁盘文件的方式存在，可以实现本机任意两个进程通信，遵循 <code>FIFO</code></li></ul></li><li><p>消息队列：内核中存储消息的链表，由消息队列标识符标识，能在不同进程之间提供<strong>全双工通信</strong>，对比管道：</p><ul><li>匿名管道存在于内存中的文件；命名管道存在于实际的磁盘介质或者文件系统；消息队列存放在内核中，只有在内核重启（操作系统重启）或者显示地删除一个消息队列时，该消息队列才被真正删除</li><li>读进程可以根据消息类型有选择地接收消息，而不像 <code>FIFO</code> 那样只能默认地接收</li></ul></li></ul></li><li><p>不同计算机之间的<strong>进程通信</strong>，需要通过网络，并遵守共同的协议，例如 <code>HTTP</code></p><ul><li>套接字：与其它通信机制不同的是，可用于不同机器间的互相通信</li></ul></li></ul></li><li><p>线程通信相对简单，因为线程之间共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</p><ul><li><strong>Java 中的通信机制</strong>：<code>volatile</code>、<code>wait/notify</code> 机制、<code>join</code> 方式、<code>InheritableThreadLocal</code>、<code>MappedByteBuffer</code></li></ul></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><blockquote><p>关于程序、进程、线程的相关概念也可以参考： <a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#1.1%20%E7%A8%8B%E5%BA%8F%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B">程序、进程、线程的基本概念</a></p></blockquote><h2 id="二、Java线程"><a href="#二、Java线程" class="headerlink" title="二、Java线程"></a>二、Java线程</h2><h3 id="2-1-创建线程"><a href="#2-1-创建线程" class="headerlink" title="2.1 创建线程"></a>2.1 创建线程</h3><h4 id="方式一：继承-Thread-类"><a href="#方式一：继承-Thread-类" class="headerlink" title="方式一：继承 Thread 类"></a>方式一：继承 Thread 类</h4><p><a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#2.2%20%E6%96%B9%E5%BC%8F1%EF%BC%9A%E7%BB%A7%E6%89%BFThread%E7%B1%BB">使用继承 Thread 类的方法创建线程</a></p><h4 id="方式二：实现-Runnable-接口"><a href="#方式二：实现-Runnable-接口" class="headerlink" title="方式二：实现 Runnable 接口"></a>方式二：实现 Runnable 接口</h4><p><a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#2.3%20%E6%96%B9%E5%BC%8F2%EF%BC%9A%E5%AE%9E%E7%8E%B0Runnable%E6%8E%A5%E5%8F%A3">使用实现 Runnable 接口的方法创建线程</a></p><h4 id="原理：Thread-与-Runnable-的关系"><a href="#原理：Thread-与-Runnable-的关系" class="headerlink" title="原理：Thread 与 Runnable 的关系"></a>原理：Thread 与 Runnable 的关系</h4><p><strong>Thread</strong>：</p><p>继承了 <code>Thread</code> 后，重写 <code>Thread</code> 类的 <code>run()</code> 方法，最后调用重写后的 <code>run()</code>方法。</p><p><img src="/./Resources/image-20230711105327819.png" alt="image-20230711105327819"></p><p><strong>Runnable</strong> ：</p><p>实现了 <code>Runnable</code> 后，将实现类作为参数传给 <code>Thread</code>（<code>new Thread(My Runnable)</code>），最后调用 <code>Runnable</code> 实现类里面的 <code>run()</code> 方法。</p><p><img src="/./Resources/image-20230711110044764.png" alt="image-20230711110044764"></p><blockquote><p>小结</p></blockquote><ul><li>方式一是把线程和任务合并在了一起，方法二是把线程和任务分开了</li><li>用 <code>Runnable</code> 更容易与线程池等高级 <code>API</code> 配合</li><li>用 <code>Runnable</code> 让任务类脱离了 <code>Thread</code> 继承体系，更灵活</li></ul><h4 id="方式三：实现-Callable-接口"><a href="#方式三：实现-Callable-接口" class="headerlink" title="方式三：实现 Callable 接口"></a>方式三：实现 Callable 接口</h4><p><a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#8.1%20%E6%96%B0%E5%A2%9E%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3">JDK 5.0 新增方式一：实现Callable接口</a></p><h4 id="方式四：线程池"><a href="#方式四：线程池" class="headerlink" title="方式四：线程池"></a>方式四：线程池</h4><p><a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#8.2%20%E6%96%B0%E5%A2%9E%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0">JDK 5.0 新增方式二：使用线程池</a></p><h3 id="2-2-查看进程线程的方法"><a href="#2-2-查看进程线程的方法" class="headerlink" title="2.2 查看进程线程的方法"></a>2.2 查看进程线程的方法</h3><blockquote><p><code>windows</code></p></blockquote><ul><li>任务管理器可以查看进程和线程数，也可以用来杀死进程；</li><li><code>cmd: tasklist</code>：查看进程；</li><li><code>cmd: taskkill</code>：杀死进程；</li></ul><blockquote><p><code>linux</code></p></blockquote><ul><li><code>ps -fe</code>：查看所有进程</li><li><code>ps -fe | grep java</code></li><li><code>jps</code></li><li><code>kill -9 进程号</code>：杀死某个进程；</li><li><code>top</code></li><li><code>top -H -p 进程号</code>：查看指定进程号的进程的所有线程信息；</li><li><code>jstack</code></li></ul><blockquote><p><code>Java</code></p></blockquote><ul><li><code>jps</code>：查看所有 <code>Java</code> 进程；</li><li><code>jstack &lt;pid&gt;</code>：查看某个 <code>Java</code> 进程的所有线程状态；</li><li><code>jconsole</code>：查看某个 <code>Java</code> 进程中线程的运行状况（图形界面）；在 <code>cmd</code> 中输入 <code>jconsole</code> 进行连接；<ul><li>注：<code>Idea</code> 和 <code>finalshell</code> 都是 <code>Java</code> 编写的。</li><li><img src="/./Resources/image-20230711163942840.png" alt="image-20230711163942840"></li></ul></li></ul><h3 id="2-3-线程原理"><a href="#2-3-线程原理" class="headerlink" title="2.3 线程原理"></a>2.3 线程原理</h3><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h4><blockquote><p><code>Java Virtual Machine Stacks</code></p></blockquote><p><code>Java</code> 虚拟机栈（<code>Java Virtual Machine Stacks</code>）：<strong>每个线程启动后</strong>，虚拟机就会为其分配一块<strong>栈内存</strong></p><ul><li>每个栈由多个<strong>栈帧</strong>（<code>Frame</code>）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个<strong>活动栈帧</strong>，对应着当前正在执行的那个方法</li></ul><p><strong>举例</strong>：只有主线程</p><p><img src="/./Resources/image-20230711165355157.png" alt="image-20230711165355157"></p><p>关于这张图的详细参考视频讲解，视频地址：<a href="https://www.bilibili.com/video/BV16J411h7Rd?p=21%EF%BC%8C%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E9%9C%80%E8%A6%81%E5%8F%82%E8%80%83">https://www.bilibili.com/video/BV16J411h7Rd?p=21，部分知识需要参考</a> <code>JVM</code></p><p><img src="/./Resources/image-20230711170152807.png" alt="image-20230711170152807"></p><p><strong>举例</strong>：主线程和子线程</p><p>注：多线程时 <code>debug</code> 需要打开切换模式，在断点处右键如下：</p><p><img src="/./Resources/image-20230711170755123.png" alt="image-20230711170755123"></p><p>此时状态如下：<code>main</code> 和 <code>t1</code> 线程的栈帧是不同的，各自的栈帧是独立的，即虚拟机栈是线程私有的。</p><p><img src="/./Resources/image-20230711170905951.png" alt="image-20230711170905951"></p><blockquote><p><code>Thread Context Switch</code></p></blockquote><p>线程上下文切换（<code>Thread Context Switch</code>）：因为以下一些原因导致 CPU 不再执行当前线程，转而执行另一个线程</p><ul><li>线程的 CPU 时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 <code>sleep</code>、<code>yield</code>、<code>wait</code>、<code>join</code>、<code>park</code> 等方法</li></ul><p>当 <code>Context Switch</code> 发生时，需要由操作系统保存当前线程的状态（PCB 中），并恢复另一个线程的状态，包括程序计数器(记住下一条 <code>JVM</code> 指令的执行地址，是线程私有的)、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</p><p><img src="/./Resources/image-20230711172003951.png" alt="image-20230711172003951"></p><p><code>JVM</code> 规范并没有限定线程模型，以 <code>HotSopot</code> 为例：</p><ul><li><code>Java</code> 的线程是内核级线程（1:1 线程模型），每个 <code>Java</code> 线程都映射到一个操作系统原生线程，需要消耗一定的内核资源（堆栈）</li><li><strong>线程的调度是在内核态运行的，而线程中的代码是在用户态运行</strong>，所以线程切换（状态改变）会导致用户与内核态转换进行系统调用，这是非常消耗性能</li></ul><p><code>Java</code> 中 <code>main</code> 方法启动的是一个进程也是一个<strong>主线程</strong>，<code>main</code> 方法里面的其他线程均为子线程，<code>main</code> 线程是这些线程的父线程</p><h3 id="2-4-线程状态"><a href="#2-4-线程状态" class="headerlink" title="2.4 线程状态"></a>2.4 线程状态</h3><p><a href="../%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#4.2%20JDK1.5%E5%8F%8A%E4%B9%8B%E5%90%8E%EF%BC%9A6%E7%A7%8D%E7%8A%B6%E6%80%81">线程的 6 种状态</a></p><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><p>线程调度指系统为线程分配处理器使用权的过程，方式有两种：协同式线程调度、抢占式线程调度（Java 选择）</p><p>协同式线程调度：线程的执行时间由线程本身控制</p><ul><li>优点：线程做完任务才通知系统切换到其他线程，相当于所有线程串行执行，不会出现线程同步问题</li><li>缺点：线程执行时间不可控，如果代码编写出现问题，可能导致程序一直阻塞，引起系统的奔溃</li></ul><p>抢占式线程调度：线程的执行时间由系统分配</p><ul><li>优点：线程执行时间可控，不会因为一个线程的问题而导致整体系统不可用</li><li>缺点：无法主动为某个线程多分配时间</li></ul><p>Java 提供了线程优先级的机制，优先级会提示（hint）调度器优先调度该线程，但这仅仅是一个提示，调度器可以忽略它。在线程的就绪状态时，如果 CPU 比较忙，那么优先级高的线程会获得更多的时间片，但 CPU 闲时，优先级几乎没作用</p><p>说明：并不能通过优先级来判断线程执行的先后顺序</p><h4 id="未来优化"><a href="#未来优化" class="headerlink" title="未来优化"></a>未来优化</h4><p>内核级线程调度的成本较大，所以引入了更轻量级的协程。用户线程的调度由用户自己实现（多对一的线程模型，多<strong>个用户线程映射到一个内核级线程</strong>），被设计为协同式调度，所以叫协程</p><ul><li>有栈协程：协程会完整的做调用栈的保护、恢复工作，所以叫有栈协程</li><li>无栈协程：本质上是一种有限状态机，状态保存在闭包里，比有栈协程更轻量，但是功能有限</li></ul><p>有栈协程中有一种特例叫纤程，在新并发模型中，一段纤程的代码被分为两部分，执行过程和调度器：</p><ul><li>执行过程：用于维护执行现场，保护、恢复上下文状态</li><li>调度器：负责编排所有要执行的代码顺序</li></ul><h3 id="2-5-线程方法"><a href="#2-5-线程方法" class="headerlink" title="2.5 线程方法"></a>2.5 线程方法</h3><h3 id="2-6-API"><a href="#2-6-API" class="headerlink" title="2.6 API"></a>2.6 API</h3><p><a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#3.2%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%B3%BB%E5%88%97">常用方法系列</a></p><h3 id="2-7-start-与-run"><a href="#2-7-start-与-run" class="headerlink" title="2.7 start 与 run"></a>2.7 start 与 run</h3><p><code>run</code>：称为线程体，包含了要执行的这个线程的内容，方法运行结束，此线程随即终止。直接调用 <code>run</code> 是在<strong>主线程中执行</strong>了 <code>run</code>，没有启动新的线程，需要顺序执行</p><p><code>start</code>：使用 <code>start</code> 是启动新的线程，此线程处于就绪（可运行）状态，通过新的线程间接执行 <code>run</code> 中的代码</p><p>说明：<strong>线程控制资源类</strong></p><p><code>run()</code> 方法中的异常不能抛出，只能 <code>try/catch</code></p><ul><li>因为父类中没有抛出任何异常，子类不能比父类抛出更多的异常</li><li><strong>异常不能跨线程传播回 <code>main()</code> 中</strong>，因此必须在本地进行处理</li></ul><h3 id="2-8-sleep-与-yield"><a href="#2-8-sleep-与-yield" class="headerlink" title="2.8 sleep 与 yield"></a>2.8 sleep 与 yield</h3><p><code>sleep</code>：</p><ul><li>调用 <code>sleep</code> 会让当前线程从 <code>Running</code> 进入 <code>Timed Waiting</code> 状态（阻塞）</li><li><code>sleep()</code> 方法的过程中，<strong>线程不会释放对象锁</strong></li><li>其它线程可以使用 <code>interrupt</code> 方法打断正在睡眠的线程，这时 <code>sleep</code> 方法会抛出 <code>InterruptedException</code></li><li>睡眠结束后的线程未必会立刻得到执行，需要抢占 CPU</li><li>建议用 <code>TimeUnit</code> 的 <code>sleep</code> 代替 <code>Thread</code> 的 <code>sleep</code> 来获得更好的可读性<ul><li><code>TimeUnit.SECONDS.sleep(1);</code></li></ul></li></ul><p><code>yield</code>：</p><ul><li>调用 <code>yield</code> 会提示线程调度器让出当前线程对 CPU 的使用</li><li>具体的实现依赖于操作系统的任务调度器</li><li><strong>会放弃 CPU 资源，锁资源不会释放</strong></li></ul><h3 id="2-9-join"><a href="#2-9-join" class="headerlink" title="2.9 join"></a>2.9 join</h3><p><code>public final void join()</code>：等待这个线程结束</p><p>原理：调用者轮询检查线程 <code>alive</code> 状态，<code>t1.join()</code> 等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 调用者线程进入 thread 的 waitSet 等待, 直到当前线程运行结束</span><br>    <span class="hljs-keyword">while</span> (isAlive()) &#123;<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>join</code> 方法是被 <code>synchronized</code> 修饰的，本质上是一个对象锁，其内部的 <code>wait</code> 方法调用也是释放锁的，但是<strong>释放的是当前的线程对象锁，而不是外面的锁</strong></p></li><li><p>当调用某个线程（t1）的 <code>join</code> 方法后，该线程（t1）抢占到 CPU 资源，就不再释放，直到线程执行完毕</p></li></ul><p>线程同步：</p><ul><li><code>join</code> 实现线程同步，因为会阻塞等待另一个线程的结束，才能继续向下运行<ul><li>需要外部共享变量，不符合面向对象封装的思想</li><li>必须等待线程结束，不能配合线程池使用</li></ul></li><li><code>Future</code> 实现（同步）：<code>get()</code> 方法阻塞等待执行结果<ul><li><code>main</code> 线程接收结果</li><li><code>get</code> 方法是让调用线程同步等待</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        test1();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            r = <span class="hljs-number">10</span>;<br>        &#125;);<br>        t1.start();<br>        t1.join();<br>        System.out.println(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-10-interrupt"><a href="#2-10-interrupt" class="headerlink" title="2.10 interrupt"></a>2.10 interrupt</h3><h5 id="打断线程"><a href="#打断线程" class="headerlink" title="打断线程"></a>打断线程</h5><p><strong>判断打断的目的是发生打断的时候，是继续运行，还是就此结束。</strong></p><p>关于打断线程的部分方法：</p><ul><li><code>public void interrupt()</code>：打断这个线程，异常处理机制；</li><li><code>public static boolean interrupted()</code>：判断当前线程是否被打断，打断返回 true，<strong>清除打断标记</strong>，连续调用两次一定返回 false；</li><li><code>public boolean isInterrupted()</code>：判断当前线程是否被打断，不清除打断标记；</li></ul><p>打断的线程会发生上下文切换，操作系统会保存线程信息，抢占到 CPU 后会从中断的地方接着运行（打断不是停止）；</p><ul><li><p>打断阻塞的线程：</p><ul><li>对于用 <code>sleep</code>、<code>wait</code>、<code>join</code> 方法让线程进入阻塞状态的，<strong>会清空打断状态</strong>（ 即将打断状态置为<code>false</code>）</li><li>对于其他的，?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    t1.interrupt();<br>    System.out.println(<span class="hljs-string">&quot; 打断状态: &#123;&#125;&quot;</span> + t1.isInterrupted());<span class="hljs-comment">// 打断状态: &#123;&#125;false</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打断正常运行的线程：不会清空打断状态（即将打断状态置为 <code>true</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> current.isInterrupted();<br>            <span class="hljs-keyword">if</span>(interrupted) &#123;<br>                System.out.println(<span class="hljs-string">&quot; 打断状态: &#123;&#125;&quot;</span> + interrupted);<span class="hljs-comment">//打断状态: &#123;&#125;true</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br>    t2.start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    t2.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="park"><a href="#park" class="headerlink" title="park"></a>park</h5><p><code>park</code> 作用类似 <code>sleep</code>，打断 <code>park</code> 线程，不会清空打断状态（<code>true</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;park...&quot;</span>);<br>        LockSupport.park();<br>        System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;打断状态：&quot;</span> + Thread.currentThread().isInterrupted());<span class="hljs-comment">//打断状态：true</span><br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    t1.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果打断标记已经是 <code>true</code>, 则 <code>park</code> 会失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LockSupport.park();<br>System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>LockSupport.park();<span class="hljs-comment">//由于此次打断状态为 true，导致 `park` 失效，不会阻塞</span><br>System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<span class="hljs-comment">//和上一个unpark同时执行</span><br></code></pre></td></tr></table></figure><p>可以修改 获取打断状态的方法，使用 <code>Thread.interrupted()</code>，该方法可以获取当前线程的打断状态，并且将打断状态置为 <code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;park...&quot;</span>);<br>        LockSupport.park();<br>        System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;打断状态：&quot;</span> + Thread.interrupt());<span class="hljs-comment">//打断状态：true</span><br>        LockSupport.park();<span class="hljs-comment">// 此时由于interrupt()将打断状态置为了false，因此继续堵塞</span><br>        System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    t1.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>具体地，<code>LockSupport</code> 在 同步 → park-un 详解</p><h5 id="设计模式：两阶段终止模式"><a href="#设计模式：两阶段终止模式" class="headerlink" title="设计模式：两阶段终止模式"></a>设计模式：两阶段终止模式</h5><p>终止模式之两阶段终止模式：<code>Two Phase Termination</code></p><p>目标：在一个线程 T1 中如何优雅终止线程 T2？优雅指的是给 T2 一个后置处理器</p><p>错误思想：</p><ul><li>使用线程对象的 <code>stop()</code> 方法停止线程：<code>stop</code> 方法会真正杀死线程，如果这时线程锁住了共享资源，当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</li><li>使用 <code>System.exit(int)</code> 方法停止线程：目的仅是停止一个线程，但这种做法会让整个程序都停止</li></ul><p>两阶段终止模式图示：</p><p><img src="/./Resources/image-20230719150855923.png" alt="image-20230719150855923"></p><p>打断线程可能在任何时间，所以需要考虑在任何时刻被打断的处理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">TwoPhaseTermination</span> <span class="hljs-variable">tpt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwoPhaseTermination</span>();<br>        tpt.start();<br>        Thread.sleep(<span class="hljs-number">3500</span>);<br>        tpt.stop();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoPhaseTermination</span> &#123;<br>    <span class="hljs-keyword">private</span> Thread monitor;<br>    <span class="hljs-comment">// 启动监控线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        monitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                    <span class="hljs-keyword">if</span> (thread.isInterrupted()) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;后置处理&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">// 睡眠时打断，出现异常</span><br>                        System.out.println(<span class="hljs-string">&quot;执行监控记录&quot;</span>);<span class="hljs-comment">// 在此被打断不会异常，再次进入 while 循环，即可退出</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<span class="hljs-comment">// 在睡眠期间被打断，进入异常处理的逻辑</span><br>                        e.printStackTrace();<br>                        <span class="hljs-comment">// 重新设置打断标记，因为在sleep 阶段中被打断，打断状态会被置为 false</span><br>                        thread.interrupt();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        monitor.start();<br>    &#125;<br>    <span class="hljs-comment">// 停止监控线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        monitor.interrupt();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-11-daemon"><a href="#2-11-daemon" class="headerlink" title="2.11 daemon"></a>2.11 daemon</h3><p><code>public final void setDaemon(boolean on)</code>：如果是 <code>true</code>，将此线程标记为守护线程 </p><p>线程<strong>启动前</strong>调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;running&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 设置该线程为守护线程</span><br>t.setDaemon(<span class="hljs-literal">true</span>);<br>t.start();<br></code></pre></td></tr></table></figure><p>用户线程：平常创建的普通线程</p><p>守护线程：服务于用户线程，<u>只要其它非守护线程运行结束了，即使守护线程代码没有执行完，也会强制结束。</u>守护进程是<strong>脱离于终端并且在后台运行的进程</strong>，脱离终端是为了避免在执行的过程中的信息在终端上显示</p><p>说明：当运行的线程都是守护线程，<code>Java</code> 虚拟机将退出，因为普通线程执行完后，<code>JVM</code> 是守护线程，不会继续运行下去</p><blockquote><p>注意</p><ul><li>垃圾回收器线程就是一种守护线程</li><li><code>Tomcat</code> 中的 <code>Acceptor</code> 和 <code>Poller</code> 线程都是守护线程，所以 <code>Tomcat</code> 接收到 <code>shutdown</code> 命令后，不会等待它们( <code>Acceptor</code> 和 <code>Poller</code> )处理完当前请求</li></ul></blockquote><h2 id="三、同步"><a href="#三、同步" class="headerlink" title="三、同步"></a>三、同步</h2><h3 id="3-1-临界区"><a href="#3-1-临界区" class="headerlink" title="3.1 临界区"></a>3.1 临界区</h3><ul><li><strong>临界资源</strong>：一次仅允许一个进程使用的资源成为临界资源；</li><li><strong>临界区</strong>：访问临界资源的代码块；</li><li><strong>竞态条件</strong>：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件；</li></ul><p>一个程序运行多个线程是没有问题，多个线程读共享资源也没有问题，在多个线程对共享资源读写操作时发生指令交错，就会出现问题!</p><p>为了避免临界区的竞态条件发生（解决线程安全问题）：</p><ul><li>阻塞式的解决方案：<a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#5.2%20%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">synchronized</a>，<a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#6.3%20JDK5.0%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9ALock(%E9%94%81)">JDK5.0新特性：Lock(锁)</a></li><li>非阻塞式的解决方案：原子变量</li></ul><p>管程（<code>monitor</code>）：由局部于自己的若干公共变量和所有访问这些公共变量的过程所组成的软件模块，保证同一时刻只有一个进程在管程内活动，即管程内定义的操作在同一时刻只被一个进程调用（由编译器实现）</p><p><strong>synchronized：对象锁，保证了临界区内代码的原子性</strong>，采用互斥的方式让同一时刻至多只有一个线程能持有对象锁，其它线程获取这个对象锁时会阻塞，保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换</p><p>互斥和同步都可以采用 synchronized 关键字来完成，区别：</p><ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li><li>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</li></ul><p>性能：</p><ul><li>线程安全，性能差</li><li>线程不安全性能好，假如开发中不会存在多线程安全问题，建议使用线程不安全的设计类</li></ul><h3 id="3-2-synchronized"><a href="#3-2-synchronized" class="headerlink" title="3.2 synchronized"></a>3.2 synchronized</h3><h4 id="3-2-1-使用锁"><a href="#3-2-1-使用锁" class="headerlink" title="3.2.1 使用锁"></a>3.2.1 使用锁</h4><p>关于 <code>synchronized</code> 的用法参考：<a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#5.2%20%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E8%A7%A3%E5%86%B3%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">synchronized</a></p><h4 id="3-2-2-线程八锁"><a href="#3-2-2-线程八锁" class="headerlink" title="3.2.2 线程八锁"></a>3.2.2 线程八锁</h4><p>线程八锁就是考察 <code>synchronized</code> 锁住的是哪个对象</p><p>说明：主要关注锁住的对象是不是同一个</p><ul><li>锁住类对象( <code>类名.class</code> )，所有类的实例的方法都是安全的，类的所有实例都相当于同一把锁</li><li>锁住 <code>this</code> 对象，只有在当前实例对象的线程内是安全的，如果有多个实例就不安全</li></ul><p><strong>案例</strong>：</p><blockquote><p>补充：信息内容参考：<a href="%E7%AC%AC10%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md#5.2.4%20synchronized%E7%9A%84%E9%94%81%E6%98%AF%E4%BB%80%E4%B9%88">synchronized的锁是什么</a></p><p>部分内容如下：对于同步方法来说，同步锁对象只能是默认的：</p><ul><li>静态方法：当前类的Class对象（<code>类名.class</code>）</li><li>非静态方法：<code>this</code></li></ul></blockquote><p>情况一：由于 <code>synchronized</code> 修饰的是非静态方法，那么根据上面补充的内容可知，此时第一个线程调用 <code>n1</code> 的方法和第二个线程调用 <code>n2</code> 的方法，不会发生互斥的情况，因为非静态方法的锁是 **<code>this</code>**，即第一个线程的锁是 <code>n1</code> ，第二个线程的锁是 <code>n2</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8Locks</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>();<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            n1.a();<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            n2.b();<br>        &#125;).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.Number&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        log.debug(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情况二：由于 <code>synchronized</code> 修饰的是静态方法，那么根据上面补充的内容可知，此时第一个线程调用 <code>n1</code> 的方法和第二个线程调用 <code>n2</code> 的方法，会发生互斥的情况，因为非静态方法的锁 <strong>当前类的Class对象</strong>，即第一个线程的锁和第二个线程的锁都是 <code>Number.class</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.Test8Locks&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8Locks</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// Number n1 = new Number(); </span><br>            <span class="hljs-comment">// n1.a(); 老师通过实例对象调用的静态方法；</span><br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Number.a(); <br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Number.b();<br>        &#125;).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.Number&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        log.debug(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其他情况可自行分析；</p><h4 id="3-3-3-锁原理"><a href="#3-3-3-锁原理" class="headerlink" title="3.3.3 锁原理"></a>3.3.3 锁原理</h4><h5 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h5><p><code>Monitor</code> 被翻译为<strong>监视器</strong>或<strong>管程</strong></p><p>每个 <code>Java</code> 对象都可以关联一个 <code>Monitor</code> 对象，<code>Monitor</code> 也是 <code>class</code>，其<strong>实例存储在堆中</strong>，如果使用 <code>synchronized</code> 给对象上锁（重量级）之后，该<strong>对象头</strong>的 <code>Mark Word</code> 中就被设置指向 <code>Monitor</code> 对象的指针，这就是重量级锁。</p><p><strong><code>Java</code> 对象头：</strong></p><ul><li><p>普通对象</p><p><img src="/./Resources/image-20230712184917435.png" alt="image-20230712184917435"></p></li></ul><ul><li><p>数组对象</p><p><img src="/./Resources/image-20230712184847984.png" alt="image-20230712184847984"></p></li></ul><ul><li><p>32 位虚拟机 <code>Mark Word</code> 结构：最后两位是<strong>锁标志位</strong></p><p><img src="/./Resources/JUC-Monitor-MarkWord%E7%BB%93%E6%9E%8432%E4%BD%8D.png"></p></li><li><p>64 位虚拟机 <code>Mark Word</code>：</p><p><img src="/./Resources/JUC-Monitor-MarkWord%E7%BB%93%E6%9E%8464%E4%BD%8D.png"></p></li></ul><ul><li>部分参数说明：<ul><li><code>hashcode</code>：哈希值</li><li><code>age</code>：GC 分代年龄</li><li><code>biased_lock</code>：偏向锁及加锁状态，0是未启用状态，1是启用状态；</li></ul></li></ul><p><code>Monitor</code> 结构如下：</p><p><img src="/./Resources/image-20230712185439140.png" alt="image-20230712185439140"></p><p>工作流程：</p><ol><li>开始时 <code>Monitor</code> 中 <code>Owner</code> 为 <code>null</code></li><li>当 <code>Thread-2</code> 执行 <code>synchronized(obj)</code> 就会将 <code>Monitor</code> 的所有者 <code>Owner</code> 置为 <code>Thread-2</code>，<code>Monitor</code> 中只能有一个 <code>Owner</code>，<strong>obj 对象的 Mark Word 指向 Monitor</strong>，把<strong>对象原有的 MarkWord 存入线程栈中的锁记录</strong>中（轻量级锁部分详解）；</li></ol><p><img src="/./Resources/image-20230712191752260.png" alt="image-20230712191752260"></p><ol start="3"><li>在 <code>Thread-2</code> 上锁的过程，<code>Thread-3</code>、<code>Thread-4</code>、<code>Thread-5</code> 也执行 <code>synchronized(obj)</code>，就会进入 <code>EntryList </code>，进入 <code>BLOCKED</code> 状态；</li><li><code>Thread-2</code> 执行完同步代码块的内容，根据 <code>obj</code> 对象头中 <code>Monitor</code> 地址寻找，设置 <code>Owner</code> 为空，把线程栈的锁记录中的对象头的值设置回 <code>MarkWord</code>；不理解这段话，可以看看下面的轻量级锁的锁重入实例。</li><li>唤醒 <code>EntryList</code> 中等待的线程来竞争锁，竞争是<strong>非公平的</strong>，如果这时有新的线程想要获取锁，可能直接就抢占到了，阻塞队列的线程就会继续阻塞；</li><li><code>WaitSet</code> 中的线程，是以前获得过锁，但条件不满足进入 <code>WAITING</code> 状态的线程（具体地，在 <code>wait-notify</code> 部分讲解）</li></ol><blockquote><p>注意：</p><ul><li><code>synchronized</code> 必须是进入同一个对象的 <code>Monitor</code> 才有上述的效果；</li><li>不加 <code>synchronized</code> 的对象不会关联监视器，不遵从以上规则；</li></ul></blockquote><h5 id="Monitor-字节码"><a href="#Monitor-字节码" class="headerlink" title="Monitor 字节码"></a>Monitor 字节码</h5><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>        System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的字节码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>#<span class="hljs-number">2</span><span class="hljs-comment">// new Object</span><br><span class="hljs-number">3</span>: dup<br><span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">1</span> <span class="hljs-comment">// invokespecial &lt;init&gt;:()V，非虚方法</span><br><span class="hljs-number">7</span>: astore_1 <span class="hljs-comment">// lock引用 -&gt; lock</span><br><span class="hljs-number">8</span>: aload_1<span class="hljs-comment">// lock （synchronized开始）</span><br> <span class="hljs-number">9</span>: dup<span class="hljs-comment">// 一份用来初始化，一份用来引用</span><br><span class="hljs-number">10</span>: astore_2 <span class="hljs-comment">// lock引用 -&gt; slot 2</span><br><span class="hljs-number">11</span>: monitorenter <span class="hljs-comment">// 【将 lock对象 MarkWord 置为 Monitor 指针】</span><br><span class="hljs-number">12</span>: getstatic #<span class="hljs-number">3</span><span class="hljs-comment">// System.out</span><br><span class="hljs-number">15</span>: ldc #<span class="hljs-number">4</span><span class="hljs-comment">// &quot;ok&quot;</span><br><span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">5</span> <span class="hljs-comment">// invokevirtual println:(Ljava/lang/String;)V</span><br><span class="hljs-number">20</span>: aload_2 <span class="hljs-comment">// slot 2(lock引用)</span><br><span class="hljs-number">21</span>: monitorexit <span class="hljs-comment">// 【将 lock对象 MarkWord 重置, 唤醒 EntryList】</span><br><span class="hljs-number">22</span>: goto <span class="hljs-number">30</span><br><span class="hljs-number">25</span>: astore_3 <span class="hljs-comment">// any -&gt; slot 3</span><br><span class="hljs-number">26</span>: aload_2 <span class="hljs-comment">// slot 2(lock引用)</span><br><span class="hljs-number">27</span>: monitorexit <span class="hljs-comment">// 【将 lock对象 MarkWord 重置, 唤醒 EntryList】</span><br><span class="hljs-number">28</span>: aload_3<br><span class="hljs-number">29</span>: athrow<br><span class="hljs-number">30</span>: <span class="hljs-keyword">return</span><br>Exception table:<br>    from to target type<br>      <span class="hljs-number">12</span> <span class="hljs-number">22</span> <span class="hljs-number">25</span> any<br>      <span class="hljs-number">25</span> <span class="hljs-number">28</span> <span class="hljs-number">25</span> any<br>LineNumberTable: ...<br>LocalVariableTable:<br>    Start Length Slot Name Signature<br>    <span class="hljs-number">0</span> <span class="hljs-number">31</span> <span class="hljs-number">0</span> args [Ljava/lang/String;<br>    <span class="hljs-number">8</span> <span class="hljs-number">23</span> <span class="hljs-number">1</span> lock Ljava/lang/Object;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>通过异常 <strong>try-catch 机制</strong>，确保一定会被解锁</li><li>方法级别的 <code>synchronized</code> 不会在字节码指令中有所体现</li></ul><h4 id="3-3-4-锁升级"><a href="#3-3-4-锁升级" class="headerlink" title="3.3.4 锁升级"></a>3.3.4 锁升级</h4><h5 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h5><p><strong><code>synchronized</code> 是可重入、不公平的重量级锁</strong>，所以可以对其进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁<span class="hljs-comment">// 随着竞争的增加，只能锁升级，不能降级</span><br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B.png" alt="锁升级过程"></p><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><blockquote><p>自 <code>JDK15</code> 起，偏向锁已被废弃，<code>JDK20</code> 被移除，可以在 <code>JDK8</code> 中将其关闭以提高性能。</p></blockquote><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程之后重新获取该锁不再需要同步操作：</p><ul><li><p>当锁对象第一次被线程获得的时候进入偏向状态，标记为 <code>101</code>，同时<strong>使用 CAS 操作将线程 ID 记录到 Mark Word</strong>。如果 <code>CAS</code> 操作成功，这个线程以后进入这个锁相关的同步块，查看这个线程 <code>ID</code> 是自己的就表示没有竞争，就不需要再进行任何同步操作</p></li><li><p>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（<code>Revoke Bias</code>）后恢复到未锁定或轻量级锁状态</p></li></ul><hr><p><strong>偏向状态</strong></p><p>对象头格式：</p><p><img src="/./Resources/image-20230713110703690.png" alt="image-20230713110703690"></p><p>一个对象创建时：</p><ul><li><p>如果开启了偏向锁（默认开启），那么对象创建后，<code>MarkWord </code> 值为 <code> 0x05</code> 即最后 3 位为 <code>101</code>，<code>thread</code>、<code>epoch</code>、<code>age</code> 都为 0；</p></li><li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟。<code>JDK 8</code> 延迟 <code>4s</code> 开启偏向锁原因：在刚开始执行代码时，会有好多线程来抢锁，如果开偏向锁效率反而降低；</p></li><li><p>当一个对象已经计算过 <code>hashCode</code>，就再也无法进入偏向状态了；</p><ul><li>因为头格式中，如果计算了 <code>hashCode</code>（占31位） ，偏向锁中 <code>Mark Word</code> 的存储空间没有空间存储 <code>hashCode</code>。</li></ul></li><li><p>添加 <code>VM</code> 参数 <code>-XX:-UseBiasedLocking</code> 禁用偏向锁</p></li></ul><p>撤销偏向锁的状态：</p><ul><li>当调用对象的 <code>hashCode</code> 时：偏向锁的对象 <code>MarkWord</code> 中存储的是线程 id，调用 <code>hashCode</code> 导致偏向锁被撤销</li><li>当有其它线程使用偏向锁对象时：会将偏向锁升级为轻量级锁</li><li>当调用 <code>wait/notify</code> 时：需要申请 <code>Monitor</code>，进入 <code>WaitSet</code></li></ul><hr><p><strong>批量撤销</strong></p><p>如果对象被多个线程访问，但没有竞争，这时偏向了线程 <code>T1</code> 的对象仍有机会重新偏向 <code>T2</code>，重偏向会重置对象的 <code>Thread ID</code></p><ul><li><p>批量重偏向：当撤销偏向锁阈值超过 20 次后，<code>JVM</code> 会觉得是不是偏向错了，于是在给这些对象加锁时<strong>重新偏向</strong>至加锁线程</p></li><li><p>批量撤销：当撤销偏向锁阈值超过 40 次后，<code>JVM</code> 会觉得自己确实偏向错了，根本就不该偏向，于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的</p></li></ul><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p>一个对象有多个线程要加锁，但加锁的时间是错开的（没有竞争），可以使用轻量级锁来优化，轻量级锁对使用者是透明的（不可见）</p><p>可重入锁：线程可以进入任何一个它已经拥有的锁所同步着的代码块，可重入锁最大的作用是<strong>避免死锁</strong></p><p>轻量级锁在没有竞争时（锁重入时），每次重入仍然需要执行 <code>CAS</code> 操作，<code>Java 6</code> 才引入的偏向锁来优化</p><p>锁重入实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span>( obj ) &#123;<br>        <span class="hljs-comment">// 同步块 A</span><br>        method2();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span>( obj ) &#123;<br>        <span class="hljs-comment">// 同步块 B</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>创建锁记录（<code>Lock Record</code>）对象，每个线程的<strong>栈帧</strong>都会包含一个锁记录的结构，存储锁定对象的 <code>Mark Word</code></p><p><img src="/./Resources/JUC-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E5%8E%9F%E7%90%861.png" alt="JUC-轻量级锁原理1"></p></li><li><p>让锁记录中 <code>Object reference</code> 指向锁住的对象，并尝试用 <code>CAS</code> 替换 <code>Object</code> 的 <code>Mark Word</code>，将 <code>Mark Word</code> 的值存入锁记录</p><ul><li><code>cas</code> 暂时可以简单理解为两个数据的交换操作（原子性的），具体地，在后面讲解。</li></ul><p><img src="/./Resources/image-20230713100751327.png" alt="image-20230713100751327"></p></li><li><p>如果 <code>CAS</code> 替换成功，对象头中存储了 <code>锁记录地址和状态 00（轻量级锁）</code> ，表示由该线程给对象加锁</p><p><img src="/./Resources/image-20230713101004209.png" alt="image-20230713101004209"></p></li><li><p>如果 <code>CAS</code> 失败，有两种情况：</p><ul><li><p>如果是其它线程已经持有了该 <code>Object</code> 的轻量级锁，这时表明有竞争，进入锁膨胀过程</p></li><li><p>如果是线程自己执行了 <code>synchronized </code>锁重入，就添加一条 <code>Lock Record</code> 作为重入的计数</p><p><img src="/./Resources/image-20230713101736092.png" alt="image-20230713101736092"></p></li></ul></li><li><p>当退出 <code>synchronized</code> 代码块（解锁时）</p><ul><li><p>如果有取值为 <code>null</code> 的锁记录，表示有重入，这时重置锁记录，表示重入计数减 1</p><p><img src="/./Resources/image-20230713101744273.png" alt="image-20230713101744273"></p></li><li><p>如果锁记录的值不为 <code>null</code>，这时使用 <code>CAS</code>  <strong>将 Mark Word 的值恢复给对象头</strong></p><ul><li><p>成功，则解锁成功</p><p><img src="/./Resources/image-20230713102009908.png" alt="image-20230713102009908"></p></li><li><p>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</p><p>图见下一部分：锁膨胀</p></li></ul></li></ul></li></ul><h5 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h5><p>在尝试加轻量级锁的过程中，当<code>CAS</code> 操作无法成功时，可能是其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为<strong>重量级锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span>( obj ) &#123;<br>        <span class="hljs-comment">// 同步块</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>当 <code>Thread-1</code> 进行轻量级加锁时，<code>Thread-0</code> 已经对该对象加了轻量级锁；</p><p><img src="/./Resources/JUC-%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E5%8E%9F%E7%90%861.png"></p></li><li><p><code>Thread-1</code> 加轻量级锁失败，进入锁膨胀流程：</p><ul><li><p>为 <code>Object </code>对象申请 <code>Monitor</code> 锁，<strong>通过 Object 对象头获取到持锁线程</strong>，将 <code>Monitor</code> 的 <code>Owner</code> 置为 <code>Thread-0</code>，将 <code>Object</code> 的对象头指向重量级锁地址；</p></li><li><p>然后自己（ <code>Thread1</code>） 进入 <code>Monitor</code> 的 <code>EntryList </code> 转为 <code>BLOCKED</code> 状态；</p></li></ul><p><img src="/./Resources/JUC-%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%E5%8E%9F%E7%90%862.png"></p></li><li><p>当 <code>Thread-0</code> 退出同步块解锁时，使用 <code>CAS</code> 将 <code>Mark Word</code> 的值恢复给对象头时，会交换失败，这时进入重量级解锁流程，即按照 <code>Monitor</code> 地址找到 <code>Monitor</code> 对象，设置 <code>Owner</code> 为 <code>null</code>，唤醒 <code>EntryList</code> 中 <code>BLOCKED</code> 线程；</p></li></ul><h4 id="3-3-5-锁优化"><a href="#3-3-5-锁优化" class="headerlink" title="3.3.5 锁优化"></a>3.3.5 锁优化</h4><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p>重量级锁竞争时，尝试获取锁的线程不会立即阻塞，可以使用<strong>自旋</strong>（默认 10 次）来进行优化，采用循环的方式去尝试获取锁</p><p>注意：</p><ul><li>自旋占用 CPU 时间，单核 CPU 自旋就是浪费时间，因为同一时刻只能运行一个线程，多核 CPU 自旋才能发挥优势</li><li>自旋失败的线程会进入阻塞状态</li></ul><p>优点：不会进入阻塞状态，<strong>减少线程上下文切换的消耗</strong></p><p>缺点：当自旋的线程越来越多时，会不断的消耗 CPU 资源</p><p>自旋锁情况：</p><ul><li><p>自旋成功的情况：</p><p><img src="/./Resources/image-20230713105045699.png" alt="image-20230713105045699"></p></li><li><p>自旋失败的情况：</p><p><img src="/./Resources/image-20230713105048652.png" alt="image-20230713105048652"></p></li></ul><p>自旋锁说明：</p><ul><li>在 <code>Java 6</code> 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，比较智能；</li><li><code>Java 7</code> 之后不能控制是否开启自旋功能，由 <code>JVM</code> 控制；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手写自旋锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpinLock</span> &#123;<br>    <span class="hljs-comment">// 泛型装的是Thread，原子引用线程</span><br>    AtomicReference&lt;Thread&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; come in&quot;</span>);<br><br>        <span class="hljs-comment">//开始自旋，期望值为null，更新值是当前线程</span><br>        <span class="hljs-keyword">while</span> (!atomicReference.compareAndSet(<span class="hljs-literal">null</span>, thread)) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(thread.getName() + <span class="hljs-string">&quot; 正在自旋&quot;</span>);<br>        &#125;<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; 自旋成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>        <span class="hljs-comment">//线程使用完锁把引用变为null</span><br>atomicReference.compareAndSet(thread, <span class="hljs-literal">null</span>);<br>        System.out.println(thread.getName() + <span class="hljs-string">&quot; invoke unlock&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SpinLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpinLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">//占有锁</span><br>            lock.lock();<br>            Thread.sleep(<span class="hljs-number">10000</span>); <br><br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-comment">// 让main线程暂停1秒，使得t1线程，先执行</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            lock.unlock();<br>        &#125;,<span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h5><p>锁消除是指对于被检测出<strong>不可能存在竞争</strong>的共享数据的锁进行消除，这是 <code>JVM</code> <strong>即时编译器的优化</strong></p><p>锁消除主要是通过<strong>逃逸分析</strong>来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除（同步消除：<code>JVM</code> 逃逸分析）</p><h5 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a><del>锁粗化</del></h5><p>对相同对象多次加锁，导致线程发生多次重入，频繁的加锁操作就会导致性能损耗，可以使用锁粗化方式优化</p><p>如果虚拟机探测到一串的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部</p><ul><li><p>一些看起来没有加锁的代码，其实隐式的加了很多锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> &#123;<br>    <span class="hljs-keyword">return</span> s1 + s2 + s3;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，转化为 <code>StringBuffer</code> 对象的连续 append() 操作，每个 append() 方法中都有一个同步块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    sb.append(s3);<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，只需要加锁一次就可以</p><hr><h4 id="3-3-6-多把锁"><a href="#3-3-6-多把锁" class="headerlink" title="3.3.6 多把锁"></a>3.3.6 多把锁</h4><p>多把不相干的锁：一间大屋子有两个功能睡觉、学习，互不相干。现在一人要学习，一人要睡觉，如果只用一间屋子（一个对象锁）的话，那么并发度很低</p><p>将锁的粒度细分：</p><ul><li>好处，是可以增强并发度</li><li>坏处，如果一个线程需要同时获得多把锁，就容易发生死锁</li></ul><p>解决方法：准备多个对象锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">BigRoom</span> <span class="hljs-variable">bigRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigRoom</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123; bigRoom.study(); &#125;).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123; bigRoom.sleep(); &#125;).start();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigRoom</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">studyRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">sleepRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">synchronized</span> (sleepRoom) &#123;<br>            System.out.println(<span class="hljs-string">&quot;sleeping 2 小时&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">synchronized</span> (studyRoom) &#123;<br>            System.out.println(<span class="hljs-string">&quot;study 1 小时&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="3-3-7-活跃性"><a href="#3-3-7-活跃性" class="headerlink" title="3.3.7 活跃性"></a>3.3.7 活跃性</h4><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><h6 id="形成"><a href="#形成" class="headerlink" title="形成"></a>形成</h6><p>死锁：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放，由于线程被无限期地阻塞，因此程序不可能正常终止</p><p>Java 死锁产生的四个必要条件：</p><ol><li>互斥条件，即当资源被一个线程使用（占有）时，别的线程不能使用</li><li>不可剥夺条件，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放</li><li>请求和保持条件，即当资源请求者在请求其他的资源的同时保持对原有资源的占有</li><li>循环等待条件，即存在一个等待循环队列：p1 要 p2 的资源，p2 要 p1 的资源，形成了一个等待环路</li></ol><p>四个条件都成立的时候，便形成死锁。死锁情况下打破上述任何一个条件，便可让死锁消失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">resources1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">resources2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 线程1：占用资源1 ，请求资源2</span><br>            <span class="hljs-keyword">synchronized</span>(resources1)&#123;<br>                System.out.println(<span class="hljs-string">&quot;线程1已经占用了资源1，开始请求资源2&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//休息两秒，防止线程1直接运行完成。</span><br>                <span class="hljs-comment">//2秒内线程2肯定可以锁住资源2</span><br>                <span class="hljs-keyword">synchronized</span> (resources2)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程1已经占用了资源2&quot;</span>);<br>                &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 线程2：占用资源2 ，请求资源1</span><br>            <span class="hljs-keyword">synchronized</span>(resources2)&#123;<br>                System.out.println(<span class="hljs-string">&quot;线程2已经占用了资源2，开始请求资源1&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">synchronized</span> (resources1)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;线程2已经占用了资源1&quot;</span>);<br>                &#125;<br>            &#125;&#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h6 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h6><p>定位死锁的方法：</p><ul><li><p>使用 jps 定位进程 id，再用 <code>jstack id</code> 定位死锁，找到死锁的线程去查看源码，解决优化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-string">&quot;Thread-1&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting formonitor entry [0x000000001f54f000]</span><br>java.lang.Thread.State: BLOCKED (on object monitor)<br><span class="hljs-comment">#省略    </span><br><span class="hljs-string">&quot;Thread-1&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting for monitor entry [0x000000001f54f000]</span><br>java.lang.Thread.State: BLOCKED (on object monitor)<br><span class="hljs-comment">#省略</span><br><br>Found one Java-level deadlock:<br>===================================================<br><span class="hljs-string">&quot;Thread-1&quot;</span>:<br>    waiting to lock monitor 0x000000000361d378 (object 0x000000076b5bf1c0, a java.lang.Object),<br>    <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;Thread-0&quot;</span><br><span class="hljs-string">&quot;Thread-0&quot;</span>:<br>    waiting to lock monitor 0x000000000361e768 (object 0x000000076b5bf1d0, a java.lang.Object),<br>    <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;Thread-1&quot;</span><br>    <br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;Thread-1&quot;</span>:<br>    at thread.TestDeadLock.lambda$main<span class="hljs-variable">$1</span>(TestDeadLock.java:28)<br>    - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)<br>    - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)<br>    at thread.TestDeadLock$$Lambda<span class="hljs-variable">$2</span>/883049899.run(Unknown Source)<br>    at java.lang.Thread.run(Thread.java:745)<br><span class="hljs-string">&quot;Thread-0&quot;</span>:<br>    at thread.TestDeadLock.lambda$main<span class="hljs-variable">$0</span>(TestDeadLock.java:15)<br>    - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)<br>    - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)<br>    at thread.TestDeadLock$$Lambda<span class="hljs-variable">$1</span>/495053715<br></code></pre></td></tr></table></figure></li><li><p>Linux 下可以通过 top 先定位到 CPU 占用高的 Java 进程，再利用 <code>top -Hp 进程id</code> 来定位是哪个线程，最后再用 jstack <pid>的输出来看各个线程栈</p></li><li><p>避免死锁：避免死锁要注意加锁顺序</p></li><li><p>可以使用 jconsole 工具，在 <code>jdk\bin</code> 目录下</p></li></ul><hr><h5 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h5><p>活锁：指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程</p><p>两个线程互相改变对方的结束条件，最后谁也无法结束：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLiveLock</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 期望减到 0 退出循环</span><br>            <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>                count--;<br>                System.out.println(<span class="hljs-string">&quot;线程一count:&quot;</span> + count);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 期望超过 20 退出循环</span><br>            <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">20</span>) &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>                count++;<br>                System.out.println(<span class="hljs-string">&quot;线程二count:&quot;</span>+ count);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h5 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h5><p>饥饿：一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束</p><hr><h3 id="3-3-wait-notify"><a href="#3-3-wait-notify" class="headerlink" title="3.3 wait-notify"></a>3.3 wait-notify</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>需要获取对象锁后才可以调用 <code>锁对象.wait()</code>，<code>notify</code> 随机唤醒一个线程，<code>notifyAll</code> 唤醒所有线程去竞争 CPU</p><p><code>Object</code> 类 <code>API</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span>:唤醒正在等待对象监视器的单个线程。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span>:唤醒正在等待对象监视器的所有线程。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span>:让当前线程等待，直到另一个线程调用该对象的 notify() 方法或 notifyAll()方法。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span>:有时限的等待, 到n毫秒后结束等待，或是被唤醒<br></code></pre></td></tr></table></figure><p>说明：**<code>wait</code> 是挂起线程，需要唤醒的都是挂起操作**，阻塞线程可以自己去争抢锁，挂起的线程需要唤醒后去争抢锁</p><p><strong>底层原理</strong>：</p><ul><li><code>Owner</code> 线程发现条件不满足，调用 <code>wait</code> 方法，即可进入 <code>WaitSet</code> 变为 <code>WAITING</code> 状态</li><li><code>BLOCKED</code> 和 <code>WAITING</code> 的线程都处于阻塞状态，不占用 CPU 时间片</li><li><code>BLOCKED</code> 线程会在 <code>Owner</code> 线程释放锁时唤醒</li><li><code>WAITING</code> 线程会在 <code>Owner</code> 线程调用 <code>notify</code> 或 <code>notifyAll</code> 时唤醒，唤醒后并不意味者立刻获得锁，<strong>需要进入 <code>EntryList</code> 重新竞争</strong></li></ul><p><img src="/./Resources/JUC-Monitor%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%862.png"></p><p>对比 <code>sleep()</code>：</p><ul><li>原理不同：<code>sleep()</code> 方法是属于 <code>Thread</code> 类，是线程用来控制自身流程的，使此线程暂停执行一段时间而把执行机会让给其他线程；<code>wait()</code> 方法属于 <code>Object</code> 类，用于线程间通信</li><li>对<strong>锁的处理机制</strong>不同：调用 <code>sleep()</code> 方法的过程中，线程不会释放对象锁，当调用 <code>wait()</code> 方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池（不释放锁其他线程怎么抢占到锁执行唤醒操作），但是都会释放 CPU</li><li>使用区域不同：<code>wait()</code> 方法必须放在<strong>同步控制方法和同步代码块（先获取锁）</strong>中使用，<code>sleep()</code> 方法则可以放在任何地方使用</li></ul><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>虚假唤醒：<code>notify</code> 只能随机唤醒一个 <code>WaitSet</code> 中的线程，这时如果有其它线程也在等待，那么就可能唤醒不了正确的线程</p><p>解决方法：采用 <code>notifyAll</code></p><p><code>notifyAll</code> 仅解决某个线程的唤醒问题，使用 <code>if + wait</code> 判断仅有一次机会，一旦条件不成立，无法重新判断</p><p>解决方法：用 <code>while + wait</code>，当条件不成立，再次 <code>wait</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    <span class="hljs-keyword">while</span>(条件不成立)<br>        lock.wait()<br>     <span class="hljs-comment">//干活</span><br>&#125;<br><br><span class="hljs-comment">// 另一个线程</span><br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    lock.notifyAll()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasCigarette</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-comment">//有没有烟</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasTakeout</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (room) &#123;<br>                log.debug(<span class="hljs-string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);<br>                <span class="hljs-keyword">while</span> (!hasCigarette) &#123;<span class="hljs-comment">//while防止虚假唤醒</span><br>                    log.debug(<span class="hljs-string">&quot;没烟，先歇会！&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        room.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);<br>                <span class="hljs-keyword">if</span> (hasCigarette) &#123;<br>                    log.debug(<span class="hljs-string">&quot;可以开始干活了&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;没干成活...&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;小南&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (room) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                log.debug(<span class="hljs-string">&quot;外卖送到没？[&#123;&#125;]&quot;</span>, hasTakeout);<br>                <span class="hljs-keyword">if</span> (!hasTakeout) &#123;<br>                    log.debug(<span class="hljs-string">&quot;没外卖，先歇会！&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        room.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;外卖送到没？[&#123;&#125;]&quot;</span>, hasTakeout);<br>                <span class="hljs-keyword">if</span> (hasTakeout) &#123;<br>                    log.debug(<span class="hljs-string">&quot;可以开始干活了&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;没干成活...&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;小女&quot;</span>).start();<br><br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-comment">// 这里能不能加 synchronized (room)？</span><br>            <span class="hljs-keyword">synchronized</span> (room) &#123;<br>                hasTakeout = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//log.debug(&quot;烟到了噢！&quot;);</span><br>                log.debug(<span class="hljs-string">&quot;外卖到了噢！&quot;</span>);<br>                room.notifyAll();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;送外卖的&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-park-unpark"><a href="#3-4-park-unpark" class="headerlink" title="3.4 park-unpark"></a>3.4 park-unpark</h3><p><code>LockSupport</code> 是用来创建锁和其他同步类的<strong>线程原语</strong></p><p><code>LockSupport</code> 类方法：</p><ul><li><code>LockSupport.park()</code>：暂停当前线程，挂起原语</li><li><code>LockSupport.unpark(暂停的线程对象)</code>：恢复某个线程的运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;start...&quot;</span>);<span class="hljs-comment">//1</span><br>       Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">// Thread.sleep(3000)</span><br>        <span class="hljs-comment">// 先 park 再 unpark 和先 unpark 再 park 效果一样，都会直接恢复线程的运行</span><br>        <span class="hljs-comment">// 原因：见下部分原理</span><br>        System.out.println(<span class="hljs-string">&quot;park...&quot;</span>);<span class="hljs-comment">//2</span><br>        LockSupport.park();<br>        System.out.println(<span class="hljs-string">&quot;resume...&quot;</span>);<span class="hljs-comment">//4</span><br>    &#125;,<span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    System.out.println(<span class="hljs-string">&quot;unpark...&quot;</span>);<span class="hljs-comment">//3</span><br>    LockSupport.unpark(t1);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LockSupport</code> 出现就是为了增强 <code>wait &amp; notify</code> 的功能：</p><ul><li><code>wait</code>，<code>notify</code> 和 <code>notifyAll</code> 必须配合 <code>Object Monitor</code> 一起使用，而 <code>park</code>、<code>unpark</code> 不需要</li><li><code>park &amp; unpark</code> <strong>以线程为单位</strong>来阻塞和唤醒线程，而 <code>notify</code> 只能随机唤醒一个等待线程，<code>notifyAll</code> 是唤醒所有等待线程</li><li><code>park &amp; unpark</code> 可以先 <code>unpark</code>，而 <code>wait &amp; notify</code> 不能先 <code>notify</code>。类比生产消费，先消费发现有产品就消费，没有就等待；先生产就直接产生商品，然后线程直接消费</li><li><code>wait</code> 会释放锁资源进入等待队列，<strong>park 不会释放锁资源</strong>，只负责阻塞当前线程，会释放 CPU</li></ul><p><strong>原理</strong>：类似生产者消费者</p><ul><li>每个对象都有自己的一个 <code>Parker</code> 对象，由 <code>_mutex</code>、<code>_cond</code> 和 <code>_counter</code> 组成；</li></ul><ul><li>先 <code>park</code>：<ol><li>当前线程调用 <code>Unsafe.park()</code> 方法</li><li>检查 <code>_counter</code> ，本情况为 0，这时获得 <code>_mutex</code> 互斥锁</li><li>线程进入 <code>_cond</code> 条件变量挂起</li><li>调用 <code>Unsafe.unpark(Thread_0)</code> 方法，设置 <code>_counter</code> 为 1</li><li>唤醒 <code>_cond</code> 条件变量中的 <code>Thread_0</code>，<code>Thread_0</code> 恢复运行，设置 <code>_counter</code> 为 0</li></ol></li></ul><p><img src="/./Resources/JUC-park%E5%8E%9F%E7%90%861.png"></p><ul><li><p>先 <code>unpark</code>：</p><ol><li>调用 <code>Unsafe.unpark(Thread_0)</code> 方法，设置 <code>_counter</code> 为 1</li><li>当前线程调用 <code>Unsafe.park()</code> 方法</li><li>检查 <code>_counter</code> ，本情况为 1，这时线程无需挂起，继续运行，设置 <code>_counter 为 0</code></li></ol><p><img src="/./Resources/JUC-park%E5%8E%9F%E7%90%862.png"></p></li></ul><blockquote><p>小结：</p><p><code>park</code> 和 <code>unpark</code> 的先后顺序都不会影响组合使用的效果：</p><p><code>park</code> 的作用是：检查 <code>_counter</code> 的值，如果 <code>_counter</code> 为 0，那么堵塞当前线程，如果 <code>_counter</code> 为 1，那么继续执行，将 <code>_counter</code> 置为 0；</p><p><code>unpark</code> 的作用是：将 <code>_counter</code> 置为 1；</p></blockquote><h3 id="3-5-安全分析"><a href="#3-5-安全分析" class="headerlink" title="3.5 安全分析"></a>3.5 安全分析</h3><p>成员变量和静态变量：</p><ul><li>如果它们没有共享，则线程安全</li><li>如果它们被共享了，根据它们的状态是否能够改变，分两种情况：<ul><li>如果只有读操作，则线程安全</li><li>如果有读写操作，则这段代码是临界区，需要考虑线程安全问题</li></ul></li></ul><p>局部变量：</p><ul><li>局部变量是线程安全的</li><li>局部变量引用的对象不一定线程安全（逃逸分析）：<ul><li>如果该对象没有逃离方法的作用访问，它是线程安全的（每一个方法有一个栈帧）</li><li>如果该对象逃离方法的作用范围，需要考虑线程安全问题（暴露引用）</li></ul></li></ul><blockquote><p>常见线程安全类</p></blockquote><p>常见线程安全类：<code>String</code>、<code>Integer</code>、<code>StringBuffer</code>、<code>Random</code>、<code>Vector</code>、<code>Hashtable</code>、<code>java.util.concurrent 包下的类</code></p><ul><li><p>线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br><span class="hljs-comment">// 多个线程同时使用 Hashtable 的实例 table 的方法，是线程安全的，如下：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    table.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    table.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>&#125;).start();<br></code></pre></td></tr></table></figure></li><li><p><strong>每个方法是原子的，但它们多个方法的组合不是原子的</strong>，只能保证调用的方法内部安全，比如下面的例子，<code>get</code> 和 <code>put</code> 都是原子的，但是他们俩的组合并不是原子的，当 线程1 <code>get</code> 操作之后发现为 <code>null</code>，与此同时，线程2 也发现为 <code>null</code>，就会导致一个覆盖另一个的值，<code>if</code> 判断也就不起作用了。</p></li><li><p>即 <code>put</code> 操作依赖于 <code>get</code> 的结果，但如果下边的原子操作不依赖上边原子操作的结果的话，就不用考虑两个原子操作合在一起的安全性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br><span class="hljs-comment">// 线程1、线程2</span><br><span class="hljs-keyword">if</span> (table.get(<span class="hljs-string">&quot;key&quot;</span>) == <span class="hljs-literal">null</span>) &#123;<br>    table.put(<span class="hljs-string">&quot;key&quot;</span>, value);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/./Resources/image-20230712152310474.png" alt="image-20230712152310474"></p><blockquote><p>不可变类线程安全</p></blockquote><p>不可变类线程安全：<code>String</code>、<code>Integer</code> 等都是不可变类，<strong>内部的状态不可以改变</strong>，所以方法是线程安全。</p><ul><li>与不可变类相似的还有无状态类，即没有成员变量，一般也是线程安全的</li></ul><hr><p>部分方法的线程安全性如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">// 线程不安全</span><br><span class="hljs-type">String</span> <span class="hljs-variable">S1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;...&quot;</span>;<span class="hljs-comment">// 线程安全</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">S2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;...&quot;</span>;<span class="hljs-comment">// 线程安全</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">D1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">// 线程不安全</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">Date</span> <span class="hljs-variable">D2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">// 线程不安全，final让D2引用的对象不能变，但对象的内容可以变</span><br></code></pre></td></tr></table></figure><p>抽象方法如果有参数，被重写后行为不确定可能造成线程不安全，被称之为外星方法：<code>public abstract foo(Student s);</code>，另外，如果在子类中定义的方法和基类中的一个 <code>private</code> 方法签名相同，那么<strong>此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</strong></p><h3 id="3-6-同步模式"><a href="#3-6-同步模式" class="headerlink" title="3.6 同步模式"></a>3.6 同步模式</h3><h4 id="保护性暂停"><a href="#保护性暂停" class="headerlink" title="保护性暂停"></a>保护性暂停</h4><h5 id="单任务版"><a href="#单任务版" class="headerlink" title="单任务版"></a>单任务版</h5><p><code>Guarded Suspension</code>，用在一个线程等待另一个线程的执行结果</p><ul><li>有一个结果需要从一个线程传递到另一个线程，让它们关联同一个 <code>GuardedObject</code></li><li>如果有结果不断从一个线程到另一个线程那么可以使用消息队列（见生产者&#x2F;消费者）</li><li><code>JDK</code> 中，<code>join</code> 的实现、<code>Future</code> 的实现，采用的就是此模式</li></ul><p><img src="/./Resources/JUC-%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E5%81%9C.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        object.complete(Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>));<br>    &#125;).start();<br>    <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> object.get(<span class="hljs-number">2500</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>        log.debug(<span class="hljs-string">&quot;get response: [&#123;&#125;] lines&quot;</span>, ((List&lt;String&gt;) response).size());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;can&#x27;t get response&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span> &#123;<br>    <span class="hljs-keyword">private</span> Object response;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-comment">//获取结果</span><br>    <span class="hljs-comment">//timeout :最大等待时间</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-comment">// 1) 记录最初时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">// 2) 已经经历的时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">timePassed</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 4) 假设 millis 是 1000，结果在 400 时唤醒了，那么还有 600 要等</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">waitTime</span> <span class="hljs-operator">=</span> millis - timePassed;<br>                log.debug(<span class="hljs-string">&quot;waitTime: &#123;&#125;&quot;</span>, waitTime);<br>                <span class="hljs-comment">//经历时间超过最大等待时间退出循环</span><br>                <span class="hljs-keyword">if</span> (waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>                    log.debug(<span class="hljs-string">&quot;break...&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait(waitTime);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-comment">// 3) 如果提前被唤醒，这时已经经历的时间假设为 400</span><br>                timePassed = System.currentTimeMillis() - begin;<br>                log.debug(<span class="hljs-string">&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;</span>,<br>                        timePassed, response == <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> response;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//产生结果</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Object response)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-comment">// 条件满足，通知等待线程</span><br>            <span class="hljs-built_in">this</span>.response = response;<br>            log.debug(<span class="hljs-string">&quot;notify...&quot;</span>);<br>            lock.notifyAll();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="多任务版"><a href="#多任务版" class="headerlink" title="多任务版"></a>多任务版</h5><p>多任务版保护性暂停：</p><p><img src="/./Resources/JUC-%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E5%81%9C%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%89%88.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>().start();<br>    &#125;<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">for</span> (Integer id : Mailboxes.getIds()) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Postman</span>(id, id + <span class="hljs-string">&quot;号快递到了&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.People&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 收信</span><br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> Mailboxes.createGuardedObject();<br>        log.debug(<span class="hljs-string">&quot;开始收信i d:&#123;&#125;&quot;</span>, guardedObject.getId());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> guardedObject.get(<span class="hljs-number">5000</span>);<br>        log.debug(<span class="hljs-string">&quot;收到信id:&#123;&#125;，内容:&#123;&#125;&quot;</span>, guardedObject.getId(),mail);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Postman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String mail;<br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> Mailboxes.getGuardedObject(id);<br>        log.debug(<span class="hljs-string">&quot;开始送信i d:&#123;&#125;，内容:&#123;&#125;&quot;</span>, guardedObject.getId(),mail);<br>        guardedObject.complete(mail);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Mailboxes</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, GuardedObject&gt; boxes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//产生唯一的id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">generateId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GuardedObject <span class="hljs-title function_">getGuardedObject</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.remove(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GuardedObject <span class="hljs-title function_">createGuardedObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">go</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>(generateId());<br>        boxes.put(go.getId(), go);<br>        <span class="hljs-keyword">return</span> go;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; <span class="hljs-title function_">getIds</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.keySet();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span> &#123;<br>    <span class="hljs-comment">//标识，Guarded Object</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">//省略get set方法，跟单任务版的get，set方法一致</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序输出"><a href="#顺序输出" class="headerlink" title="顺序输出"></a>顺序输出</h4><p>顺序输出：先2后1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; &#125;</span><br>            <span class="hljs-comment">// 当没有许可时，当前线程暂停运行；有许可时，用掉这个许可，当前线程恢复运行</span><br>            LockSupport.park();<br>            System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>            <span class="hljs-comment">// 给线程 t1 发放『许可』（多次连续调用 unpark 只会发放一个『许可』）</span><br>            LockSupport.unpark(t1);<br>            <span class="hljs-keyword">try</span> &#123; Thread.sleep(<span class="hljs-number">500</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; &#125;<br>        &#125;<br>    &#125;);<br>    t1.start();<br>    t2.start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="交替输出"><a href="#交替输出" class="headerlink" title="交替输出"></a>交替输出</h4><blockquote><p>关于 <code>ReentrantLock</code> 的相关知识，参考后面的 <code>ReentrantLock</code> 部分。</p></blockquote><p>交替输出：连续输出 5 次 abc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day2_14</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">AwaitSignal</span> <span class="hljs-variable">awaitSignal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwaitSignal</span>(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> awaitSignal.newCondition();<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> awaitSignal.newCondition();<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> awaitSignal.newCondition();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            awaitSignal.print(<span class="hljs-string">&quot;a&quot;</span>, a, b);<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            awaitSignal.print(<span class="hljs-string">&quot;b&quot;</span>, b, c);<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            awaitSignal.print(<span class="hljs-string">&quot;c&quot;</span>, c, a);<br>        &#125;).start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        awaitSignal.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            a.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            awaitSignal.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AwaitSignal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReentrantLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> loopNumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AwaitSignal</span><span class="hljs-params">(<span class="hljs-type">int</span> loopNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loopNumber = loopNumber;<br>    &#125;<br>    <span class="hljs-comment">//参数1：打印内容  参数二：条件变量  参数二：唤醒下一个</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str, Condition condition, Condition next)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; loopNumber; i++) &#123;<br>            lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                condition.await();<br>                System.out.print(str);<br>                next.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-异步模式"><a href="#3-7-异步模式" class="headerlink" title="3.7 异步模式"></a>3.7 异步模式</h3><h4 id="传统版"><a href="#传统版" class="headerlink" title="传统版"></a>传统版</h4><p>异步模式之生产者&#x2F;消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断  防止虚假唤醒</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition.await();<br>            &#125;<br>            <span class="hljs-comment">// 干活</span><br>            number++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 防止虚假唤醒</span><br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能消费</span><br>                condition.await();<br>            &#125;<br>            <span class="hljs-comment">// 干活</span><br>            number--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TraditionalProducerConsumer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ShareData</span> <span class="hljs-variable">shareData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareData</span>();<br>        <span class="hljs-comment">// t1线程，生产</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            shareData.increment();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-comment">// t2线程，消费</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>shareData.decrement();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="改进版"><a href="#改进版" class="headerlink" title="改进版"></a>改进版</h4><p>异步模式之生产者&#x2F;消费者：</p><ul><li>消费队列可以用来平衡生产和消费的线程资源，不需要产生结果和消费结果的线程一一对应</li><li>生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据</li><li>消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据</li><li>JDK 中各种阻塞队列，采用的就是这种模式</li></ul><p><img src="/./Resources/JUC-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MessageQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueue</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                queue.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(id,<span class="hljs-string">&quot;值&quot;</span>+id));<br>            &#125;, <span class="hljs-string">&quot;生产者&quot;</span> + i).start();<br>        &#125;<br>        <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> queue.take();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;消费者&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//消息队列类，Java间线程之间通信</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;Message&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//消息的队列集合</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<span class="hljs-comment">//队列容量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">//获取消息</span><br>    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//检查队列是否为空</span><br>        <span class="hljs-keyword">synchronized</span> (list) &#123;<br>            <span class="hljs-keyword">while</span> (list.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;:队列为空，消费者线程等待&quot;</span>);<br>                    list.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//从队列的头部获取消息返回</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> list.removeFirst();<br>            sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;：已消费消息--&quot;</span> + message);<br>            list.notifyAll();<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//存入消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (list) &#123;<br>            <span class="hljs-comment">//检查队列是否满</span><br>            <span class="hljs-keyword">while</span> (list.size() == capacity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sout(Thread.currentThread().getName()+<span class="hljs-string">&quot;:队列为已满，生产者线程等待&quot;</span>);<br>                    list.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//将消息加入队列尾部</span><br>            list.addLast(message);<br>            sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;:已生产消息--&quot;</span> + message);<br>            list.notifyAll();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> Object value;<br><span class="hljs-comment">//get set</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>    BlockingQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br>    producer.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;生产...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            queue.put(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>    consumer.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;等待消费...&quot;</span>);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queue.take();<br>            System.out.println(<span class="hljs-string">&quot;结果为:&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、内存"><a href="#四、内存" class="headerlink" title="四、内存"></a>四、内存</h2><h3 id="4-1-JMM"><a href="#4-1-JMM" class="headerlink" title="4.1 JMM"></a>4.1 JMM</h3><h4 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h4><p><code>Java</code> 内存模型是 <code>Java Memory Model（JMM）</code>，本身是一种<strong>抽象的概念</strong>，实际上并不存在，描述的是一组规则或规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式</p><p><code>JMM</code> 作用：可重入</p><ul><li><strong>屏蔽</strong>各种硬件和操作系统的<strong>内存访问差异</strong>，实现让 Java 程序在各种平台下都能达到一致的内存访问效果</li><li>规定了线程和内存之间的一些关系</li></ul><p>根据 <code>JMM</code> 的设计，系统存在一个主内存（<code>Main Memory</code>），<code>Java</code> 中所有变量都存储在主存中，对于所有线程都是共享的；每条线程都有自己的工作内存（<code>Working Memory</code>），工作内存中保存的是主存中某些<strong>变量的拷贝</strong>，线程对所有变量的操作都是先对变量进行拷贝，然后在工作内存中进行，不能直接操作主内存中的变量；线程之间无法相互直接访问，线程间的通信（传递）必须通过主内存来完成</p><p><img src="/./Resources/JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png"></p><p>主内存和工作内存：</p><ul><li>主内存：计算机的内存，也就是经常提到的 8G 内存，16G 内存，存储所有共享变量的值</li><li>工作内存：存储该线程使用到的共享变量在主内存的的值的副本拷贝</li></ul><p><strong>JVM 和 JMM 之间的关系</strong>：JMM 中的主内存、工作内存与 JVM 中的 Java 堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上是没有关系的，如果两者一定要勉强对应起来：</p><ul><li>主内存主要对应于 Java 堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域</li><li>从更低层次上说，主内存直接对应于物理硬件的内存，工作内存对应寄存器和高速缓存</li></ul><h4 id="内存交互"><a href="#内存交互" class="headerlink" title="内存交互"></a>内存交互</h4><p>Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作，每个操作都是<strong>原子</strong>的</p><p>非原子协定：没有被 volatile 修饰的 long、double 外，默认按照两次 32 位的操作</p><p><img src="/./Resources/image-20230718210830914.png" alt="image-20230718210830914"></p><ul><li>lock：作用于主内存，将一个变量标识为被一个线程独占状态（对应 monitorenter）</li><li>unclock：作用于主内存，将一个变量从独占状态释放出来，释放后的变量才可以被其他线程锁定（对应 monitorexit）</li><li>read：作用于主内存，把一个变量的值从主内存传输到工作内存中</li><li>load：作用于工作内存，在 read 之后执行，把 read 得到的值放入工作内存的变量副本中</li><li>use：作用于工作内存，把工作内存中一个变量的值传递给<strong>执行引擎</strong>，每当遇到一个使用到变量的操作时都要使用该指令</li><li>assign：作用于工作内存，把从执行引擎接收到的一个值赋给工作内存的变量</li><li>store：作用于工作内存，把工作内存的一个变量的值传送到主内存中</li><li>write：作用于主内存，在 store 之后执行，把 store 得到的值放入主内存的变量中</li></ul><blockquote><p>参考文章：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md</a></p></blockquote><h4 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h4><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>可见性：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值</p><p>存在不可见问题的根本原因是由于缓存的存在，线程持有的是共享变量的副本，无法感知其他线程对于共享变量的更改，导致读取的值不是最新的。但是 final 修饰的变量是<strong>不可变</strong>的，就算有缓存，也不会存在不可见的问题</p><p><code>main</code> 线程对 <code>run</code> 变量的修改对于 <code>t 线程</code> 不可见，导致了 <code>t 线程</code>无法停止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//添加volatile</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">while</span>(run)&#123;<br>        <span class="hljs-comment">// ....如果这里加上一个输出代码，会发现也能正常停下来</span><br>        <span class="hljs-comment">// System.out.println()，这是因为println()方法有上锁操作，会清空工作内存</span><br>        &#125;<br>&#125;);<br>    t.start();<br>    sleep(<span class="hljs-number">1</span>);<br>    run = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 线程t不会如预想的停下来</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>原因</strong>：</p><ul><li>初始状态，如左图，<code>t 线程</code> 从主内存读取了  <code>run</code> 的值到工作内存，因为 <code>t 线程</code> 要频繁从主内存中读取 <code>run</code> 的值，<code>JIT 编译器</code> 会将 <code>run</code> 的值缓存至自己工作内存中的高速缓存中，减少对主存中 <code>run</code> 的访问，提高效率；</li><li>1 秒之后，如右图，<code>main</code> 线程修改了 <code>run</code> 的值，并同步至主存，而  <code>t 线程</code>  是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值；</li></ul><p><img src="/./Resources/JMM-%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BE%8B%E5%AD%90.jpg" alt="JMM-可见性例子"></p><p><strong>解决</strong>：</p><p>使用 <code>volatile</code> 关键字修饰 <code>run</code>，<code>volatile</code> 保证线程每次都去主内存中读取值。</p><p>使用 <code>synchronized</code> 修饰，因为 <code>synchronized</code> 会在进入和退出同步块时自动执行锁的获取和释放操作。 在获取锁之前，线程的工作内存会被清空，强制从主内存中重新读取共享变量最新的值。</p><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>原子性：不可分割，完整性，也就是说某个线程正在做某个具体业务时，中间不可以被分割，需要具体完成，要么同时成功，要么同时失败，<strong>保证指令不会受到线程上下文切换的影响</strong> 。</p><p>定义原子操作的使用规则：</p><ol><li>不允许 read 和 load、store 和 write 操作之一单独出现，必须顺序执行，但是不要求连续</li><li>不允许一个线程丢弃 assign 操作，必须同步回主存</li><li>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步会主内存中</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（assign 或者 load）的变量，即对一个变量实施 use 和 store 操作之前，必须先自行 assign 和 load 操作</li><li>一个变量在同一时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一线程重复执行多次，多次执行 lock 后，只有<strong>执行相同次数的 unlock</strong> 操作，变量才会被解锁，<strong>lock 和 unlock 必须成对出现</strong></li><li>如果对一个变量执行 lock 操作，将会<strong>清空工作内存中此变量的值</strong>，在执行引擎使用这个变量之前需要重新从主存加载</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许执行 unlock 操作，也不允许去 unlock 一个被其他线程锁定的变量</li><li>对一个变量执行 unlock 操作之前，必须<strong>先把此变量同步到主内存</strong>中（执行 store 和 write 操作）</li></ol><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>有序性：在本线程内观察，所有操作都是有序的；在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了<strong>指令重排</strong>序</p><p>CPU 的基本工作是执行存储的指令序列，即程序，程序的执行过程实际上是不断地取出指令、分析指令、执行指令的过程，为了提高性能，编译器和处理器会对指令重排，一般分为以下三种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">源代码 -&gt; 编译器优化的重排 -&gt; 指令并行的重排 -&gt; 内存系统的重排 -&gt; 最终执行指令<br></code></pre></td></tr></table></figure><p>现代 CPU 支持多级指令流水线，几乎所有的冯•诺伊曼型计算机的 CPU，其工作都可以分为 5 个阶段：取指令（<code>IF</code>）、指令译码（<code>ID</code>）、执行指令（<code>EX</code>）、访存取数（<code>MEM</code>）和结果写回（<code>WB</code>），可以称之为<strong>五级指令流水线</strong>。CPU 可以在一个时钟周期内，同时运行五条指令的<strong>不同阶段</strong>（每个线程不同的阶段），<u>本质上流水线技术并不能缩短单条指令的执行时间，但变相地提高了指令的吞吐率。</u></p><p><img src="/./Resources/image-20230719161144999.png" alt="image-20230719161144999"></p><p>处理器在进行重排序时，必须要考虑<strong>指令之间的数据依赖性</strong></p><ul><li>单线程环境也存在指令重排，由于存在依赖性，最终执行结果和代码顺序的结果一致</li><li>多线程环境中线程交替执行，由于编译器优化重排，会获取其他线程处在不同阶段的指令同时执行</li></ul><p>补充知识：</p><ul><li>指令周期是取出一条指令并执行这条指令的时间，一般由若干个机器周期组成</li><li>机器周期也称为 CPU 周期，一条指令的执行过程划分为若干个阶段（如取指、译码、执行等），每一阶段完成一个基本操作，完成一个基本操作所需要的时间称为机器周期</li><li>振荡周期指周期性信号作周期性重复变化的时间间隔</li></ul><p><strong>解决</strong>：</p><p>使用 <code>volatile</code> 关键字，具体地，参考 <code>volatile</code> 部分；</p><h3 id="4-2-cache"><a href="#4-2-cache" class="headerlink" title="4.2 cache"></a>4.2 cache</h3><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><h5 id="缓存结构"><a href="#缓存结构" class="headerlink" title="缓存结构"></a>缓存结构</h5><p>在计算机系统中，CPU 高速缓存（CPU Cache，简称缓存）是用于减少处理器访问内存所需平均时间的部件；在存储体系中位于自顶向下的第二层，仅次于 CPU 寄存器；其容量远小于内存，但速度却可以接近处理器的频率</p><p>CPU 处理器速度远远大于在主内存中的，为了解决速度差异，在它们之间架设了多级缓存，如 L1、L2、L3 级别的缓存，这些缓存离 CPU 越近就越快，将频繁操作的数据缓存到这里，加快访问速度</p><p><img src="/./Resources/image-20230718210845150.png" alt="image-20230718210845150"></p><table><thead><tr><th>从 CPU 到</th><th>大约需要的时钟周期</th></tr></thead><tbody><tr><td>寄存器</td><td>1 cycle (4GHz 的 CPU 约为 0.25ns)</td></tr><tr><td>L1</td><td>3~4 cycle</td></tr><tr><td>L2</td><td>10~20 cycle</td></tr><tr><td>L3</td><td>40~45 cycle</td></tr><tr><td>内存</td><td>120~240 cycle</td></tr></tbody></table><h5 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h5><p>当处理器发出内存访问请求时，会先查看缓存内是否有请求数据，如果存在（命中），则不用访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器</p><p>缓存之所以有效，主要因为程序运行时对内存的访问呈现局部性（Locality）特征。既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality），有效利用这种局部性，缓存可以达到极高的命中率</p><hr><h4 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h4><p><strong>缓存以缓存行 cache line 为单位</strong>，每个缓存行对应着一块内存，一般是 64 byte（8 个 long），在 CPU 从主存获取数据时，以 cache line 为单位加载，于是相邻的数据会一并加载到缓存中</p><p>缓存会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中，CPU 要保证数据的一致性，需要做到某个 CPU 核心更改了数据，其它 CPU 核心对应的<strong>整个缓存行必须失效</strong>，这就是伪共享</p><p><img src="/./Resources/image-20230718210853486.png" alt="image-20230718210853486"></p><p>解决方法：</p><ul><li><p>padding：通过填充，让数据落在不同的 cache line 中</p></li><li><p>@Contended：原理参考 无锁 → Adder → 优化机制 → 伪共享</p></li></ul><p>Linux 查看 CPU 缓存行：</p><ul><li>命令：<code>cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size64</code></li><li>内存地址格式：[高位组标记] [低位索引] [偏移量]</li></ul><hr><h4 id="缓存一致"><a href="#缓存一致" class="headerlink" title="缓存一致"></a>缓存一致</h4><p>缓存一致性：当多个处理器运算任务都涉及到同一块主内存区域的时候，将可能导致各自的缓存数据不一样</p><p><img src="/./Resources/image-20230718210859673.png" alt="image-20230718210859673"></p><p>MESI（Modified Exclusive Shared Or Invalid）是一种广泛使用的<strong>支持写回策略的缓存一致性协议</strong>，CPU 中每个缓存行（caceh line）使用 4 种状态进行标记（使用额外的两位 bit 表示)：</p><ul><li><p>M：被修改（Modified）</p><p>该缓存行只被缓存在该 CPU 的缓存中，并且是被修改过的，与主存中的数据不一致 (dirty)，该缓存行中的内存需要写回 (write back) 主存。该状态的数据再次被修改不会发送广播，因为其他核心的数据已经在第一次修改时失效一次</p><p>当被写回主存之后，该缓存行的状态会变成独享 (exclusive) 状态</p></li><li><p>E：独享的（Exclusive）</p><p>该缓存行只被缓存在该 CPU 的缓存中，是未被修改过的 (clear)，与主存中数据一致，修改数据不需要通知其他 CPU 核心，该状态可以在任何时刻有其它 CPU 读取该内存时变成共享状态 (shared)</p><p>当 CPU 修改该缓存行中内容时，该状态可以变成 Modified 状态</p></li><li><p>S：共享的（Shared）</p><p>该状态意味着该缓存行可能被多个 CPU 缓存，并且各个缓存中的数据与主存数据一致，当 CPU 修改该缓存行中，会向其它 CPU 核心广播一个请求，使该缓存行变成无效状态 (Invalid)，然后再更新当前 Cache 里的数据</p></li><li><p>I：无效的（Invalid）</p><p>该缓存是无效的，可能有其它 CPU 修改了该缓存行</p></li></ul><p>解决方法：各个处理器访问缓存时都遵循一些协议，在读写时要根据协议进行操作，协议主要有 MSI、MESI 等</p><hr><h4 id="处理机制"><a href="#处理机制" class="headerlink" title="处理机制"></a>处理机制</h4><p>单核 CPU 处理器会自动保证基本内存操作的原子性</p><p>多核 CPU 处理器，每个 CPU 处理器内维护了一块内存，每个内核内部维护着一块缓存，当多线程并发读写时，就会出现缓存数据不一致的情况。处理器提供：</p><ul><li>总线锁定：当处理器要操作共享变量时，在 BUS 总线上发出一个 LOCK 信号，其他处理器就无法操作这个共享变量，该操作会导致大量阻塞，从而增加系统的性能开销（<strong>平台级别的加锁</strong>）</li><li>缓存锁定：当处理器对缓存中的共享变量进行了操作，其他处理器有嗅探机制，将各自缓存中的该共享变量的失效，读取时会重新从主内存中读取最新的数据，基于 MESI 缓存一致性协议来实现</li></ul><p>有如下两种情况处理器不会使用缓存锁定：</p><ul><li><p>当操作的数据跨多个缓存行，或没被缓存在处理器内部，则处理器会使用总线锁定</p></li><li><p>有些处理器不支持缓存锁定，比如：Intel 486 和 Pentium 处理器也会调用总线锁定</p></li></ul><p>总线机制：</p><ul><li><p>总线嗅探：每个处理器通过嗅探在总线上传播的数据来检查自己缓存值是否过期了，当处理器发现自己的缓存对应的内存地址的数据被修改，就<strong>将当前处理器的缓存行设置为无效状态</strong>，当处理器对这个数据进行操作时，会重新从内存中把数据读取到处理器缓存中</p></li><li><p>总线风暴：当某个 CPU 核心更新了 Cache 中的数据，要把该事件广播通知到其他核心（<strong>写传播</strong>），CPU 需要每时每刻监听总线上的一切活动，但是不管别的核心的 Cache 是否缓存相同的数据，都需要发出一个广播事件，不断的从主内存嗅探和 CAS 循环，无效的交互会导致总线带宽达到峰值；因此不要大量使用 volatile 关键字，使用 volatile、syschonized 都需要根据实际场景</p></li></ul><hr><h3 id="4-3-volatile"><a href="#4-3-volatile" class="headerlink" title="4.3 volatile"></a>4.3 volatile</h3><h4 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h4><p><code>volatile</code> 是 Java 虚拟机提供的<strong>轻量级</strong>的同步机制（三大特性）</p><ul><li>保证可见性</li><li>不保证原子性</li><li>保证有序性（禁止指令重排）</li></ul><p>性能：<code>volatile</code> 修饰的变量进行读操作与普通变量几乎没什么差别，但是写操作相对慢一些，因为需要在本地代码中插入很多<strong>内存屏障</strong>来保证指令不会发生乱序执行，但是开销比锁要小</p><p><code>synchronized</code> 无法禁止指令重排和处理器优化，为什么可以保证有序性可见性</p><ul><li>加了锁之后，只能有一个线程获得到了锁，获得不到锁的线程就要阻塞，所以同一时间只有一个线程执行，相当于单线程，由于数据依赖性的存在，单线程的指令重排是没有问题的</li><li>线程加锁前，将<strong>清空工作内存</strong>中共享变量的值，使用共享变量时需要从主内存中重新读取最新的值；线程解锁前，必须把共享变量的最新值<strong>刷新到主内存</strong>中（JMM 内存交互章节有讲）</li></ul><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p><code>volatile</code> 修饰的变量，可以禁用指令重排</p><p>指令重排实例：</p><ul><li><p>example 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mySort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<span class="hljs-comment">//语句1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<span class="hljs-comment">//语句2  谁先执行效果一样</span><br>x = x + <span class="hljs-number">5</span>;<span class="hljs-comment">//语句3</span><br>y = x * x;<span class="hljs-comment">//语句4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行顺序是：1 2 3 4、2 1 3 4、1 3 2 4</p><p>指令重排也有限制不会出现：4321，语句 4 需要依赖于 y 以及 x 的申明，因为存在数据依赖，无法首先执行</p></li><li><p>example 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 线程1 执行此方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actor1</span><span class="hljs-params">(I_Result r)</span> &#123;<br>    <span class="hljs-keyword">if</span>(ready) &#123;<br>    r.r1 = num + num;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    r.r1 = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 线程2 执行此方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actor2</span><span class="hljs-params">(I_Result r)</span> &#123;<br>num = <span class="hljs-number">2</span>;<br>ready = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>情况一：线程 1 先执行，ready &#x3D; false，结果为 r.r1 &#x3D; 1</p><p>情况二：线程 2 先执行 num &#x3D; 2，但还没执行 ready &#x3D; true，线程 1 执行，结果为 r.r1 &#x3D; 1</p><p>情况三：线程 2 先执行 ready &#x3D; true，线程 1 执行，进入 if 分支结果为 r.r1 &#x3D; 4</p><p>情况四：线程 2 执行 ready &#x3D; true，切换到线程 1，进入 if 分支为 r.r1 &#x3D; 0，再切回线程 2 执行 num &#x3D; 2，发生指令重排</p></li></ul><h4 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h4><h5 id="缓存一致-1"><a href="#缓存一致-1" class="headerlink" title="缓存一致"></a>缓存一致</h5><p>使用 <code>volatile</code> 修饰的共享变量，底层通过汇编 lock 前缀指令进行缓存锁定，在线程修改完共享变量后写回主存，其他的 CPU 核心上运行的线程通过 CPU 总线嗅探机制会修改其共享变量为失效状态，读取时会重新从主内存中读取最新的数据</p><p>lock 前缀指令就相当于内存屏障，<code>Memory Barrier</code>（Memory Fence）</p><ul><li>对 volatile 变量的写指令后会加入写屏障</li><li>对 volatile 变量的读指令前会加入读屏障</li></ul><p>内存屏障有三个作用：</p><ul><li>确保对内存的读-改-写操作原子执行</li><li>阻止屏障两侧的指令重排序</li><li>强制把缓存中的脏数据写回主内存，让缓存行中相应的数据失效</li></ul><h5 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h5><p>保证<strong>可见性</strong>：</p><ul><li><p>写屏障（<code>sfence，Store Barrier</code>）保证在该屏障之前的，对共享变量的改动，都<strong>同步到主存</strong>当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actor2</span><span class="hljs-params">(I_Result r)</span> &#123;<br>    num = <span class="hljs-number">2</span>;<br>    ready = <span class="hljs-literal">true</span>; <span class="hljs-comment">// ready 是 volatile 赋值带写屏障</span><br>    <span class="hljs-comment">// 写屏障</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读屏障（<code>lfence，Load Barrier</code>）保证在该屏障之后的，对共享变量的读取，<strong>从主存刷新变量值</strong>，加载的是主存中最新数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actor1</span><span class="hljs-params">(I_Result r)</span> &#123;<br>    <span class="hljs-comment">// 读屏障</span><br>    <span class="hljs-comment">// ready 是 volatile 读取值带读屏障</span><br>    <span class="hljs-keyword">if</span> (ready) &#123;<br>        r.r1 = num + num;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        r.r1 = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718210914892.png" alt="image-20230718210914892"></p></li><li><p>全能屏障：<code>mfence</code>（modify&#x2F;mix Barrier），兼具 <code>sfence</code> 和 <code>lfence</code> 的功能</p></li></ul><p>保证<strong>有序性</strong>：</p><ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ul><p>不能解决指令交错：</p><ul><li><p>写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证其他线程的读跑到写屏障之前</p></li><li><p>有序性的保证也只是保证了本线程内相关代码不被重排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">volatile</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;i++&#125;);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;i--&#125;);<br></code></pre></td></tr></table></figure><p>i++ 反编译后的指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: iconst_1<span class="hljs-comment">// 当int取值 -1~5 时，JVM采用iconst指令将常量压入栈中</span><br><span class="hljs-number">1</span>: istore_1<span class="hljs-comment">// 将操作数栈顶数据弹出，存入局部变量表的 slot 1</span><br><span class="hljs-number">2</span>: iinc<span class="hljs-number">1</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718210922093.png" alt="image-20230718210922093"></p></li></ul><h5 id="交互规则"><a href="#交互规则" class="headerlink" title="交互规则"></a>交互规则</h5><p>对于 <code>volatile</code> 修饰的变量：</p><ul><li>线程对变量的 use 与 load、read 操作是相关联的，所以变量使用前必须先从主存加载</li><li>线程对变量的 assign 与 store、write 操作是相关联的，所以变量使用后必须同步至主存</li><li>线程 1 和线程 2 谁先对变量执行 read 操作，就会先进行 write 操作，防止指令重排</li></ul><h4 id="双端检锁"><a href="#双端检锁" class="headerlink" title="双端检锁"></a>双端检锁</h4><h5 id="双端检锁机制"><a href="#双端检锁机制" class="headerlink" title="双端检锁机制"></a>双端检锁机制</h5><p><code>Double-Checked Locking</code>：双端检锁机制</p><p><code>DCL</code>（双端检锁）机制不一定是线程安全的，原因是有指令重排的存在，加入 <code>volatile</code> 可以禁止指令重排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123; &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>) &#123; <br>            <span class="hljs-comment">// 2. 首次访问会同步，而之后的使用没有 synchronized</span><br>            <span class="hljs-keyword">synchronized</span>(Singleton.class) &#123;<br>                <span class="hljs-comment">// 1. 这里是线程安全的判断，防止其他线程在当前线程等待锁的期间完成了初始化</span><br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123; <br>                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不锁 <code>INSTANCE</code> 的原因：</p><ul><li><code>INSTANCE</code> 要重新赋值</li><li><code>INSTANCE</code> 是 <code>null</code>，线程加锁之前需要获取对象的引用，设置对象头，<code>null</code> 没有引用</li></ul><p>实现特点： </p><ul><li>懒惰初始化</li><li>首次使用 <code>getInstance()</code> 才使用 <code>synchronized</code> 加锁，后续使用时无需加锁</li><li>第一个 <code>if</code> 使用了 <code>INSTANCE</code> 变量，是在同步块之外，但在<strong>多线程环境下会产生问题</strong></li></ul><blockquote><p><code>synchronized</code> 可以解决指令重排问题，但仅限于所有共享变量的操作可以都在同步代码块内，但不是保证不发生指令重排，而是指令重排不会造成影响。不然像上面的例子，<code>synchronized</code> 外部有对共享变量 <code>INSTANCE</code> 的访问，由于指令重排，导致出现线程不安全问题。</p></blockquote><h5 id="双端检锁的问题"><a href="#双端检锁的问题" class="headerlink" title="双端检锁的问题"></a>双端检锁的问题</h5><p><code>getInstance()</code> 方法对应的字节码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: getstatic #<span class="hljs-number">2</span> <span class="hljs-comment">// Field INSTANCE:Ltest/Singleton;</span><br><span class="hljs-number">3</span>: ifnonnull <span class="hljs-number">37</span><br><span class="hljs-number">6</span>: ldc #<span class="hljs-number">3</span> <span class="hljs-comment">// class test/Singleton</span><br><span class="hljs-number">8</span>: dup<br><span class="hljs-number">9</span>: astore_0<br><span class="hljs-number">10</span>: monitorenter<br><span class="hljs-number">11</span>: getstatic #<span class="hljs-number">2</span> <span class="hljs-comment">// Field INSTANCE:Ltest/Singleton;</span><br><span class="hljs-number">14</span>: ifnonnull <span class="hljs-number">27</span><br><span class="hljs-number">17</span>: <span class="hljs-keyword">new</span> #<span class="hljs-number">3</span> <span class="hljs-comment">// class test/Singleton</span><br><span class="hljs-number">20</span>: dup<br><span class="hljs-number">21</span>: invokespecial #<span class="hljs-number">4</span> <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-number">24</span>: putstatic #<span class="hljs-number">2</span> <span class="hljs-comment">// Field INSTANCE:Ltest/Singleton;</span><br><span class="hljs-number">27</span>: aload_0<br><span class="hljs-number">28</span>: monitorexit<br><span class="hljs-number">29</span>: goto <span class="hljs-number">37</span><br><span class="hljs-number">32</span>: astore_1<br><span class="hljs-number">33</span>: aload_0<br><span class="hljs-number">34</span>: monitorexit<br><span class="hljs-number">35</span>: aload_1<br><span class="hljs-number">36</span>: athrow<br><span class="hljs-number">37</span>: getstatic #<span class="hljs-number">2</span> <span class="hljs-comment">// Field INSTANCE:Ltest/Singleton;</span><br><span class="hljs-number">40</span>: areturn<br></code></pre></td></tr></table></figure><ul><li>17 表示创建对象，将对象引用入栈 </li><li>20 表示复制一份对象引用，引用地址</li><li>21 表示利用一个对象引用，调用构造方法初始化对象</li><li>24 表示利用一个对象引用，赋值给 static INSTANCE</li></ul><p><code>21 - 24</code> 指的是 <code>INSTANCE = new Singleton();</code>，即，21：<code>new Singleton()</code>，24：<code>INSTANCE = new Singleton();</code></p><p><strong>步骤 21 和 24 之间不存在数据依赖关系</strong>，而且无论重排前后，程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。</p><p>因此当发生指令重排时，即24先发生，21后发生，会出现线程安全问题，如下：</p><p>由于<code>0:getstatic</code> 这行代码在 <code>monitor</code> 控制之外，可以越过 <code>monitor</code> 读取 <code>INSTANCE</code> 变量的值，当其他线程访问 <code>INSTANCE</code> 不为 <code>null</code> 时，由于 <code>INSTANCE</code> 实例<strong>未必已初始化</strong>，那么 t2 拿到的是将是一个<strong>未初始化完毕的单例</strong>返回，这就造成了<strong>线程安全的问题</strong>.</p><p><img src="/./Resources/JMM-DCL%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.png"></p><h5 id="双端检锁的解决方法"><a href="#双端检锁的解决方法" class="headerlink" title="双端检锁的解决方法"></a>双端检锁的解决方法</h5><p>指令重排只会保证串行语义的执行一致性（单线程），但并不会关系多线程间的语义一致性</p><p>引入 <code>volatile</code>，来保证出现指令重排的问题，从而保证单例模式的线程安全性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">SingletonDemo</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230719192155698.png" alt="image-20230719192155698"></p><h3 id="4-4-happens-before"><a href="#4-4-happens-before" class="headerlink" title="4.4 happens-before"></a>4.4 happens-before</h3><p><code>happens-before</code>：先行发生</p><p>Java 内存模型具备一些先天的“有序性”，即不需要通过任何同步手段（volatile、synchronized 等）就能够得到保证的安全，这个通常也称为 <code>happens-before</code> 原则，它是可见性与有序性的一套规则总结</p><p>不符合 <code>happens-before</code> 规则，<code>JMM</code> 并不能保证一个线程的可见性和有序性</p><ol><li><p>程序次序规则 (<code>Program Order Rule</code>)：一个线程内，逻辑上书写在前面的操作先行发生于书写在后面的操作 ，因为多个操作之间有先后依赖关系，则不允许对这些操作进行重排序</p></li><li><p>锁定规则 (<code>Monitor Lock Rule</code>)：一个 unlock 操作先行发生于后面（时间的先后）对同一个锁的 lock 操作，所以线程解锁 m 之前对变量的写（解锁前会刷新到主内存中），对于接下来对 m 加锁的其它线程对该变量的读可见</p></li><li><p><strong>volatile 变量规则</strong>  (<code>Volatile Variable Rule</code>)：对 volatile 变量的写操作先行发生于后面对这个变量的读</p></li><li><p>传递规则 (<code>Transitivity</code>)：具有传递性，如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C</p></li><li><p>线程启动规则 (<code>Thread Start Rule</code>)：Thread 对象的 <code>start()</code> 方法先行发生于此线程中的每一个操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//线程 start 前对变量的写，对该线程开始后对该变量的读可见</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;System.out.println(x);&#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br></code></pre></td></tr></table></figure></li><li><p>线程中断规则 (<code>Thread Interruption Rule</code>)：对线程 <code>interrupt()</code> 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</p></li><li><p>线程终止规则 (<code>Thread Termination Rule</code>)：线程中所有的操作都先行发生于线程的终止检测，可以通过 <code>Thread.join()</code> 方法结束、<code>Thread.isAlive()</code> 的返回值手段检测到线程已经终止执行</p></li><li><p>对象终结规则（<code>Finaizer Rule</code>）：一个对象的初始化完成（构造函数执行结束）先行发生于它的 <code>finalize()</code> 方法的开始</p></li></ol><h3 id="4-5-设计模式"><a href="#4-5-设计模式" class="headerlink" title="4.5 设计模式"></a>4.5 设计模式</h3><h4 id="终止模式"><a href="#终止模式" class="headerlink" title="终止模式"></a>终止模式</h4><p>之前使用的 <code>interrupt</code>，见：<a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%A4%E9%98%B6%E6%AE%B5%E7%BB%88%E6%AD%A2%E6%A8%A1%E5%BC%8F">设计模式：两阶段终止模式</a></p><p>终止模式之两阶段终止模式：停止标记用 <code>volatile</code> 是为了保证该变量在多个线程之间的可见性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoPhaseTermination</span> &#123;<br>    <span class="hljs-comment">// 监控线程</span><br>    <span class="hljs-keyword">private</span> Thread monitor;<br>    <span class="hljs-comment">// 停止标记</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">stop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;;<br><br>    <span class="hljs-comment">// 启动监控线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        monitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                <span class="hljs-keyword">if</span> (stop) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;后置处理&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">// 睡眠</span><br>                    System.out.println(thread.getName() + <span class="hljs-string">&quot;执行监控记录&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                   System.out.println(<span class="hljs-string">&quot;被打断，退出睡眠&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        monitor.start();<br>    &#125;<br><br>    <span class="hljs-comment">// 停止监控线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        stop = <span class="hljs-literal">true</span>;<br>        monitor.interrupt();<span class="hljs-comment">// 让线程尽快退出Timed Waiting（有可能设置stop的时候，监控线程还在sleep中）</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">TwoPhaseTermination</span> <span class="hljs-variable">tpt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwoPhaseTermination</span>();<br>    tpt.start();<br>    Thread.sleep(<span class="hljs-number">3500</span>);<br>    System.out.println(<span class="hljs-string">&quot;停止监控&quot;</span>);<br>    tpt.stop();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Balking"><a href="#Balking" class="headerlink" title="Balking"></a>Balking</h4><p><code>Balking</code> （犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonitorService</span> &#123;<br>    <span class="hljs-comment">// 用来表示是否已经有线程已经在执行启动了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">starting</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;尝试启动监控线程...&quot;</span>);<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (starting) &#123;<br>            <span class="hljs-keyword">return</span>;<br>            &#125;<br>            starting = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 真正启动监控线程...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>关于 <code>Balking</code> 模式的应用参考老师的视频：<a href="https://www.bilibili.com/video/BV16J411h7Rd/?p=140">https://www.bilibili.com/video/BV16J411h7Rd/?p=140</a></p><p>关于 <code>volatile</code> 的使用，是为了解决可见性问题，但是我们知道 <code>synchronized</code> 关键字是可以解决可见性问题的，那么 <code>volatile</code> 是不是就没用了呢？</p><p>事实上，<code>synchronized</code> 确实可以解决可见性，但只是在同步代码块内解决，因此不在不同代码块里的代码，且也需要使用 <code>starting</code> 时，就需要 <code>volatile</code> 来保证可见性了。即使用 <code>syschronized</code> 和 <code>volatile</code> 实现轻量级的可见性。</p></blockquote><p>对比保护性暂停模式：保护性暂停模式用在一个线程等待另一个线程的执行结果，当条件不满足时线程等待</p><p>例子：希望 <code>doInit()</code> 方法仅被调用一次，下面的实现出现的问题：</p><ul><li>当 <code>t1 线程</code> 进入 <code>init()</code> 准备 <code>doInit()</code>，<code>t2 线程</code> 进来，<code>initialized</code> 还为 <code>false</code>，则 <code>t2</code> 就又初始化一次</li><li><code>volatile</code> 适合<strong>一个线程写，其他线程读</strong>的情况，这个代码需要加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVolatile</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">initialized</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialized) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        doInit();<br>        initialized = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInit</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 加锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVolatile</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">initialized</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialized) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        doInit();<br>        initialized = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInit</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、无锁"><a href="#五、无锁" class="headerlink" title="五、无锁"></a>五、无锁</h2><h3 id="5-1-CAS"><a href="#5-1-CAS" class="headerlink" title="5.1 CAS"></a>5.1 CAS</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>无锁编程：<code>Lock Free</code></p><p><code>CAS</code> 的全称是 <code>Compare-And-Swap</code>，是 <strong>CPU 并发原语</strong></p><ul><li><code>CAS</code>  并发原语体现在 <code>Java</code> 语言中就是 <code>sun.misc.Unsafe</code> 类的各个方法，调用 <code>UnSafe</code> 类中的 <code>CAS</code> 方法，<code>JVM</code> 会实现出  <code>CAS</code>  汇编指令，这是一种完全依赖于硬件的功能，实现了原子操作</li><li><code>CAS</code>  是一种系统原语，<u>原语属于操作系统范畴，是由若干条指令组成 ，用于完成某个功能的一个过程，并且原语的执行必须是连续的，执行过程中不允许被中断</u>，所以 <code>CAS</code> 是一条 <code>CPU</code> 的原子指令，不会造成数据不一致的问题，是线程安全的</li></ul><p><strong>底层原理</strong>：<code>CAS</code> 的底层是 <code>lock cmpxchg</code> 指令（<code>X86</code> 架构），在单核和多核 <code>CPU</code> 下都能够保证【比较-交换】的原子性</p><ul><li><p>程序是在单核处理器上运行，会省略 <code>lock</code> 前缀，单处理器自身会维护处理器内的顺序一致性，不需要 lock 前缀的内存屏障效果</p></li><li><p>程序是在多核处理器上运行，会为 <code>cmpxchg</code> 指令加上 <code>lock</code> 前缀。当某个核执行到带 lock 的指令时，CPU 会执行<strong>总线锁定或缓存锁定</strong>，将修改的变量写入到主存，这个过程不会被线程的调度机制所打断，保证了多个线程对内存操作的原子性</p></li></ul><p>作用：比较当前工作内存中的值和主物理内存中的值，如果相同则执行规定操作，否则继续比较直到主内存和工作内存的值一致为止</p><p>CAS 特点：</p><ul><li>CAS 体现的是<strong>无锁并发、无阻塞并发</strong>，线程不会陷入阻塞，线程不需要频繁切换状态（上下文切换，系统调用）</li><li>CAS 是基于乐观锁的思想</li></ul><p>CAS 缺点：</p><ul><li>执行的是循环操作，如果比较不成功一直在循环，最差的情况某个线程一直取到的值和预期值都不一样，就会无限循环导致饥饿，<strong>使用 CAS 线程数不要超过 CPU 的核心数</strong>，采用分段 CAS 和自动迁移机制</li><li>只能保证一个共享变量的原子操作<ul><li>对于一个共享变量执行操作时，可以通过循环 CAS 的方式来保证原子操作</li><li>对于多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候<strong>只能用锁来保证原子性</strong></li></ul></li><li>引出来 ABA 问题</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>CAS 与 synchronized 总结：</p><ul><li>synchronized 是从悲观的角度出发：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程），因此 synchronized 也称之为悲观锁，ReentrantLock 也是一种悲观锁，性能较差</li><li>CAS 是从乐观的角度出发：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。<strong>如果别人修改过，则获取现在最新的值，如果别人没修改过，直接修改共享数据的值</strong>，CAS 这种机制也称之为乐观锁，综合性能较好</li></ul><h3 id="5-2-Atomic"><a href="#5-2-Atomic" class="headerlink" title="5.2 Atomic"></a>5.2 Atomic</h3><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p>常见原子类：<code>AtomicInteger</code>、<code>AtomicBoolean</code>、<code>AtomicLong</code></p><p>构造方法：</p><ul><li><code>public AtomicInteger()</code>：初始化一个默认值为 0 的原子型 <code>Integer</code></li><li><code>public AtomicInteger(int initialValue)</code>：初始化一个指定值的原子型 <code>Integer</code></li></ul><p>常用 API：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>public final int get()</code></td><td>获取 AtomicInteger 的值</td></tr><tr><td><code>public final int getAndIncrement()</code></td><td>以原子方式将当前值加 1，返回的是自增前的值</td></tr><tr><td><code>public final int incrementAndGet()</code></td><td>以原子方式将当前值加 1，返回的是自增后的值</td></tr><tr><td><code>public final int getAndSet(int value)</code></td><td>以原子方式设置为 newValue 的值，返回旧值</td></tr><tr><td><code>public final int addAndGet(int data)</code></td><td>以原子方式将输入的数值与实例中的值相加并返回<br />实例：AtomicInteger 里的 value</td></tr></tbody></table><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><strong><code>AtomicInteger</code> 原理</strong>：自旋锁  + CAS 算法</p><p>CAS 算法：有 3 个操作数（内存值 V， 旧的预期值 A，要修改的值 B）</p><ul><li>当旧的预期值 A &#x3D;&#x3D; 内存值 V   此时可以修改，将 V 改为 B</li><li>当旧的预期值 A !&#x3D;  内存值 V   此时不能修改，并重新获取现在的最新值，重新获取的动作就是自旋</li></ul><p>分析 <code>getAndSet</code> 方法：</p><ul><li><p><code>AtomicInteger</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> newValue)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * this: 当前对象</span><br><span class="hljs-comment">    * valueOffset:内存偏移量，内存地址</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> unsafe.getAndSetInt(<span class="hljs-built_in">this</span>, valueOffset, newValue);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>valueOffset</code>：偏移量表示该变量值相对于当前对象地址的偏移，<code>Unsafe</code> 就是根据内存偏移地址获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">valueOffset = unsafe.objectFieldOffset<br>                (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br><span class="hljs-comment">//调用 native 方法   --&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">objectFieldOffset</span><span class="hljs-params">(Field var1)</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>unsafe</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// val1: AtomicInteger对象本身，var2: 该对象值得引用地址，var4: 需要变动的数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndSetInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br>    <span class="hljs-type">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// var5: 用 var1 和 var2 找到的内存中的真实值</span><br>        var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>var5</code>：从主内存中拷贝到工作内存中的值（每次都要从主内存拿到最新的值到本地内存），然后执行 <code>compareAndSwapInt()</code> 再和主内存的值进行比较，假设方法返回 <code>false</code>，那么就一直执行 <code>while</code> 方法，直到期望的值和真实值一样，修改数据</p></li><li><p>变量 <code>value</code> 用 <code>volatile</code> 修饰，保证了多线程之间的内存可见性，避免线程从工作缓存中获取失效的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value<br></code></pre></td></tr></table></figure><p><strong><code>CAS</code> 必须借助 volatile 才能读取到共享变量的最新值来实现比较并交换的效果</strong></p></li></ul><p>分析 <code>getAndUpdate</code> 方法：</p><ul><li><p><code>getAndUpdate</code> 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndUpdate</span><span class="hljs-params">(IntUnaryOperator updateFunction)</span> &#123;<br>    <span class="hljs-type">int</span> prev, next;<br>    <span class="hljs-keyword">do</span> &#123;<br>        prev = get();<span class="hljs-comment">//当前值，cas的期望值</span><br>        next = updateFunction.applyAsInt(prev);<span class="hljs-comment">//期望值更新到该值</span><br>    &#125; <span class="hljs-keyword">while</span> (!compareAndSet(prev, next));<span class="hljs-comment">//自旋</span><br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数式接口：可以自定义操作逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>a.getAndUpdate(i -&gt; i + <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>compareAndSet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * this: 当前对象</span><br><span class="hljs-comment">    * valueOffset:内存偏移量，内存地址</span><br><span class="hljs-comment">    * expect:期望的值</span><br><span class="hljs-comment">    * update: 更新的值</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-built_in">this</span>, valueOffset, expect, update);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h4><p>原子引用：对 <code>Object</code> 进行原子操作，提供一种读和写都是原子性的对象引用变量</p><p>原子引用类：<code>AtomicReference</code>、<code>AtomicStampedReference</code>、<code>AtomicMarkableReference</code></p><p><code>AtomicReference</code> 类：</p><ul><li><p>构造方法：<code>AtomicReference&lt;T&gt; atomicReference = new AtomicReference&lt;T&gt;()</code></p></li><li><p>常用 API：</p><ul><li><code>public final boolean compareAndSet(V expectedValue, V newValue)</code>：CAS 操作</li><li><code>public final void set(V newValue)</code>：将值设置为 newValue </li><li><code>public final V get()</code>：返回当前值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicReferenceDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">33</span>, <span class="hljs-string">&quot;z3&quot;</span>);<br>        <br>        <span class="hljs-comment">// 创建原子引用包装类</span><br>        AtomicReference&lt;Student&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置主内存共享变量为s1</span><br>        atomicReference.set(s1);<br><br>        <span class="hljs-comment">// 比较并交换，如果现在主物理内存的值为 z3，那么交换成 l4</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">44</span>, <span class="hljs-string">&quot;l4&quot;</span>);<br>            <span class="hljs-keyword">if</span> (atomicReference.compareAndSet(s1, s2)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(atomicReference.get());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>AtomicStampedReference</code> 类：在 <code>AtomicReference</code> 基础上，加上版本号，防止 <code>ABA</code> 问题；</p><p><code>AtomicMarkableReference</code> 类：在 <code>AtomicStampedReference</code> 基础上，简化了一下，只关心有没有被修改过；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AtomicStampedReference 构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicStampedReference</span><span class="hljs-params">(V initialRef, <span class="hljs-type">int</span> initialStamp)</span> &#123;<br>    pair = Pair.of(initialRef, initialStamp);<br>&#125;<br><br><span class="hljs-comment">// AtomicMarkableReference 构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicMarkableReference</span><span class="hljs-params">(V initialRef, <span class="hljs-type">boolean</span> initialMark)</span> &#123;<br>    pair = Pair.of(initialRef, initialMark);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h4><p>原子数组类：<code>AtomicIntegerArray</code>、<code>AtomicLongArray</code>、<code>AtomicReferenceArray</code></p><p><code>AtomicIntegerArray</code> 类方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*   ithe index</span><br><span class="hljs-comment">* expect the expected value</span><br><span class="hljs-comment">* update the new value</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>    <span class="hljs-keyword">return</span> compareAndSetRaw(checkedByteOffset(i), expect, update);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子更新器"><a href="#原子更新器" class="headerlink" title="原子更新器"></a>原子更新器</h4><p>原子更新器类：<code>AtomicReferenceFieldUpdater</code>、<code>AtomicIntegerFieldUpdater</code>、<code>AtomicLongFieldUpdater</code></p><p>利用字段更新器，可以针对对象的某个域（<code>Field</code>）进行原子操作，<u>必须配合 <code>volatile</code> 修饰的字段使用</u>，否则会出现异常 <code>IllegalArgumentException: Must be volatile type</code></p><p>常用 API：</p><ul><li><code>static &lt;U&gt; AtomicIntegerFieldUpdater&lt;U&gt; newUpdater(Class&lt;U&gt; c, String fieldName)</code>：构造方法</li><li><code>abstract boolean compareAndSet(T obj, int expect, int update)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> field; <span class="hljs-comment">// 默认值为 0</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        AtomicIntegerFieldUpdater&lt;UpdateDemo&gt; fieldUpdater = AtomicIntegerFieldUpdater<br>                .newUpdater(UpdateDemo.class, <span class="hljs-string">&quot;field&quot;</span>);<br>        <span class="hljs-type">UpdateDemo</span> <span class="hljs-variable">updateDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateDemo</span>();<br>        fieldUpdater.compareAndSet(updateDemo, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>        System.out.println(updateDemo.field); <span class="hljs-comment">//修改成功，由 0 变成 10 </span><br>        <span class="hljs-comment">// 如果一开始默认值不是0，那么就会修改失败</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子累加器"><a href="#原子累加器" class="headerlink" title="原子累加器"></a>原子累加器</h4><p>原子累加器类：<code>LongAdder</code>、<code>DoubleAdder</code>、<code>LongAccumulator</code>、<code>DoubleAccumulator </code></p><p><code>LongAdder</code> 和 <code>LongAccumulator</code> 区别：</p><p>相同点：</p><ul><li><code>LongAddr</code> 与 <code>LongAccumulator</code> 类都是使用非阻塞算法 CAS 实现的</li><li><code>LongAddr</code> 类是 <code>LongAccumulator</code> 类的一个特例，只是 <code>LongAccumulator</code> 提供了更强大的功能，可以自定义累加规则，当 <code>accumulatorFunction</code> 为 <code>null</code> 时就等价于 <code>LongAddr</code></li></ul><p>不同点：</p><ul><li>调用 <code>casBase</code> 时，<code>LongAccumulator</code> 使用 <code>function.applyAsLong(b = base, x)</code> 来计算，<code>LongAddr</code> 使用 <code>casBase(b = base, b + x)</code> </li><li><code>LongAccumulator</code> 类功能更加强大，构造方法参数中<ul><li><code>accumulatorFunction</code> 是一个双目运算器接口，可以指定累加规则，比如累加或者相乘，其根据输入的两个参数返回一个计算值，<code>LongAdder</code> 内置累加规则</li><li><code>identity</code> 则是 <code>LongAccumulator</code> 累加器的初始值，<code>LongAccumulator</code> 可以为累加器提供非0的初始值，而 <code>LongAdder</code> 只能提供默认的 0</li></ul></li></ul><h3 id="5-3-LongAdder"><a href="#5-3-LongAdder" class="headerlink" title="5.3 LongAdder"></a>5.3 LongAdder</h3><h4 id="优化机制"><a href="#优化机制" class="headerlink" title="优化机制"></a>优化机制</h4><p><code>LongAdder</code> 是 <code>Java8</code> 提供的类，跟 <code>AtomicLong</code> 有相同的效果，但对 CAS 机制进行了优化，尝试使用分段 CAS 以及自动分段迁移的方式来大幅度提升多线程高并发执行 CAS 操作的性能</p><p>CAS 底层实现是在一个循环中不断地尝试修改目标值，直到修改成功。如果竞争不激烈修改成功率很高，否则失败率很高，失败后这些重复的原子性操作会耗费性能（导致大量线程<strong>空循环，自旋转</strong>）</p><p>优化核心思想：数据分离，将 <code>AtomicLong</code> 的<strong>单点的更新压力分担到各个节点，空间换时间</strong>，在低并发的时候直接更新，可以保障和 <code>AtomicLong</code> 的性能基本一致，而在高并发的时候通过分散减少竞争，提高了性能</p><p><strong>分段 CAS 机制</strong>：</p><ul><li>在发生竞争时，创建 Cell 数组用于将不同线程的操作离散（通过 hash 等算法映射）到不同的节点上</li><li>设置多个累加单元（会根据需要扩容，最大为 CPU 核数），Therad-0 累加 Cell[0]，而 Thread-1 累加 Cell[1] 等，最后将结果汇总</li><li>在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性能</li></ul><p><strong>自动分段迁移机制</strong>：某个 Cell 的 value 执行 CAS 失败，就会自动寻找另一个 Cell 分段内的 value 值进行 CAS 操作</p><h4 id="伪共享-1"><a href="#伪共享-1" class="headerlink" title="伪共享"></a>伪共享</h4><p>Cell 为累加单元：数组访问索引是通过 Thread 里的 threadLocalRandomProbe 域取模实现的，这个域是 ThreadLocalRandom 更新的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Striped64.Cell</span><br><span class="hljs-meta">@sun</span>.misc.Contended <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cell</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> value;<br>    Cell(<span class="hljs-type">long</span> x) &#123; value = x; &#125;<br>    <span class="hljs-comment">// 用 cas 方式进行累加, prev 表示旧值, next 表示新值</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cas</span><span class="hljs-params">(<span class="hljs-type">long</span> prev, <span class="hljs-type">long</span> next)</span> &#123;<br>    <span class="hljs-keyword">return</span> UNSAFE.compareAndSwapLong(<span class="hljs-built_in">this</span>, valueOffset, prev, next);<br>    &#125;<br>    <span class="hljs-comment">// 省略不重要代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Cell 是数组形式，<strong>在内存中是连续存储的</strong>，64 位系统中，一个 Cell 为 24 字节（16 字节的对象头和 8 字节的 value），每一个 cache line 为 64 字节，因此缓存行可以存下 2 个的 Cell 对象，当 Core-0 要修改 Cell[0]、Core-1 要修改 Cell[1]，无论谁修改成功都会导致当前缓存行失效，从而导致对方的数据失效，需要重新去主存获取，影响效率</p><p><img src="/./Resources/JUC-%E4%BC%AA%E5%85%B1%E4%BA%AB1.png"></p><p>@sun.misc.Contended：防止缓存行伪共享，在使用此注解的对象或字段的前后各增加 128 字节大小的 padding，使用 2 倍于大多数硬件缓存行让 CPU 将对象预读至缓存时<strong>占用不同的缓存行</strong>，这样就不会造成对方缓存行的失效</p><p><img src="/./Resources/JUC-%E4%BC%AA%E5%85%B1%E4%BA%AB2.png"></p><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>Striped64 类成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示当前计算机CPU数量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NCPU</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors()<br><span class="hljs-comment">// 累加单元数组, 懒惰初始化</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Cell[] cells;<br><span class="hljs-comment">// 基础值, 如果没有竞争, 则用 cas 累加这个域，当 cells 扩容时，也会将数据写到 base 中</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> base;<br><span class="hljs-comment">// 在 cells 初始化或扩容时只能有一个线程执行, 通过 CAS 更新 cellsBusy 置为 1 来实现一个锁</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> cellsBusy;<br></code></pre></td></tr></table></figure><p>工作流程：</p><ul><li><p>cells 占用内存是相对比较大的，是惰性加载的，在无竞争或者其他线程正在初始化 cells 数组的情况下，直接更新 base 域</p></li><li><p>在第一次发生竞争时（casBase 失败）会创建一个大小为 2 的 cells 数组，将当前累加的值包装为 Cell 对象，放入映射的槽位上</p></li><li><p>分段累加的过程中，如果当前线程对应的 cells 槽位为空，就会新建 Cell 填充，如果出现竞争，就会重新计算线程对应的槽位，继续自旋尝试修改</p></li><li><p>分段迁移后还出现竞争就会扩容 cells 数组长度为原来的两倍，然后 rehash，<strong>数组长度总是 2 的 n 次幂</strong>，默认最大为 CPU 核数，但是可以超过，如果核数是 6 核，数组最长是 8</p></li></ul><p>方法分析：</p><ul><li><p>LongAdder#add：累加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-comment">// as 为累加单元数组的引用，b 为基础值，v 表示期望值</span><br>    <span class="hljs-comment">// m 表示 cells 数组的长度 - 1，a 表示当前线程命中的 cell 单元格</span><br>    Cell[] as; <span class="hljs-type">long</span> b, v; <span class="hljs-type">int</span> m; Cell a;<br>    <br>    <span class="hljs-comment">// cells 不为空说明 cells 已经被初始化，线程发生了竞争，去更新对应的 cell 槽位</span><br>    <span class="hljs-comment">// 进入 || 后的逻辑去更新 base 域，更新失败表示发生竞争进入条件</span><br>    <span class="hljs-keyword">if</span> ((as = cells) != <span class="hljs-literal">null</span> || !casBase(b = base, b + x)) &#123;<br>        <span class="hljs-comment">// uncontended 为 true 表示 cell 没有竞争</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">uncontended</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-comment">// 条件一: true 说明 cells 未初始化，多线程写 base 发生竞争需要进行初始化 cells 数组</span><br>        <span class="hljs-comment">//  fasle 说明 cells 已经初始化，进行下一个条件寻找自己的 cell 去累加</span><br>        <span class="hljs-comment">// 条件二: getProbe() 获取 hash 值，&amp; m 的逻辑和 HashMap 的逻辑相同，保证散列的均匀性</span><br>        <span class="hljs-comment">//   true 说明当前线程对应下标的 cell 为空，需要创建 cell</span><br>        <span class="hljs-comment">//        false 说明当前线程对应的 cell 不为空，进行下一个条件【将 x 值累加到对应的 cell 中】</span><br>        <span class="hljs-comment">// 条件三: 有取反符号，false 说明 cas 成功，直接返回，true 说明失败，当前线程对应的 cell 有竞争</span><br>        <span class="hljs-keyword">if</span> (as == <span class="hljs-literal">null</span> || (m = as.length - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span> ||<br>            (a = as[getProbe() &amp; m]) == <span class="hljs-literal">null</span> ||<br>            !(uncontended = a.cas(v = a.value, v + x)))<br>            longAccumulate(x, <span class="hljs-literal">null</span>, uncontended);<br>        <span class="hljs-comment">// 【uncontended 在对应的 cell 上累加失败的时候才为 false，其余情况均为 true】</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Striped64#longAccumulate：cell 数组创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// x  null false | true</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">longAccumulate</span><span class="hljs-params">(<span class="hljs-type">long</span> x, LongBinaryOperator fn, <span class="hljs-type">boolean</span> wasUncontended)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-comment">// 当前线程还没有对应的 cell, 需要随机生成一个 hash 值用来将当前线程绑定到 cell</span><br>    <span class="hljs-keyword">if</span> ((h = getProbe()) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 初始化 probe，获取 hash 值</span><br>        ThreadLocalRandom.current(); <br>        h = getProbe();<br>        <span class="hljs-comment">// 默认情况下 当前线程肯定是写入到了 cells[0] 位置，不把它当做一次真正的竞争</span><br>        wasUncontended = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 表示【扩容意向】，false 一定不会扩容，true 可能会扩容</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">collide</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-comment">//自旋</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// as 表示cells引用，a 表示当前线程命中的 cell，n 表示 cells 数组长度，v 表示 期望值</span><br>        Cell[] as; Cell a; <span class="hljs-type">int</span> n; <span class="hljs-type">long</span> v;<br>        <span class="hljs-comment">// 【CASE1】: 表示 cells 已经初始化了，当前线程应该将数据写入到对应的 cell 中</span><br>        <span class="hljs-keyword">if</span> ((as = cells) != <span class="hljs-literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// CASE1.1: true 表示当前线程对应的索引下标的 Cell 为 null，需要创建 new Cell</span><br>            <span class="hljs-keyword">if</span> ((a = as[(n - <span class="hljs-number">1</span>) &amp; h]) == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 判断 cellsBusy 是否被锁</span><br>                <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span>) &#123;   <br>                    <span class="hljs-comment">// 创建 cell, 初始累加值为 x</span><br>                    <span class="hljs-type">Cell</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>(x);  <br>                    <span class="hljs-comment">// 加锁</span><br>                    <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; casCellsBusy()) &#123;<br>                        <span class="hljs-comment">// 创建成功标记，进入【创建 cell 逻辑】</span><br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">created</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Cell[] rs; <span class="hljs-type">int</span> m, j;<br>                            <span class="hljs-comment">// 把当前 cells 数组赋值给 rs，并且不为 null</span><br>                            <span class="hljs-keyword">if</span> ((rs = cells) != <span class="hljs-literal">null</span> &amp;&amp;<br>                                (m = rs.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>                                <span class="hljs-comment">// 再次判断防止其它线程初始化过该位置，当前线程再次初始化该位置会造成数据丢失</span><br>                                <span class="hljs-comment">// 因为这里是线程安全的判断，进行的逻辑不会被其他线程影响</span><br>                                rs[j = (m - <span class="hljs-number">1</span>) &amp; h] == <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-comment">// 把新创建的 cell 填充至当前位置</span><br>                                rs[j] = r;<br>                                created = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 表示创建完成</span><br>                            &#125;<br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            cellsBusy = <span class="hljs-number">0</span>;<span class="hljs-comment">// 解锁</span><br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (created)<span class="hljs-comment">// true 表示创建完成，可以推出循环了</span><br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                collide = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// CASE1.2: 条件成立说明线程对应的 cell 有竞争, 改变线程对应的 cell 来重试 cas</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!wasUncontended)<br>                wasUncontended = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// CASE 1.3: 当前线程 rehash 过，如果新命中的 cell 不为空，就尝试累加，false 说明新命中也有竞争</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.cas(v = a.value, ((fn == <span class="hljs-literal">null</span>) ? v + x : fn.applyAsLong(v, x))))<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// CASE 1.4: cells 长度已经超过了最大长度 CPU 内核的数量或者已经扩容</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &gt;= NCPU || cells != as)<br>                collide = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 扩容意向改为false，【表示不能扩容了】</span><br>            <span class="hljs-comment">// CASE 1.5: 更改扩容意向，如果 n &gt;= NCPU，这里就永远不会执行到，case1.4 永远先于 1.5 执行</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!collide)<br>                collide = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// CASE 1.6: 【扩容逻辑】，进行加锁</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; casCellsBusy()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 线程安全的检查，防止期间被其他线程扩容了</span><br>                    <span class="hljs-keyword">if</span> (cells == as) &#123;     <br>                        <span class="hljs-comment">// 扩容为以前的 2 倍</span><br>                        Cell[] rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>[n &lt;&lt; <span class="hljs-number">1</span>];<br>                        <span class="hljs-comment">// 遍历移动值</span><br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i)<br>                            rs[i] = as[i];<br>                        <span class="hljs-comment">// 把扩容后的引用给 cells</span><br>                        cells = rs;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    cellsBusy = <span class="hljs-number">0</span>;<span class="hljs-comment">// 解锁</span><br>                &#125;<br>                collide = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 扩容意向改为 false，表示不扩容了</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 重置当前线程 Hash 值，这就是【分段迁移机制】</span><br>            h = advanceProbe(h);<br>        &#125;<br><br>        <span class="hljs-comment">// 【CASE2】: 运行到这说明 cells 还未初始化，as 为null</span><br>        <span class="hljs-comment">// 判断是否没有加锁，没有加锁就用 CAS 加锁</span><br>        <span class="hljs-comment">// 条件二判断是否其它线程在当前线程给 as 赋值之后修改了 cells，这里不是线程安全的判断</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cellsBusy == <span class="hljs-number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;<br>            <span class="hljs-comment">// 初始化标志，开始 【初始化 cells 数组】</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">init</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">try</span> &#123; <br>               <span class="hljs-comment">// 再次判断 cells == as 防止其它线程已经提前初始化了，当前线程再次初始化导致丢失数据</span><br>                <span class="hljs-comment">// 因为这里是【线程安全的，重新检查，经典 DCL】</span><br>                <span class="hljs-keyword">if</span> (cells == as) &#123;<br>                    Cell[] rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>[<span class="hljs-number">2</span>];<span class="hljs-comment">// 初始化数组大小为2</span><br>                    rs[h &amp; <span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>(x);<span class="hljs-comment">// 填充线程对应的cell</span><br>                    cells = rs;<br>                    init = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 初始化成功，标记置为 true</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                cellsBusy = <span class="hljs-number">0</span>;<span class="hljs-comment">// 解锁啊</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (init)<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">// 初始化成功直接跳出自旋</span><br>        &#125;<br>        <span class="hljs-comment">// 【CASE3】: 运行到这说明其他线程在初始化 cells，当前线程将值累加到 base，累加成功直接结束自旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (casBase(v = base, ((fn == <span class="hljs-literal">null</span>) ? v + x :<br>                                    fn.applyAsLong(v, x))))<br>            <span class="hljs-keyword">break</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>sum：获取最终结果通过 sum 整合，<strong>保证最终一致性，不保证强一致性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<br>    Cell[] as = cells; Cell a;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> base;<br>    <span class="hljs-keyword">if</span> (as != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 遍历 累加</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; as.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> ((a = as[i]) != <span class="hljs-literal">null</span>)<br>                sum += a.value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-4-ABA"><a href="#5-4-ABA" class="headerlink" title="5.4 ABA"></a>5.4 ABA</h3><p><code>ABA</code> 问题：当进行获取主内存值时，该内存值在写入主内存时已经被修改了 N 次，但是最终又改成原来的值</p><p>其他线程先把 A 改成 B 又改回 A，主线程<strong>仅能判断出共享变量的值与最初值 A 是否相同</strong>，不能感知到这种从 A 改为 B 又改回 A 的情况，这时 <code>CAS</code> 虽然成功，<strong>但是过程存在问题</strong>。</p><p><strong>解决办法</strong>：在变量前面追加上<strong>版本号或者时间戳</strong>。在 <code>JDK 1.5</code> 之后引入 <code>AtomicStampedReference</code>  类用来解决 <code>ABA</code> 问题，其中的 <code>compareAndSet()</code> 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><blockquote><p><code>Stamped</code>：时间戳（版本号）</p></blockquote><ul><li><p>构造方法：</p><ul><li><code>public AtomicStampedReference(V initialRef, int initialStamp)</code>：初始值和初始版本号</li></ul></li><li><p>常用API：</p><ul><li><code> public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)</code>：<strong>期望引用和期望版本号都一致</strong>才进行 <code>CAS</code> 修改数据</li><li><code>public void set(V newReference, int newStamp)</code>：设置值和版本号</li><li><code>public V getReference()</code>：返回引用的值</li><li><code>public int getStamp()</code>：返回当前版本号</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    AtomicStampedReference&lt;Integer&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">startStamp</span> <span class="hljs-operator">=</span> atomicReference.getStamp();<br>    <span class="hljs-comment">// 该线程将 100 修改成  101 ，再修改成 100，但是 stamp 改为了102</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicReference.getStamp();<br>        atomicReference.compareAndSet(<span class="hljs-number">100</span>, <span class="hljs-number">101</span>, stamp, stamp + <span class="hljs-number">1</span>);<br>        stamp = atomicReference.getStamp();<br>        atomicReference.compareAndSet(<span class="hljs-number">101</span>, <span class="hljs-number">100</span>, stamp, stamp + <span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>    <span class="hljs-comment">//  此时该线程拿到的值尽管是100，但是由于 startStamp 不再是最开始的 100，导致修改失败。</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!atomicReference.compareAndSet(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, startStamp, startStamp + <span class="hljs-number">1</span>)) &#123;<br>            System.out.println(atomicReference.getReference());<span class="hljs-comment">//100</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程修改失败&quot;</span>);<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-Unsafe"><a href="#5-5-Unsafe" class="headerlink" title="5.5 Unsafe"></a>5.5 Unsafe</h3><p>Unsafe 是 CAS 的核心类，由于 Java 无法直接访问底层系统，需要通过本地（Native）方法来访问</p><p>Unsafe 类存在 sun.misc 包，其中所有方法都是 native 修饰的，都是直接调用<strong>操作系统底层资源</strong>执行相应的任务，基于该类可以直接操作特定的内存数据，其内部方法操作类似 C 的指针</p><p>模拟实现原子整数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">MyAtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAtomicInteger</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (atomicInteger.compareAndSwap(<span class="hljs-number">20</span>)) &#123;<br>        System.out.println(atomicInteger.getValue());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomicInteger</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe UNSAFE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> VALUE_OFFSET;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//Unsafe unsafe = Unsafe.getUnsafe()这样会报错，需要反射获取</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>            UNSAFE = (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 获取 value 属性的内存地址，value 属性指向该地址，直接设置该地址的值可以修改 value 的值</span><br>            VALUE_OFFSET = UNSAFE.objectFieldOffset(<br>                   MyAtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAtomicInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> update;<br>            <span class="hljs-comment">//当前对象  内存偏移量    期望值 更新值</span><br>            <span class="hljs-keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="hljs-built_in">this</span>, VALUE_OFFSET, prev, update)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;CAS成功&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6-final"><a href="#5-6-final" class="headerlink" title="5.6 final"></a>5.6 final</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinal</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: aload_0<br><span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span> <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-number">4</span>: aload_0<br><span class="hljs-number">5</span>: bipush <span class="hljs-number">20</span><span class="hljs-comment">// 将值直接放入栈中</span><br><span class="hljs-number">7</span>: putfield #<span class="hljs-number">2</span> <span class="hljs-comment">// Field a:I</span><br>&lt;-- 写屏障: 保证有序性和可见性，禁止乱序和同步到主存<br><span class="hljs-number">10</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p><code>final</code> 变量的赋值通过 <code>putfield</code> 指令来完成，在这条指令之后也会加入写屏障，保证在其它线程读到它的值时不会出现为 0 的情况</p><p>其他线程访问 final 修饰的变量</p><ul><li><strong>复制一份放入栈中</strong>直接访问，效率高</li><li>大于 short 最大值会将其复制到类的常量池，访问时从常量池获取</li></ul><h4 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h4><p>不可变：如果一个对象不能够修改其内部状态（属性），那么就是不可变对象</p><p>不可变对象线程安全的，不存在并发修改和可见性问题，是另一种避免竞争的方式</p><p>String 类也是不可变的，该类和类中所有属性都是 final 的</p><ul><li><p>类用 final 修饰保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性</p></li><li><p>无写入方法（set）确保外部不能对内部属性进行修改</p></li><li><p>属性用 final 修饰保证了该属性是只读的，不能修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改 String 类数据时，会构造新字符串对象，生成新的 char[] value，通过<strong>创建副本对象来避免共享的方式称之为保护性拷贝</strong></p></li></ul><h3 id="5-7-State"><a href="#5-7-State" class="headerlink" title="5.7 State"></a>5.7 State</h3><p>无状态：成员变量保存的数据也可以称为状态信息，无状态就是没有成员变量</p><p>Servlet 为了保证其线程安全，一般不为 Servlet 设置成员变量，这种没有任何成员变量的类是线程安全的</p><h3 id="5-8-ThreadLocal"><a href="#5-8-ThreadLocal" class="headerlink" title="5.8 ThreadLocal"></a>5.8 ThreadLocal</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p><code>ThreadLocal</code> 类用来提供线程内部的局部变量，这种变量在多线程环境下访问（通过 get 和 set 方法访问）时能保证各个线程的变量相对独立于其他线程内的变量，分配在堆内的 <strong>TLAB</strong> 中</p><p><code>ThreadLocal</code> 实例通常来说都是 <code>private</code> <code>static</code> 类型的，属于一个线程的本地变量，用于关联线程和线程上下文。每个线程都会在 ThreadLocal 中保存一份该线程独有的数据，所以是线程安全的</p><p><code>ThreadLocal</code> 作用：</p><ul><li><p>线程并发：应用在多线程并发的场景下</p></li><li><p>传递数据：通过 ThreadLocal 实现在同一线程不同函数或组件中传递公共变量，减少传递复杂度</p></li><li><p>线程隔离：每个线程的变量都是独立的，不会互相影响</p></li></ul><p>对比 synchronized：</p><table><thead><tr><th></th><th>synchronized</th><th>ThreadLocal</th></tr></thead><tbody><tr><td>原理</td><td>同步机制采用<strong>以时间换空间</strong>的方式，只提供了一份变量，让不同的线程排队访问</td><td>ThreadLocal 采用<strong>以空间换时间</strong>的方式，为每个线程都提供了一份变量的副本，从而实现同时访问而相不干扰</td></tr><tr><td>侧重点</td><td>多个线程之间访问资源的同步</td><td>多线程中让每个线程之间的数据相互隔离</td></tr></tbody></table><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>ThreadLocal&lt;&gt;()</code></td><td>创建 ThreadLocal 对象</td></tr><tr><td><code>protected T initialValue()</code></td><td>返回当前线程局部变量的初始值</td></tr><tr><td><code>public void set( T value)</code></td><td>设置当前线程绑定的局部变量</td></tr><tr><td><code>public T get()</code></td><td>获取当前线程绑定的局部变量</td></tr><tr><td><code>public void remove()</code></td><td>移除当前线程绑定的局部变量</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;String&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程绑定的变量</span><br>        <span class="hljs-comment">// return tl.get(); // 正确</span><br>        <span class="hljs-keyword">return</span> content;     <span class="hljs-comment">// 数据错乱</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-comment">// 变量content绑定到当前线程</span><br>        <span class="hljs-comment">// tl.set(content); // 正确</span><br>        <span class="hljs-built_in">this</span>.content = content; <span class="hljs-comment">// 数据错乱，在run方法内部使用同步代码块可以解决，但是效率太低了</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDemo</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-comment">// 设置数据</span><br>                    demo.setContent(Thread.currentThread().getName() + <span class="hljs-string">&quot;的数据&quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + demo.getContent());<br>                &#125;<br>            &#125;);<br>            thread.setName(<span class="hljs-string">&quot;线程&quot;</span> + i);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>ThreadLocal 适用于下面两种场景：</p><ul><li>每个线程需要有自己单独的实例</li><li>实例需要在多个方法中共享，但不希望被多线程共享</li></ul><p>ThreadLocal 方案有两个突出的优势： </p><ol><li>传递数据：保存每个线程绑定的数据，在需要的地方可以直接获取，避免参数直接传递带来的代码耦合问题</li><li>线程隔离：各线程之间的数据相互隔离却又具备并发性，避免同步方式带来的性能损失</li></ol><p>ThreadLocal 用于数据连接的事务管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-comment">// ThreadLocal对象，将connection绑定在当前线程中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>();<br>    <span class="hljs-comment">// c3p0 数据库连接池对象属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>    <span class="hljs-comment">// 获取连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//取出当前线程绑定的connection对象</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> tl.get();<br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//如果没有，则从连接池中取出</span><br>            conn = ds.getConnection();<br>            <span class="hljs-comment">//再将connection对象绑定到当前线程中，非常重要的操作</span><br>            tl.set(conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>用 ThreadLocal 使 SimpleDateFormat 从独享变量变成单个线程变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalDateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;DateFormat&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> DateFormat <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title function_">parse</span><span class="hljs-params">(String dateStr)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get().parse(dateStr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(Date date)</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get().format(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h5><p>JDK8 以前：每个 ThreadLocal 都创建一个 Map，然后用线程作为 Map 的 key，要存储的局部变量作为 Map 的 value，达到各个线程的局部变量隔离的效果。这种结构会造成 Map 结构过大和内存泄露，因为 Thread 停止后无法通过 key 删除对应的数据</p><p><img src="/./Resources/JUC-ThreadLocal%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK8%E5%89%8D.png"></p><p>JDK8 以后：每个 Thread 维护一个 ThreadLocalMap，这个 Map 的 key 是 ThreadLocal 实例本身，value 是真正要存储的值</p><ul><li><strong>每个 Thread 线程内部都有一个 Map (ThreadLocalMap)</strong></li><li>Map 里面存储 ThreadLocal 对象（key）和线程的私有变量（value）</li><li>Thread 内部的 Map 是由 ThreadLocal 维护的，由 ThreadLocal 负责向 map 获取和设置线程的变量值</li><li>对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成副本的隔离，互不干扰</li></ul><p><img src="/./Resources/JUC-ThreadLocal%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK8%E5%90%8E.png"></p><p>JDK8 前后对比：</p><ul><li>每个 Map 存储的 Entry 数量会变少，因为之前的存储数量由 Thread 的数量决定，现在由 ThreadLocal 的数量决定，在实际编程当中，往往 ThreadLocal 的数量要少于 Thread 的数量</li><li>当 Thread 销毁之后，对应的 ThreadLocalMap 也会随之销毁，能减少内存的使用，<strong>防止内存泄露</strong></li></ul><blockquote><p>补充：</p><p><code>JDK8</code> 之后的 <code>ThreadLocalMap</code> 有多个 <code>Entry</code> 的原因</p><p>可能在一个线程要维护多个变量，就会创建多个 <code>threadlocal</code>，一个线程一个 <code>ThreadLocalMap</code>，<code>ThreadLocalMap</code> 中的 key 是不同的 <code>threadlocal</code> 对象</p><p>如图，当定义了两个 <code>threadlocal</code> 对象并放入数据时，此时的线程里面的<code>ThreadLocalMap</code>就有了两个 <code>Entry</code></p><p><img src="/./Resources/image-20230727202928832.png" alt="image-20230727202928832"></p></blockquote><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><ul><li><p>Thread 类的相关属性：<strong>每一个线程持有一个 ThreadLocalMap 对象</strong>，存放由 ThreadLocal 和数据组成的 Entry 键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal.<span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">threadLocals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li><p>计算 ThreadLocal 对象的哈希值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">threadLocalHashCode</span> <span class="hljs-operator">=</span> nextHashCode()<br></code></pre></td></tr></table></figure><p>使用 <code>threadLocalHashCode &amp; (table.length - 1)</code> 计算当前 entry 需要存放的位置</p></li><li><p>每创建一个 ThreadLocal 对象就会使用 nextHashCode 分配一个 hash 值给这个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">nextHashCode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>()<br></code></pre></td></tr></table></figure></li><li><p>斐波那契数也叫黄金分割数，hash 的<strong>增量</strong>就是这个数字，带来的好处是 hash 分布非常均匀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HASH_INCREMENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x61c88647</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><p>方法都是线程安全的，因为 ThreadLocal 属于一个线程的，ThreadLocal 中的方法，逻辑都是获取当前线程维护的 ThreadLocalMap 对象，然后进行数据的增删改查，没有指定初始值的 threadlcoal 对象默认赋值为 null</p><ul><li><p>initialValue()：返回该线程局部变量的初始值</p><ul><li>延迟调用的方法，在执行 get 方法时才执行</li><li>该方法缺省（默认）实现直接返回一个 null</li><li>如果想要一个初始值，可以重写此方法， 该方法是一个 <code>protected</code> 的方法，为了让子类覆盖而设计的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>nextHashCode()：计算哈希值，ThreadLocal 的散列方式称之为<strong>斐波那契散列</strong>，每次获取哈希值都会加上 HASH_INCREMENT，这样做可以尽量避免 hash 冲突，让哈希值能均匀的分布在 2 的 n 次方的数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextHashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 哈希值自增一个 HASH_INCREMENT 数值</span><br>    <span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>set()：修改当前线程与当前 threadlocal 对象相关联的线程局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>    <span class="hljs-comment">// 获取当前线程对象</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// 获取此线程对象中维护的 ThreadLocalMap 对象</span><br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-comment">// 判断 map 是否存在</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// 调用 threadLocalMap.set 方法进行重写或者添加</span><br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// map 为空，调用 createMap 进行 ThreadLocalMap 对象的初始化。参数1是当前线程，参数2是局部变量</span><br>        createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前线程 Thread 对应维护的 ThreadLocalMap </span><br>ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br><span class="hljs-comment">// 创建当前线程Thread对应维护的ThreadLocalMap </span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>    <span class="hljs-comment">// 【这里的 this 是调用此方法的 threadLocal】，创建一个新的 Map 并设置第一个数据</span><br>    t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>get()：获取当前线程与当前 ThreadLocal 对象相关联的线程局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-comment">// 如果此map存在</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 以当前的 ThreadLocal 为 key，调用 getEntry 获取对应的存储实体 e</span><br>        ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 对 e 进行判空 </span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 获取存储实体 e 对应的 value值</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*有两种情况有执行当前代码</span><br><span class="hljs-comment">      第一种情况: map 不存在，表示此线程没有维护的 ThreadLocalMap 对象</span><br><span class="hljs-comment">      第二种情况: map 存在, 但是【没有与当前 ThreadLocal 关联的 entry】，就会设置为默认值 */</span><br>    <span class="hljs-comment">// 初始化当前线程与当前 threadLocal 对象相关联的 value</span><br>    <span class="hljs-keyword">return</span> setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用initialValue获取初始化的值，此方法可以被子类重写, 如果不重写默认返回 null</span><br>    <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>    <span class="hljs-comment">// 判断 map 是否初始化过</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// 存在则调用 map.set 设置此实体 entry，value 是默认的值</span><br>        <span class="hljs-comment">// 进来这个方法，说明map存在，但是没有与之匹配的值，那就把默认值当成匹配的值</span><br>        map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 调用 createMap 进行 ThreadLocalMap 对象的初始化中</span><br>        createMap(t, value);<br>    <span class="hljs-comment">// 返回线程与当前 threadLocal 关联的局部变量</span><br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove()：移除当前线程与当前 threadLocal 对象相关联的线程局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前线程对象中维护的 ThreadLocalMap 对象</span><br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>    <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// map 存在则调用 map.remove，this时当前ThreadLocal，以this为key删除对应的实体</span><br>        m.remove(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><p><img src="/./Resources/image-20230727200545289.png" alt="image-20230727200545289"></p><h5 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h5><p>ThreadLocalMap 是 ThreadLocal 的内部类，没有实现 Map 接口，用独立的方式实现了 Map 的功能，其内部 Entry 也是独立实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化当前 map 内部散列表数组的初始长度 16</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><br><span class="hljs-comment">// 存放数据的table，数组长度必须是2的整次幂。</span><br><span class="hljs-keyword">private</span> Entry[] table;<br><br><span class="hljs-comment">// 数组里面 entrys 的个数，可以用于判断 table 当前使用量是否超过阈值</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 进行扩容的阈值，表使用量大于它的时候进行扩容。</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threshold;<br></code></pre></td></tr></table></figure><p>存储结构 Entry：</p><ul><li>Entry 继承 WeakReference，key 是弱引用，目的是将 ThreadLocal 对象的生命周期和线程生命周期解绑</li><li>Entry 限制只能用 ThreadLocal 作为 key，key 为 null (entry.get() &#x3D;&#x3D; null) 意味着 key 不再被引用，entry 也可以从 table 中清除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br>    Object value;<br>    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br>        <span class="hljs-comment">// this.referent = referent = key;</span><br>        <span class="hljs-built_in">super</span>(k);<br>        value = v;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法：延迟初始化的，线程第一次存储 threadLocal - value 时才会创建 threadLocalMap 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>    <span class="hljs-comment">// 初始化table，创建一个长度为16的Entry数组</span><br>    table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[INITIAL_CAPACITY];<br>    <span class="hljs-comment">// 【寻址算法】计算索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 创建 entry 对象，存放到指定位置的 slot 中</span><br>    table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(firstKey, firstValue);<br>    <span class="hljs-comment">// 数据总量是 1</span><br>    size = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 将阈值设置为 （当前数组长度 * 2）/ 3。</span><br>    setThreshold(INITIAL_CAPACITY);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h5><ul><li><p>set()：添加数据，ThreadLocalMap 使用<strong>线性探测法来解决哈希冲突</strong></p><ul><li><p>该方法会一直探测下一个地址，直到有空的地址后插入，若插入后 Map 数量超过阈值，数组会扩容为原来的 2 倍</p><p>假设当前 table 长度为16，计算出来 key 的 hash 值为 14，如果 table[14] 上已经有值，并且其 key 与当前 key 不一致，那么就发生了 hash 冲突，这个时候将 14 加 1 得到 15，取 table[15] 进行判断，如果还是冲突会回到 0，取 table[0]，以此类推，直到可以插入，可以把 Entry[]  table 看成一个<strong>环形数组</strong></p></li><li><p>线性探测法会出现<strong>堆积问题</strong>，可以采取平方探测法解决</p></li><li><p>在探测过程中 ThreadLocal 会复用 key 为 null 的脏 Entry 对象，并进行垃圾清理，防止出现内存泄漏</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>    <span class="hljs-comment">// 获取散列表</span><br>    ThreadLocal.ThreadLocalMap.Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-comment">// 哈希寻址</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 使用线性探测法向后查找元素，碰到 entry 为空时停止探测</span><br>    <span class="hljs-keyword">for</span> (ThreadLocal.ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i]; e != <span class="hljs-literal">null</span>; e = tab[i = nextIndex(i, len)]) &#123;<br>        <span class="hljs-comment">// 获取当前元素 key</span><br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// ThreadLocal 对应的 key 存在，【直接覆盖之前的值】</span><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 【这两个条件谁先成立不一定，所以 replaceStaleEntry 中还需要判断 k == key 的情况】</span><br>        <br>        <span class="hljs-comment">// key 为 null，但是值不为 null，说明之前的 ThreadLocal 对象已经被回收了，当前是【过期数据】</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 【碰到一个过期的 slot，当前数据复用该槽位，替换过期数据】</span><br>            <span class="hljs-comment">// 这个方法还进行了垃圾清理动作，防止内存泄漏</span><br>            replaceStaleEntry(key, value, i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 逻辑到这说明碰到 slot == null 的位置，则在空元素的位置创建一个新的 Entry</span><br>    tab[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br>    <span class="hljs-comment">// 数量 + 1</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> ++size;<br>    <br>    <span class="hljs-comment">// 【做一次启发式清理】，如果没有清除任何 entry 并且【当前使用量达到了负载因子所定义，那么进行 rehash</span><br>    <span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>        <span class="hljs-comment">// 扩容</span><br>        rehash();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取【环形数组】的下一个索引</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-comment">// 索引越界后从 0 开始继续获取</span><br>    <span class="hljs-keyword">return</span> ((i + <span class="hljs-number">1</span> &lt; len) ? i + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在指定位置插入指定的数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceStaleEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value, <span class="hljs-type">int</span> staleSlot)</span> &#123;<br>    <span class="hljs-comment">// 获取散列表</span><br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    Entry e;<br><span class="hljs-comment">// 探测式清理的开始下标，默认从当前 staleSlot 开始</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">slotToExpunge</span> <span class="hljs-operator">=</span> staleSlot;<br>    <span class="hljs-comment">// 以当前 staleSlot 开始【向前迭代查找】，找到索引靠前过期数据，找到以后替换 slotToExpunge 值</span><br>    <span class="hljs-comment">// 【保证在一个区间段内，从最前面的过期数据开始清理】</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> prevIndex(staleSlot, len); (e = tab[i]) != <span class="hljs-literal">null</span>; i = prevIndex(i, len))<br>        <span class="hljs-keyword">if</span> (e.get() == <span class="hljs-literal">null</span>)<br>            slotToExpunge = i;<br><br><span class="hljs-comment">// 以 staleSlot 【向后去查找】，直到碰到 null 为止，还是线性探测</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nextIndex(staleSlot, len); (e = tab[i]) != <span class="hljs-literal">null</span>; i = nextIndex(i, len)) &#123;<br>        <span class="hljs-comment">// 获取当前节点的 key</span><br>        ThreadLocal&lt;?&gt; k = e.get();<br><span class="hljs-comment">// 条件成立说明是【替换逻辑】</span><br>        <span class="hljs-keyword">if</span> (k == key) &#123;<br>            e.value = value;<br>            <span class="hljs-comment">// 因为本来要在 staleSlot 索引处插入该数据，现在找到了i索引处的key与数据一致</span><br>            <span class="hljs-comment">// 但是 i 位置距离正确的位置更远，因为是向后查找，所以还是要在 staleSlot 位置插入当前 entry</span><br>            <span class="hljs-comment">// 然后将 table[staleSlot] 这个过期数据放到当前循环到的 table[i] 这个位置，</span><br>            tab[i] = tab[staleSlot];<br>            tab[staleSlot] = e;<br><br>            <span class="hljs-comment">// 条件成立说明向前查找过期数据并未找到过期的 entry，但 staleSlot 位置已经不是过期数据了，i 位置才是</span><br>            <span class="hljs-keyword">if</span> (slotToExpunge == staleSlot)<br>                slotToExpunge = i;<br>            <br>            <span class="hljs-comment">// 【清理过期数据，expungeStaleEntry 探测式清理，cleanSomeSlots 启发式清理】</span><br>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><span class="hljs-comment">// 条件成立说明当前遍历的 entry 是一个过期数据，并且该位置前面也没有过期数据</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span> &amp;&amp; slotToExpunge == staleSlot)<br>            <span class="hljs-comment">// 探测式清理过期数据的开始下标修改为当前循环的 index，因为 staleSlot 会放入要添加的数据</span><br>            slotToExpunge = i;<br>    &#125;<br><span class="hljs-comment">// 向后查找过程中并未发现 k == key 的 entry，说明当前是一个【取代过期数据逻辑】</span><br>    <span class="hljs-comment">// 删除原有的数据引用，防止内存泄露</span><br>    tab[staleSlot].value = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// staleSlot 位置添加数据，【上面的所有逻辑都不会更改 staleSlot 的值】</span><br>    tab[staleSlot] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br><br>    <span class="hljs-comment">// 条件成立说明除了 staleSlot 以外，还发现其它的过期 slot，所以要【开启清理数据的逻辑】</span><br>    <span class="hljs-keyword">if</span> (slotToExpunge != staleSlot)<br>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-replaceStaleEntry%E6%B5%81%E7%A8%8B.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prevIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-comment">// 形成一个环绕式的访问，头索引越界后置为尾索引</span><br>    <span class="hljs-keyword">return</span> ((i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>) ? i - <span class="hljs-number">1</span> : len - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>getEntry()：ThreadLocal 的 get 方法以当前的 ThreadLocal 为 key，调用 getEntry 获取对应的存储实体 e</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Entry <span class="hljs-title function_">getEntry</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    <span class="hljs-comment">// 哈希寻址</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 访问散列表中指定指定位置的 slot </span><br>    <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> table[i];<br>    <span class="hljs-comment">// 条件成立，说明 slot 有值并且 key 就是要寻找的 key，直接返回</span><br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == key)<br>        <span class="hljs-keyword">return</span> e;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// 进行线性探测</span><br>        <span class="hljs-keyword">return</span> getEntryAfterMiss(key, i, e);<br>&#125;<br><span class="hljs-comment">// 线性探测寻址</span><br><span class="hljs-keyword">private</span> Entry <span class="hljs-title function_">getEntryAfterMiss</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, <span class="hljs-type">int</span> i, Entry e)</span> &#123;<br>    <span class="hljs-comment">// 获取散列表</span><br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br><br>    <span class="hljs-comment">// 开始遍历，碰到 slot == null 的情况，搜索结束</span><br>    <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 获取当前 slot 中 entry 对象的 key</span><br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// 条件成立说明找到了，直接返回</span><br>        <span class="hljs-keyword">if</span> (k == key)<br>            <span class="hljs-keyword">return</span> e;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>)<br>             <span class="hljs-comment">// 过期数据，【探测式过期数据回收】</span><br>            expungeStaleEntry(i);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 更新 index 继续向后走</span><br>            i = nextIndex(i, len);<br>        <span class="hljs-comment">// 获取下一个槽位中的 entry</span><br>        e = tab[i];<br>    &#125;<br>    <span class="hljs-comment">// 说明当前区段没有找到相应数据</span><br>    <span class="hljs-comment">// 【因为存放数据是线性的向后寻找槽位，都是紧挨着的，不可能越过一个 空槽位 在后面放】，可以减少遍历的次数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>rehash()：触发一次全量清理，如果数组长度大于等于长度的 <code>2/3 * 3/4 = 1/2</code>，则进行 resize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rehash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 清楚当前散列表内的【所有】过期的数据</span><br>    expungeStaleEntries();<br>    <br>    <span class="hljs-comment">// threshold = len * 2 / 3，就是 2/3 * (1 - 1/4)</span><br>    <span class="hljs-keyword">if</span> (size &gt;= threshold - threshold / <span class="hljs-number">4</span>)<br>        resize();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expungeStaleEntries</span><span class="hljs-params">()</span> &#123;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-comment">// 【遍历所有的槽位，清理过期数据】</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[j];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == <span class="hljs-literal">null</span>)<br>            expungeStaleEntry(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Entry <strong>数组为扩容为原来的 2 倍</strong> ，重新计算 key 的散列值，如果遇到 key 为 null 的情况，会将其 value 也置为 null，帮助 GC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">()</span> &#123;<br>    Entry[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldLen</span> <span class="hljs-operator">=</span> oldTab.length;<br>    <span class="hljs-comment">// 新数组的长度是老数组的二倍</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newLen</span> <span class="hljs-operator">=</span> oldLen * <span class="hljs-number">2</span>;<br>    Entry[] newTab = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newLen];<br>    <span class="hljs-comment">// 统计新table中的entry数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历老表，进行【数据迁移】</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldLen; ++j) &#123;<br>        <span class="hljs-comment">// 访问老表的指定位置的 entry</span><br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> oldTab[j];<br>        <span class="hljs-comment">// 条件成立说明老表中该位置有数据，可能是过期数据也可能不是</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            ThreadLocal&lt;?&gt; k = e.get();<br>            <span class="hljs-comment">// 过期数据</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>                e.value = <span class="hljs-literal">null</span>; <span class="hljs-comment">// Help the GC</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 非过期数据，在新表中进行哈希寻址</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> k.threadLocalHashCode &amp; (newLen - <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 【线程探测】</span><br>                <span class="hljs-keyword">while</span> (newTab[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, newLen);<br>                <span class="hljs-comment">// 将数据存放到新表合适的 slot 中</span><br>                newTab[h] = e;<br>                count++;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 设置下一次触发扩容的指标：threshold = len * 2 / 3;</span><br>    setThreshold(newLen);<br>    size = count;<br>    <span class="hljs-comment">// 将扩容后的新表赋值给 threadLocalMap 内部散列表数组引用</span><br>    table = newTab;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove()：删除 Entry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key)</span> &#123;<br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-comment">// 哈希寻址</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i]; e != <span class="hljs-literal">null</span>; e = tab[i = nextIndex(i, len)]) &#123;<br>        <span class="hljs-comment">// 找到了对应的 key</span><br>        <span class="hljs-keyword">if</span> (e.get() == key) &#123;<br>            <span class="hljs-comment">// 设置 key 为 null</span><br>            e.clear();<br>            <span class="hljs-comment">// 探测式清理</span><br>            expungeStaleEntry(i);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="清理方法"><a href="#清理方法" class="headerlink" title="清理方法"></a>清理方法</h5><ul><li><p>探测式清理：沿着开始位置向后探测清理过期数据，沿途中碰到未过期数据则将此数据 rehash 在 table 数组中的定位，重定位后的元素理论上更接近 <code>i = entry.key &amp; (table.length - 1)</code>，让<strong>数据的排列更紧凑</strong>，会优化整个散列表查询性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// table[staleSlot] 是一个过期数据，以这个位置开始继续向后查找过期数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">expungeStaleEntry</span><span class="hljs-params">(<span class="hljs-type">int</span> staleSlot)</span> &#123;<br>    <span class="hljs-comment">// 获取散列表和数组长度</span><br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br><br>    <span class="hljs-comment">// help gc，先把当前过期的 entry 置空，在取消对 entry 的引用</span><br>    tab[staleSlot].value = <span class="hljs-literal">null</span>;<br>    tab[staleSlot] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 数量-1</span><br>    size--;<br><br>    Entry e;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">// 从 staleSlot 开始向后遍历，直到碰到 slot == null 结束，【区间内清理过期数据】</span><br>    <span class="hljs-keyword">for</span> (i = nextIndex(staleSlot, len); (e = tab[i]) != <span class="hljs-literal">null</span>; i = nextIndex(i, len)) &#123;<br>        ThreadLocal&lt;?&gt; k = e.get();<br>        <span class="hljs-comment">// 当前 entry 是过期数据</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// help gc</span><br>            e.value = <span class="hljs-literal">null</span>;<br>            tab[i] = <span class="hljs-literal">null</span>;<br>            size--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前 entry 不是过期数据的逻辑，【rehash】</span><br>            <span class="hljs-comment">// 重新计算当前 entry 对应的 index</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> k.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 条件成立说明当前 entry 存储时发生过 hash 冲突，向后偏移过了</span><br>            <span class="hljs-keyword">if</span> (h != i) &#123;<br>                <span class="hljs-comment">// 当前位置置空</span><br>                tab[i] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">// 以正确位置 h 开始，向后查找第一个可以存放 entry 的位置</span><br>                <span class="hljs-keyword">while</span> (tab[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, len);<br>                <span class="hljs-comment">// 将当前元素放入到【距离正确位置更近的位置，有可能就是正确位置】</span><br>                tab[h] = e;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 返回 slot = null 的槽位索引，图例是 7，这个索引代表【索引前面的区间已经清理完成垃圾了】</span><br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230727210729779.png" alt="image-20230727210729779"></p><p><img src="/./Resources/image-20230727210735209.png" alt="image-20230727210735209"></p></li><li><p>启发式清理：向后循环扫描过期数据，发现过期数据调用探测式清理方法，如果连续几次的循环都没有发现过期数据，就停止扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  i 表示启发式清理工作开始位置，一般是空 slot，n 一般传递的是 table.length </span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cleanSomeSlots</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 表示启发式清理工作是否清除了过期数据</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 获取当前 map 的散列表引用</span><br>    Entry[] tab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 获取下一个索引，因为探测式返回的 slot 为 null</span><br>        i = nextIndex(i, len);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>        <span class="hljs-comment">// 条件成立说明是过期的数据，key 被 gc 了</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span> &amp;&amp; e.get() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 【发现过期数据重置 n 为数组的长度】</span><br>            n = len;<br>            <span class="hljs-comment">// 表示清理过过期数据</span><br>            removed = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 以当前过期的 slot 为开始节点 做一次探测式清理工作</span><br>            i = expungeStaleEntry(i);<br>        &#125;<br>        <span class="hljs-comment">// 假设 table 长度为 16</span><br>        <span class="hljs-comment">// 16 &gt;&gt;&gt; 1 ==&gt; 8，8 &gt;&gt;&gt; 1 ==&gt; 4，4 &gt;&gt;&gt; 1 ==&gt; 2，2 &gt;&gt;&gt; 1 ==&gt; 1，1 &gt;&gt;&gt; 1 ==&gt; 0</span><br>        <span class="hljs-comment">// 连续经过这么多次循环【没有扫描到过期数据】，就停止循环，扫描到空 slot 不算，因为不是过期数据</span><br>    &#125; <span class="hljs-keyword">while</span> ((n &gt;&gt;&gt;= <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// 返回清除标记</span><br>    <span class="hljs-keyword">return</span> removed;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>参考视频：<a href="https://space.bilibili.com/457326371/">https://space.bilibili.com/457326371/</a></p><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p>Memory leak：内存泄漏是指程序中动态分配的堆内存由于某种原因未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果，内存泄漏的堆积终将导致内存溢出</p><ul><li><p>如果 key 使用强引用：使用完 ThreadLocal ，threadLocal Ref 被回收，但是 threadLocalMap 的 Entry 强引用了 threadLocal，造成 threadLocal 无法被回收，无法完全避免内存泄漏</p><p><img src="/./Resources/image-20230727210707562.png" alt="image-20230727210707562"></p></li><li><p>如果 key 使用弱引用：使用完 ThreadLocal ，threadLocal Ref 被回收，ThreadLocalMap 只持有 ThreadLocal 的弱引用，所以threadlocal 也可以被回收，此时 Entry 中的 key &#x3D; null。但没有手动删除这个 Entry 或者 CurrentThread 依然运行，依然存在强引用链，value 不会被回收，而这块 value 永远不会被访问到，也会导致 value 内存泄漏</p><p><img src="/./Resources/image-20230727210715200.png" alt="image-20230727210715200"></p></li><li><p>两个主要原因：</p><ul><li>没有手动删除这个 Entry</li><li>CurrentThread 依然运行</li></ul></li></ul><p>根本原因：ThreadLocalMap 是 Thread的一个属性，<strong>生命周期跟 Thread 一样长</strong>，如果没有手动删除对应 Entry 就会导致内存泄漏</p><p>解决方法：使用完 ThreadLocal 中存储的内容后将它 remove 掉就可以</p><p>ThreadLocal 内部解决方法：在 ThreadLocalMap 中的 set&#x2F;getEntry 方法中，通过线性探测法对 key 进行判断，如果 key 为 null（ThreadLocal 为 null）会对 Entry 进行垃圾回收。所以<strong>使用弱引用比强引用多一层保障</strong>，就算不调用 remove，也有机会进行 GC</p><h4 id="变量传递"><a href="#变量传递" class="headerlink" title="变量传递"></a>变量传递</h4><h5 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h5><p>父子线程：创建子线程的线程是父线程，比如实例中的 main 线程就是父线程</p><p>ThreadLocal 中存储的是线程的局部变量，如果想<strong>实现线程间局部变量传递</strong>可以使用 InheritableThreadLocal 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ThreadLocal&lt;String&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;&gt;();<br>    threadLocal.set(<span class="hljs-string">&quot;父线程设置的值&quot;</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;子线程输出：&quot;</span> + threadLocal.get())).start();<br>&#125;<br><span class="hljs-comment">// 子线程输出：父线程设置的值</span><br></code></pre></td></tr></table></figure><h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><p>InheritableThreadLocal 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">childValue</span><span class="hljs-params">(T parentValue)</span> &#123;<br>        <span class="hljs-keyword">return</span> parentValue;<br>    &#125;<br>    ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>       <span class="hljs-keyword">return</span> t.inheritableThreadLocals;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>        t.inheritableThreadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现父子线程间的局部变量共享需要追溯到 Thread 对象的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name, <span class="hljs-type">long</span> stackSize, AccessControlContext acc,</span><br><span class="hljs-params">                  // 该参数默认是 <span class="hljs-literal">true</span></span><br><span class="hljs-params">                  <span class="hljs-type">boolean</span> inheritThreadLocals)</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> currentThread();<br><br>    <span class="hljs-comment">// 判断父线程（创建子线程的线程）的 inheritableThreadLocals 属性不为 null</span><br>    <span class="hljs-keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 复制父线程的 inheritableThreadLocals 属性，实现父子线程局部变量共享</span><br>        <span class="hljs-built_in">this</span>.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals); <br>    &#125;<br>    <span class="hljs-comment">// ..</span><br>&#125;<br><span class="hljs-comment">// 【本质上还是创建 ThreadLocalMap，只是把父类中的可继承数据设置进去了】</span><br><span class="hljs-keyword">static</span> ThreadLocalMap <span class="hljs-title function_">createInheritedMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(parentMap);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">ThreadLocalMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span> &#123;<br>    <span class="hljs-comment">// 获取父线程的哈希表</span><br>    Entry[] parentTable = parentMap.table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> parentTable.length;<br>    setThreshold(len);<br>    table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[len];<br><span class="hljs-comment">// 【逐个复制父线程 ThreadLocalMap 中的数据】</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> parentTable[j];<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();<br>            <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 调用的是 InheritableThreadLocal#childValue(T parentValue)</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> key.childValue(e.value);<br>                <span class="hljs-type">Entry</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(key, value);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len - <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 线性探测</span><br>                <span class="hljs-keyword">while</span> (table[h] != <span class="hljs-literal">null</span>)<br>                    h = nextIndex(h, len);<br>                table[h] = c;<br>                size++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/feichitianxia/article/details/110495764">https://blog.csdn.net/feichitianxia/article/details/110495764</a></p><h2 id="六、线程池"><a href="#六、线程池" class="headerlink" title="六、线程池"></a>六、线程池</h2><h3 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h3><p>线程池：一个容纳多个线程的容器，容器中的线程可以重复使用，省去了频繁创建和销毁线程对象的操作</p><p>线程池作用：</p><ol><li>降低资源消耗，减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务</li><li>提高响应速度，当任务到达时，如果有线程可以直接用，不会出现系统僵死</li><li>提高线程的可管理性，如果无限制的创建线程，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ol><p>线程池的核心思想：<strong>线程复用</strong>，同一个线程可以被重复使用，来处理多个任务</p><p>池化技术 (<code>Pool</code>) ：一种编程技巧，核心思想是<strong>资源复用</strong>，在请求量大时能优化应用性能，降低系统频繁建连的资源开销</p><h3 id="Executor-框架介绍"><a href="#Executor-框架介绍" class="headerlink" title="Executor 框架介绍"></a>Executor 框架介绍</h3><p><code>Executor</code> 框架是 Java5 之后引进的，在 Java 5 之后，通过 <code>Executor</code> 来启动线程比使用 <code>Thread</code> 的 <code>start</code> 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题。</p><p><code>Executor</code> 框架不仅包括了线程池的管理，还提供了线程工厂、队列以及拒绝策略等，<code>Executor</code> 框架让并发编程变得更加简单。</p><p><code>Executor</code> 框架结构主要由三大部分组成：</p><p><strong>1、任务(<code>Runnable</code> &#x2F;<code>Callable</code>)</strong></p><p>执行任务需要实现的 <strong><code>Runnable</code> 接口</strong> 或 <strong><code>Callable</code>接口</strong>。**<code>Runnable</code> 接口**或 <strong><code>Callable</code> 接口</strong> 实现类都可以被 <strong><code>ThreadPoolExecutor</code></strong> 或 <strong><code>ScheduledThreadPoolExecutor</code></strong> 执行。</p><p><strong>2、任务的执行(<code>Executor</code>)</strong></p><p>如下图所示，包括任务执行机制的核心接口 <strong><code>Executor</code></strong> ，以及继承自 <code>Executor</code> 接口的 <strong><code>ExecutorService</code> 接口。<code>ThreadPoolExecutor</code></strong> 和 <strong><code>ScheduledThreadPoolExecutor</code></strong> 这两个关键类实现了 <strong><code>ExecutorService</code></strong> 接口。</p><p><img src="/./Resources/executor-class-diagram.png" alt="img"></p><p>这里提到了很多底层的类关系，但是，实际上我们需要更多关注的是  <code>ThreadPoolExecutor</code> 这个类，这个类在我们实际使用线程池的过程中，使用频率还是非常高的。</p><p><strong>注意：</strong> 通过查看 <code>ScheduledThreadPoolExecutor</code> 源代码我们发现 <code>ScheduledThreadPoolExecutor</code> 实际上是继承了 <code>ThreadPoolExecutor</code> 并实现了 <code>ScheduledExecutorService</code> ，而 <code>ScheduledExecutorService</code> 又实现了 <code>ExecutorService</code>，正如我们上面给出的类关系图显示的一样。</p><p><code>ThreadPoolExecutor</code> 类描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AbstractExecutorService实现了ExecutorService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExecutorService</span><br></code></pre></td></tr></table></figure><p><code>ScheduledThreadPoolExecutor</code> 类描述:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ScheduledExecutorService继承ExecutorService接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadPoolExecutor</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ScheduledExecutorService</span><br></code></pre></td></tr></table></figure><p><strong>3、异步计算的结果(<code>Future</code>)</strong></p><p><strong><code>Future</code></strong> 接口以及 <code>Future</code> 接口的实现类 <strong><code>FutureTask</code></strong> 类都可以代表异步计算的结果。</p><p>当我们把 <strong><code>Runnable</code>接口</strong> 或 <strong><code>Callable</code> 接口</strong> 的实现类提交给 <strong><code>ThreadPoolExecutor</code></strong> 或 <strong><code>ScheduledThreadPoolExecutor</code></strong> 执行。（调用 <code>submit()</code> 方法时会返回一个 <strong><code>FutureTask</code></strong> 对象）</p><p><strong><code>Executor</code> 框架的使用示意图</strong>：</p><p><img src="/./Resources/Executor%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE-36e59afa.png" alt="Executor 框架的使用示意图"></p><ol><li>主线程首先要创建实现 <code>Runnable</code> 或者 <code>Callable</code> 接口的任务对象。</li><li>把创建完成的实现 <code>Runnable</code>&#x2F;<code>Callable</code> 接口的对象直接交给 <code>ExecutorService</code> 执行: <code>ExecutorService.execute（Runnable command）</code>）或者也可以把 <code>Runnable</code> 对象或<code>Callable</code> 对象提交给 <code>ExecutorService</code> 执行（<code>ExecutorService.submit（Runnable task）</code>或 <code>ExecutorService.submit（Callable &lt;T&gt; task）</code>）。</li><li>如果执行 <code>ExecutorService.submit（…）</code>，<code>ExecutorService</code> 将返回一个实现<code>Future</code>接口的对象（我们刚刚也提到过了执行 <code>execute()</code>方法和 <code>submit()</code>方法的区别，<code>submit()</code>会返回一个 <code>FutureTask</code> 对象。由于 <code>FutureTask</code> 实现了 <code>Runnable</code>，我们也可以创建 <code>FutureTask</code>，然后直接交给 <code>ExecutorService</code> 执行。</li><li>最后，主线程可以执行 <code>FutureTask.get()</code>方法来等待任务执行完成。主线程也可以执行 <code>FutureTask.cancel（boolean mayInterruptIfRunning）</code>来取消此任务的执行。</li></ol><h3 id="ThreadPoolExecutor-类"><a href="#ThreadPoolExecutor-类" class="headerlink" title="ThreadPoolExecutor 类"></a>ThreadPoolExecutor 类</h3><p>线程池实现类 <code>ThreadPoolExecutor</code> 是 <code>Executor</code> 框架最核心的类。</p><h4 id="构造方法介绍"><a href="#构造方法介绍" class="headerlink" title="构造方法介绍"></a>构造方法介绍</h4><p><code>ThreadPoolExecutor</code> 类中提供的四个构造方法。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生（其他几个构造方法说白点都是给定某些默认参数的构造方法比如默认制定拒绝策略是什么）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,//线程池的核心线程数量</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,//线程池的最大线程数</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span><br><span class="hljs-params">                          TimeUnit unit,//时间单位</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span><br><span class="hljs-params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span><br><span class="hljs-params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span><br><span class="hljs-params">                           )</span> <br></code></pre></td></tr></table></figure><p><strong>参数介绍：</strong></p><ul><li><p>⭐<code>corePoolSize</code>：<strong>核心线程数</strong>，定义了最小可以同时运行的线程数量</p></li><li><p>⭐<code>maximumPoolSize</code>：<strong>最大线程数</strong>，当队列中存放的任务达到队列容量时，当前可以同时运行的数量变为最大线程数，创建线程并立即执行最新的任务，与核心线程数之间的差值又叫救急线程数</p></li><li><p><code>keepAliveTime</code>：救急线程<strong>最大存活时间</strong>，当线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等到 <code>keepAliveTime</code> 时间超过销毁</p></li><li><p><code>unit</code>：<code>keepAliveTime</code> 参数的<strong>时间单位</strong></p></li><li><p>⭐<code>workQueue</code>：<strong>阻塞队列</strong>，存放被提交但尚未被执行的任务</p></li><li><p><code>threadFactory</code>：<strong>线程工厂</strong>，创建新线程时用到，可以为线程创建时起名字</p></li><li><p><code>handler</code>：<strong>拒绝策略</strong>，线程到达最大线程数仍有新任务时会执行拒绝策略</p></li></ul><p><strong><code>ThreadPoolExecutor</code> 拒绝策略定义：</strong>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，会触发拒绝策略(<code>RejectedExecutionHandler</code>)，该接口有以下四个实现类</p><ul><li><code>AbortPolicy</code>：让调用者抛出 <code>RejectedExecutionException</code> 异常，<strong>默认策略</strong></li><li><code>CallerRunsPolicy</code>：让调用者运行的调节机制，将某些任务回退到调用者，从而降低新任务的流量</li><li><code>DiscardPolicy</code>：直接丢弃任务，不予任何处理也不抛出异常</li><li><code>DiscardOldestPolicy</code>：放弃队列中最早的任务，把当前任务加入队列中尝试再次提交当前任务</li></ul><p><strong>补充：其他框架拒绝策略</strong></p><ul><li><code>Dubbo</code>：在抛出 <code>RejectedExecutionException</code> 异常前记录日志，并 dump 线程栈信息，方便定位问题</li><li><code>Netty</code>：创建一个新线程来执行任务</li><li><code>ActiveMQ</code>：带超时等待（60s）尝试放入队列</li><li><code>PinPoint</code>：它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略</li></ul><p>线程池工作方式图示：</p><p><img src="/./Resources/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F.jpg" alt="线程池工作方式"></p><p>工作原理：</p><p><img src="/./Resources/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><ol><li><p>创建线程池，这时没有创建线程（<strong>懒惰</strong>），等待提交过来的任务请求，调用 <code>execute()</code> 方法才会创建线程</p></li><li><p>当调用 <code>execute()</code> 方法添加一个请求任务时，线程池会做如下判断：</p><ul><li>如果正在运行的线程数量小于 <code>corePoolSize</code>，那么马上创建线程运行这个任务</li><li>如果正在运行的线程数量大于或等于 <code>corePoolSize</code>，那么将这个任务放入队列</li><li>如果这时队列满了且正在运行的线程数量还小于 <code>maximumPoolSize</code>，那么会创建非核心线程(救急线程)<strong>立刻运行这个任务</strong>，对于阻塞队列中的任务不公平。这是因为创建每个 Worker（线程）对象会绑定一个初始任务，启动 Worker 时会优先执行</li><li>如果队列满了且正在运行的线程数量大于或等于 <code>maximumPoolSize</code>，那么线程池会启动饱和<strong>拒绝策略</strong>来执行</li></ul></li><li><p>当一个线程完成任务时，会从队列中取下一个任务来执行</p></li><li><p>当一个线程空闲超过一定的时间（<code>keepAliveTime</code>）时，线程池会判断：如果当前运行的线程数大于 <code>corePoolSize</code>，那么这个线程就被停掉，所以线程池的所有任务完成后最终会收缩到 <code>corePoolSize</code> 大小</p></li></ol><blockquote><p>图片来源：<a href="https://space.bilibili.com/457326371/">https://space.bilibili.com/457326371/</a></p></blockquote><h4 id="线程池创建两种方式"><a href="#线程池创建两种方式" class="headerlink" title="线程池创建两种方式"></a>线程池创建两种方式</h4><h5 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h5><p><strong>方式一：通过 <code>ThreadPoolExecutor</code> 构造函数来创建（推荐）。</strong></p><p><img src="/./Resources/image-20230727152030238.png" alt="image-20230727152030238"></p><p><strong>方式二：通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来创建。</strong></p><p><code>Executors</code> 提供了四种线程池的创建：<code>newCachedThreadPool</code>、<code>newFixedThreadPool</code>、<code>newSingleThreadExecutor</code>、<code>newScheduledThreadPool</code></p><ul><li><p><code>newFixedThreadPool</code>：创建一个拥有 n 个线程的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>核心线程数 &#x3D;&#x3D; 最大线程数（没有救急线程被创建），因此也无需超时时间</li><li><code>LinkedBlockingQueue</code> 是一个单向链表实现的阻塞队列，默认大小为 <code>Integer.MAX_VALUE</code>，也就是无界队列，可以放任意数量的任务，在任务比较多的时候会导致 <code>OOM</code>（内存溢出）</li><li><u>适用于任务量已知，相对耗时的长期任务</u></li></ul><p><code>newFixedThreadPool</code> 指定线程工厂，不使用默认的线程工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;mypool_t&quot;</span> + t.getAndIncrement());<br>    &#125;<br>&#125;);<br><br>output:<br><span class="hljs-number">15</span>:<span class="hljs-number">35</span>:<span class="hljs-number">03.781</span> [mypool_t2] DEBUG org.example.TestExecutorService - <span class="hljs-number">2</span><br><span class="hljs-number">15</span>:<span class="hljs-number">35</span>:<span class="hljs-number">03.781</span> [mypool_t1] DEBUG org.example.TestExecutorService - <span class="hljs-number">1</span><br><span class="hljs-number">15</span>:<span class="hljs-number">35</span>:<span class="hljs-number">04.796</span> [mypool_t2] DEBUG org.example.TestExecutorService - <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr></li><li><p><code>newCachedThreadPool</code>：创建一个可扩容的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE, <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>核心线程数是 0， 最大线程数是 <code>Integer.MAX_VALUE</code>，全部都是救急线程（60s 后可以回收），可能会创建大量线程，从而导致 <strong>OOM</strong>；</p></li><li><p><code>SynchronousQueue</code> 作为阻塞队列，<strong>没有容量</strong>，对于每一个 <code>take</code> 的线程会阻塞直到有一个 <code>put</code> 的线程放入元素为止（<strong>类似一手交钱、一手交货</strong>）</p></li><li><p><u>适合任务数比较密集，但每个任务执行时间较短的情况</u></p></li></ul><hr></li><li><p><code>newSingleThreadExecutor</code>：创建一个只有 1 个线程的单线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>保证所有任务按照<strong>指定顺序执行</strong>，线程数固定为 1，任务数多于 1 时会放入无界队列排队，任务执行完毕，这唯一的线程也不会被释放</li></ul><hr></li></ul><p>补充，<code>newSingleThreadExecutor</code> 区别于创建单线程运行：</p><ul><li><p>创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池会新建一个线程，保证池的正常工作</p></li><li><p><code>Executors.newSingleThreadExecutor()</code> 线程个数始终为 1，不能修改。<code>FinalizableDelegatedExecutorService</code> 应用的是装饰器模式，只对外暴露了 <code>ExecutorService</code> 接口，因此不能调用 <code>ThreadPoolExecutor</code> 中特有的方法</p><ul><li><p>原因：父类不能直接调用子类中的方法，需要反射或者创建对象的方式，可以调用子类静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br> <span class="hljs-comment">// return 了一个 FinalizableDelegatedExecutorService 对象，装饰器模式，包装了一下</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>Executors.newFixedThreadPool(1)</code> 初始时为 1，可以修改。对外暴露的是 <code>ThreadPoolExecutor</code> 对象，可以强转后调用 <code>setCorePoolSize</code> 等方法进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads, ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                  <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),<br>                                  threadFactory);<br>&#125;<br><span class="hljs-comment">// return 了一个 ThreadPoolExecutor 对象</span><br><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) executorService;<br>threadPoolExecutor.setCorePoolSize(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li></ul><p><img src="/./Resources/JUC-newSingleThreadExecutor.png"></p><p>对应 <code>Executors</code> 工具类中的方法如图所示：</p><p><img src="/./Resources/image-20230727152911105.png" alt="image-20230727152911105"></p><h5 id="开发要求"><a href="#开发要求" class="headerlink" title="开发要求"></a>开发要求</h5><p>阿里巴巴 <code>Java</code> 开发手册要求：</p><ul><li><p><strong>线程资源必须通过线程池提供，不允许在应用中自行显式创建线程</strong></p><ul><li>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题</li><li>如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者过度切换的问题</li></ul></li><li><p>线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 的方式，这样的处理方式更加明确线程池的运行规则，规避资源耗尽的风险</p><p><code>Executors</code> 返回的线程池对象弊端如下：</p><ul><li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code>：请求队列长度为 <code>Integer.MAX_VALUE</code>，可能会<strong>堆积大量的请求</strong>，从而导致 <code>OOM</code></li><li><code>CacheThreadPool</code> 和 <code>ScheduledThreadPool</code>：允许创建线程数量为 <code>Integer.MAX_VALUE</code>，可能会<strong>创建大量的线程</strong>，导致 <code>OOM</code></li></ul></li></ul><h4 id="堵塞队列"><a href="#堵塞队列" class="headerlink" title="堵塞队列"></a>堵塞队列</h4><h5 id="线程池常用的堵塞队列"><a href="#线程池常用的堵塞队列" class="headerlink" title="线程池常用的堵塞队列"></a>线程池常用的堵塞队列</h5><p><code>java.util.concurrent.BlockingQueue</code> 接口有以下阻塞队列的实现：<strong>FIFO 队列</strong> </p><ul><li><code>ArrayBlockQueue</code>：由数组结构组成的有界阻塞队列</li><li><code>LinkedBlockingQueue</code>：由链表结构组成的无界（默认大小 <code>Integer.MAX_VALUE</code>）的阻塞队列</li><li><code>PriorityBlockQueue</code>：支持优先级排序的无界阻塞队列</li><li><code>DelayedWorkQueue</code>：使用优先级队列实现的延迟无界阻塞队列</li><li><code>SynchronousQueue</code>：不存储元素的阻塞队列，每一个生产线程会阻塞到有一个 put 的线程放入元素为止</li><li><code>LinkedTransferQueue</code>：由链表结构组成的无界阻塞队列</li><li><code>LinkedBlockingDeque</code>：由链表结构组成的双向阻塞队列</li></ul><p>容量为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>（无界队列）：<code>FixedThreadPool</code> 和 <code>SingleThreadExector</code> 。由于队列永远不会被放满，因此<code>FixedThreadPool</code>最多只能创建核心线程数的线程。</p><p><code>SynchronousQueue</code>（同步队列）：<code>CachedThreadPool</code> 。<code>SynchronousQueue</code> 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，<code>CachedThreadPool</code> 的最大线程数是 <code>Integer.MAX_VALUE</code> ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。</p><p><code>DelayedWorkQueue</code>（延迟阻塞队列）：<code>ScheduledThreadPool</code> 和 <code>SingleThreadScheduledExecutor</code> 。<code>DelayedWorkQueue</code> 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。<code>DelayedWorkQueue</code> 添加元素满了之后会自动扩容原来容量的 1&#x2F;2，即永远不会阻塞，最大扩容可达 <code>Integer.MAX_VALUE</code>，所以最多只能创建核心线程数的线程。</p><h5 id="堵塞队列和普通队列的区别"><a href="#堵塞队列和普通队列的区别" class="headerlink" title="堵塞队列和普通队列的区别"></a>堵塞队列和普通队列的区别</h5><p>与普通队列（<code>LinkedList</code>、<code>ArrayList</code>等）的不同点在于阻塞队列中阻塞添加和阻塞删除方法，以及线程安全：</p><ul><li>阻塞添加 <code>put()</code>：当阻塞队列元素已满时，添加队列元素的线程会被阻塞，直到队列元素不满时才重新唤醒线程执行</li><li>阻塞删除 <code>take()</code>：在队列元素为空时，删除队列元素的线程将被阻塞，直到队列不为空再执行删除操作（一般会返回被删除的元素)</li></ul><table><thead><tr><th>方法类型</th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入（尾）</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除（头）</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查（队首元素）</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><ul><li>抛出异常组：<ul><li>当阻塞队列满时：在往队列中 add 插入元素会抛出 IIIegalStateException: Queue full</li><li>当阻塞队列空时：再往队列中 remove 移除元素，会抛出 NoSuchException</li></ul></li><li>特殊值组：<ul><li>插入方法：成功 true，失败 false</li><li>移除方法：成功返回出队列元素，队列没有就返回 null</li></ul></li><li>阻塞组：<ul><li>当阻塞队列满时，生产者继续往队列里 put 元素，队列会一直阻塞生产线程直到队列有空间 put 数据或响应中断退出</li><li>当阻塞队列空时，消费者线程试图从队列里 take 元素，队列会一直阻塞消费者线程直到队列中有可用元素</li></ul></li><li>超时退出：当阻塞队列满时，队里会阻塞生产者线程一定时间，超过限时后生产者线程会退出</li></ul><h4 id="提交方法"><a href="#提交方法" class="headerlink" title="提交方法"></a>提交方法</h4><p><code>ExecutorService</code> 类 API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void execute(Runnable command)</code></td><td>执行任务（Executor 类 API）</td></tr><tr><td><code>Future&lt;?&gt; submit(Runnable task)</code></td><td>提交任务 task()</td></tr><tr><td><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code></td><td>提交任务 task，用返回值 Future 获得任务执行结果</td></tr><tr><td><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</code></td><td>提交 tasks 中所有任务</td></tr><tr><td><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)</code></td><td>提交 tasks 中所有任务，超时时间针对所有task，超时会取消没有执行完的任务，并抛出超时异常</td></tr><tr><td><code>&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</code></td><td>提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</td></tr></tbody></table><p>execute 和 submit 都属于线程池的方法，对比：</p><ul><li><p>execute 只能执行 Runnable 类型的任务，没有返回值； submit 既能提交 Runnable 类型任务也能提交 Callable 类型任务，底层是<strong>封装成 FutureTask，然后调用 execute 执行</strong></p></li><li><p>execute 会直接抛出任务执行时的异常，submit 会吞掉异常，可通过 Future 的 get 方法将任务执行时的异常重新抛出</p></li></ul><h4 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h4><p>ExecutorService 类 API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void shutdown()</code></td><td>线程池状态变为 SHUTDOWN，等待任务执行完后关闭线程池，不会接收新任务，但已提交任务会执行完，而且也可以添加线程（不绑定任务）</td></tr><tr><td><code>List&lt;Runnable&gt; shutdownNow()</code></td><td>线程池状态变为 STOP，用 interrupt 中断正在执行的任务，直接关闭线程池，不会接收新任务，会将队列中的任务返回</td></tr><tr><td><code>boolean isShutdown()</code></td><td>不在 RUNNING 状态的线程池，此执行者已被关闭，方法返回 true</td></tr><tr><td><code>boolean isTerminated()</code></td><td>线程池状态是否是 TERMINATED，如果所有任务在关闭后完成，返回 true</td></tr><tr><td><code>boolean awaitTermination(long timeout, TimeUnit unit)</code></td><td>调用 shutdown 后，由于调用线程不会等待所有任务运行结束，如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待</td></tr></tbody></table><h4 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h4><p>execute 会直接抛出任务执行时的异常，submit 会吞掉异常，有两种处理方法</p><p>方法 1：主动捉异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>pool.submit(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;task1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>方法 2：使用 Future 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>Future&lt;?&gt; future = pool.submit(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;task1&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;);<br>System.out.println(future.get());<br></code></pre></td></tr></table></figure><h3 id="阻塞队列-1"><a href="#阻塞队列-1" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="状态信息"><a href="#状态信息" class="headerlink" title="状态信息"></a>状态信息</h4><p>ThreadPoolExecutor 使用 int 的<strong>高 3 位来表示线程池状态，低 29 位表示线程数量</strong>。这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 CAS 原子操作进行赋值</p><ul><li><p>状态表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 高3位：表示当前线程池运行状态，除去高3位之后的低位：表示当前线程池中所拥有的线程数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">ctl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br><span class="hljs-comment">// 表示在 ctl 中，低 COUNT_BITS 位，是用于存放当前线程数量的位</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> Integer.SIZE - <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 低 COUNT_BITS 位所能表达的最大数值，000 11111111111111111111 =&gt; 5亿多</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span>   <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS) - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png"></p></li><li><p>四种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 111 000000000000000000，转换成整数后其实就是一个【负数】</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RUNNING</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-comment">// 000 000000000000000000</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHUTDOWN</span>   <span class="hljs-operator">=</span>  <span class="hljs-number">0</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-comment">// 001 000000000000000000</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STOP</span>       <span class="hljs-operator">=</span>  <span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-comment">// 010 000000000000000000</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIDYING</span>    <span class="hljs-operator">=</span>  <span class="hljs-number">2</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-comment">// 011 000000000000000000</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TERMINATED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">3</span> &lt;&lt; COUNT_BITS;<br></code></pre></td></tr></table></figure><table><thead><tr><th>状态</th><th>高3位</th><th>接收新任务</th><th>处理阻塞任务队列</th><th>说明</th></tr></thead><tbody><tr><td>RUNNING</td><td>111</td><td>Y</td><td>Y</td><td></td></tr><tr><td>SHUTDOWN</td><td>000</td><td>N</td><td>Y</td><td>不接收新任务，但处理阻塞队列剩余任务</td></tr><tr><td>STOP</td><td>001</td><td>N</td><td>N</td><td>中断正在执行的任务，并抛弃阻塞队列任务</td></tr><tr><td>TIDYING</td><td>010</td><td>-</td><td>-</td><td>任务全执行完毕，活动线程为 0 即将进入终结</td></tr><tr><td>TERMINATED</td><td>011</td><td>-</td><td>-</td><td>终止状态</td></tr></tbody></table></li><li><p>获取当前线程池运行状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ~CAPACITY = ~000 11111111111111111111 = 111 000000000000000000000（取反）</span><br><span class="hljs-comment">// c == ctl = 111 000000000000000000111</span><br><span class="hljs-comment">// 111 000000000000000000111</span><br><span class="hljs-comment">// 111 000000000000000000000</span><br><span class="hljs-comment">// 111 000000000000000000000获取到了运行状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">runStateOf</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>     &#123; <span class="hljs-keyword">return</span> c &amp; ~CAPACITY; &#125;<br></code></pre></td></tr></table></figure></li><li><p>获取当前线程池线程数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        c = 111 000000000000000000111</span><br><span class="hljs-comment">// CAPACITY = 000 111111111111111111111</span><br><span class="hljs-comment">//            000 000000000000000000111 =&gt; 7</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">workerCountOf</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>  &#123; <span class="hljs-keyword">return</span> c &amp; CAPACITY; &#125;<br></code></pre></td></tr></table></figure></li><li><p>重置当前线程池状态 ctl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// rs 表示线程池状态，wc 表示当前线程池中 worker（线程）数量，相与以后就是合并后的状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ctlOf</span><span class="hljs-params">(<span class="hljs-type">int</span> rs, <span class="hljs-type">int</span> wc)</span> &#123; <span class="hljs-keyword">return</span> rs | wc; &#125;<br></code></pre></td></tr></table></figure></li><li><p>比较当前线程池 ctl 所表示的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 比较当前线程池 ctl 所表示的状态，是否小于某个状态 s</span><br><span class="hljs-comment">// 状态对比：RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">runStateLessThan</span><span class="hljs-params">(<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s)</span> &#123; <span class="hljs-keyword">return</span> c &lt; s; &#125;<br><span class="hljs-comment">// 比较当前线程池 ctl 所表示的状态，是否大于等于某个状态s</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">runStateAtLeast</span><span class="hljs-params">(<span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s)</span> &#123; <span class="hljs-keyword">return</span> c &gt;= s; &#125;<br><span class="hljs-comment">// 小于 SHUTDOWN 的一定是 RUNNING，SHUTDOWN == 0</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRunning</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123; <span class="hljs-keyword">return</span> c &lt; SHUTDOWN; &#125;<br></code></pre></td></tr></table></figure></li><li><p>设置线程池 ctl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 CAS 方式 让 ctl 值 +1 ，成功返回 true, 失败返回 false</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndIncrementWorkerCount</span><span class="hljs-params">(<span class="hljs-type">int</span> expect)</span> &#123;<br>    <span class="hljs-keyword">return</span> ctl.compareAndSet(expect, expect + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// 使用 CAS 方式 让 ctl 值 -1 ，成功返回 true, 失败返回 false</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndDecrementWorkerCount</span><span class="hljs-params">(<span class="hljs-type">int</span> expect)</span> &#123;<br>    <span class="hljs-keyword">return</span> ctl.compareAndSet(expect, expect - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// 将 ctl 值减一，do while 循环会一直重试，直到成功为止</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrementWorkerCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">do</span> &#123;&#125; <span class="hljs-keyword">while</span> (!compareAndDecrementWorkerCount(ctl.get()));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="成员属性-1"><a href="#成员属性-1" class="headerlink" title="成员属性"></a>成员属性</h4><p>成员变量</p><ul><li><p><strong>线程池中存放 Worker 的容器</strong>：线程池没有初始化，直接往池中加线程即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Worker&gt;();<br></code></pre></td></tr></table></figure></li><li><p>线程全局锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 增加减少 worker 或者时修改线程池运行状态需要持有 mainLock</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br></code></pre></td></tr></table></figure></li><li><p>可重入锁的条件变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 当外部线程调用 awaitTermination() 方法时，会等待当前线程池状态为 Termination 为止</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">termination</span> <span class="hljs-operator">=</span> mainLock.newCondition()<br></code></pre></td></tr></table></figure></li><li><p>线程池相关参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> corePoolSize;<span class="hljs-comment">// 核心线程数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> maximumPoolSize;<span class="hljs-comment">// 线程池最大线程数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> keepAliveTime;<span class="hljs-comment">// 空闲线程存活时间</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> ThreadFactory threadFactory;<span class="hljs-comment">// 创建线程时使用的线程工厂，默认是 DefaultThreadFactory</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;<span class="hljs-comment">// 【超过核心线程提交任务就放入 阻塞队列】</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> RejectedExecutionHandler handler;<span class="hljs-comment">// 拒绝策略，juc包提供了4中方式</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RejectedExecutionHandler</span> <span class="hljs-variable">defaultHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortPolicy</span>();<span class="hljs-comment">// 默认策略</span><br></code></pre></td></tr></table></figure></li><li><p>记录线程池相关属性的数值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> largestPoolSize;<span class="hljs-comment">// 记录线程池生命周期内线程数最大值</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> completedTaskCount;<span class="hljs-comment">// 记录线程池所完成任务总数，当某个 worker 退出时将完成的任务累加到该属性</span><br></code></pre></td></tr></table></figure></li><li><p>控制<strong>核心线程数量内的线程是否可以被回收</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// false（默认）代表不可以，为 true 时核心线程空闲超过 keepAliveTime 也会被回收</span><br><span class="hljs-comment">// allowCoreThreadTimeOut(boolean value) 方法可以设置该值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> allowCoreThreadTimeOut;<br></code></pre></td></tr></table></figure></li></ul><p>内部类：</p><ul><li><p>Worker 类：<strong>每个 Worker 对象会绑定一个初始任务</strong>，启动 Worker 时优先执行，这也是造成线程池不公平的原因。Worker 继承自 AQS，本身具有锁的特性，采用独占锁模式，state &#x3D; 0 表示未被占用，&gt; 0 表示被占用，&lt; 0 表示初始状态不能被抢锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-keyword">final</span> Thread thread;<span class="hljs-comment">// worker 内部封装的工作线程</span><br>    Runnable firstTask;<span class="hljs-comment">// worker 第一个执行的任务，普通的 Runnable 实现类或者是 FutureTask</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> completedTasks;<span class="hljs-comment">// 记录当前 worker 所完成任务数量</span><br>    <br>    <span class="hljs-comment">// 构造方法</span><br>    Worker(Runnable firstTask) &#123;<br>        <span class="hljs-comment">// 设置AQS独占模式为初始化中状态，这个状态不能被抢占锁</span><br>       setState(-<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// firstTask不为空时，当worker启动后，内部线程会优先执行firstTask，执行完后会到queue中去获取下个任务</span><br>        <span class="hljs-built_in">this</span>.firstTask = firstTask;<br>        <span class="hljs-comment">// 使用线程工厂创建一个线程，并且【将当前worker指定为Runnable】，所以thread启动时会调用 worker.run()</span><br>        <span class="hljs-built_in">this</span>.thread = getThreadFactory().newThread(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">// 【不可重入锁】</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>            setExclusiveOwnerThread(Thread.currentThread());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>    <span class="hljs-comment">// 将当前 worker 指定为 thread 的执行方法，线程调用 start 会调用 r.run()</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(group, r, namePrefix + threadNumber.getAndIncrement(), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (t.isDaemon())<br>        t.setDaemon(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)<br>        t.setPriority(Thread.NORM_PRIORITY);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>拒绝策略相关的内部类</p></li></ul><hr><h4 id="成员方法-2"><a href="#成员方法-2" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="提交方法-1"><a href="#提交方法-1" class="headerlink" title="提交方法"></a>提交方法</h5><ul><li><p>AbstractExecutorService#submit()：提交任务，<strong>把 Runnable 或 Callable 任务封装成 FutureTask 执行</strong>，可以通过方法返回的任务对象，调用 get 阻塞获取任务执行的结果或者异常，源码分析在笔记的 Future 部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;<br>    <span class="hljs-comment">// 空指针异常</span><br>    <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">// 把 Runnable 封装成未来任务对象，执行结果就是 null，也可以通过参数指定 FutureTask#get 返回数据</span><br>    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// 执行方法</span><br>    execute(ftask);<br>    <span class="hljs-keyword">return</span> ftask;<br>&#125;<br><span class="hljs-keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Callable&lt;T&gt; task)</span> &#123;<br>    <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">// 把 Callable 封装成未来任务对象</span><br>    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);<br>    <span class="hljs-comment">// 执行方法</span><br>    execute(ftask);<br>    <span class="hljs-comment">// 返回未来任务对象，用来获取返回值</span><br>    <span class="hljs-keyword">return</span> ftask;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="hljs-title function_">newTaskFor</span><span class="hljs-params">(Runnable runnable, T value)</span> &#123;<br>    <span class="hljs-comment">// Runnable 封装成 FutureTask，【指定返回值】</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;T&gt;(runnable, value);<br>&#125;<br><span class="hljs-keyword">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class="hljs-title function_">newTaskFor</span><span class="hljs-params">(Callable&lt;T&gt; callable)</span> &#123;<br>    <span class="hljs-comment">// Callable 直接封装成 FutureTask</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;T&gt;(callable);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>execute()：执行任务，<strong>但是没有返回值，没办法获取任务执行结果</strong>，出现异常会直接抛出任务执行时的异常。根据线程池中的线程数，选择添加任务时的处理方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// command 可以是普通的 Runnable 实现类，也可以是 FutureTask，不能是 Callable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-comment">// 非空判断</span><br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>  <span class="hljs-comment">// 获取 ctl 最新值赋值给 c，ctl 高 3 位表示线程池状态，低位表示当前线程池线程数量。</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>    <span class="hljs-comment">// 【1】当前线程数量小于核心线程数，此次提交任务直接创建一个新的 worker，线程池中多了一个新的线程</span><br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>        <span class="hljs-comment">// addWorker 为创建线程的过程，会创建 worker 对象并且将 command 作为 firstTask，优先执行</span><br>        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-literal">true</span>))<br>            <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-comment">// 执行到这条语句，说明 addWorker 一定是失败的，存在并发现象或者线程池状态被改变，重新获取状态</span><br>        <span class="hljs-comment">// SHUTDOWN 状态下也有可能创建成功，前提 firstTask == null 而且当前 queue 不为空（特殊情况）</span><br>        c = ctl.get();<br>    &#125;<br>    <span class="hljs-comment">// 【2】执行到这说明当前线程数量已经达到核心线程数量 或者 addWorker 失败</span><br>    <span class="hljs-comment">// 判断当前线程池是否处于running状态，成立就尝试将 task 放入到 workQueue 中</span><br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">recheck</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 条件一成立说明线程池状态被外部线程给修改了，可能是执行了 shutdown() 方法，该状态不能接收新提交的任务</span><br>        <span class="hljs-comment">// 所以要把刚提交的任务删除，删除成功说明提交之后线程池中的线程还未消费（处理）该任务</span><br>        <span class="hljs-keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))<br>            <span class="hljs-comment">// 任务出队成功，走拒绝策略</span><br>            reject(command);<br>        <span class="hljs-comment">// 执行到这说明线程池是 running 状态，获取线程池中的线程数量，判断是否是 0</span><br>        <span class="hljs-comment">// 【担保机制】，保证线程池在 running 状态下，最起码得有一个线程在工作</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>            addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-comment">// 【3】offer失败说明queue满了</span><br>    <span class="hljs-comment">// 如果线程数量尚未达到 maximumPoolSize，会创建非核心 worker 线程直接执行 command，【这也是不公平的原因】</span><br>    <span class="hljs-comment">// 如果当前线程数量达到 maximumPoolSiz，这里 addWorker 也会失败，走拒绝策略</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-literal">false</span>))<br>        reject(command);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="添加线程"><a href="#添加线程" class="headerlink" title="添加线程"></a>添加线程</h5><ul><li><p>prestartAllCoreThreads()：<strong>提前预热</strong>，创建所有的核心线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prestartAllCoreThreads</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>))<br>        ++n;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>addWorker()：<strong>添加线程到线程池</strong>，返回 true 表示创建 Worker 成功，且线程启动。首先判断线程池是否允许添加线程，允许就让线程数量 + 1，然后去创建 Worker 加入线程池</p><p>注意：SHUTDOWN 状态也能添加线程，但是要求新加的 Woker 没有 firstTask，而且当前 queue 不为空，所以创建一个线程来帮助线程池执行队列中的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// core == true 表示采用核心线程数量限制，false 表示采用 maximumPoolSize</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-type">boolean</span> core)</span> &#123;<br>    <span class="hljs-comment">// 自旋【判断当前线程池状态是否允许创建线程】，允许就设置线程数量 + 1</span><br>    retry:<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 获取 ctl 的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 获取当前线程池运行状态</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br>        <br>        <span class="hljs-comment">// 判断当前线程池状态【是否允许添加线程】</span><br>        <br>        <span class="hljs-comment">// 当前线程池是 SHUTDOWN 状态，但是队列里面还有任务尚未处理完，需要处理完 queue 中的任务</span><br>        <span class="hljs-comment">// 【不允许再提交新的 task，所以 firstTask 为空，但是可以继续添加 worker】</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; !(rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span> &amp;&amp; !workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获取线程池中线程数量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br>            <span class="hljs-comment">// 条件一一般不成立，CAPACITY是5亿多，根据 core 判断使用哪个大小限制线程数量，超过了返回 false</span><br>            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 记录线程数量已经加 1，类比于申请到了一块令牌，条件失败说明其他线程修改了数量</span><br>            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                <span class="hljs-comment">// 申请成功，跳出了 retry 这个 for 自旋</span><br>                <span class="hljs-keyword">break</span> retry;<br>            <span class="hljs-comment">// CAS 失败，没有成功的申请到令牌</span><br>            c = ctl.get();<br>            <span class="hljs-comment">// 判断当前线程池状态是否发生过变化，被其他线程修改了，可能其他线程调用了 shutdown() 方法</span><br>            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                <span class="hljs-comment">// 返回外层循环检查是否能创建线程，在 if 语句中返回 false</span><br>                <span class="hljs-keyword">continue</span> retry;<br>           <br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//【令牌申请成功，开始创建线程】</span><br>    <br><span class="hljs-comment">// 运行标记，表示创建的 worker 是否已经启动，false未启动  true启动</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 添加标记，表示创建的 worker 是否添加到池子中了，默认false未添加，true是添加。</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerAdded</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Worker</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 【创建 Worker，底层通过线程工厂 newThread 方法创建执行线程，指定了首先执行的任务】</span><br>        w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(firstTask);<br>        <span class="hljs-comment">// 将新创建的 worker 节点中的线程赋值给 t</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;<br>        <span class="hljs-comment">// 这里的判断为了防止 程序员自定义的 ThreadFactory 实现类有 bug，创造不出线程</span><br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>            <span class="hljs-comment">// 加互斥锁，要添加 worker 了</span><br>            mainLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取最新线程池运行状态保存到 rs</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(ctl.get());<br><span class="hljs-comment">// 判断线程池是否为RUNNING状态，不是再【判断当前是否为SHUTDOWN状态且firstTask为空，特殊情况】</span><br>                <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span>)) &#123;<br>                    <span class="hljs-comment">// 当线程start后，线程isAlive会返回true，这里还没开始启动线程，如果被启动了就需要报错</span><br>                    <span class="hljs-keyword">if</span> (t.isAlive())<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>                    <br>                    <span class="hljs-comment">//【将新建的 Worker 添加到线程池中】</span><br>                    workers.add(w);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> workers.size();<br><span class="hljs-comment">// 当前池中的线程数量是一个新高，更新 largestPoolSize</span><br>                    <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                        largestPoolSize = s;<br>                    <span class="hljs-comment">// 添加标记置为 true</span><br>                    workerAdded = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 解锁啊</span><br>                mainLock.unlock();<br>            &#125;<br>            <span class="hljs-comment">// 添加成功就【启动线程执行任务】</span><br>            <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                <span class="hljs-comment">// Thread 类中持有 Runnable 任务对象，调用的是 Runnable 的 run ，也就是 FutureTask</span><br>                t.start();<br>                <span class="hljs-comment">// 运行标记置为 true</span><br>                workerStarted = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 如果启动线程失败，做清理工作</span><br>        <span class="hljs-keyword">if</span> (! workerStarted)<br>            addWorkerFailed(w);<br>    &#125;<br>    <span class="hljs-comment">// 返回新创建的线程是否启动</span><br>    <span class="hljs-keyword">return</span> workerStarted;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>addWorkerFailed()：清理任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWorkerFailed</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    <span class="hljs-comment">// 持有线程池全局锁，因为操作的是线程池相关的东西</span><br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//条件成立需要将 worker 在 workers 中清理出去。</span><br>        <span class="hljs-keyword">if</span> (w != <span class="hljs-literal">null</span>)<br>            workers.remove(w);<br>        <span class="hljs-comment">// 将线程池计数 -1，相当于归还令牌。</span><br>        decrementWorkerCount();<br>        <span class="hljs-comment">// 尝试停止线程池</span><br>        tryTerminate();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//释放线程池全局锁。</span><br>        mainLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h5><ul><li><p>Worker#run：Worker 实现了 Runnable 接口，当线程启动时，会调用 Worker 的 run() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// ThreadPoolExecutor#runWorker()</span><br>    runWorker(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>runWorker()：线程启动就要<strong>执行任务</strong>，会一直 while 循环获取任务并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWorker</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// 获取 worker 的 firstTask</span><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> w.firstTask;<br>    <span class="hljs-comment">// 引用置空，【防止复用该线程时重复执行该任务】</span><br>    w.firstTask = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 初始化 worker 时设置 state = -1，表示不允许抢占锁</span><br>    <span class="hljs-comment">// 这里需要设置 state = 0 和 exclusiveOwnerThread = null，开始独占模式抢锁</span><br>    w.unlock();<br>    <span class="hljs-comment">// true 表示发生异常退出，false 表示正常退出。</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">completedAbruptly</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// firstTask 不是 null 就直接运行，否则去 queue 中获取任务</span><br>        <span class="hljs-comment">// 【getTask 如果是阻塞获取任务，会一直阻塞在take方法，直到获取任务，不会走返回null的逻辑】</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// worker 加锁，shutdown 时会判断当前 worker 状态，【根据独占锁状态判断是否空闲】</span><br>            w.lock();<br>            <br><span class="hljs-comment">// 说明线程池状态大于 STOP，目前处于 STOP/TIDYING/TERMINATION，此时给线程一个中断信号</span><br>            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||<br>                 <span class="hljs-comment">// 说明线程处于 RUNNING 或者 SHUTDOWN 状态，清除打断标记</span><br>                 (Thread.interrupted() &amp;&amp; runStateAtLeast(ctl.get(), STOP))) &amp;&amp; !wt.isInterrupted())<br>                <span class="hljs-comment">// 中断线程，设置线程的中断标志位为 true</span><br>                wt.interrupt();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 钩子方法，【任务执行的前置处理】</span><br>                beforeExecute(wt, task);<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">thrown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 【执行任务】</span><br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception x) &#123;<br>                 <span class="hljs-comment">//.....</span><br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 钩子方法，【任务执行的后置处理】</span><br>                    afterExecute(task, thrown);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 将局部变量task置为null，代表任务执行完成</span><br>                w.completedTasks++;<span class="hljs-comment">// 更新worker完成任务数量</span><br>                w.unlock();<span class="hljs-comment">// 解锁</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// getTask()方法返回null时会走到这里，表示queue为空并且线程空闲超过保活时间，【当前线程执行退出逻辑】</span><br>        completedAbruptly = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 正常退出 completedAbruptly = false</span><br>       <span class="hljs-comment">// 异常退出 completedAbruptly = true，【从 task.run() 内部抛出异常】时，跳到这一行</span><br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>unlock()：重置锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123; release(<span class="hljs-number">1</span>); &#125;<br><span class="hljs-comment">// 外部不会直接调用这个方法 这个方法是 AQS 内调用的，外部调用 unlock 时触发此方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>    setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<span class="hljs-comment">// 设置持有者为 null</span><br>    setState(<span class="hljs-number">0</span>);<span class="hljs-comment">// 设置 state = 0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>getTask()：获取任务，线程空闲时间超过 keepAliveTime 就会被回收，判断的依据是<strong>当前线程阻塞获取任务超过保活时间</strong>，方法返回 null 就代表当前线程要被回收了，返回到 runWorker 执行线程退出逻辑。线程池具有担保机制，对于 RUNNING 状态下的超时回收，要保证线程池中最少有一个线程运行，或者任务阻塞队列已经是空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">getTask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 超时标记，表示当前线程获取任务是否超时，true 表示已超时</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">timedOut</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 获取线程池当前运行状态</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>        <span class="hljs-comment">// 【tryTerminate】打断线程后执行到这，此时线程池状态为STOP或者线程池状态为SHUTDOWN并且队列已经是空</span><br>        <span class="hljs-comment">// 所以下面的 if 条件一定是成立的，可以直接返回 null，线程就应该退出了</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;<br>            <span class="hljs-comment">// 使用 CAS 自旋的方式让 ctl 值 -1</span><br>            decrementWorkerCount();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <br><span class="hljs-comment">// 获取线程池中的线程数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br><br>        <span class="hljs-comment">// 线程没有明确的区分谁是核心或者非核心线程，是根据当前池中的线程数量判断</span><br>        <br>        <span class="hljs-comment">// timed = false 表示当前这个线程 获取task时不支持超时机制的，当前线程会使用 queue.take() 阻塞获取</span><br>        <span class="hljs-comment">// timed = true 表示当前这个线程 获取task时支持超时机制，使用 queue.poll(xxx,xxx) 超时获取</span><br>        <span class="hljs-comment">// 条件一代表允许回收核心线程，那就无所谓了，全部线程都执行超时回收</span><br>        <span class="hljs-comment">// 条件二成立说明线程数量大于核心线程数，当前线程认为是非核心线程，有保活时间，去超时获取任务</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">timed</span> <span class="hljs-operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;<br>        <br><span class="hljs-comment">// 如果线程数量是否超过最大线程数，直接回收</span><br>        <span class="hljs-comment">// 如果当前线程【允许超时回收并且已经超时了】，就应该被回收了，由于【担保机制】还要做判断：</span><br>        <span class="hljs-comment">//   wc &gt; 1 说明线程池还用其他线程，当前线程可以直接回收</span><br>        <span class="hljs-comment">//    workQueue.isEmpty() 前置条件是 wc = 1，【如果当前任务队列也是空了，最后一个线程就可以退出】</span><br>        <span class="hljs-keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut)) &amp;&amp; (wc &gt; <span class="hljs-number">1</span> || workQueue.isEmpty())) &#123;<br>            <span class="hljs-comment">// 使用 CAS 机制将 ctl 值 -1 ,减 1 成功的线程，返回 null，代表可以退出</span><br>            <span class="hljs-keyword">if</span> (compareAndDecrementWorkerCount(c))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 根据当前线程是否需要超时回收，【选择从队列获取任务的方法】是超时获取或者阻塞获取</span><br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> timed ?<br>                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take();<br>            <span class="hljs-comment">// 获取到任务返回任务，【阻塞获取会阻塞到获取任务为止】，不会返回 null</span><br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> r;<br>            <span class="hljs-comment">// 获取任务为 null 说明超时了，将超时标记设置为 true，下次自旋时返 null</span><br>            timedOut = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException retry) &#123;<br>            <span class="hljs-comment">// 阻塞线程被打断后超时标记置为 false，【说明被打断不算超时】，要继续获取，直到超时或者获取到任务</span><br>            <span class="hljs-comment">// 如果线程池 SHUTDOWN 状态下的打断，会在循环获取任务前判断，返回 null</span><br>            timedOut = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>processWorkerExit()：<strong>线程退出线程池</strong>，也有担保机制，保证队列中的任务被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常退出 completedAbruptly = false，异常退出为 true</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processWorkerExit</span><span class="hljs-params">(Worker w, <span class="hljs-type">boolean</span> completedAbruptly)</span> &#123;<br>    <span class="hljs-comment">// 条件成立代表当前 worker 是发生异常退出的，task 任务执行过程中向上抛出异常了</span><br>    <span class="hljs-keyword">if</span> (completedAbruptly) <br>        <span class="hljs-comment">// 从异常时到这里 ctl 一直没有 -1，需要在这里 -1</span><br>        decrementWorkerCount();<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    <span class="hljs-comment">// 加锁</span><br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 将当前 worker 完成的 task 数量，汇总到线程池的 completedTaskCount</span><br>        completedTaskCount += w.completedTasks;<br><span class="hljs-comment">// 将 worker 从线程池中移除</span><br>        workers.remove(w);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<span class="hljs-comment">// 解锁</span><br>    &#125;<br><span class="hljs-comment">// 尝试停止线程池，唤醒下一个线程</span><br>    tryTerminate();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>    <span class="hljs-comment">// 线程池不是停止状态就应该有线程运行【担保机制】</span><br>    <span class="hljs-keyword">if</span> (runStateLessThan(c, STOP)) &#123;<br>        <span class="hljs-comment">// 正常退出的逻辑，是对空闲线程回收，不是执行出错</span><br>        <span class="hljs-keyword">if</span> (!completedAbruptly) &#123;<br>            <span class="hljs-comment">// 根据是否回收核心线程确定【线程池中的线程数量最小值】</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> allowCoreThreadTimeOut ? <span class="hljs-number">0</span> : corePoolSize;<br>            <span class="hljs-comment">// 最小值为 0，但是线程队列不为空，需要一个线程来完成任务担保机制</span><br>            <span class="hljs-keyword">if</span> (min == <span class="hljs-number">0</span> &amp;&amp; !workQueue.isEmpty())<br>                min = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 线程池中的线程数量大于最小值可以直接返回</span><br>            <span class="hljs-keyword">if</span> (workerCountOf(c) &gt;= min)<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 执行 task 时发生异常，有个线程因为异常终止了，需要添加</span><br>        <span class="hljs-comment">// 或者线程池中的数量小于最小值，这里要创建一个新 worker 加进线程池</span><br>        addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="停止方法"><a href="#停止方法" class="headerlink" title="停止方法"></a>停止方法</h5><ul><li><p>shutdown()：停止线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    <span class="hljs-comment">// 获取线程池全局锁</span><br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        checkShutdownAccess();<br>        <span class="hljs-comment">// 设置线程池状态为 SHUTDOWN，如果线程池状态大于 SHUTDOWN，就不会设置直接返回</span><br>        advanceRunState(SHUTDOWN);<br>        <span class="hljs-comment">// 中断空闲线程</span><br>        interruptIdleWorkers();<br>        <span class="hljs-comment">// 空方法，子类可以扩展</span><br>        onShutdown(); <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 释放线程池全局锁</span><br>        mainLock.unlock();<br>    &#125;<br>    tryTerminate();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>interruptIdleWorkers()：shutdown 方法会<strong>中断所有空闲线程</strong>，根据是否可以获取 AQS 独占锁判断是否处于工作状态。线程之所以空闲是因为阻塞队列没有任务，不会中断正在运行的线程，所以 shutdown 方法会让所有的任务执行完毕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// onlyOne == true 说明只中断一个线程 ，false 则中断所有线程</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interruptIdleWorkers</span><span class="hljs-params">(<span class="hljs-type">boolean</span> onlyOne)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    / /持有全局锁<br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 遍历所有 worker</span><br>        <span class="hljs-keyword">for</span> (Worker w : workers) &#123;<br>            <span class="hljs-comment">// 获取当前 worker 的线程</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;<br>            <span class="hljs-comment">// 条件一成立：说明当前迭代的这个线程尚未中断</span><br>            <span class="hljs-comment">// 条件二成立：说明【当前worker处于空闲状态】，阻塞在poll或者take，因为worker执行task时是要加锁的</span><br>            <span class="hljs-comment">//           每个worker有一个独占锁，w.tryLock()尝试加锁，加锁成功返回 true</span><br>            <span class="hljs-keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 中断线程，处于 queue 阻塞的线程会被唤醒，进入下一次自旋，返回 null，执行退出相逻辑</span><br>                    t.interrupt();<br>                &#125; <span class="hljs-keyword">catch</span> (SecurityException ignore) &#123;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 释放worker的独占锁</span><br>                    w.unlock();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// false，代表中断所有的线程</span><br>            <span class="hljs-keyword">if</span> (onlyOne)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 释放全局锁</span><br>        mainLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>shutdownNow()：直接关闭线程池，不会等待任务执行完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Runnable&gt; <span class="hljs-title function_">shutdownNow</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 返回值引用</span><br>    List&lt;Runnable&gt; tasks;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>    <span class="hljs-comment">// 获取线程池全局锁</span><br>    mainLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        checkShutdownAccess();<br>        <span class="hljs-comment">// 设置线程池状态为STOP</span><br>        advanceRunState(STOP);<br>        <span class="hljs-comment">// 中断线程池中【所有线程】</span><br>        interruptWorkers();<br>        <span class="hljs-comment">// 从阻塞队列中导出未处理的task</span><br>        tasks = drainQueue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mainLock.unlock();<br>    &#125;<br><br>    tryTerminate();<br>    <span class="hljs-comment">// 返回当前任务队列中 未处理的任务。</span><br>    <span class="hljs-keyword">return</span> tasks;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>tryTerminate()：设置为 TERMINATED 状态 if either (SHUTDOWN and pool and queue empty) or (STOP and pool empty)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryTerminate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 获取 ctl 的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 线程池正常，或者有其他线程执行了状态转换的方法，当前线程直接返回</span><br>        <span class="hljs-keyword">if</span> (isRunning(c) || runStateAtLeast(c, TIDYING) ||<br>            <span class="hljs-comment">// 线程池是 SHUTDOWN 并且任务队列不是空，需要去处理队列中的任务</span><br>            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-comment">// 执行到这里说明线程池状态为 STOP 或者线程池状态为 SHUTDOWN 并且队列已经是空</span><br>        <span class="hljs-comment">// 判断线程池中线程的数量</span><br>        <span class="hljs-keyword">if</span> (workerCountOf(c) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 【中断一个空闲线程】，在 queue.take() | queue.poll() 阻塞空闲</span><br>            <span class="hljs-comment">// 唤醒后的线程会在getTask()方法返回null，</span><br>            <span class="hljs-comment">// 执行 processWorkerExit 退出逻辑时会再次调用 tryTerminate() 唤醒下一个空闲线程</span><br>            interruptIdleWorkers(ONLY_ONE);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><span class="hljs-comment">// 池中的线程数量为 0 来到这里</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>        <span class="hljs-comment">// 加全局锁</span><br>        mainLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置线程池状态为 TIDYING 状态，线程数量为 0</span><br>            <span class="hljs-keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="hljs-number">0</span>))) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 结束线程池</span><br>                    terminated();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 设置线程池状态为TERMINATED状态。</span><br>                    ctl.set(ctlOf(TERMINATED, <span class="hljs-number">0</span>));<br>                    <span class="hljs-comment">// 【唤醒所有调用 awaitTermination() 方法的线程】</span><br>                    termination.signalAll();<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放线程池全局锁</span><br>            mainLock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><h5 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h5><p>FutureTask 未来任务对象，继承 Runnable、Future 接口，用于包装 Callable 对象，实现任务的提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    FutureTask&lt;String&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task).start();<span class="hljs-comment">//启动线程</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> task.get();<span class="hljs-comment">//获取返回任务数据</span><br>    System.out.println(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">FutureTask</span><span class="hljs-params">(Callable&lt;V&gt; callable)</span>&#123;<br><span class="hljs-built_in">this</span>.callable = callable;<span class="hljs-comment">// 属性注入</span><br>    <span class="hljs-built_in">this</span>.state = NEW; <span class="hljs-comment">// 任务状态设置为 new</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">FutureTask</span><span class="hljs-params">(Runnable runnable, V result)</span> &#123;<br>    <span class="hljs-comment">// 适配器模式</span><br>    <span class="hljs-built_in">this</span>.callable = Executors.callable(runnable, result);<br>    <span class="hljs-built_in">this</span>.state = NEW;       <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Callable&lt;T&gt; <span class="hljs-title function_">callable</span><span class="hljs-params">(Runnable task, T result)</span> &#123;<br>    <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">// 使用装饰者模式将 runnable 转换成 callable 接口，外部线程通过 get 获取</span><br>    <span class="hljs-comment">// 当前任务执行结果时，结果可能为 null 也可能为传进来的值，【传进来什么返回什么】</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableAdapter</span>&lt;T&gt;(task, result);<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableAdapter</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">final</span> Runnable task;<br>    <span class="hljs-keyword">final</span> T result;<br>    <span class="hljs-comment">// 构造方法</span><br>    RunnableAdapter(Runnable task, T result) &#123;<br>        <span class="hljs-built_in">this</span>.task = task;<br>        <span class="hljs-built_in">this</span>.result = result;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 实则调用 Runnable#run 方法</span><br>        task.run();<br>        <span class="hljs-comment">// 返回值为构造 FutureTask 对象时传入的返回值或者是 null</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="成员属性-2"><a href="#成员属性-2" class="headerlink" title="成员属性"></a>成员属性</h5><p>FutureTask 类的成员属性：</p><ul><li><p>任务状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示当前task状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br><span class="hljs-comment">// 当前任务尚未执行</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NEW</span>          <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 当前任务正在结束，尚未完全结束，一种临界状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COMPLETING</span>   <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 当前任务正常结束</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NORMAL</span>       <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 当前任务执行过程中发生了异常，内部封装的 callable.run() 向上抛出异常了</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCEPTIONAL</span>  <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 当前任务被取消</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span>    <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-comment">// 当前任务中断中</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INTERRUPTING</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 当前任务已中断</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INTERRUPTED</span>  <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure></li><li><p>任务对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Callable&lt;V&gt; callable;<span class="hljs-comment">// Runnable 使用装饰者模式伪装成 Callable</span><br></code></pre></td></tr></table></figure></li><li><p><strong>存储任务执行的结果</strong>，这是 run 方法返回值是 void 也可以获取到执行结果的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常情况下：任务正常执行结束，outcome 保存执行结果，callable 返回值</span><br><span class="hljs-comment">// 非正常情况：callable 向上抛出异常，outcome 保存异常</span><br><span class="hljs-keyword">private</span> Object outcome; <br></code></pre></td></tr></table></figure></li><li><p>执行当前任务的线程对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Thread runner;<span class="hljs-comment">// 当前任务被线程执行期间，保存当前执行任务的线程对象引用</span><br></code></pre></td></tr></table></figure></li><li><p><strong>线程阻塞队列的头节点</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 会有很多线程去 get 当前任务的结果，这里使用了一种数据结构头插头取（类似栈）的一个队列来保存所有的 get 线程</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> WaitNode waiters;<br></code></pre></td></tr></table></figure></li><li><p>内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitNode</span> &#123;<br>    <span class="hljs-comment">// 单向链表</span><br>    <span class="hljs-keyword">volatile</span> Thread thread;<br>    <span class="hljs-keyword">volatile</span> WaitNode next;<br>    WaitNode() &#123; thread = Thread.currentThread(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="成员方法-3"><a href="#成员方法-3" class="headerlink" title="成员方法"></a>成员方法</h5><p>FutureTask 类的成员方法：</p><ul><li><p><strong>FutureTask#run</strong>：任务执行入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//条件一：成立说明当前 task 已经被执行过了或者被 cancel 了，非 NEW 状态的任务，线程就不需要处理了</span><br>    <span class="hljs-comment">//条件二：线程是 NEW 状态，尝试设置当前任务对象的线程是当前线程，设置失败说明其他线程抢占了该任务，直接返回</span><br>    <span class="hljs-keyword">if</span> (state != NEW ||<br>        !UNSAFE.compareAndSwapObject(<span class="hljs-built_in">this</span>, runnerOffset, <span class="hljs-literal">null</span>, Thread.currentThread()))<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 执行到这里，当前 task 一定是 NEW 状态，而且【当前线程也抢占 task 成功】</span><br>        Callable&lt;V&gt; c = callable;<br>        <span class="hljs-comment">// 判断任务是否为空，防止空指针异常；判断 state 状态，防止外部线程在此期间 cancel 掉当前任务</span><br>        <span class="hljs-comment">// 【因为 task 的执行者已经设置为当前线程，所以这里是线程安全的】</span><br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-literal">null</span> &amp;&amp; state == NEW) &#123;<br>            V result;<br>            <span class="hljs-comment">// true 表示 callable.run 代码块执行成功 未抛出异常</span><br>            <span class="hljs-comment">// false 表示 callable.run 代码块执行失败 抛出异常</span><br>            <span class="hljs-type">boolean</span> ran;<br>            <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 【调用自定义的方法，执行结果赋值给 result】</span><br>                result = c.call();<br>                <span class="hljs-comment">// 没有出现异常</span><br>                ran = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-comment">// 出现异常，返回值置空，ran 置为 false</span><br>                result = <span class="hljs-literal">null</span>;<br>                ran = <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 设置返回的异常</span><br>                setException(ex);<br>            &#125;<br>            <span class="hljs-comment">// 代码块执行正常</span><br>            <span class="hljs-keyword">if</span> (ran)<br>                <span class="hljs-comment">// 设置返回的结果</span><br>                set(result);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 任务执行完成，取消线程的引用，help GC</span><br>        runner = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> state;<br>        <span class="hljs-comment">// 判断任务是不是被中断</span><br>        <span class="hljs-keyword">if</span> (s &gt;= INTERRUPTING)<br>            <span class="hljs-comment">// 执行中断处理方法</span><br>            handlePossibleCancellationInterrupt(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#set：设置正常返回值，首先将任务状态设置为 COMPLETING 状态代表完成中，逻辑执行完设置为 NORMAL 状态代表任务正常执行完成，最后唤醒 get() 阻塞线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(V v)</span> &#123;<br>    <span class="hljs-comment">// CAS 方式设置当前任务状态为完成中，设置失败说明其他线程取消了该任务</span><br>    <span class="hljs-keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="hljs-built_in">this</span>, stateOffset, NEW, COMPLETING)) &#123;<br>        <span class="hljs-comment">// 【将结果赋值给 outcome】</span><br>        outcome = v;<br>        <span class="hljs-comment">// 将当前任务状态修改为 NORMAL 正常结束状态。</span><br>        UNSAFE.putOrderedInt(<span class="hljs-built_in">this</span>, stateOffset, NORMAL);<br>        finishCompletion();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#setException：设置异常返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setException</span><span class="hljs-params">(Throwable t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="hljs-built_in">this</span>, stateOffset, NEW, COMPLETING)) &#123;<br>        <span class="hljs-comment">// 赋值给返回结果，用来向上层抛出来的异常</span><br>        outcome = t;<br>        <span class="hljs-comment">// 将当前任务的状态 修改为 EXCEPTIONAL</span><br>        UNSAFE.putOrderedInt(<span class="hljs-built_in">this</span>, stateOffset, EXCEPTIONAL);<br>        finishCompletion();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#finishCompletion：<strong>唤醒 get() 阻塞线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishCompletion</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 遍历所有的等待的节点，q 指向头节点</span><br>    <span class="hljs-keyword">for</span> (WaitNode q; (q = waiters) != <span class="hljs-literal">null</span>;) &#123;<br>        <span class="hljs-comment">// 使用cas设置 waiters 为 null，防止外部线程使用cancel取消当前任务，触发finishCompletion方法重复执行</span><br>        <span class="hljs-keyword">if</span> (UNSAFE.compareAndSwapObject(<span class="hljs-built_in">this</span>, waitersOffset, q, <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-comment">// 自旋</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-comment">// 获取当前 WaitNode 节点封装的 thread</span><br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> q.thread;<br>                <span class="hljs-comment">// 当前线程不为 null，唤醒当前 get() 等待获取数据的线程</span><br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>                    q.thread = <span class="hljs-literal">null</span>;<br>                    LockSupport.unpark(t);<br>                &#125;<br>                <span class="hljs-comment">// 获取当前节点的下一个节点</span><br>                <span class="hljs-type">WaitNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> q.next;<br>                <span class="hljs-comment">// 当前节点是最后一个节点了</span><br>                <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 断开链表</span><br>                q.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help gc</span><br>                q = next;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    done();<br>    callable = <span class="hljs-literal">null</span>;<span class="hljs-comment">// help GC</span><br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#handlePossibleCancellationInterrupt：任务中断处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePossibleCancellationInterrupt</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == INTERRUPTING)<br>        <span class="hljs-comment">// 中断状态中</span><br>        <span class="hljs-keyword">while</span> (state == INTERRUPTING)<br>            <span class="hljs-comment">// 等待中断完成</span><br>            Thread.<span class="hljs-keyword">yield</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>FutureTask#get</strong>：获取任务执行的返回值，执行 run 和 get 的不是同一个线程，一般有多个线程 get，只有一个线程 run</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-comment">// 获取当前任务状态</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> state;<br>    <span class="hljs-comment">// 条件成立说明任务还没执行完成</span><br>    <span class="hljs-keyword">if</span> (s &lt;= COMPLETING)<br>        <span class="hljs-comment">// 返回 task 当前状态，可能当前线程在里面已经睡了一会</span><br>        s = awaitDone(<span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    <span class="hljs-keyword">return</span> report(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#awaitDone：<strong>get 线程封装成 WaitNode 对象进入阻塞队列阻塞等待</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">awaitDone</span><span class="hljs-params">(<span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 0 不带超时</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> timed ? System.nanoTime() + nanos : <span class="hljs-number">0L</span>;<br>    <span class="hljs-comment">// 引用当前线程，封装成 WaitNode 对象</span><br>    <span class="hljs-type">WaitNode</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 表示当前线程 waitNode 对象，是否进入阻塞队列</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">queued</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 【三次自旋开始休眠】</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 判断当前 get() 线程是否被打断，打断返回 true，清除打断标记</span><br>        <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>            <span class="hljs-comment">// 当前线程对应的等待 node 出队，</span><br>            removeWaiter(q);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;<br><span class="hljs-comment">// 获取任务状态</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> state;<br>        <span class="hljs-comment">// 条件成立说明当前任务执行完成已经有结果了</span><br>        <span class="hljs-keyword">if</span> (s &gt; COMPLETING) &#123;<br>            <span class="hljs-comment">// 条件成立说明已经为当前线程创建了 WaitNode，置空 help GC</span><br>            <span class="hljs-keyword">if</span> (q != <span class="hljs-literal">null</span>)<br>                q.thread = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 返回当前的状态</span><br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        <span class="hljs-comment">// 条件成立说明当前任务接近完成状态，这里让当前线程释放一下 cpu ，等待进行下一次抢占 cpu</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == COMPLETING) <br>            Thread.<span class="hljs-keyword">yield</span>();<br>        <span class="hljs-comment">// 【第一次自旋】，当前线程还未创建 WaitNode 对象，此时为当前线程创建 WaitNode对象</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span>)<br>            q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WaitNode</span>();<br>        <span class="hljs-comment">// 【第二次自旋】，当前线程已经创建 WaitNode 对象了，但是node对象还未入队</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!queued)<br>            <span class="hljs-comment">// waiters 指向队首，让当前 WaitNode 成为新的队首，【头插法】，失败说明其他线程修改了新的队首</span><br>            queued = UNSAFE.compareAndSwapObject(<span class="hljs-built_in">this</span>, waitersOffset, q.next = waiters, q);<br>        <span class="hljs-comment">// 【第三次自旋】，会到这里，或者 else 内</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timed) &#123;<br>            nanos = deadline - System.nanoTime();<br>            <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>                removeWaiter(q);<br>                <span class="hljs-keyword">return</span> state;<br>            &#125;<br>            <span class="hljs-comment">// 阻塞指定的时间</span><br>            LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>        &#125;<br>        <span class="hljs-comment">// 条件成立：说明需要阻塞</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 【当前 get 操作的线程被 park 阻塞】，除非有其它线程将唤醒或者将当前线程中断</span><br>            LockSupport.park(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask#report：封装运行结果，可以获取 run() 方法中设置的成员变量 outcome，<strong>这是 run 方法的返回值是 void 也可以获取到任务执行的结果的原因</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> V <span class="hljs-title function_">report</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> <span class="hljs-keyword">throws</span> ExecutionException &#123;<br>    <span class="hljs-comment">// 获取执行结果，是在一个 futuretask 对象中的属性，可以直接获取</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> outcome;<br>    <span class="hljs-comment">// 当前任务状态正常结束</span><br>    <span class="hljs-keyword">if</span> (s == NORMAL)<br>        <span class="hljs-keyword">return</span> (V)x;<span class="hljs-comment">// 直接返回 callable 的逻辑结果</span><br>    <span class="hljs-comment">// 当前任务被取消或者中断</span><br>    <span class="hljs-keyword">if</span> (s &gt;= CANCELLED)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CancellationException</span>();<span class="hljs-comment">// 抛出异常</span><br>    <span class="hljs-comment">// 执行到这里说明自定义的 callable 中的方法有异常，使用 outcome 上层抛出异常</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutionException</span>((Throwable)x);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>FutureTask#cancel：任务取消，打断正在执行该任务的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-type">boolean</span> mayInterruptIfRunning)</span> &#123;<br>    <span class="hljs-comment">// 条件一：表示当前任务处于运行中或者处于线程池任务队列中</span><br>    <span class="hljs-comment">// 条件二：表示修改状态，成功可以去执行下面逻辑，否则返回 false 表示 cancel 失败</span><br>    <span class="hljs-keyword">if</span> (!(state == NEW &amp;&amp;<br>          UNSAFE.compareAndSwapInt(<span class="hljs-built_in">this</span>, stateOffset, NEW,<br>                                   mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 如果任务已经被执行，是否允许打断</span><br>        <span class="hljs-keyword">if</span> (mayInterruptIfRunning) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取执行当前 FutureTask 的线程</span><br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> runner;<br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                    <span class="hljs-comment">// 打断执行的线程</span><br>                    t.interrupt();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 设置任务状态为【中断完成】</span><br>                UNSAFE.putOrderedInt(<span class="hljs-built_in">this</span>, stateOffset, INTERRUPTED);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 唤醒所有 get() 阻塞的线程</span><br>        finishCompletion();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>Timer 实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>    <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;task 1&quot;</span>);<br>            <span class="hljs-comment">//int i = 1 / 0;//任务一的出错会导致任务二无法执行</span><br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;task 2&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 使用 timer 添加两个任务，希望它们都在 1s 后执行</span><br><span class="hljs-comment">// 但由于 timer 内只有一个线程来顺序执行队列中的任务，因此任务1的延时，影响了任务2的执行</span><br>    timer.schedule(task1, <span class="hljs-number">1000</span>);<span class="hljs-comment">//17:45:56 c.ThreadPool [Timer-0] - task 1</span><br>    timer.schedule(task2, <span class="hljs-number">1000</span>);<span class="hljs-comment">//17:45:58 c.ThreadPool [Timer-0] - task 2</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Scheduled"><a href="#Scheduled" class="headerlink" title="Scheduled"></a>Scheduled</h4><p>任务调度线程池 ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor：</p><ul><li>使用内部类 ScheduledFutureTask 封装任务</li><li>使用内部类 DelayedWorkQueue 作为线程池队列</li><li>重写 onShutdown 方法去处理 shutdown 后的任务</li><li>提供 decorateTask 方法作为 ScheduledFutureTask 的修饰方法，以便开发者进行扩展</li></ul><p>构造方法：<code>Executors.newScheduledThreadPool(int corePoolSize)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>    <span class="hljs-comment">// 最大线程数固定为 Integer.MAX_VALUE，保活时间 keepAliveTime 固定为 0</span><br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-comment">// 阻塞队列是 DelayedWorkQueue</span><br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>常用 API：</p><ul><li><code>ScheduledFuture&lt;?&gt; schedule(Runnable/Callable&lt;V&gt;, long delay, TimeUnit u)</code>：延迟执行任务</li><li><code>ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable/Callable&lt;V&gt;, long initialDelay, long period, TimeUnit unit)</code>：定时执行周期任务，不考虑执行的耗时，参数为初始延迟时间、间隔时间、单位</li><li><code>ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable/Callable&lt;V&gt;, long initialDelay, long delay, TimeUnit unit)</code>：定时执行周期任务，考虑执行的耗时，参数为初始延迟时间、间隔时间、单位</li></ul><p>基本使用：</p><ul><li><p>延迟任务，但是出现异常并不会在控制台打印，也不会影响其他线程的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">// 线程池大小为1时也是串行执行</span><br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 添加两个任务，都在 1s 后同时执行</span><br>    executor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;任务1，执行时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-comment">//int i = 1 / 0;</span><br>    <span class="hljs-keyword">try</span> &#123; Thread.sleep(<span class="hljs-number">2000</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; &#125;<br>    &#125;, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<br>    <br>    executor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;任务2，执行时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定时任务 scheduleAtFixedRate：<strong>一次任务的启动到下一次任务的启动</strong>之间只要大于等于间隔时间，抢占到 CPU 就会立即执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;start...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <br>    pool.scheduleAtFixedRate(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>    &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br><br><span class="hljs-comment">/*start...Sat Apr 24 18:08:12 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:13 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:15 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:17 CST 2021</span><br></code></pre></td></tr></table></figure></li><li><p>定时任务 scheduleWithFixedDelay：<strong>一次任务的结束到下一次任务的启动之间</strong>等于间隔时间，抢占到 CPU 就会立即执行，这个方法才是真正的设置两个任务之间的间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br>    System.out.println(<span class="hljs-string">&quot;start...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <br>    pool.scheduleWithFixedDelay(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>    &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br><span class="hljs-comment">/*start...Sat Apr 24 18:11:41 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:42 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:45 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:48 CST 2021</span><br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="成员属性-3"><a href="#成员属性-3" class="headerlink" title="成员属性"></a>成员属性</h4><h5 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h5><ul><li><p>shutdown 后是否继续执行周期任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> continueExistingPeriodicTasksAfterShutdown;<br></code></pre></td></tr></table></figure></li><li><p>shutdown 后是否继续执行延迟任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">executeExistingDelayedTasksAfterShutdown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li><li><p>取消方法是否将该任务从队列中移除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认 false，不移除，等到线程拿到任务之后抛弃</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">removeOnCancel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure></li><li><p>任务的序列号，可以用来比较优先级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">sequencer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br></code></pre></td></tr></table></figure></li></ul><h5 id="延迟任务"><a href="#延迟任务" class="headerlink" title="延迟任务"></a>延迟任务</h5><p>ScheduledFutureTask 继承 FutureTask，实现 RunnableScheduledFuture 接口，具有延迟执行的特点，覆盖 FutureTask 的 run 方法来实现对<strong>延时执行、周期执行</strong>的支持。对于延时任务调用 FutureTask#run，而对于周期性任务则调用 FutureTask#runAndReset 并且在成功之后根据 fixed-delay&#x2F;fixed-rate 模式来设置下次执行时间并重新将任务塞到工作队列</p><p>在调度线程池中无论是 runnable 还是 callable，无论是否需要延迟和定时，所有的任务都会被封装成 ScheduledFutureTask</p><p>成员变量：</p><ul><li><p>任务序列号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> sequenceNumber;<br></code></pre></td></tr></table></figure></li><li><p>执行时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> time;<span class="hljs-comment">// 任务可以被执行的时间，交付时间，以纳秒表示</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> period;<span class="hljs-comment">// 0 表示非周期任务，正数表示 fixed-rate 模式的周期，负数表示 fixed-delay 模式</span><br></code></pre></td></tr></table></figure><p>fixed-rate：两次开始启动的间隔，fixed-delay：一次执行结束到下一次开始启动</p></li><li><p>实际的任务对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">RunnableScheduledFuture&lt;V&gt; outerTask = <span class="hljs-built_in">this</span>;<br></code></pre></td></tr></table></figure></li><li><p>任务在队列数组中的索引下标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DelayedWorkQueue 底层使用的数据结构是最小堆，记录当前任务在堆中的索引，-1 代表删除</span><br><span class="hljs-type">int</span> heapIndex;<br></code></pre></td></tr></table></figure></li></ul><p>成员方法：</p><ul><li><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ScheduledFutureTask(Runnable r, V result, <span class="hljs-type">long</span> ns, <span class="hljs-type">long</span> period) &#123;<br>    <span class="hljs-built_in">super</span>(r, result);<br>    <span class="hljs-comment">// 任务的触发时间</span><br>    <span class="hljs-built_in">this</span>.time = ns;<br>    <span class="hljs-comment">// 任务的周期，多长时间执行一次</span><br>    <span class="hljs-built_in">this</span>.period = period;<br>    <span class="hljs-comment">// 任务的序号</span><br>    <span class="hljs-built_in">this</span>.sequenceNumber = sequencer.getAndIncrement();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>compareTo()：ScheduledFutureTask 根据执行时间 time 正序排列，如果执行时间相同，在按照序列号 sequenceNumber 正序排列，任务需要放入 DelayedWorkQueue，延迟队列中使用该方法按照从小到大进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed other)</span> &#123;<br>    <span class="hljs-keyword">if</span> (other == <span class="hljs-built_in">this</span>) <span class="hljs-comment">// compare zero if same object</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (other <span class="hljs-keyword">instanceof</span> ScheduledFutureTask) &#123;<br>        <span class="hljs-comment">// 类型强转</span><br>        ScheduledFutureTask&lt;?&gt; x = (ScheduledFutureTask&lt;?&gt;)other;<br>        <span class="hljs-comment">// 比较者 - 被比较者的执行时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> time - x.time;<br>        <span class="hljs-comment">// 比较者先执行</span><br>        <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 被比较者先执行</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (diff &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 比较者的序列号小</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sequenceNumber &lt; x.sequenceNumber)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 不是 ScheduledFutureTask 类型时，根据延迟时间排序</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> getDelay(NANOSECONDS) - other.getDelay(NANOSECONDS);<br>    <span class="hljs-keyword">return</span> (diff &lt; <span class="hljs-number">0</span>) ? -<span class="hljs-number">1</span> : (diff &gt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>run()：执行任务，非周期任务直接完成直接结束，<strong>周期任务执行完后会设置下一次的执行时间，重新放入线程池的阻塞队列</strong>，如果线程池中的线程数量少于核心线程，就会添加 Worker 开启新线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 是否周期性，就是判断 period 是否为 0</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">periodic</span> <span class="hljs-operator">=</span> isPeriodic();<br>    <span class="hljs-comment">// 根据是否是周期任务检查当前状态能否执行任务，不能执行就取消任务</span><br>    <span class="hljs-keyword">if</span> (!canRunInCurrentRunState(periodic))<br>        cancel(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 非周期任务，直接调用 FutureTask#run 执行</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!periodic)<br>        ScheduledFutureTask.<span class="hljs-built_in">super</span>.run();<br>    <span class="hljs-comment">// 周期任务的执行，返回 true 表示执行成功</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ScheduledFutureTask.<span class="hljs-built_in">super</span>.runAndReset()) &#123;<br>        <span class="hljs-comment">// 设置周期任务的下一次执行时间</span><br>        setNextRunTime();<br>        <span class="hljs-comment">// 任务的下一次执行安排，如果当前线程池状态可以执行周期任务，加入队列，并开启新线程</span><br>        reExecutePeriodic(outerTask);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>周期任务正常完成后<strong>任务的状态不会变化</strong>，依旧是 NEW，不会设置 outcome 属性。但是如果本次任务执行出现异常，会进入 setException 方法将任务状态置为异常，把异常保存在 outcome 中，方法返回 false，后续的该任务将不会再周期的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">runAndReset</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 任务不是新建的状态了，或者被别的线程执行了，直接返回 false</span><br>    <span class="hljs-keyword">if</span> (state != NEW ||<br>        !UNSAFE.compareAndSwapObject(<span class="hljs-built_in">this</span>, runnerOffset, <span class="hljs-literal">null</span>, Thread.currentThread()))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> state;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Callable&lt;V&gt; c = callable;<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-literal">null</span> &amp;&amp; s == NEW) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 执行方法，没有返回值</span><br>                c.call();<br>                ran = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-comment">// 出现异常，把任务设置为异常状态，唤醒所有的 get 阻塞线程</span><br>                setException(ex);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 执行完成把执行线程引用置为 null</span><br>        runner = <span class="hljs-literal">null</span>;<br>        s = state;<br>        <span class="hljs-comment">// 如果线程被中断进行中断处理</span><br>        <span class="hljs-keyword">if</span> (s &gt;= INTERRUPTING)<br>            handlePossibleCancellationInterrupt(s);<br>    &#125;<br>    <span class="hljs-comment">// 如果正常执行，返回 true，并且任务状态没有被取消</span><br>    <span class="hljs-keyword">return</span> ran &amp;&amp; s == NEW;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务下一次的触发时间</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextRunTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> period;<br>    <span class="hljs-keyword">if</span> (p &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// fixed-rate 模式，【时间设置为上一次执行任务的时间 + p】，两次任务执行的时间差</span><br>        time += p;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">// fixed-delay 模式，下一次执行时间是【当前这次任务结束的时间（就是现在） + delay 值】</span><br>        time = triggerTime(-p);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>reExecutePeriodic()<strong>：准备任务的下一次执行，重新放入阻塞任务队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ScheduledThreadPoolExecutor#reExecutePeriodic</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">reExecutePeriodic</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; task)</span> &#123;<br>    <span class="hljs-keyword">if</span> (canRunInCurrentRunState(<span class="hljs-literal">true</span>)) &#123;<br>        <span class="hljs-comment">// 【放入任务队列】</span><br>        <span class="hljs-built_in">super</span>.getQueue().add(task);<br>        <span class="hljs-comment">// 如果提交完任务之后，线程池状态变为了 shutdown 状态，需要再次检查是否可以执行，</span><br>        <span class="hljs-comment">// 如果不能执行且任务还在队列中未被取走，则取消任务</span><br>        <span class="hljs-keyword">if</span> (!canRunInCurrentRunState(<span class="hljs-literal">true</span>) &amp;&amp; remove(task))<br>            task.cancel(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 当前线程池状态可以执行周期任务，加入队列，并【根据线程数量是否大于核心线程数确定是否开启新线程】</span><br>            ensurePrestart();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>cancel()：取消任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-type">boolean</span> mayInterruptIfRunning)</span> &#123;<br>    <span class="hljs-comment">// 调用父类 FutureTask#cancel 来取消任务</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.cancel(mayInterruptIfRunning);<br>    <span class="hljs-comment">// removeOnCancel 用于控制任务取消后是否应该从阻塞队列中移除</span><br>    <span class="hljs-keyword">if</span> (cancelled &amp;&amp; removeOnCancel &amp;&amp; heapIndex &gt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 从等待队列中删除该任务，并调用 tryTerminate() 判断是否需要停止线程池</span><br>        remove(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">return</span> cancelled;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h5><p>DelayedWorkQueue 是支持延时获取元素的阻塞队列，内部采用优先队列 PriorityQueue（小根堆、满二叉树）存储元素</p><p>其他阻塞队列存储节点的数据结构大都是链表，<strong>延迟队列是数组</strong>，所以延迟队列出队头元素后需要<strong>让其他元素（尾）替换到头节点</strong>，防止空指针异常</p><p>成员变量：</p><ul><li><p>容量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">// 初始容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 节点数量</span><br><span class="hljs-keyword">private</span> RunnableScheduledFuture&lt;?&gt;[] queue = <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableScheduledFuture</span>&lt;?&gt;[INITIAL_CAPACITY];<span class="hljs-comment">// 存放节点</span><br></code></pre></td></tr></table></figure></li><li><p>锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">// 控制并发</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> lock.newCondition();<span class="hljs-comment">// 条件队列</span><br></code></pre></td></tr></table></figure></li><li><p>阻塞等待头节点的线程：线程池内的某个线程去 take() 获取任务时，如果延迟队列顶层节点不为 null（队列内有任务），但是节点任务还不到触发时间，线程就去检查<strong>队列的 leader字段</strong>是否被占用</p><ul><li>如果未被占用，则当前线程占用该字段，然后当前线程到 available 条件队列指定超时时间 <code>堆顶任务.time - now()</code> 挂起</li><li>如果被占用，当前线程直接到 available 条件队列不指定超时时间的挂起</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// leader 在 available 条件队列内是首元素，它超时之后会醒过来，然后再次将堆顶元素获取走，获取走之后，take()结束之前，会调用是 available.signal() 唤醒下一个条件队列内的等待者，然后释放 lock，下一个等待者被唤醒后去到 AQS 队列，做 acquireQueue(node) 逻辑</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">leader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></li></ul><p>成员方法</p><ul><li><p>offer()：插入节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(Runnable x)</span> &#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    RunnableScheduledFuture&lt;?&gt; e = (RunnableScheduledFuture&lt;?&gt;)x;<br>    <span class="hljs-comment">// 队列锁，增加删除数据时都要加锁</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size;<br>        <span class="hljs-comment">// 队列数量大于存放节点的数组长度，需要扩容</span><br>        <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>            <span class="hljs-comment">// 扩容为原来长度的 1.5 倍</span><br>            grow();<br>        size = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 当前是第一个要插入的节点</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            queue[<span class="hljs-number">0</span>] = e;<br>            <span class="hljs-comment">// 修改 ScheduledFutureTask 的 heapIndex 属性，表示该对象在队列里的下标</span><br>            setIndex(e, <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 向上调整元素的位置，并更新 heapIndex </span><br>            siftUp(i, e);<br>        &#125;<br>        <span class="hljs-comment">// 情况1：当前任务是第一个加入到 queue 内的任务，所以在当前任务加入到 queue 之前，take() 线程会直接</span><br>        <span class="hljs-comment">//到 available 队列不设置超时的挂起，并不会去占用 leader 字段，这时需会唤醒一个线程 让它去消费</span><br>       <span class="hljs-comment">// 情况2：当前任务【优先级最高】，原堆顶任务可能还未到触发时间，leader 线程设置超时的在 available 挂起</span><br>        <span class="hljs-comment">//原先的 leader 等待的是原先的头节点，所以 leader 已经无效，需要将 leader 线程唤醒，</span><br>        <span class="hljs-comment">//唤醒之后它会检查堆顶，如果堆顶任务可以被消费，则直接获取走，否则继续成为 leader 等待新堆顶任务</span><br>        <span class="hljs-keyword">if</span> (queue[<span class="hljs-number">0</span>] == e) &#123;<br>            <span class="hljs-comment">// 将 leader 设置为 null</span><br>            leader = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 直接随便唤醒等待头结点的阻塞线程</span><br>            available.signal();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 插入新节点后对堆进行调整，进行节点上移，保持其特性【节点的值小于子节点的值】，小顶堆</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> k, RunnableScheduledFuture&lt;?&gt; key)</span> &#123;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 父节点，就是堆排序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (k - <span class="hljs-number">1</span>) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        RunnableScheduledFuture&lt;?&gt; e = queue[parent];<br>        <span class="hljs-comment">// key 和父节点比，如果大于父节点可以直接返回，否则就继续上浮</span><br>        <span class="hljs-keyword">if</span> (key.compareTo(e) &gt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        queue[k] = e;<br>        setIndex(e, k);<br>        k = parent;<br>    &#125;<br>    queue[k] = key;<br>    setIndex(key, k);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>poll()：非阻塞获取头结点，<strong>获取执行时间最近并且可以执行的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 非阻塞获取</span><br><span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; poll() &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取队头节点，因为是小顶堆</span><br>        RunnableScheduledFuture&lt;?&gt; first = queue[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 头结点为空或者的延迟时间没到返回 null</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span> || first.getDelay(NANOSECONDS) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 头结点达到延迟时间，【尾节点成为替代节点下移调整堆结构】，返回头结点</span><br>            <span class="hljs-keyword">return</span> finishPoll(first);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RunnableScheduledFuture&lt;?&gt; finishPoll(RunnableScheduledFuture&lt;?&gt; f) &#123;<br>    <span class="hljs-comment">// 获取尾索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>    <span class="hljs-comment">// 获取尾节点</span><br>    RunnableScheduledFuture&lt;?&gt; x = queue[s];<br>    <span class="hljs-comment">// 将堆结构最后一个节点占用的 slot 设置为 null，因为该节点要尝试升级成堆顶，会根据特性下调</span><br>    queue[s] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// s == 0 说明 当前堆结构只有堆顶一个节点，此时不需要做任何的事情</span><br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 从索引处 0 开始向下调整</span><br>        siftDown(<span class="hljs-number">0</span>, x);<br>    <span class="hljs-comment">// 出队的元素索引设置为 -1</span><br>    setIndex(f, -<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>take()：阻塞获取头节点，读取当前堆中最小的也就是触发时间最近的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; take() <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    <span class="hljs-comment">// 保证线程安全</span><br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 头节点</span><br>            RunnableScheduledFuture&lt;?&gt; first = queue[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>                <span class="hljs-comment">// 等待队列不空，直至有任务通过 offer 入队并唤醒</span><br>                available.await();<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 获取头节点的延迟时间是否到时</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> first.getDelay(NANOSECONDS);<br>                <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-comment">// 到达触发时间，获取头节点并调整堆，重新选择延迟时间最小的节点放入头部</span><br>                    <span class="hljs-keyword">return</span> finishPoll(first);<br>                <br>                <span class="hljs-comment">// 逻辑到这说明头节点的延迟时间还没到</span><br>                first = <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">// 说明有 leader 线程在等待获取头节点，当前线程直接去阻塞等待</span><br>                <span class="hljs-keyword">if</span> (leader != <span class="hljs-literal">null</span>)<br>                    available.await();<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 没有 leader 线程，【当前线程作为leader线程，并设置头结点的延迟时间作为阻塞时间】</span><br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                    leader = thisThread;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 在条件队列 available 使用带超时的挂起（堆顶任务.time - now() 纳秒值..）</span><br>                        available.awaitNanos(delay);<br>                        <span class="hljs-comment">// 到达阻塞时间时，当前线程会从这里醒来来</span><br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-comment">// t堆顶更新，leader 置为 null，offer 方法释放锁后，</span><br>                        <span class="hljs-comment">// 有其它线程通过 take/poll 拿到锁,读到 leader == null，然后将自身更新为leader。</span><br>                        <span class="hljs-keyword">if</span> (leader == thisThread)<br>                            <span class="hljs-comment">// leader 置为 null 用以接下来判断是否需要唤醒后继线程</span><br>                            leader = <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 没有 leader 线程，头结点不为 null，唤醒阻塞获取头节点的线程，</span><br>        <span class="hljs-comment">// 【如果没有这一步，就会出现有了需要执行的任务，但是没有线程去执行】</span><br>        <span class="hljs-keyword">if</span> (leader == <span class="hljs-literal">null</span> &amp;&amp; queue[<span class="hljs-number">0</span>] != <span class="hljs-literal">null</span>)<br>            available.signal();<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove()：删除节点，堆移除一个元素的时间复杂度是 O(log n)，<strong>延迟任务维护了 heapIndex</strong>，直接访问的时间复杂度是 O(1)，从而可以更快的移除元素，任务在队列中被取消后会进入该逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object x)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 查找对象在队列数组中的下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexOf(x);<br>        <span class="hljs-comment">// 节点不存在，返回 false</span><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 修改元素的 heapIndex，-1 代表删除</span><br>        setIndex(queue[i], -<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 尾索引是长度-1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>        <span class="hljs-comment">// 尾节点作为替代节点</span><br>        RunnableScheduledFuture&lt;?&gt; replacement = queue[s];<br>        queue[s] = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// s == i 说明头节点就是尾节点，队列空了</span><br>        <span class="hljs-keyword">if</span> (s != i) &#123;<br>            <span class="hljs-comment">// 向下调整</span><br>            siftDown(i, replacement);<br>            <span class="hljs-comment">// 说明没发生调整</span><br>            <span class="hljs-keyword">if</span> (queue[i] == replacement)<br>                <span class="hljs-comment">// 上移和下移不可能同时发生，替代节点大于子节点时下移，否则上移</span><br>                siftUp(i, replacement);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="成员方法-4"><a href="#成员方法-4" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h5><ul><li><p>schedule()：延迟执行方法，并指定执行的时间，默认是当前时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-comment">// 以零延时任务的形式实现</span><br>    schedule(command, <span class="hljs-number">0</span>, NANOSECONDS);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command, <span class="hljs-type">long</span> delay, TimeUnit unit) &#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">// 没有做任何操作，直接将 task 返回，该方法主要目的是用于子类扩展，并且【根据延迟时间设置任务触发的时间点】</span><br>    RunnableScheduledFuture&lt;?&gt; t = decorateTask(command, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(<br>        command, <span class="hljs-literal">null</span>, triggerTime(delay, unit)));<br>    <span class="hljs-comment">// 延迟执行</span><br>    delayedExecute(t);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回【当前时间 + 延迟时间】，就是触发当前任务执行的时间</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">triggerTime</span><span class="hljs-params">(<span class="hljs-type">long</span> delay, TimeUnit unit)</span> &#123;<br>    <span class="hljs-comment">// 设置触发的时间</span><br>    <span class="hljs-keyword">return</span> triggerTime(unit.toNanos((delay &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : delay));<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-title function_">triggerTime</span><span class="hljs-params">(<span class="hljs-type">long</span> delay)</span> &#123;<br>    <span class="hljs-comment">// 如果 delay &lt; Long.Max_VALUE/2，则下次执行时间为当前时间 +delay</span><br>    <span class="hljs-comment">// 否则为了避免队列中出现由于溢出导致的排序紊乱,需要调用overflowFree来修正一下delay</span><br>    <span class="hljs-keyword">return</span> now() + ((delay &lt; (Long.MAX_VALUE &gt;&gt; <span class="hljs-number">1</span>)) ? delay : overflowFree(delay));<br>&#125;<br></code></pre></td></tr></table></figure><p>overflowFree 的原因：如果某个任务的 delay 为负数，说明当前可以执行（其实早该执行了）。阻塞队列中维护任务顺序是基于 compareTo 比较的，比较两个任务的顺序会用 time 相减。那么可能出现一个 delay 为正数减去另一个为负数的 delay，结果上溢为负数，则会导致 compareTo 产生错误的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">overflowFree</span><span class="hljs-params">(<span class="hljs-type">long</span> delay)</span> &#123;<br>    <span class="hljs-type">Delayed</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> (Delayed) <span class="hljs-built_in">super</span>.getQueue().peek();<br>    <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">headDelay</span> <span class="hljs-operator">=</span> head.getDelay(NANOSECONDS);<br>        <span class="hljs-comment">// 判断一下队首的delay是不是负数，如果是正数就不用管，怎么减都不会溢出</span><br>        <span class="hljs-comment">// 否则拿当前 delay 减去队首的 delay 来比较看，如果不出现上溢，排序不会乱</span><br><span class="hljs-comment">// 不然就把当前 delay 值给调整为 Long.MAX_VALUE + 队首 delay</span><br>        <span class="hljs-keyword">if</span> (headDelay &lt; <span class="hljs-number">0</span> &amp;&amp; (delay - headDelay &lt; <span class="hljs-number">0</span>))<br>            delay = Long.MAX_VALUE + headDelay;<br>    &#125;<br>    <span class="hljs-keyword">return</span> delay;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>scheduleAtFixedRate()：定时执行，一次任务的启动到下一次任务的启动的间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, <span class="hljs-type">long</span> initialDelay, <span class="hljs-type">long</span> period,<br>                                              TimeUnit unit) &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-keyword">if</span> (period &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-comment">// 任务封装，【指定初始的延迟时间和周期时间】</span><br>    ScheduledFutureTask&lt;Void&gt; sft =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(command, <span class="hljs-literal">null</span>,<br>                                      triggerTime(initialDelay, unit), unit.toNanos(period));<br>    <span class="hljs-comment">// 默认返回本身</span><br>    RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);<br>    sft.outerTask = t;<br>    <span class="hljs-comment">// 开始执行这个任务</span><br>    delayedExecute(t);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>scheduleWithFixedDelay()：定时执行，一次任务的结束到下一次任务的启动的间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, <span class="hljs-type">long</span> initialDelay, <span class="hljs-type">long</span> delay,<br>                                                 TimeUnit unit) &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>) <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-comment">// 任务封装，【指定初始的延迟时间和周期时间】，周期时间为 - 表示是 fixed-delay 模式</span><br>    ScheduledFutureTask&lt;Void&gt; sft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(command, <span class="hljs-literal">null</span>,<br>                                      triggerTime(initialDelay, unit), unit.toNanos(-delay));<br>    RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);<br>    sft.outerTask = t;<br>    delayedExecute(t);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="运行任务"><a href="#运行任务" class="headerlink" title="运行任务"></a>运行任务</h5><ul><li><p>delayedExecute()：<strong>校验线程池状态</strong>，延迟或周期性任务的主要执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delayedExecute</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; task)</span> &#123;<br>    <span class="hljs-comment">// 线程池是 SHUTDOWN 状态，需要执行拒绝策略</span><br>    <span class="hljs-keyword">if</span> (isShutdown())<br>        reject(task);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 把当前任务放入阻塞队列，因为需要【获取执行时间最近的】，当前任务需要比较</span><br>        <span class="hljs-built_in">super</span>.getQueue().add(task);<br>        <span class="hljs-comment">// 线程池状态为 SHUTDOWN 并且不允许执行任务了，就从队列删除该任务，并设置任务的状态为取消状态</span><br>        <span class="hljs-keyword">if</span> (isShutdown() &amp;&amp; !canRunInCurrentRunState(task.isPeriodic()) &amp;&amp; remove(task))<br>            task.cancel(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 可以执行</span><br>            ensurePrestart();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ensurePrestart()：<strong>开启线程执行任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ThreadPoolExecutor#ensurePrestart</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">ensurePrestart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(ctl.get());<br>    <span class="hljs-comment">// worker数目小于corePoolSize，则添加一个worker。</span><br>    <span class="hljs-keyword">if</span> (wc &lt; corePoolSize)<br>        <span class="hljs-comment">// 第二个参数 true 表示采用核心线程数量限制，false 表示采用 maximumPoolSize</span><br>        addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// corePoolSize = 0的情况，至少开启一个线程，【担保机制】</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (wc == <span class="hljs-number">0</span>)<br>        addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>canRunInCurrentRunState()：任务运行时都会被调用以校验当前状态是否可以运行任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">canRunInCurrentRunState</span><span class="hljs-params">(<span class="hljs-type">boolean</span> periodic)</span> &#123;<br>    <span class="hljs-comment">// 根据是否是周期任务判断，在线程池 shutdown 后是否继续执行该任务，默认非周期任务是继续执行的</span><br>    <span class="hljs-keyword">return</span> isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown :<br>                               executeExistingDelayedTasksAfterShutdown);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>onShutdown()：删除并取消工作队列中的不需要再执行的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">onShutdown</span><span class="hljs-params">()</span> &#123;<br>    BlockingQueue&lt;Runnable&gt; q = <span class="hljs-built_in">super</span>.getQueue();<br>    <span class="hljs-comment">// shutdown 后是否仍然执行延时任务</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">keepDelayed</span> <span class="hljs-operator">=</span> getExecuteExistingDelayedTasksAfterShutdownPolicy();<br>    <span class="hljs-comment">// shutdown 后是否仍然执行周期任务</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">keepPeriodic</span> <span class="hljs-operator">=</span> getContinueExistingPeriodicTasksAfterShutdownPolicy();<br>    <span class="hljs-comment">// 如果两者皆不可，则对队列中【所有任务】调用 cancel 取消并清空队列</span><br>    <span class="hljs-keyword">if</span> (!keepDelayed &amp;&amp; !keepPeriodic) &#123;<br>        <span class="hljs-keyword">for</span> (Object e : q.toArray())<br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> RunnableScheduledFuture&lt;?&gt;)<br>                ((RunnableScheduledFuture&lt;?&gt;) e).cancel(<span class="hljs-literal">false</span>);<br>        q.clear();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object e : q.toArray()) &#123;<br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> RunnableScheduledFuture) &#123;<br>                RunnableScheduledFuture&lt;?&gt; t = (RunnableScheduledFuture&lt;?&gt;)e;<br>                <span class="hljs-comment">// 不需要执行的任务删除并取消，已经取消的任务也需要从队列中删除</span><br>                <span class="hljs-keyword">if</span> ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) ||<br>                    t.isCancelled()) &#123;<br>                    <span class="hljs-keyword">if</span> (q.remove(t))<br>                        t.cancel(<span class="hljs-literal">false</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 因为任务被从队列中清理掉，所以需要调用 tryTerminate 尝试【改变线程池的状态】</span><br>    tryTerminate();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h3><p>Fork&#x2F;Join：线程池的实现，体现是分治思想，适用于能够进行任务拆分的 CPU 密集型运算，用于<strong>并行计算</strong></p><p>任务拆分：将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列都可以用分治思想进行求解</p><ul><li><p>Fork&#x2F;Join 在<strong>分治的基础上加入了多线程</strong>，把每个任务的分解和合并交给不同的线程来完成，提升了运算效率</p></li><li><p>ForkJoin 使用 ForkJoinPool 来启动，是一个特殊的线程池，默认会创建与 CPU 核心数大小相同的线程池</p></li><li><p>任务有返回值继承 RecursiveTask，没有返回值继承 RecursiveAction</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>(<span class="hljs-number">4</span>);<br>    System.out.println(pool.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(<span class="hljs-number">5</span>)));<br>    <span class="hljs-comment">//拆分  5 + MyTask(4) --&gt; 4 + MyTask(3) --&gt;</span><br>&#125;<br><br><span class="hljs-comment">// 1~ n 之间整数的和</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyTask&#123;&quot;</span> + <span class="hljs-string">&quot;n=&quot;</span> + n + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 如果 n 已经为 1，可以求得结果了</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-comment">// 将任务进行拆分(fork)</span><br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(n - <span class="hljs-number">1</span>);<br>        t1.fork();<br>        <span class="hljs-comment">// 合并(join)结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> n + t1.join();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续拆分优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-type">int</span> begin;<br>    <span class="hljs-type">int</span> end;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddTask</span><span class="hljs-params">(<span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-built_in">this</span>.begin = begin;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&quot;</span> + begin + <span class="hljs-string">&quot;,&quot;</span> + end + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 5, 5</span><br>        <span class="hljs-keyword">if</span> (begin == end) &#123;<br>            <span class="hljs-keyword">return</span> begin;<br>        &#125;<br>        <span class="hljs-comment">// 4, 5  防止多余的拆分  提高效率</span><br>        <span class="hljs-keyword">if</span> (end - begin == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> end + begin;<br>        &#125;<br>        <span class="hljs-comment">// 1 5</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (end + begin) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 3</span><br>        <span class="hljs-type">AddTask</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddTask</span>(begin, mid); <span class="hljs-comment">// 1,3</span><br>        t1.fork();<br>        <span class="hljs-type">AddTask</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddTask</span>(mid + <span class="hljs-number">1</span>, end); <span class="hljs-comment">// 4,5</span><br>        t2.fork();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> t1.join() + t2.join();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ForkJoinPool 实现了<strong>工作窃取算法</strong>来提高 CPU 的利用率：</p><ul><li>每个线程都维护了一个<strong>双端队列</strong>，用来存储需要执行的任务</li><li>工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行</li><li>窃取的必须是<strong>最晚的任务</strong>，避免和队列所属线程发生竞争，但是队列中只有一个任务时还是会发生竞争</li></ul><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>享元模式（<code>Flyweight pattern</code>）： 用于减少创建对象的数量，以减少内存占用和提高性能，这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式</p><h4 id="体现"><a href="#体现" class="headerlink" title="体现"></a>体现</h4><h5 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h5><p>在 <code>JDK</code>中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 <code>valueOf</code> 方法，例如 <code>Long</code> 的 <code>valueOf </code> 会缓存 <code>-128~127</code> 之间的 <code>Long</code> 对象，在这个范围之间会重用对象，大于这个范围，才会新建 <code>Long</code> 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">if</span> (l &gt;= -<span class="hljs-number">128</span> &amp;&amp; l &lt;= <span class="hljs-number">127</span>) &#123; <span class="hljs-comment">// will cache</span><br>        <span class="hljs-keyword">return</span> LongCache.cache[(<span class="hljs-type">int</span>)l + offset];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(l);<br>&#125;<br><br><span class="hljs-comment">// 静态内部类只有使用的时候才会被初始化</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LongCache</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LongCache</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long cache[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>[-(-<span class="hljs-number">128</span>) + <span class="hljs-number">127</span> + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cache.length; i++)<br>            cache[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(i - <span class="hljs-number">128</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>Byte, Short, Long 缓存的范围都是 <code>-128~127</code></li><li>Character 缓存的范围是 <code>0~127</code> </li><li>Integer 默认的范围是 <code>-128~127</code>，最小值不能变，但最大值可以通过调整虚拟机参数 <code>-Djava.lang.Integer.IntegerCache.high</code>来改变</li><li>Boolean 只缓存了 <code>TRUE</code> 和 <code>FALSE</code></li></ul></blockquote><h5 id="String-串池"><a href="#String-串池" class="headerlink" title="String 串池"></a>String 串池</h5><h5 id="BigDecimal-BigInteger"><a href="#BigDecimal-BigInteger" class="headerlink" title="BigDecimal BigInteger"></a>BigDecimal BigInteger</h5><h4 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h4><p><del>异步模式：让有限的工作线程（<code>Worker Thread</code>）来轮流异步处理无限多的任务，也可将其归类为分工模式，典型实现就是线程池</del></p><p><del>工作机制：享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象</del></p><p><del>自定义连接池：</del></p><p>例如：一个线上商城应用，QPS 达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。这时预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压垮数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Pool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pool</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> pool.borrow();<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">1000</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            pool.free(con);<br>        &#125;).start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pool</span> &#123;<br>    <span class="hljs-comment">//连接池的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> poolSize;<br>    <span class="hljs-comment">//连接对象的数组</span><br>    <span class="hljs-keyword">private</span> Connection[] connections;<br>    <span class="hljs-comment">//连接状态数组 0表示空闲  1表示繁忙</span><br>    <span class="hljs-keyword">private</span> AtomicIntegerArray states;  <span class="hljs-comment">//int[] -&gt; AtomicIntegerArray</span><br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pool</span><span class="hljs-params">(<span class="hljs-type">int</span> poolSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.poolSize = poolSize;<br>        <span class="hljs-built_in">this</span>.connections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Connection</span>[poolSize];<br>        <span class="hljs-built_in">this</span>.states = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicIntegerArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[poolSize]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>            connections[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockConnection</span>(<span class="hljs-string">&quot;连接&quot;</span> + (i + <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用连接</span><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">borrow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>                <span class="hljs-keyword">if</span> (states.get(i) == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (states.compareAndSet(i, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; borrow &quot;</span> +  connections[i]);<br>                        <span class="hljs-keyword">return</span> connections[i];<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//如果没有空闲连接，当前线程等待</span><br>            <span class="hljs-comment">//  极端情况，当所有的连接都被占用时，此时遍历到最后一个的时候，123456789全部腾出来了，但是由于此时还没有进入 wait 状态，导致存在空闲连接，却进入了 wait 状态，</span><br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; wait...&quot;</span>);<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//归还连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(Connection con)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>            <span class="hljs-keyword">if</span> (connections[i] == con) &#123;<span class="hljs-comment">//判断是否是同一个对象</span><br>                states.set(i, <span class="hljs-number">0</span>);<span class="hljs-comment">//不用cas的原因是只会有一个线程使用该连接</span><br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; free &quot;</span> + con);<br>                    <span class="hljs-built_in">this</span>.notifyAll();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MockConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Connection</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//省略需要实现的方法</span><br>&#125;<br><br>output:<br>Thread-<span class="hljs-number">0</span> borrow MockConnection@7e46a481<br>Thread-<span class="hljs-number">1</span> borrow MockConnection<span class="hljs-meta">@aaf8f6</span><br>Thread-<span class="hljs-number">3</span> wait...<br>Thread-<span class="hljs-number">4</span> wait...<br>Thread-<span class="hljs-number">2</span> wait...<br>Thread-<span class="hljs-number">1</span> free MockConnection<span class="hljs-meta">@aaf8f6</span><br>Thread-<span class="hljs-number">4</span> wait...<br>Thread-<span class="hljs-number">2</span> borrow MockConnection<span class="hljs-meta">@aaf8f6</span><br>Thread-<span class="hljs-number">3</span> wait...<br>Thread-<span class="hljs-number">0</span> free MockConnection@7e46a481<br>Thread-<span class="hljs-number">3</span> borrow MockConnectionn@7e46a481<br>Thread-<span class="hljs-number">4</span> wait...<br>Thread-<span class="hljs-number">3</span> free MockConnection@7e46a481<br>Thread-<span class="hljs-number">4</span> borrow MockConnection@7e46a481<br>Thread-<span class="hljs-number">2</span> free MockConnection<span class="hljs-meta">@aaf8f6</span><br>Thread-<span class="hljs-number">4</span> free MockConnection@7e46a481<br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>以上实现没有考虑：</p><ul><li>连接的动态增长与收缩</li><li>连接保活(可用性检测)</li><li>等待超时处理</li><li>分布式 hash</li></ul><p>对于关系型数据库，有比较成熟的连接池实现，例如 <code>c3p0</code> , <code>druid</code> 等</p><p>对于更通用的对象池，可以考虑使用 <code>apache commons pool</code>，例如 <code>redis</code> 连接池可以参考 <code>jedis</code> 中关于连接池的实现</p><h4 id="自定义线程池进阶：解决死等"><a href="#自定义线程池进阶：解决死等" class="headerlink" title="自定义线程池进阶：解决死等"></a>自定义线程池进阶：解决死等</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.TestPool&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadPool</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPool</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1000</span>, TimeUnit.SECONDS, <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>            threadPool.execute(() -&gt; &#123;<br>                log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, j);<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br>    <span class="hljs-comment">// 任务队列</span><br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;<br><br>    <span class="hljs-comment">// 线程集合</span><br>    <span class="hljs-comment">//  private HashSet&lt;? extends Thread&gt; workers = new HashSet();</span><br>    <span class="hljs-keyword">private</span> HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>    <span class="hljs-comment">// 核心线程数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> coreSize;<br><br>    <span class="hljs-comment">// 获取任务的超时时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;<br><br>    <span class="hljs-keyword">private</span> TimeUnit timeUnit;<br><br><br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable task)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>            <span class="hljs-comment">// 当任务数没有超过 coreSize，直接交给 Worker 对象运行</span><br>            <span class="hljs-keyword">if</span> (workers.size() &lt; coreSize) &#123;<br>                <span class="hljs-type">Worker</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(task);<br>                log.debug(<span class="hljs-string">&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;</span>, worker, task);<br>                workers.add(worker);<br>                worker.start();<br>            &#125;<br>            <span class="hljs-comment">// 当任务数超过了 coreSize，加入任务队列暂存起来</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);<br>                taskQueue.put(task);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> coreSize, <span class="hljs-type">long</span> timeout, TimeUnit timeUnit, <span class="hljs-type">int</span> queueCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coreSize = coreSize;<br>        <span class="hljs-built_in">this</span>.timeout = timeout;<br>        <span class="hljs-built_in">this</span>.timeUnit = timeUnit;<br>        <span class="hljs-built_in">this</span>.taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingQueue</span>&lt;&gt;(queueCapacity);<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> Runnable task;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(Runnable task)</span> &#123;<br>            <span class="hljs-built_in">this</span>.task = task;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 执行任务</span><br>            <span class="hljs-comment">// 1） 当 task 不为空，执行任务</span><br>            <span class="hljs-comment">// 2） 当 task 执行完毕，再接着从任务队列获取任务并执行</span><br>            <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = taskQueue.take()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;正在执行的任务:&#123;&#125;&quot;</span>, task);<br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    task = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>                log.debug(<span class="hljs-string">&quot;worker被移除&#123;&#125;&quot;</span>, <span class="hljs-built_in">this</span>);<br>                workers.remove(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// 1. 任务队列</span><br>    <span class="hljs-keyword">private</span> Deque&lt;T&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 2. 锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">// 3. 生产者条件变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">fullWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">// 4. 消费者条件变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">emptyWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">// 5. 容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">// 带超时的堵塞获取</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将 timeout 统一转换成纳秒</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);<br>            <span class="hljs-comment">// 如果队列为空</span><br>            <span class="hljs-keyword">while</span> (deque.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 返回的是剩余时间</span><br>                    <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                    nanos = emptyWaitSet.awaitNanos(timeout);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 说明不为空，移除第一个，且唤醒生产者条件变量</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 堵塞获取</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 如果队列为空</span><br>            <span class="hljs-keyword">while</span> (deque.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    emptyWaitSet.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 说明不为空，移除第一个，且唤醒生产者条件变量</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 堵塞添加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T element)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 如果队列满了</span><br>            <span class="hljs-keyword">while</span> (deque.size() == capacity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fullWaitSet.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 说明有空余位置，在最后加入新的，且唤醒消费者条件变量</span><br>            deque.addLast(element);<br>            emptyWaitSet.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> deque.size();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/./Resources/image-20230721093939572.png" alt="image-20230721093939572"></p><p>存在的问题：</p><p>当没有任务时，工作线程依然在运行死等</p><p>解决：使用带超时的获取任务</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ while (task != null || (task = taskQueue.poll(timeout, timeUnit)) != null)</span><br><span class="hljs-deletion">-  while (task != null || (task = taskQueue.take()) != null)</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/./Resources/image-20230721094442262.png" alt="image-20230721094442262"></p><h4 id="自定义线程池进进阶：拒绝策略"><a href="#自定义线程池进进阶：拒绝策略" class="headerlink" title="自定义线程池进进阶：拒绝策略"></a>自定义线程池进进阶：拒绝策略</h4><p>存在的问题：</p><p>当任务超出了任务队列容量时，就会出现一个线程加入不了任务队列，在加入时一直阻塞</p><p><img src="/./Resources/image-20230721100603481.png" alt="image-20230721100603481"></p><p><img src="/./Resources/image-20230721100440652.png" alt="image-20230721100440652"></p><p>解决办法：</p><p>在添加任务时，增加超时判断，如果超时了返回 <code>false</code> 交给主线程判断是继续加入还是放弃（策略模式） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.TestPool&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadPool</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPool</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>, TimeUnit.SECONDS, <span class="hljs-number">1</span>, (queue, task) -&gt; &#123;<br>            <span class="hljs-comment">// 1. 死等</span><br><span class="hljs-comment">//            queue.put(task);</span><br>            <span class="hljs-comment">// 2. 带超时等待</span><br><span class="hljs-comment">//            queue.offer(task, 500, TimeUnit.MILLISECONDS);</span><br>            <span class="hljs-comment">// 3. 让调用者放弃任务执行(因为任务队列满了，没有做任何操作 = 放弃)</span><br><span class="hljs-comment">//            log.debug(&quot;放弃执行任务 &#123;&#125;&quot;, task);</span><br>            <span class="hljs-comment">// 4. 让调用者抛出异常(区别于第3点，该任务失败后，后面的任务都会失败)</span><br><span class="hljs-comment">//            throw new RuntimeException(&quot;任务执行失败,&quot; + task);</span><br>            <span class="hljs-comment">// 5. 让调用者自己执行任务</span><br>            task.run();<br><br>        &#125;);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>            threadPool.execute(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000L</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, j);<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@FunctionalInterface</span> <span class="hljs-comment">// 拒绝策略</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RejectPolicy</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reject</span><span class="hljs-params">(BlockingQueue&lt;T&gt; queue, T task)</span>;<br><br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br>    <span class="hljs-comment">// 任务队列</span><br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;<br><br>    <span class="hljs-comment">// 线程集合</span><br>    <span class="hljs-comment">//  private HashSet&lt;? extends Thread&gt; workers = new HashSet();</span><br>    <span class="hljs-keyword">private</span> HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>    <span class="hljs-comment">// 核心线程数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> coreSize;<br><br>    <span class="hljs-comment">// 获取任务的超时时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;<br><br>    <span class="hljs-keyword">private</span> TimeUnit timeUnit;<br><br>    <span class="hljs-keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable task)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>            <span class="hljs-comment">// 当任务数没有超过 coreSize，直接交给 Worker 对象运行</span><br>            <span class="hljs-keyword">if</span> (workers.size() &lt; coreSize) &#123;<br>                <span class="hljs-type">Worker</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(task);<br>                log.debug(<span class="hljs-string">&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;</span>, worker, task);<br>                workers.add(worker);<br>                worker.start();<br>            &#125;<br>            <span class="hljs-comment">// 当任务数超过了 coreSize，加入任务队列暂存起来</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//taskQueue.put(task);</span><br>                <span class="hljs-comment">// 1) 死等</span><br>                <span class="hljs-comment">// 2) 带超时等待</span><br>                <span class="hljs-comment">// 3) 让调用者放弃任务执行</span><br>                <span class="hljs-comment">// 4) 让调用者抛出异常</span><br>                <span class="hljs-comment">// 5) 让调用者自己执行任务</span><br>                taskQueue.tryPut(rejectPolicy, task);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> coreSize, <span class="hljs-type">long</span> timeout, TimeUnit timeUnit, <span class="hljs-type">int</span> queueCapacity, RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coreSize = coreSize;<br>        <span class="hljs-built_in">this</span>.timeout = timeout;<br>        <span class="hljs-built_in">this</span>.timeUnit = timeUnit;<br>        <span class="hljs-built_in">this</span>.taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingQueue</span>&lt;&gt;(queueCapacity);<br>        <span class="hljs-built_in">this</span>.rejectPolicy = rejectPolicy;<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> Runnable task;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(Runnable task)</span> &#123;<br>            <span class="hljs-built_in">this</span>.task = task;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 执行任务</span><br>            <span class="hljs-comment">// 1） 当 task 不为空，执行任务</span><br>            <span class="hljs-comment">// 2） 当 task 执行完毕，再接着从任务队列获取任务并执行</span><br><span class="hljs-comment">//            while (task != null || (task = taskQueue.take()) != null) &#123;</span><br>            <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;正在执行的任务:&#123;&#125;&quot;</span>, task);<br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    task = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>                log.debug(<span class="hljs-string">&quot;worker被移除&#123;&#125;&quot;</span>, <span class="hljs-built_in">this</span>);<br>                workers.remove(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// 1. 任务队列</span><br>    <span class="hljs-keyword">private</span> Deque&lt;T&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 2. 锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">// 3. 生产者条件变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">fullWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">// 4. 消费者条件变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">emptyWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">// 5. 容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">// 带超时的堵塞获取</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将 timeout 统一转换成纳秒</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);<br>            <span class="hljs-comment">// 如果队列为空</span><br>            <span class="hljs-keyword">while</span> (deque.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 返回的是剩余时间</span><br>                    <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                    nanos = emptyWaitSet.awaitNanos(timeout);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 说明不为空，移除第一个，且唤醒生产者条件变量</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 堵塞获取</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 如果队列为空</span><br>            <span class="hljs-keyword">while</span> (deque.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    emptyWaitSet.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 说明不为空，移除第一个，且唤醒生产者条件变量</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> deque.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 堵塞添加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T task)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 如果队列满了</span><br>            <span class="hljs-keyword">while</span> (deque.size() == capacity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;等待加入任务队列 &#123;&#125;&quot;</span>, task);<br>                    fullWaitSet.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            log.debug(<span class="hljs-string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);<br>            <span class="hljs-comment">// 说明有空余位置，在最后加入新的，且唤醒消费者条件变量</span><br>            deque.addLast(task);<br>            emptyWaitSet.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 带超时时间的堵塞添加</span><br>    <span class="hljs-comment">// ps: 批量修改该方法的所有名字  shift + F6</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(T task, <span class="hljs-type">long</span> timeout, TimeUnit timeUnit)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> timeUnit.toNanos(timeout);<br>            <span class="hljs-comment">// 如果队列满了</span><br>            <span class="hljs-keyword">while</span> (deque.size() == capacity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;等待加入任务队列 &#123;&#125;&quot;</span>, task);<br>                    <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;<br>                        log.debug(<span class="hljs-string">&quot;加入任务队列失败 &#123;&#125;&quot;</span>, task);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    nanos = fullWaitSet.awaitNanos(nanos);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>            log.debug(<span class="hljs-string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);<br>            <span class="hljs-comment">// 说明有空余位置，在最后加入新的，且唤醒消费者条件变量</span><br>            deque.addLast(task);<br>            emptyWaitSet.signal();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// finally里面的代码依然会被执行</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> deque.size();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryPut</span><span class="hljs-params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断队列是否已满</span><br>            <span class="hljs-keyword">if</span> (deque.size() == capacity) &#123;<br>                rejectPolicy.reject(<span class="hljs-built_in">this</span>, task);<br>            &#125;<br>            <span class="hljs-comment">// 队列还有空闲</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);<br>                <span class="hljs-comment">// 说明有空余位置，在最后加入新的，且唤醒消费者条件变量</span><br>                deque.addLast(task);<br>                emptyWaitSet.signal();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="七、同步器"><a href="#七、同步器" class="headerlink" title="七、同步器"></a>七、同步器</h2><h3 id="7-1-AQS"><a href="#7-1-AQS" class="headerlink" title="7.1 AQS"></a>7.1 AQS</h3><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p><code>AQS</code>：<code>AbstractQueuedSynchronizer</code>，是阻塞式锁和相关的同步器工具的框架（抽象类），许多同步类实现都依赖于该同步器。</p><p><code>AQS</code> 用状态属性来表示资源的状态（分<strong>独占模式和共享模式</strong>），子类需要定义 1. 如何维护这个状态、2. 控制如何获取锁、3. 控制如何释放锁</p><ul><li>独占模式是只有一个线程能够访问资源，如 <code>ReentrantLock</code></li><li>共享模式允许多个线程访问资源，如 <code>Semaphore</code>，<code>ReentrantReadWriteLock</code> 是组合式</li></ul><p><code>AQS</code> 核心思想：</p><ul><li>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置锁定状态；</li><li>如果被请求的共享资源被占用，<code>AQS</code> 用队列实现线程阻塞等待以及被唤醒时锁分配的机制，将暂时获取不到锁的线程加入到队列中 <code>CLH</code> 是一种基于单向链表的<strong>高性能、公平的自旋锁</strong>，<code>AQS</code> 是将每条请求共享资源的线程封装成一个 <code>CLH</code> 锁队列的一个结点（<code>Node</code>）来实现锁的分配；</li></ul><p><code>CLH</code> 队列结构如下图所示：</p><p><img src="/./Resources/clh-queue-structure.png" alt="CLH 队列结构"></p><p><code>AQS</code> (<code>AbstractQueuedSynchronizer</code>)的核心原理图：</p><p><img src="/./Resources/clh-queue-state.png" alt="CLH 队列"></p><h4 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h4><p>设计原理：这部分可能看了之后的加锁和释放锁才能理解的更透彻一点</p><ul><li><p>获取锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(state 状态不允许获取) &#123;<span class="hljs-comment">// tryAcquire(arg)</span><br>    <span class="hljs-keyword">if</span>(队列中还没有此线程) &#123;<br>        入队并阻塞 park<br>    &#125;<br>&#125;<br>当前线程出队<br></code></pre></td></tr></table></figure></li><li><p>释放锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(state 状态允许了) &#123;<span class="hljs-comment">// tryRelease(arg)</span><br>    恢复阻塞的线程(s) unpark<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><code>AbstractQueuedSynchronizer</code> 中 <code>state</code> 设计：</p><ul><li><p><code>state</code> 使用了 <code>32bit</code> <code>int</code> 来维护同步状态，独占模式 0 表示未加锁状态，大于 0 表示处于加锁状态(也可以表示加锁了几次)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br></code></pre></td></tr></table></figure></li><li><p><code>state</code> <strong>使用 volatile 修饰配合 cas</strong> 保证其修改时的原子性</p></li><li><p><code>state</code> 表示<strong>线程重入的次数（独占模式）或者剩余许可数（共享模式）</strong></p></li><li><p><code>state</code> API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回同步状态的当前值</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">return</span> state;<br>&#125;<br> <span class="hljs-comment">// 设置同步状态的值</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> newState)</span> &#123;<br>     state = newState;<br>&#125;<br><span class="hljs-comment">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetState</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>      <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-built_in">this</span>, stateOffset, expect, update);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>封装线程的 <code>Node</code> 节点中 <code>waitstate</code> 设计：</p><ul><li><p>使用 <strong>volatile 修饰配合 CAS</strong> 保证其修改时的原子性</p></li><li><p>表示 <code>Node</code> 节点的状态，有以下几种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认为 0</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> waitStatus;<br><span class="hljs-comment">// 由于超时或中断，此节点被取消，不会再改变状态</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 此节点后面的节点已（或即将）被阻止（通过park），【当前节点在释放或取消时必须唤醒后面的节点】</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIGNAL</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 此节点当前在条件队列中</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CONDITION</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>;<br><span class="hljs-comment">// 将releaseShared传播到其他节点</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATE</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/./Resources/aqs-exclusive-mode-acquire-lock.png" alt="AQS 独占模式获取锁"></p><p>阻塞恢复设计：</p><ul><li>使用 <code>park &amp; unpark</code> 来实现线程的暂停和恢复，因为命令的先后顺序不影响结果</li><li><code>park &amp; unpark</code> 是针对线程的，而不是针对同步器的，因此控制粒度更为精细</li><li><code>park</code> 线程可以通过 <code>interrupt</code> 打断</li></ul><p>队列设计：</p><ul><li><p>使用了 <code>FIFO</code> 先入先出队列，并不支持优先级队列，<strong>同步队列是双向链表，便于出队入队</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 头结点，指向哑元节点</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><span class="hljs-comment">// 阻塞队列的尾节点，阻塞队列不包含头结点，从 head.next → tail 认为是阻塞队列</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-comment">// 枚举：共享模式</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">SHARED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    <span class="hljs-comment">// 枚举：独占模式</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">EXCLUSIVE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// node 需要构建成 FIFO 队列，prev 指向前继节点</span><br>    <span class="hljs-keyword">volatile</span> Node prev;<br>    <span class="hljs-comment">// next 指向后继节点</span><br>    <span class="hljs-keyword">volatile</span> Node next;<br>    <span class="hljs-comment">// 当前 node 封装的线程</span><br>    <span class="hljs-keyword">volatile</span> Thread thread;<br>    <span class="hljs-comment">// 条件队列是单向链表，只有后继指针，条件队列使用该属性</span><br>    Node nextWaiter;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-AQS%E9%98%9F%E5%88%97%E8%AE%BE%E8%AE%A1.png"></p></li><li><p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 <code>Monitor</code> 的 <code>WaitSet</code>，<strong>条件队列是单向链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>, java.io.Serializable &#123;<br>    <span class="hljs-comment">// 指向条件队列的第一个 node 节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node firstWaiter;<br>    <span class="hljs-comment">// 指向条件队列的最后一个 node 节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node lastWaiter;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="模板对象"><a href="#模板对象" class="headerlink" title="模板对象"></a>模板对象</h4><p>同步器的设计是基于模板方法模式，该模式是基于继承的，主要是为了在不改变模板结构的前提下在子类中重新定义模板中的内容以实现复用代码</p><ul><li>使用者继承 <code>AbstractQueuedSynchronizer</code> 并重写指定的方法</li><li>将 <code>AQS</code> 组合在自定义同步组件的实现中，并调用其模板方法，这些模板方法会调用使用者重写的方法</li></ul><p><code>AQS</code> 使用了模板方法模式，自定义同步器时需要重写下面几个 <code>AQS</code> 提供的模板方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">isHeldExclusively()<span class="hljs-comment">//该线程是否正在独占资源。只有用到condition才需要去实现它</span><br> ---------------------------------------------独占方式---------------------------------------------------<br>tryAcquire(<span class="hljs-type">int</span>)<span class="hljs-comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false</span><br>tryRelease(<span class="hljs-type">int</span>)<span class="hljs-comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false</span><br> ---------------------------------------------共享方式---------------------------------------------------<br>tryAcquireShared(<span class="hljs-type">int</span>)<span class="hljs-comment">//共享方式。尝试获取资源。负数表示失败；0表示成功但没有剩余可用资源；正数表示成功且有剩余资源</span><br>tryReleaseShared(<span class="hljs-type">int</span>)<span class="hljs-comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false</span><br></code></pre></td></tr></table></figure><ul><li><p>默认情况下，每个方法都抛出 <code>UnsupportedOperationException</code></p><p><img src="/./Resources/%E5%8A%A8%E7%94%BB.gif" alt="动画"></p></li><li><p>这些方法的实现必须是内部线程安全的</p></li><li><p><code>AQS</code> 类中的其他方法都是 <code>final</code> ，所以无法被其他类使用，只有这几个方法可以被其他类使用</p></li></ul><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><p>自定义一个不可重入锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span> &#123;<br>    <span class="hljs-comment">//独占锁 不可重入</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 加上锁 设置 owner 为当前线程</span><br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//解锁</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>            setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(<span class="hljs-number">0</span>);<span class="hljs-comment">//volatile 修饰的变量放在后面，防止指令重排</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//是否持有独占锁</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MySync</span> <span class="hljs-variable">sync</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySync</span>();<br><br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//加锁（不成功进入等待队列等待）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        sync.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//加锁 可打断</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//尝试加锁，尝试一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//尝试加锁，带超时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(time));<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//解锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span>   <span class="hljs-comment">//条件变量</span><br>    <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里可以参考 <code>ReentrantLock</code> 的源码，自定义一个同步器组件，例如闭锁，可重入锁那些都是这么做。在自定义的同步器组件内部定义一个 <code>AQS</code> 类的内部类，所有操作交给这个内部类完成，我们的自定义同步组件只需要调用这个内部类的方法。</p><p>部分代码如下：</p><p><img src="/./Resources/image-20230723192720957.png" alt="image-20230723192720957"></p></blockquote><h4 id="测试自定义锁"><a href="#测试自定义锁" class="headerlink" title="测试自定义锁"></a>测试自定义锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAqs</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Mylock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mylock</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;locking&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;unlocking&quot;</span>);<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;locking&quot;</span>);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;unlocking&quot;</span>);<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从结果可以看出，t2在t1解锁之后才拿到了锁</span><br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">54.756</span> [t1] DEBUG org.example.TestAqs - locking<br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">59.769</span> [t1] DEBUG org.example.TestAqs - unlocking<br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">59.769</span> [t2] DEBUG org.example.TestAqs - locking<br><span class="hljs-number">19</span>:<span class="hljs-number">44</span>:<span class="hljs-number">59.769</span> [t2] DEBUG org.example.TestAqs - unlocking<br></code></pre></td></tr></table></figure><h3 id="7-2-ReentrantLock"><a href="#7-2-ReentrantLock" class="headerlink" title="7.2 ReentrantLock"></a>7.2 ReentrantLock</h3><p><img src="/./Resources/reentrantlock-class-diagram-1690162536719-3.png" alt="img"></p><p><code>ReentrantLock = Reentrant(可重入的) + Lock(锁)</code></p><h4 id="锁对比"><a href="#锁对比" class="headerlink" title="锁对比"></a>锁对比</h4><p><code>ReentrantLock</code> 相对于 <code>synchronized</code> 具备如下特点：</p><ol><li>锁的实现：<code>synchronized</code> 是 <code>JVM</code> 实现的，而 <code>ReentrantLock</code> 是 <code>JDK</code> 实现的</li><li>性能：新版本 <code>Java</code> 对 <code>synchronized</code> 进行了很多优化，<code>synchronized</code> 与 <code>ReentrantLock</code> 大致相同</li><li>使用：<code>ReentrantLock</code> 需要手动解锁，<code>synchronized</code> 执行完代码块自动解锁</li><li><strong>可中断</strong>：<code>ReentrantLock</code> 可中断，而 <code>synchronized</code> 不行</li><li><strong>公平锁</strong>：公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁<ul><li><code>ReentrantLock</code> 可以设置公平锁，<code>synchronized</code> 中的锁是非公平的</li><li>不公平锁的含义是阻塞队列内公平，队列外非公平</li></ul></li><li>锁超时：尝试获取锁，超时获取不到直接放弃，不进入阻塞队列<ul><li><code>ReentrantLock</code> 可以设置超时时间，<code>synchronized</code> 会一直等待</li></ul></li><li>锁绑定多个条件：一个 <code>ReentrantLock</code> 可以同时绑定多个 <code>Condition</code> 对象，更细粒度的唤醒线程</li><li>两者都是可重入锁</li></ol><h4 id="使用锁"><a href="#使用锁" class="headerlink" title="使用锁"></a>使用锁</h4><p>构造方法：<code>ReentrantLock lock = new ReentrantLock();</code></p><p><code>ReentrantLock</code> 类 API：</p><ul><li><p><code>public void lock()</code>：获得锁</p><ul><li><p>如果锁没有被另一个线程占用，则将锁定计数设置为 1</p></li><li><p>如果当前线程已经保持锁定，则保持计数增加 1 </p></li><li><p>如果锁被另一个线程保持，则当前线程被禁用线程调度，并且在锁定已被获取之前<strong>处于休眠状态</strong></p></li></ul></li><li><p><code>public void unlock()</code>：尝试释放锁</p><ul><li>如果当前线程是该锁的持有者，则保持计数递减</li><li>如果保持计数现在为零，则锁定被释放</li><li>如果当前线程不是该锁的持有者，则抛出异常</li></ul></li></ul><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取锁</span><br>reentrantLock.lock();<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 临界区</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放锁</span><br>reentrantLock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平：先排队先使用锁</p><p>不公平：随机</p><h5 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h5><p>构造方法：<code>ReentrantLock lock = new ReentrantLock(true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ReentrantLock</code>  <strong>默认是不公平的</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：<strong>公平锁一般没有必要，会降低并发度</strong></p><h5 id="公平锁实现原理"><a href="#公平锁实现原理" class="headerlink" title="公平锁实现原理"></a>公平锁实现原理</h5><p>与非公平锁主要区别在于 <code>tryAcquire</code> 方法：先检查 <code>AQS</code> 队列中是否有前驱节点，没有才去 <code>CAS</code> 竞争</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 先检查 AQS 队列中是否有前驱节点, 没有(false)才去竞争</span><br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 锁重入</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>非公平锁的 <code>tryAcquire</code> ，如果当前锁没有占用，那么直接尝试获取锁</p><p><img src="/./Resources/image-20230724102556568.png" alt="image-20230724102556568"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;    <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    Node s;    <br>    <span class="hljs-comment">// 头尾指向一个节点，链表为空，返回false</span><br>    <span class="hljs-keyword">return</span> h != t &amp;&amp;<br>        <span class="hljs-comment">// 头尾之间有节点，判断头节点的下一个是不是空</span><br>        <span class="hljs-comment">// 不是空进入最后的判断，第二个节点的线程是否是本线程，不是返回 true，表示当前节点有前驱节点</span><br>        ((s = h.next) == <span class="hljs-literal">null</span> || s.thread != Thread.currentThread());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="非公平锁实现原理"><a href="#非公平锁实现原理" class="headerlink" title="非公平锁实现原理"></a>非公平锁实现原理</h4><h5 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h5><p><code>NonfairSync</code> 继承自 <code>AQS</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.lock();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>没有竞争：<code>ExclusiveOwnerThread</code> 属于 <code>Thread-0</code>，<code>state</code> 设置为 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.NonfairSync#lock</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 用 cas 尝试（仅尝试一次）将 state 从 0 改为 1, 如果成功表示【获得了独占锁】</span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment">// 设置当前线程为独占线程</span><br>        setExclusiveOwnerThread(Thread.currentThread());<br>    <span class="hljs-keyword">else</span><br>        acquire(<span class="hljs-number">1</span>);<span class="hljs-comment">//失败进入</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230723204001812.png" alt="image-20230723204001812"></p></li><li><p>第一个竞争出现：<code>Thread-1</code> 执行，<code>CAS</code> 尝试将 <code>state</code> 由 0 改为 1，结果失败（第一次），进入 <code>acquire</code> 逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#acquire</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// tryAcquire 再次尝试</span><br>    <span class="hljs-comment">// 如果成功, 跳出 if</span><br>    <span class="hljs-comment">// 如果失败, 会调用 addWaiter 将当前线程封装成node入队，acquireQueued 阻塞当前线程，</span><br>    <span class="hljs-comment">// acquireQueued 返回 true 表示挂起过程中线程被中断唤醒过，false 表示未被中断过</span><br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        <span class="hljs-comment">// 如果线程被中断了逻辑来到这，完成一次真正的打断效果</span><br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/./Resources/image-20230718195209314.png" alt="image-20230718195209314"></p><ul><li><p>进入 <code>tryAcquire</code> 尝试获取锁逻辑，这时 state 已经是1，结果仍然失败（第二次），加锁成功有两种情况：</p><ul><li>当前 <code>AQS</code> 处于无锁状态</li><li>加锁线程就是当前线程，说明发生了锁重入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.NonfairSync#tryAcquire</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>&#125;<br><span class="hljs-comment">// 抢占成功返回 true，抢占失败返回 false</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// state 值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">// 条件成立说明当前处于【无锁状态】</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//如果还没有获得锁，尝试用cas获得，这里体现非公平性: 不去检查 AQS 队列是否有阻塞线程直接获取锁        </span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            <span class="hljs-comment">// 获取锁成功设置当前线程为独占锁线程。</span><br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;    <br>&#125;    <br>   <span class="hljs-comment">// 如果已经有线程获得了锁, 独占锁线程还是当前线程, 表示【发生了锁重入】</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-comment">// 更新锁重入的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-comment">// 越界判断，当重入的深度很深时，会导致 nextc &lt; 0，int值达到最大之后再 + 1 变负数</span><br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 更新 state 的值，这里不使用 cas 是因为当前线程正在持有锁，所以这里的操作相当于在一个管程内</span><br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接下来进入 <code>addWaiter</code> 逻辑，构造 <code>Node</code> 队列（不是阻塞队列），前置条件是当前线程获取锁失败，说明有线程占用了锁</p><ul><li>图中黄色三角表示该 <code>Node</code> 的 <code>waitStatus</code> 状态，其中 0 为默认<strong>正常状态</strong></li><li><code>Node</code> 的创建是懒惰的，其中第一个 <code>Node</code> 称为 <strong>Dummy（哑元）或哨兵</strong>，用来占位，并不关联线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#addWaiter，返回当前线程的 node 节点</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-comment">// 将当前线程关联到一个 Node 对象上, 模式为独占模式   </span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-comment">// 快速入队，如果 tail 不为 null，说明存在队列</span><br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 将当前节点的前驱节点指向 尾节点</span><br>        node.prev = pred;<br>        <span class="hljs-comment">// 通过 cas 将 Node 对象加入 AQS 队列，成为尾节点，【尾插法】</span><br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<span class="hljs-comment">// 双向链表</span><br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始时队列为空，或者 CAS 失败进入这里</span><br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#enq</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>    <span class="hljs-comment">// 自旋入队，必须入队成功才结束循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-comment">// 说明当前锁被占用，且当前线程可能是【第一个获取锁失败】的线程，【还没有建立队列】</span><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 设置一个【哑元节点】，头尾指针都指向该节点</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 自旋到这，普通入队方式，首先赋值尾节点的前驱节点【尾插法】</span><br>            node.prev = t;<br>            <span class="hljs-comment">// 【在设置完尾节点后，才更新的原始尾节点的后继节点，所以此时从前往后遍历会丢失尾节点】</span><br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                <span class="hljs-comment">//【此时 t.next  = null，并且这里已经 CAS 结束，线程并不是安全的】</span><br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<span class="hljs-comment">// 返回当前 node 的前驱节点</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718195218382.png" alt="image-20230718195218382"></p></li><li><p>线程节点加入队列成功，进入 <code>AbstractQueuedSynchronizer#acquireQueued</code> 逻辑阻塞线程</p><ul><li><p><code>acquireQueued</code> 会在一个自旋中不断尝试获得锁，失败后进入 park 阻塞</p></li><li><p>如果当前线程是在 <code>head</code> 节点后，会再次 <code>tryAcquire</code> 尝试获取锁，state 仍为 1 则失败（第三次）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// true 表示当前线程抢占锁失败，false 表示成功</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 中断标记，表示当前线程是否被中断</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获得当前线程节点的前驱节点</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 前驱节点是 head, FIFO 队列的特性表示轮到当前线程可以去获取锁</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">// 获取成功, 设置当前线程自己的 node 为 head</span><br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                <span class="hljs-comment">// 表示抢占锁成功</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 返回当前线程是否被中断</span><br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">// 判断是否应当 park，返回 false 后需要新一轮的循环，返回 true 进入条件二阻塞线程</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                <span class="hljs-comment">// 条件二返回结果是当前线程是否被打断，没有被打断返回 false 不进入这里的逻辑</span><br>                <span class="hljs-comment">// 【就算被打断了，也会继续循环，并不会返回】</span><br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 【可打断模式下才会进入该逻辑】</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此时进入 <code>shouldParkAfterFailedAcquire</code> 逻辑，<strong>将前驱 node 的 waitStatus 改为 -1</strong>，返回 <code>false</code>；<code>waitStatus</code> 为 -1 的节点用来唤醒下一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-comment">// 表示前置节点是个可以唤醒当前节点的节点，返回 true</span><br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 前置节点的状态处于取消状态，需要【删除前面所有取消的节点】, 返回到外层循环重试</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 获取到非取消的节点，连接上当前节点</span><br>        pred.next = node;<br>    <span class="hljs-comment">// 默认情况下 node 的 waitStatus 是 0，进入这里的逻辑</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 【设置上一个节点状态为 Node.SIGNAL】，返回外层循环重试</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-comment">// 返回不应该 park，再次尝试一次</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230723205307498.png" alt="image-20230723205307498"></p><ul><li><code>shouldParkAfterFailedAcquire</code> 执行完毕回到 <code>acquireQueued</code> ，再次 <code>tryAcquire</code> 尝试获取锁，这时 state 仍为 1 获取失败（第四次）</li><li>当再次进入 <code>shouldParkAfterFailedAcquire</code> 时，这时其前驱 node 的 waitStatus 已经是 -1 了，返回 <code>true</code></li><li>进入 <code>parkAndCheckInterrupt</code>， Thread-1 park（灰色表示）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 阻塞当前线程，如果打断标记已经是 true, 则 park 会失效</span><br>    LockSupport.park(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 判断当前线程是否被打断，清除打断标记</span><br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230723205807842.png" alt="image-20230723205807842"></p></li><li><p>再有多个线程经历竞争失败后：</p><p><img src="/./Resources/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%813.png"></p></li></ul><h5 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h5><p>上图中的 <code>Thread-0</code> 释放锁，进入 <code>release</code> 流程</p><ul><li><p><code>ReentrantLock#unlock</code>：释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>进入 <code>tryRelease</code>，设置 <code>exclusiveOwnerThread</code> 为 null，<code>state</code> &#x3D; 0</p></li><li><p>当前队列不为 null，并且 <code>head</code> 的 <code>waitStatus = -1</code>，进入 <code>unparkSuccessor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#release</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试释放锁，tryRelease 返回 true 表示当前线程已经【完全释放锁，重入的释放了】</span><br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-comment">// 队列头节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">// 头节点什么时候是空？没有发生锁竞争，没有竞争线程创建哑元节点</span><br>        <span class="hljs-comment">// 条件成立说明阻塞队列有等待线程，需要唤醒 head 节点后面的线程</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.Sync#tryRelease</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-comment">// 减去释放的值，可能重入</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-comment">// 如果当前线程不是持有锁的线程直接报错</span><br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-comment">// 是否已经完全释放锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 支持锁重入, 只有 state 减为 0, 才完全释放锁成功</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">// 当前线程就是持有锁线程，所以可以直接更新锁，不需要使用 CAS</span><br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230723210825342.png" alt="image-20230723210825342"></p></li><li><p>进入 <code>AbstractQueuedSynchronizer#unparkSuccessor</code> 方法，唤醒当前节点的后继节点</p><ul><li>找到队列中距离 head 最近的一个没取消的 Node，unpark 恢复其运行，本例中即为 Thread-1</li><li>回到 Thread-1 的 <code>acquireQueued</code> 流程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 当前节点的状态</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;    <br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)        <br>        <span class="hljs-comment">// 【尝试重置状态为 0】，因为当前节点要完成对后续节点的唤醒任务了，不需要 -1 了</span><br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);    <br>    <span class="hljs-comment">// 找到需要 unpark 的节点，当前节点的下一个    </span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;    <br>    <span class="hljs-comment">// 已取消的节点不能唤醒，需要找到距离头节点最近的非取消的节点</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// AQS 队列【从后至前】找需要 unpark 的节点，直到 t == 当前的 node 为止，找不到就不唤醒了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-comment">// 说明当前线程状态需要被唤醒</span><br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-comment">// 置换引用</span><br>                s = t;<br>    &#125;<br>    <span class="hljs-comment">// 【找到合适的可以被唤醒的 node，则唤醒线程】</span><br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>从后向前的唤醒的原因</strong>：enq 方法中，节点是尾插法，首先赋值的是尾节点的前驱节点，此时前驱节点的 next 并没有指向尾节点，从前遍历会丢失尾节点</p><p><img src="/./Resources/image-20230723210854722.png" alt="image-20230723210854722"></p></li><li><p>唤醒的线程会从 park 位置开始执行，如果加锁成功（没有竞争），会设置</p><ul><li><code>exclusiveOwnerThread</code> 为 Thread-1，state &#x3D; 1</li><li>head 指向刚刚 Thread-1 所在的 Node，该 Node 会清空 Thread</li><li>原本的 head 因为从链表断开，而可被垃圾回收（图中有错误，原来的头节点的 <code>waitStatus</code> (三角符号)被改为 0 了）</li></ul><p><code>acquireQueued</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 2. 再次进入循环，重新 tryAcquire</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">// 3. 将当前这个节点设置为头节点（头节点（下图中的head，哨兵）的指针指向该节点）</span><br>                setHead(node);<br>                <span class="hljs-comment">// 4. 将原来的头节点断开连接</span><br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                <span class="hljs-comment">// 1. 从此处继续执行</span><br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%814.png"></p></li><li><p>如果这时有其它线程来竞争<strong>（非公平的体现）</strong>，例如这时有 Thread-4 来了并抢占了锁</p><ul><li>Thread-4 被设置为 <code>exclusiveOwnerThread</code>，state &#x3D; 1</li><li>Thread-1 再次进入循环中，再次 <code>tryAcquire</code>  ，获取锁失败，重新进入 <code>park</code> 阻塞</li></ul><p><img src="/./Resources/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%815.png"></p><p><img src="/./Resources/image-20230723213029517.png" alt="image-20230723213029517"></p></li></ul><blockquote><p>非公平锁体现在当前线程要和其他不在队列中的线程竞争锁，如果没竞争到，还是会回到队列中继续等待唤醒。</p></blockquote><h4 id="可重入原理"><a href="#可重入原理" class="headerlink" title="可重入原理"></a>可重入原理</h4><p>可重入是指同一个线程如果首次获得了这把锁，那么它是这把锁的拥有者，因此有权利再次获取这把锁，如果不可重入锁，那么第二次获得锁时，自己也会被锁挡住，直接造成死锁</p><p>以可重入锁为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    method1();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; execute method1&quot;</span>);<br>        method2();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; execute method2&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>加锁次数必须和解锁次数相同</strong>，如果加锁次数大于解锁次数，程序直接卡死，线程不能出来，如果加锁次数小于解锁次数，运行程序会直接报错(<code>IllegalMonitorStateException</code>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLock</span><span class="hljs-params">()</span> &#123;<br>    lock.lock();<br>    lock.lock(); <span class="hljs-comment">//加锁两次</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t get Lock&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock(); <span class="hljs-comment">// 解锁一次，卡死（这样测试没问题）</span><br>        <span class="hljs-comment">//lock.unlock();// 解锁两次，正常</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">reentrantLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    reentrantLock.lock();<br>    reentrantLock.lock();<br>    reentrantLock.lock();<span class="hljs-comment">//加锁三次</span><br>    reentrantLock.unlock();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        log.debug(<span class="hljs-string">&quot;尝试获取锁&quot;</span>);<br>        reentrantLock.lock();<br>        log.debug(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>    &#125;).start();<br>&#125;<br><br>output:<br><span class="hljs-number">10</span>:09:<span class="hljs-number">42.819</span> [Thread-<span class="hljs-number">0</span>] DEBUG org.example.TestAqs - 尝试获取锁<br>  ... 卡死<br></code></pre></td></tr></table></figure><hr><p>源码解析参考：<code>nonfairTryAcquire(int acquires)) </code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">// 还没有获得锁</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果已经获得了锁,线程还是当前线程，表示发生了锁重入</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>断点测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">reentrantLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    reentrantLock.lock();<br>    <span class="hljs-comment">// 断点处</span><br>    reentrantLock.lock();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230724092347703.png" alt="image-20230724092347703"></p><p>源码解析参考： <code>tryRelease(int releases)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 支持锁重入，只有 state 减为 0，才释放成功</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>断点测试：</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">reentrantLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    reentrantLock.lock();<br>    reentrantLock.lock();<br>    reentrantLock.lock();<br>    <span class="hljs-comment">// 断点处</span><br>    reentrantLock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230724100621937.png" alt="image-20230724100621937"></p><h4 id="可打断"><a href="#可打断" class="headerlink" title="可打断"></a>可打断</h4><h5 id="基本使用-4"><a href="#基本使用-4" class="headerlink" title="基本使用"></a>基本使用</h5><p><code>public void lockInterruptibly()</code>：获得可打断的锁</p><ul><li>如果没有竞争此方法就会获取 <code>lock</code> 对象锁</li><li>如果有竞争就进入阻塞队列，但可以被其他线程用 <code>interrupt</code> 打断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;    <br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;尝试获取锁&quot;</span>);<br>            lock.lockInterruptibly();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有获取到锁，被打断，直接返回&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    lock.lock();<br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    System.out.println(<span class="hljs-string">&quot;主线程进行打断锁&quot;</span>);<br>    t1.interrupt();<br>&#125;<br><br>output:<br>尝试获取锁<br>主线程进行打断锁<br>没有获取到锁，被打断，直接返回<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果是不可中断模式，那么即使使用了 <code>interrupt</code> 也不会让等待状态中的线程中断</p></blockquote><h5 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h5><ul><li><p>不可打断模式：即使它被打断，仍会驻留在 <code>AQS</code> 阻塞队列中，一直要<strong>等到获得锁后才能得知自己被打断</strong>了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;    <br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<span class="hljs-comment">//阻塞等待        </span><br>        <span class="hljs-comment">// 如果acquireQueued返回true，打断状态 interrupted = true        </span><br>        selfInterrupt();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selfInterrupt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 知道自己被打断了，需要重新产生一次中断完成中断效果</span><br>    Thread.currentThread().interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;    <br>    <span class="hljs-keyword">try</span> &#123;        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;        <br>        <span class="hljs-keyword">for</span> (;;) &#123;            <br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();            <br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;                <br>                setHead(node);                <br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC                </span><br>                failed = <span class="hljs-literal">false</span>;                <br>                <span class="hljs-comment">// 还是需要获得锁后, 才能返回打断状态</span><br>                <span class="hljs-keyword">return</span> interrupted;            <br>            &#125;            <br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())&#123;<br>                <span class="hljs-comment">// 条件二中判断当前线程是否被打断，被打断返回true，设置中断标记为 true，【获取锁后返回】</span><br>                interrupted = <span class="hljs-literal">true</span>;  <br>            &#125;                  <br>        &#125; <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;    <br>     <span class="hljs-comment">// 阻塞当前线程，如果打断标记已经是 true, 则 park 会失效</span><br>     LockSupport.park(<span class="hljs-built_in">this</span>);    <br>     <span class="hljs-comment">// 判断当前线程是否被打断，清除打断标记，被打断返回true</span><br>     <span class="hljs-keyword">return</span> Thread.interrupted();<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>可打断模式：<code>AbstractQueuedSynchronizer#acquireInterruptibly</code>，<strong>被打断后会直接抛出异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;    <br>    sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 被其他线程打断了直接返回 false</span><br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg))<br>        <span class="hljs-comment">// 没获取到锁，进入这里</span><br>        doAcquireInterruptibly(arg);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 返回封装当前线程的节点</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.EXCLUSIVE);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">//...</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                <span class="hljs-comment">// 【在 park 过程中如果被 interrupt 会抛出异常】, 而不会再次进入循环获取锁后才完成打断效果</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;    <br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 抛出异常前会进入这里</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            <span class="hljs-comment">// 取消当前线程的节点</span><br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 取消节点出队的逻辑</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelAcquire</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 把当前节点封装的 Thread 置为空</span><br>    node.thread = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 获取当前取消的 node 的前驱节点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> node.prev;<br>    <span class="hljs-comment">// 前驱节点也被取消了，循环找到前面最近的没被取消的节点</span><br>    <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>)<br>        node.prev = pred = pred.prev;<br>    <br><span class="hljs-comment">// 获取前驱节点的后继节点，可能是当前 node，也可能是 waitStatus &gt; 0 的节点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">predNext</span> <span class="hljs-operator">=</span> pred.next;<br>    <br><span class="hljs-comment">// 把当前节点的状态设置为 【取消状态 1】</span><br>    node.waitStatus = Node.CANCELLED;<br>    <br><span class="hljs-comment">// 条件成立说明当前节点是尾节点，把当前节点的前驱节点设置为尾节点</span><br>    <span class="hljs-keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;<br>        <span class="hljs-comment">// 把前驱节点的后继节点置空，这里直接把所有的取消节点出队</span><br>        compareAndSetNext(pred, predNext, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 说明当前节点不是 tail 节点</span><br>        <span class="hljs-type">int</span> ws;<br>        <span class="hljs-comment">// 条件一成立说明当前节点不是 head.next 节点</span><br>        <span class="hljs-keyword">if</span> (pred != head &amp;&amp;<br>            <span class="hljs-comment">// 判断前驱节点的状态是不是 -1，不成立说明前驱状态可能是 0 或者刚被其他线程取消排队了</span><br>            ((ws = pred.waitStatus) == Node.SIGNAL ||<br>             <span class="hljs-comment">// 如果状态不是 -1，设置前驱节点的状态为 -1</span><br>             (ws &lt;= <span class="hljs-number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;<br>            <span class="hljs-comment">// 前驱节点的线程不为null</span><br>            pred.thread != <span class="hljs-literal">null</span>) &#123;<br>            <br>            <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> node.next;<br>            <span class="hljs-comment">// 当前节点的后继节点是正常节点</span><br>            <span class="hljs-keyword">if</span> (next != <span class="hljs-literal">null</span> &amp;&amp; next.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-comment">// 把 前驱节点的后继节点 设置为 当前节点的后继节点，【从队列中删除了当前节点】</span><br>                compareAndSetNext(pred, predNext, next);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前节点是 head.next 节点，唤醒当前节点的后继节点</span><br>            unparkSuccessor(node);<br>        &#125;<br>        node.next = node; <span class="hljs-comment">// help GC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h4><h5 id="基本使用-5"><a href="#基本使用-5" class="headerlink" title="基本使用"></a>基本使用</h5><p><code>public boolean tryLock()</code>：尝试获取锁，获取到返回 true，获取不到直接放弃，不进入阻塞队列</p><p><code>public boolean tryLock(long timeout, TimeUnit unit)</code>：在给定时间内获取锁，获取不到就退出</p><p>注意：<code>tryLock</code> 期间也<strong>可以被打断</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!lock.tryLock(<span class="hljs-number">2</span>, TimeUnit.SECONDS)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;获取不到锁&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;被打断，获取不到锁&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    lock.lock();<br>    System.out.println(<span class="hljs-string">&quot;主线程获取到锁&quot;</span>);<br>    t1.start();<br>    <br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;主线程释放了锁&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现原理-3"><a href="#实现原理-3" class="headerlink" title="实现原理"></a>实现原理</h5><ul><li><p>成员变量：指定超时限制的阈值，小于该值的线程不会被挂起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">spinForTimeoutThreshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000L</span>;<br></code></pre></td></tr></table></figure><p>超时时间设置的小于该值，就会被禁止挂起，因为阻塞在唤醒的成本太高，不如选择自旋空转</p></li><li><p><code>tryLock()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;   <br>    <span class="hljs-comment">// 只尝试一次</span><br>    <span class="hljs-keyword">return</span> sync.nonfairTryAcquire(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>tryLock(long timeout, TimeUnit unit)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquireNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())        <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();    <br>    <span class="hljs-comment">// tryAcquire 尝试一次</span><br>    <span class="hljs-keyword">return</span> tryAcquire(arg) || doAcquireNanos(arg, nanosTimeout);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;    <br>    <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doAcquireNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span> &#123;    <br>    <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 获取最后期限的时间戳</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> System.nanoTime() + nanosTimeout;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">//...</span><br>            <span class="hljs-comment">// 计算还需等待的时间</span><br>            nanosTimeout = deadline - System.nanoTime();<br>            <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<span class="hljs-comment">//时间已到     </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                <span class="hljs-comment">// 如果 nanosTimeout 大于该值，才有阻塞的意义，否则直接自旋会好点</span><br>                nanosTimeout &gt; spinForTimeoutThreshold)<br>                LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanosTimeout);<br>            <span class="hljs-comment">// 【被打断会报异常】</span><br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="哲学家就餐"><a href="#哲学家就餐" class="headerlink" title="哲学家就餐"></a>哲学家就餐</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Chopstick</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chopstick</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//...</span><br>    <span class="hljs-type">Chopstick</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chopstick</span>(<span class="hljs-string">&quot;5&quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>(<span class="hljs-string">&quot;苏格拉底&quot;</span>, c1, c2).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>(<span class="hljs-string">&quot;柏拉图&quot;</span>, c2, c3).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>(<span class="hljs-string">&quot;亚里士多德&quot;</span>, c3, c4).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>(<span class="hljs-string">&quot;赫拉克利特&quot;</span>, c4, c5).start();    <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Philosopher</span>(<span class="hljs-string">&quot;阿基米德&quot;</span>, c5, c1).start();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Philosopher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Chopstick left;<br>    Chopstick right;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 尝试获得左手筷子</span><br>            <span class="hljs-keyword">if</span> (left.tryLock()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 尝试获得右手筷子</span><br>                    <span class="hljs-keyword">if</span> (right.tryLock()) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            System.out.println(<span class="hljs-string">&quot;eating...&quot;</span>);<br>                            Thread.sleep(<span class="hljs-number">1000</span>);<br>                        &#125; <span class="hljs-keyword">finally</span> &#123;<br>                            right.unlock();<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    left.unlock();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chopstick</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReentrantLock</span> &#123;<br>    String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chopstick</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;筷子&#123;&quot;</span> + name + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h4><h5 id="基本使用-6"><a href="#基本使用-6" class="headerlink" title="基本使用"></a>基本使用</h5><p>之前用 <code>while + wait</code> 实现唤醒指定条件的线程，见<a href="#%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96"> while + wait 唤醒指定线程</a>，另一种实现方式使用<code>ReentrantLock</code> 的条件变量。</p><p><code>synchronized</code> 的条件变量，是当条件不满足时进入 <code>WaitSet</code> 等待；<code>ReentrantLock</code> 的条件变量比 <code>synchronized</code> 强大之处在于<strong>支持多个条件变量</strong>，即支持进入不同的 <code>WaitSet</code> 等待；</p><p><code>ReentrantLock</code> 类获取 <code>Condition</code> 对象：<code>public Condition newCondition()</code></p><p><code>Condition</code> 类 API：</p><ul><li><code>void await()</code>：当前线程从运行状态进入等待状态，释放锁</li><li><code>void signal()</code>：唤醒一个等待在 <code>Condition</code> 上的线程，但是必须获得与该 <code>Condition</code> 相关的锁</li></ul><p>使用流程：</p><ul><li><p><strong>await &#x2F; signal 前需要获得锁</strong></p></li><li><p>await 执行后，会释放锁进入 ConditionObject 等待</p></li><li><p>await 的线程被唤醒去重新竞争 lock 锁</p></li><li><p><strong>线程在条件队列被打断会抛出中断异常</strong></p></li><li><p>竞争 lock 锁成功后，从 await 后继续执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;    <br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//创建一个新的条件变量（休息室）</span><br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-comment">//创建一个新的条件变量（休息室）</span><br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            System.out.println(<span class="hljs-string">&quot;进入等待&quot;</span>);<br>            <span class="hljs-comment">//进入休息室等待</span><br>            condition1.await();<br>            System.out.println(<span class="hljs-string">&quot;被唤醒了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;    <br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">//叫醒</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;            <br>            lock.lock();<br>            <span class="hljs-comment">//唤醒某一个等待的线程，类似于notify()</span><br>            condition2.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现原理-4"><a href="#实现原理-4" class="headerlink" title="实现原理"></a>实现原理</h5><h6 id="await"><a href="#await" class="headerlink" title="await"></a>await</h6><p>总体流程是将 <code>await</code> 线程包装成 <code>node 节点</code> 放入 <code>ConditionObject</code> 的条件队列，如果被唤醒就将 <code>node</code> 转移到 <code>AQS</code> 的执行阻塞队列，等待获取锁，<strong>每个 Condition 对象都包含一个等待队列</strong></p><ul><li><p>开始时 <code>Thread-0</code> 持有锁，调用 <code>await</code>，线程进入 <code>ConditionObject</code> 等待，直到被唤醒或打断，调用 await 方法的线程都是持锁状态的，所以说逻辑上<strong>不存在并发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>     <span class="hljs-comment">// 判断当前线程是否是中断状态，是就直接给个中断异常</span><br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-comment">// 将调用 await 的线程包装成 Node，添加到条件队列并返回</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addConditionWaiter();<br>    <span class="hljs-comment">// 完全释放节点持有的锁，因为其他线程唤醒当前线程的前提是【持有锁】</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> fullyRelease(node);<br>    <br>    <span class="hljs-comment">// 设置打断模式为没有被打断，状态码为 0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">interruptMode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 如果该节点还没有转移至 AQS 阻塞队列, park 阻塞，等待进入阻塞队列</span><br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;<br>        LockSupport.park(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">// 如果被打断，退出等待队列，对应的 node 【也会被迁移到阻塞队列】尾部，状态设置为 0</span><br>        <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// 逻辑到这说明当前线程退出等待队列，进入【阻塞队列】</span><br>    <br>    <span class="hljs-comment">// 尝试抢锁，释放了多少锁就【重新获取多少锁】，获取锁成功判断打断模式</span><br>    <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)<br>        interruptMode = REINTERRUPT;<br>    <br>    <span class="hljs-comment">// node 在条件队列时 如果被外部线程中断唤醒，会加入到阻塞队列，但是并未设 nextWaiter = null</span><br>    <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// 清理条件队列内所有已取消的 Node</span><br>        unlinkCancelledWaiters();<br>    <span class="hljs-comment">// 条件成立说明挂起期间发生过中断</span><br>    <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 应用打断模式</span><br>        reportInterruptAfterWait(interruptMode);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打断模式 - 在退出等待时重新设置打断状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REINTERRUPT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 打断模式 - 在退出等待时抛出异常</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">THROW_IE</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-ReentrantLock-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F1.png"></p></li><li><p><strong>创建新的 Node 状态为 -2（Node.CONDITION）</strong>，关联 Thread-0，加入等待队列尾部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addConditionWaiter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前条件队列的尾节点的引用，保存到局部变量 t 中</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> lastWaiter;<br>    <span class="hljs-comment">// 当前队列中不是空，并且节点的状态不是 CONDITION（-2），说明当前节点发生了中断</span><br>    <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;<br>        <span class="hljs-comment">// 清理条件队列内所有已取消的 Node</span><br>        unlinkCancelledWaiters();<br>        <span class="hljs-comment">// 清理完成重新获取 尾节点 的引用</span><br>        t = lastWaiter;<br>    &#125;<br>    <span class="hljs-comment">// 创建一个关联当前线程的新 node, 设置状态为 CONDITION(-2)，添加至队列尾部</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), Node.CONDITION);<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>        firstWaiter = node;<span class="hljs-comment">// 空队列直接放在队首【不用CAS因为执行线程是持锁线程，并发安全】</span><br>    <span class="hljs-keyword">else</span><br>        t.nextWaiter = node;<span class="hljs-comment">// 非空队列队尾追加</span><br>    lastWaiter = node;<span class="hljs-comment">// 更新队尾的引用</span><br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 清理条件队列内所有已取消（不是CONDITION）的 node，【链表删除的逻辑】</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlinkCancelledWaiters</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 从头节点开始遍历【FIFO】</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> firstWaiter;<br>    <span class="hljs-comment">// 指向正常的 CONDITION 节点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">trail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 等待队列不空</span><br>    <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 获取当前节点的后继节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> t.nextWaiter;<br>        <span class="hljs-comment">// 判断 t 节点是不是 CONDITION 节点，条件队列内不是 CONDITION 就不是正常的</span><br>        <span class="hljs-keyword">if</span> (t.waitStatus != Node.CONDITION) &#123; <br>            <span class="hljs-comment">// 不是正常节点，需要 t 与下一个节点断开</span><br>            t.nextWaiter = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 条件成立说明遍历到的节点还未碰到过正常节点</span><br>            <span class="hljs-keyword">if</span> (trail == <span class="hljs-literal">null</span>)<br>                <span class="hljs-comment">// 更新 firstWaiter 指针为下个节点</span><br>                firstWaiter = next;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-comment">// 让上一个正常节点指向 当前取消节点的 下一个节点，【删除非正常的节点】</span><br>                trail.nextWaiter = next;<br>            <span class="hljs-comment">// t 是尾节点了，更新 lastWaiter 指向最后一个正常节点</span><br>            <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>                lastWaiter = trail;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// trail 指向的是正常节点 </span><br>            trail = t;<br>        &#125;<br>        <span class="hljs-comment">// 把 t.next 赋值给 t，循环遍历</span><br>        t = next; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接下来 Thread-0 进入 AQS 的 <code>fullyRelease</code> 流程，释放同步器上的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 线程可能重入，需要将 state 全部释放</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullyRelease</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 完全释放锁是否成功，false 代表成功</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程所持有的 state 值总数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">// release -&gt; tryRelease 解锁重入锁</span><br>        <span class="hljs-keyword">if</span> (release(savedState)) &#123;<br>            <span class="hljs-comment">// 释放成功</span><br>            failed = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 返回解锁的深度</span><br>            <span class="hljs-keyword">return</span> savedState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 解锁失败抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 没有释放成功，将当前 node 设置为取消状态</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            node.waitStatus = Node.CANCELLED;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>fullyRelease</code> 中会 <code>unpark</code> AQS 队列中的下一个节点竞争锁，假设 Thread-1 竞争成功</p><p><img src="/./Resources/JUC-ReentrantLock-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F2.png"></p></li><li><p>Thread-0 进入 <code>isOnSyncQueue</code> 逻辑判断节点<strong>是否移动到阻塞队列</strong>，没有就 park 阻塞 Thread-0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOnSyncQueue</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// node 的状态是 CONDITION，signal 方法是先修改状态再迁移，所以前驱节点为空证明还【没有完成迁移】</span><br>    <span class="hljs-keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 说明当前节点已经成功入队到阻塞队列，且当前节点后面已经有其它 node，因为条件队列的 next 指针为 null</span><br>    <span class="hljs-keyword">if</span> (node.next != <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 说明【可能在阻塞队列，但是是尾节点】</span><br>    <span class="hljs-comment">// 从阻塞队列的尾节点开始向前【遍历查找 node】，如果查找到返回 true，查找不到返回 false</span><br>    <span class="hljs-keyword">return</span> findNodeFromTail(node);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>await 线程 park 后如果被 unpark 或者被打断，都会进入 <code>checkInterruptWhileWaiting</code> 判断线程是否被打断：<strong>在条件队列被打断的线程需要抛出异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">checkInterruptWhileWaiting</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// Thread.interrupted() 返回当前线程中断标记位，并且重置当前标记位 为 false</span><br>    <span class="hljs-comment">// 如果被中断了，根据是否在条件队列被中断的，设置中断状态码</span><br>    <span class="hljs-keyword">return</span> Thread.interrupted() ?(transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个方法只有在线程是被打断唤醒时才会调用</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transferAfterCancelledWait</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 条件成立说明当前node一定是在条件队列内，因为 signal 迁移节点到阻塞队列时，会将节点的状态修改为 0</span><br>    <span class="hljs-keyword">if</span> (compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-comment">// 把【中断唤醒的 node 加入到阻塞队列中】</span><br>        enq(node);<br>        <span class="hljs-comment">// 表示是在条件队列内被中断了，设置为 THROW_IE 为 -1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//执行到这里的情况：</span><br>    <span class="hljs-comment">//1.当前node已经被外部线程调用 signal 方法将其迁移到 阻塞队列 内了</span><br>    <span class="hljs-comment">//2.当前node正在被外部线程调用 signal 方法将其迁移至 阻塞队列 进行中状态</span><br>    <br>    <span class="hljs-comment">// 如果当前线程还没到阻塞队列，一直释放 CPU</span><br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node))<br>        Thread.<span class="hljs-keyword">yield</span>();<br><br>    <span class="hljs-comment">// 表示当前节点被中断唤醒时不在条件队列了，设置为 REINTERRUPT 为 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>最后开始处理中断状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reportInterruptAfterWait</span><span class="hljs-params">(<span class="hljs-type">int</span> interruptMode)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 条件成立说明【在条件队列内发生过中断，此时 await 方法抛出中断异常】</span><br>    <span class="hljs-keyword">if</span> (interruptMode == THROW_IE)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br><br>    <span class="hljs-comment">// 条件成立说明【在条件队列外发生的中断，此时设置当前线程的中断标记位为 true】</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interruptMode == REINTERRUPT)<br>        <span class="hljs-comment">// 进行一次自己打断，产生中断的效果</span><br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h6><ul><li><p>假设 Thread-1 要来唤醒 Thread-0，进入 ConditionObject 的 doSignal 流程，<strong>取得等待队列中第一个 Node</strong>，即 Thread-0 所在 Node，必须持有锁才能唤醒, 因此 doSignal 内线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 判断调用 signal 方法的线程是否是独占锁持有线程</span><br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-comment">// 获取条件队列中第一个 Node</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>    <span class="hljs-comment">// 不为空就将第该节点【迁移到阻塞队列】</span><br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>        doSignal(first);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230724112345082.png" alt="image-20230724112345082"></p><p><code>doSignal</code> 流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 唤醒 - 【将没取消的第一个节点转移至 AQS 队列尾部】</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignal</span><span class="hljs-params">(Node first)</span> &#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 成立说明当前节点的下一个节点是 null，当前节点是尾节点了，队列中只有当前一个节点了</span><br>        <span class="hljs-keyword">if</span> ((firstWaiter = first.nextWaiter) == <span class="hljs-literal">null</span>)<br>            lastWaiter = <span class="hljs-literal">null</span>;<br>        first.nextWaiter = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 将等待队列中的 Node 转移至 AQS 队列，不成功且还有节点则继续循环</span><br>    &#125; <span class="hljs-keyword">while</span> (!transferForSignal(first) &amp;&amp; (first = firstWaiter) != <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">// signalAll() 会调用这个函数，唤醒所有的节点</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignalAll</span><span class="hljs-params">(Node first)</span> &#123;<br>    lastWaiter = firstWaiter = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> first.nextWaiter;<br>        first.nextWaiter = <span class="hljs-literal">null</span>;<br>        transferForSignal(first);<br>        first = next;<br>    <span class="hljs-comment">// 唤醒所有的节点，都放到阻塞队列中</span><br>    &#125; <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230724112724221.png" alt="image-20230724112724221"></p></li><li><p>执行 <code>transferForSignal</code>，<strong>先将节点的 waitStatus 改为 0，然后加入 AQS 阻塞队列尾部</strong>，将 <code>Thread-3</code> 的 <code>waitStatus</code> 改为 -1(因为 -1 代表有责任唤醒后一个节点，后面没有节点，状态为 0)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果节点状态是取消, 返回 false 表示转移失败, 否则转移成功</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transferForSignal</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// CAS 修改当前节点的状态，修改为 0，因为当前节点马上要迁移到阻塞队列了</span><br>    <span class="hljs-comment">// 如果状态已经不是 CONDITION, 说明线程被取消（await 释放全部锁失败）或者被中断（可打断 cancelAcquire）</span><br>    <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>))<br>        <span class="hljs-comment">// 返回函数调用处继续寻找下一个节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">// 【先改状态，再进行迁移】</span><br>    <span class="hljs-comment">// 将当前 node 入阻塞队列，p 是当前节点在阻塞队列的【前驱节点】</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> enq(node);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> p.waitStatus;<br>    <br>    <span class="hljs-comment">// 如果前驱节点被取消或者不能设置状态为 Node.SIGNAL，就 unpark 取消当前节点线程的阻塞状态, </span><br>    <span class="hljs-comment">// 让 thread-0 线程竞争锁，重新同步状态</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))<br>        LockSupport.unpark(node.thread);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-ReentrantLock-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F3.png"></p></li><li><p><code>Thread-1</code> 释放锁，进入 <code>unlock</code> 流程</p></li></ul><h3 id="7-3-ReadWrite"><a href="#7-3-ReadWrite" class="headerlink" title="7.3 ReadWrite"></a>7.3 ReadWrite</h3><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p><code>ReentrantReadWriteLock</code> 在实际项目中使用的并不多，面试中也问的比较少，简单了解即可。<code>JDK 1.8</code> 引入了性能更好的读写锁 <code>StampedLock</code> 。</p><p>独占锁：指该锁一次只能被一个线程所持有，对 ReentrantLock 和 Synchronized 而言都是独占锁</p><p>共享锁：指该锁可以被多个线程锁持有</p><p><code>ReentrantReadWriteLock</code> 其<strong>读锁是共享锁，写锁是独占锁</strong></p><p>作用：多个线程同时读一个资源类没有任何问题，为了满足并发量，读取共享资源应该同时进行，但是如果一个线程想去写共享资源，就不应该再有其它线程可以对该资源进行读或写</p><p>使用规则：</p><ul><li><p>加锁解锁格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">r.lock();<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 临界区</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>r.unlock();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读-读能共存、读-写不能共存、写-写不能共存</p></li><li><p>读锁不支持条件变量</p></li><li><p><strong>重入时升级不支持</strong>：持有读锁的情况下去获取写锁会导致获取写锁永久等待，需要先释放读，再去获得写</p></li><li><p><strong>重入时降级支持</strong>：持有写锁的情况下去获取读锁，造成只有当前线程会持有读锁，因为写锁会互斥其他的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">w.lock();<br><span class="hljs-keyword">try</span> &#123;<br>    r.lock();<span class="hljs-comment">// 降级为读锁, 释放写锁, 这样能够让其它线程读取缓存</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125; <span class="hljs-keyword">finally</span>&#123;<br>    w.unlock();<span class="hljs-comment">// 要在写锁释放之前获取读锁</span><br>    &#125;<br>&#125; <span class="hljs-keyword">finally</span>&#123;<br>r.unlock();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>构造方法：</p><ul><li><code>public ReentrantReadWriteLock()</code>：默认构造方法，非公平锁</li><li><code>public ReentrantReadWriteLock(boolean fair)</code>：true 为公平锁</li></ul><p>常用API：</p><ul><li><code>public ReentrantReadWriteLock.ReadLock readLock()</code>：返回读锁</li><li><code>public ReentrantReadWriteLock.WriteLock writeLock()</code>：返回写锁</li><li><code>public void lock()</code>：加锁</li><li><code>public void unlock()</code>：解锁</li><li><code>public boolean tryLock()</code>：尝试获取锁</li></ul><p>读读并发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br>    ReentrantReadWriteLock.<span class="hljs-type">ReadLock</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> rw.readLock();<br>    ReentrantReadWriteLock.<span class="hljs-type">WriteLock</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> rw.writeLock();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        r.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread 1 running &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            r.unlock();<br>        &#125;<br>    &#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        r.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread 2 running &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            r.unlock();<br>        &#125;<br>    &#125;,<span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h4><p>缓存更新时，是先清缓存还是先更新数据库</p><ul><li><p>先清缓存：可能造成刚清理缓存还没有更新数据库，线程直接查询了数据库更新过期数据到缓存</p></li><li><p>先更新据库：可能造成刚更新数据库，还没清空缓存就有线程从缓存拿到了旧数据</p></li><li><p>补充情况：查询线程 A 查询数据时恰好缓存数据由于时间到期失效，或是第一次查询</p><p><img src="/./Resources/image-20230718195253136.png" alt="image-20230718195253136"></p></li></ul><p>可以使用读写锁进行操作</p><hr><h4 id="实现原理-5"><a href="#实现原理-5" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="成员属性-4"><a href="#成员属性-4" class="headerlink" title="成员属性"></a>成员属性</h5><p>读写锁用的是同一个 Sycn 同步器，因此等待队列、state 等也是同一个，原理与 ReentrantLock 加锁相比没有特殊之处，不同是<strong>写锁状态占了 state 的低 16 位，而读锁使用的是 state 的高 16 位</strong></p><ul><li><p>读写锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;<br></code></pre></td></tr></table></figure></li><li><p>构造方法：默认是非公平锁，可以指定参数创建公平锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>    <span class="hljs-comment">// true 为公平锁</span><br>    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>    <span class="hljs-comment">// 这两个 lock 共享同一个 sync 实例，都是由 ReentrantReadWriteLock 的 sync 提供同步实现</span><br>    readerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadLock</span>(<span class="hljs-built_in">this</span>);<br>    writerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteLock</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>Sync 类的属性：</p><ul><li><p>统计变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用来移位</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_SHIFT</span>   <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 高16位的1</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_UNIT</span>    <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);<br><span class="hljs-comment">// 65535，16个1，代表写锁的最大重入次数</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span>      <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 低16位掩码：0b 1111 1111 1111 1111，用来获取写锁重入的次数</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCLUSIVE_MASK</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>获取读写锁的次数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取读写锁的读锁分配的总次数</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sharedCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>    &#123; <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;<br><span class="hljs-comment">// 写锁（独占）锁的重入次数</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">exclusiveCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123; <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;<br></code></pre></td></tr></table></figure></li><li><p>内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 记录读锁线程自己的持有读锁的数量（重入次数），因为 state 高16位记录的是全局范围内所有的读线程获取读锁的总量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HoldCounter</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Use id, not reference, to avoid garbage retention</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">tid</span> <span class="hljs-operator">=</span> getThreadId(Thread.currentThread());<br>&#125;<br><span class="hljs-comment">// 线程安全的存放线程各自的 HoldCounter 对象</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;<br>    <span class="hljs-keyword">public</span> HoldCounter <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HoldCounter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内部类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 当前线程持有的可重入读锁的数量，计数为 0 时删除</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ThreadLocalHoldCounter readHolds;<br><span class="hljs-comment">// 记录最后一个获取【读锁】线程的 HoldCounter 对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HoldCounter cachedHoldCounter;<br></code></pre></td></tr></table></figure></li><li><p>首次获取锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一个获取读锁的线程</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">firstReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 记录该线程持有的读锁次数（读锁重入次数）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> firstReaderHoldCount;<br></code></pre></td></tr></table></figure></li><li><p>Sync 构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Sync() &#123;<br>    readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>();<br>    <span class="hljs-comment">// 确保其他线程的数据可见性，state 是 volatile 修饰的变量，重写该值会将线程本地缓存数据【同步至主存】</span><br>    setState(getState()); <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="加锁原理"><a href="#加锁原理" class="headerlink" title="加锁原理"></a>加锁原理</h5><ul><li><p>t1 线程：w.lock（<strong>写锁</strong>），成功上锁 state &#x3D; 0_1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// lock()  -&gt; sync.acquire(1);</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.acquire(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试获得写锁，获得写锁失败，将当前线程关联到一个 Node 对象上, 模式为独占模式 </span><br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">// 获得低 16 位, 代表写锁的 state 计数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>    <span class="hljs-comment">// 说明有读锁或者写锁</span><br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// c != 0 and w == 0 表示有读锁，【读锁不能升级】，直接返回 false</span><br>        <span class="hljs-comment">// w != 0 说明有写锁，写锁的拥有者不是自己，获取失败</span><br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// 执行到这里只有一种情况：【写锁重入】，所以下面几行代码不存在并发</span><br>        <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 写锁重入, 获得锁成功，没有并发，所以不使用 CAS</span><br>        setState(c + acquires);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// c == 0，说明没有任何锁，判断写锁是否该阻塞，是 false 就尝试获取锁，失败返回 false</span><br>    <span class="hljs-keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 获得锁成功，设置锁的持有线程为当前线程</span><br>    setExclusiveOwnerThread(current);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 非公平锁 writerShouldBlock 总是返回 false, 无需阻塞</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><span class="hljs-comment">// 公平锁会检查 AQS 队列中是否有前驱节点, 没有(false)才去竞争</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>t2 r.lock（<strong>读锁</strong>），进入 tryAcquireShared 流程：</p><ul><li>返回 -1 表示失败</li><li>如果返回 0 表示成功</li><li>返回正数表示还有多少后继节点支持共享模式，读写锁返回 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.acquireShared(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// tryAcquireShared 返回负数, 表示获取读锁失败</span><br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireShared(arg);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 尝试以共享模式获取</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">// exclusiveCount(c) 代表低 16 位, 写锁的 state，成立说明有线程持有写锁</span><br>    <span class="hljs-comment">// 写锁的持有者不是当前线程，则获取读锁失败，【写锁允许降级】</span><br>    <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp; getExclusiveOwnerThread() != current)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 高 16 位，代表读锁的 state，共享锁分配出去的总次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>    <span class="hljs-comment">// 读锁是否应该阻塞</span><br>    <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;r &lt; MAX_COUNT &amp;&amp;<br>        compareAndSetState(c, c + SHARED_UNIT)) &#123;<span class="hljs-comment">// 尝试增加读锁计数</span><br>        <span class="hljs-comment">// 加锁成功</span><br>        <span class="hljs-comment">// 加锁之前读锁为 0，说明当前线程是第一个读锁线程</span><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>            firstReader = current;<br>            firstReaderHoldCount = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 第一个读锁线程是自己就发生了读锁重入</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>            firstReaderHoldCount++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// cachedHoldCounter 设置为当前线程的 holdCounter 对象，即最后一个获取读锁的线程</span><br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>            <span class="hljs-comment">// 说明还没设置 rh</span><br>            <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                <span class="hljs-comment">// 获取当前线程的锁重入的对象，赋值给 cachedHoldCounter</span><br>                cachedHoldCounter = rh = readHolds.get();<br>            <span class="hljs-comment">// 还没重入</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                readHolds.set(rh);<br>            <span class="hljs-comment">// 重入 + 1</span><br>            rh.count++;<br>        &#125;<br>        <span class="hljs-comment">// 读锁加锁成功</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 逻辑到这 应该阻塞，或者 cas 加锁失败</span><br>    <span class="hljs-comment">// 会不断尝试 for (;;) 获取读锁, 执行过程中无阻塞</span><br>    <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>&#125;<br><span class="hljs-comment">// 非公平锁 readerShouldBlock 偏向写锁一些，看 AQS 阻塞队列中第一个节点是否是写锁，是则阻塞，反之不阻塞</span><br><span class="hljs-comment">// 防止一直有读锁线程，导致写锁线程饥饿</span><br><span class="hljs-comment">// true 则该阻塞, false 则不阻塞</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> apparentlyFirstQueuedIsExclusive();<br>&#125;<br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> &#123;<br>    <span class="hljs-comment">// 当前读锁线程持有的读锁次数对象</span><br>    <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">// 说明有线程持有写锁</span><br>        <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 写锁不是自己则获取锁失败</span><br>            <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>            <span class="hljs-comment">// 条件成立说明当前线程是 firstReader，当前锁是读忙碌状态，而且当前线程也是读锁重入</span><br>            <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 最后一个读锁的 HoldCounter</span><br>                    rh = cachedHoldCounter;<br>                    <span class="hljs-comment">// 说明当前线程也不是最后一个读锁</span><br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current)) &#123;<br>                        <span class="hljs-comment">// 获取当前线程的 HoldCounter</span><br>                        rh = readHolds.get();<br>                        <span class="hljs-comment">// 条件成立说明 HoldCounter 对象是上一步代码新建的</span><br>                        <span class="hljs-comment">// 当前线程不是锁重入，在 readerShouldBlock() 返回 true 时需要去排队</span><br>                        <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            <span class="hljs-comment">// 防止内存泄漏</span><br>                            readHolds.remove();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 越界判断</span><br>        <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 读锁加锁，条件内的逻辑与 tryAcquireShared 相同</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>            <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                firstReader = current;<br>                firstReaderHoldCount = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                firstReaderHoldCount++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>)<br>                    rh = cachedHoldCounter;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                    rh = readHolds.get();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                    readHolds.set(rh);<br>                rh.count++;<br>                cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取读锁失败，进入 sync.doAcquireShared(1) 流程开始阻塞，首先也是调用 addWaiter 添加节点，不同之处在于节点被设置为 Node.SHARED 模式而非 Node.EXCLUSIVE 模式，注意此时 t2 仍处于活跃状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 将当前线程关联到一个 Node 对象上, 模式为共享模式</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.SHARED);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获取前驱节点</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 如果前驱节点就头节点就去尝试获取锁</span><br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-comment">// 再一次尝试获取读锁</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);<br>                <span class="hljs-comment">// r &gt;= 0 表示获取成功</span><br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//【这里会设置自己为头节点，唤醒相连的后序的共享节点】</span><br>                    setHeadAndPropagate(node, r);<br>                    p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                    <span class="hljs-keyword">if</span> (interrupted)<br>                        selfInterrupt();<br>                    failed = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 是否在获取读锁失败时阻塞       park 当前线程</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有成功，在 doAcquireShared 内 for (;;) 循环一次，shouldParkAfterFailedAcquire 内把前驱节点的 waitStatus 改为 -1，再 for (;;) 循环一次尝试 tryAcquireShared，不成功在 parkAndCheckInterrupt() 处 park</p><img src="./Resources/JUC-ReentrantReadWriteLock加锁1.png" style="zoom: 80%;" /></li><li><p>这种状态下，假设又有 t3 r.lock，t4 w.lock，这期间 t1 仍然持有锁，就变成了下面的样子</p><p><img src="/./Resources/JUC-ReentrantReadWriteLock%E5%8A%A0%E9%94%812.png"></p></li></ul><hr><h5 id="解锁原理"><a href="#解锁原理" class="headerlink" title="解锁原理"></a>解锁原理</h5><ul><li><p>t1 w.unlock， 写锁解锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 释放锁</span><br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试释放锁</span><br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">// 头节点不为空并且不是等待状态不是 0，唤醒后继的非取消节点</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-comment">// 因为可重入的原因, 写锁计数为 0, 才算释放成功</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (free)<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    setState(nextc);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>唤醒流程 sync.unparkSuccessor，这时 t2 在 doAcquireShared 的 parkAndCheckInterrupt() 处恢复运行，继续循环，执行 tryAcquireShared 成功则让读锁计数加一</p></li><li><p>接下来 t2 调用 setHeadAndPropagate(node, 1)，它原本所在节点被置为头节点；还会检查下一个节点是否是 shared，如果是则调用 doReleaseShared() 将 head 的状态从 -1 改为 0 并唤醒下一个节点，这时 t3 在 doAcquireShared 内 parkAndCheckInterrupt() 处恢复运行，<strong>唤醒连续的所有的共享节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head; <br>    <span class="hljs-comment">// 设置自己为 head 节点</span><br>    setHead(node);<br>    <span class="hljs-comment">// propagate 表示有共享资源（例如共享读锁或信号量），为 0 就没有资源</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 获取下一个节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-comment">// 如果当前是最后一个节点，或者下一个节点是【等待共享读锁的节点】</span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            <span class="hljs-comment">// 唤醒后继节点</span><br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark</span><br><span class="hljs-comment">// 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;<br>            <span class="hljs-comment">// SIGNAL 唤醒后继</span><br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-comment">// 因为读锁共享，如果其它线程也在释放读锁，那么需要将 waitStatus 先改为 0</span><br>            <span class="hljs-comment">// 防止 unparkSuccessor 被多次执行</span><br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;  <br>                <span class="hljs-comment">// 唤醒后继节点</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-comment">// 如果已经是 0 了，改为 -3，用来解决传播性</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;                <br>        &#125;<br>        <span class="hljs-comment">// 条件不成立说明被唤醒的节点非常积极，直接将自己设置为了新的 head，</span><br>        <span class="hljs-comment">// 此时唤醒它的节点（前驱）执行 h == head 不成立，所以不会跳出循环，会继续唤醒新的 head 节点的后继节点</span><br>        <span class="hljs-keyword">if</span> (h == head)                   <br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="./Resources/JUC-ReentrantReadWriteLock解锁1.png" style="zoom: 67%;" /></li><li><p>下一个节点不是 shared 了，因此不会继续唤醒 t4 所在节点</p></li><li><p>t2 读锁解锁，进入 sync.releaseShared(1) 中，调用 tryReleaseShared(1) 让计数减一，但计数还不为零，t3 同样让计数减一，计数为零，进入doReleaseShared() 将头节点从 -1 改为 0 并唤醒下一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.releaseShared(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - SHARED_UNIT;<br>        <span class="hljs-comment">// 读锁的计数不会影响其它获取读锁线程, 但会影响其它获取写锁线程，计数为 0 才是真正释放</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-comment">// 返回是否已经完全释放了 </span><br>            <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>t4 在 acquireQueued 中 parkAndCheckInterrupt 处恢复运行，再次 for (;;) 这次自己是头节点的临节点，并且没有其他节点竞争，tryAcquire(1) 成功，修改头结点，流程结束</p><img src="./Resources/JUC-ReentrantReadWriteLock解锁2.png" style="zoom: 67%;" /></li></ul><hr><h4 id="Stamped"><a href="#Stamped" class="headerlink" title="Stamped"></a>Stamped</h4><p><code>StampedLock</code> 面试中问的比较少，不是很重要，简单了解即可。</p><p>StampedLock：读写锁，该类自 <code>JDK 8</code> 加入，是为了进一步优化读性能</p><p>特点：</p><ul><li><p>在使用读锁、写锁时都必须配合戳使用</p></li><li><p>StampedLock 不支持条件变量</p></li><li><p>StampedLock <strong>不支持重入</strong></p></li></ul><p>基本用法</p><ul><li><p>加解读锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.readLock();<br>lock.unlockRead(stamp);<span class="hljs-comment">// 类似于 unpark，解指定的锁</span><br></code></pre></td></tr></table></figure></li><li><p>加解写锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.writeLock();<br>lock.unlockWrite(stamp);<br></code></pre></td></tr></table></figure></li><li><p>乐观读，StampedLock 支持 <code>tryOptimisticRead()</code> 方法，读取完毕后做一次<strong>戳校验</strong>，如果校验通过，表示这期间没有其他线程的写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据一致性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.tryOptimisticRead();<br><span class="hljs-comment">// 验戳</span><br><span class="hljs-keyword">if</span>(!lock.validate(stamp))&#123;<br><span class="hljs-comment">// 锁升级</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>提供一个数据容器类内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法：</p><ul><li>读-读可以优化</li><li>读-写优化读，补加读锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">DataContainerStamped</span> <span class="hljs-variable">dataContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataContainerStamped</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    dataContainer.read(<span class="hljs-number">1000</span>);<br>    &#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.write(<span class="hljs-number">1000</span>);<br>    &#125;,<span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataContainerStamped</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StampedLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StampedLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> readTime)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.tryOptimisticRead();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; optimistic read locking&quot;</span> + stamp);<br>        Thread.sleep(readTime);<br>        <span class="hljs-comment">// 戳有效，直接返回数据</span><br>        <span class="hljs-keyword">if</span> (lock.validate(stamp)) &#123;<br>            Sout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; optimistic read finish...&quot;</span> + stamp);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-comment">// 说明其他线程更改了戳，需要锁升级了，从乐观读升级到读锁</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; updating to read lock&quot;</span> + stamp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            stamp = lock.readLock();<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; read lock&quot;</span> + stamp);<br>            Thread.sleep(readTime);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; read finish...&quot;</span> + stamp);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; read unlock &quot;</span> +  stamp);<br>            lock.unlockRead(stamp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> newData)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.writeLock();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; write lock &quot;</span> + stamp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            <span class="hljs-built_in">this</span>.data = newData;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; write unlock &quot;</span> + stamp);<br>            lock.unlockWrite(stamp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-CountDownLatch"><a href="#7-4-CountDownLatch" class="headerlink" title="7.4 CountDownLatch"></a>7.4 CountDownLatch</h3><h4 id="基本使用-7"><a href="#基本使用-7" class="headerlink" title="基本使用"></a>基本使用</h4><p><code>CountDownLatch</code>：计数器，用来进行线程同步协作，<strong>等待所有线程完成</strong></p><p>构造器：</p><ul><li><code>public CountDownLatch(int count)</code>：初始化唤醒需要的 down 几步</li></ul><p>常用API：</p><ul><li><code>public void await() </code>：让当前线程等待，必须 down 完初始化的数字才可以被唤醒，否则进入无限等待</li><li><code>public void countDown()</code>：计数器进行减 1（down 1）</li></ul><p>应用：同步等待多个 Rest 远程调用结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// LOL 10人进入游戏倒计时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    String[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalJ</span> <span class="hljs-operator">=</span> j;<span class="hljs-comment">//常量</span><br>        service.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>                Thread.sleep(random.nextInt(<span class="hljs-number">100</span>));<span class="hljs-comment">//随机休眠</span><br>                all[finalJ] = i + <span class="hljs-string">&quot;%&quot;</span>;<br>                System.out.print(<span class="hljs-string">&quot;\r&quot;</span> + Arrays.toString(all));<span class="hljs-comment">// \r代表覆盖</span><br>            &#125;<br>            latch.countDown();<br>        &#125;);<br>    &#125;<br>    latch.await();<br>    System.out.println(<span class="hljs-string">&quot;\n游戏开始&quot;</span>);<br>    service.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/%E5%8A%A8%E7%94%BB-1690185364521-8.gif" alt="动画"></p><h4 id="实现原理-6"><a href="#实现原理-6" class="headerlink" title="实现原理"></a>实现原理</h4><p>阻塞等待：</p><ul><li><p>线程调用 await() 等待其他线程完成任务：支持打断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// AbstractQueuedSynchronizer#acquireSharedInterruptibly</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 判断线程是否被打断，抛出打断异常</span><br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-comment">// 尝试获取共享锁，条件成立说明 state &gt; 0，此时线程入队阻塞等待，等待其他线程获取共享资源</span><br>    <span class="hljs-comment">// 条件不成立说明 state = 0，此时不需要阻塞线程，直接结束函数调用</span><br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireSharedInterruptibly(arg);<br>&#125;<br><span class="hljs-comment">// CountDownLatch.Sync#tryAcquireShared</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>线程进入 AbstractQueuedSynchronizer#doAcquireSharedInterruptibly 函数阻塞挂起，等待 latch 变为 0：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 将调用latch.await()方法的线程 包装成 SHARED 类型的 node 加入到 AQS 的阻塞队列中</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.SHARED);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获取当前节点的前驱节点</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 前驱节点时头节点就可以尝试获取锁</span><br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-comment">// 再次尝试获取锁，获取成功返回 1</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 获取锁成功，设置当前节点为 head 节点，并且向后传播</span><br>                    setHeadAndPropagate(node, r);<br>                    p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                    failed = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 阻塞在这里</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 阻塞线程被中断后抛出异常，进入取消节点的逻辑</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>获取共享锁成功，进入唤醒阻塞队列中与头节点相连的 SHARED 模式的节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 将当前节点设置为新的 head 节点，前驱节点和持有线程置为 null</span><br>    setHead(node);<br><span class="hljs-comment">// propagate = 1，条件一成立</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> || (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 获取当前节点的后继节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-comment">// 当前节点是尾节点时 next 为 null，或者后继节点是 SHARED 共享模式</span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            <span class="hljs-comment">// 唤醒所有的等待共享锁的节点</span><br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>计数减一：</p><ul><li><p>线程进入 countDown() 完成计数器减一（释放锁）的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDown</span><span class="hljs-params">()</span> &#123;<br>    sync.releaseShared(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试释放共享锁</span><br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        <span class="hljs-comment">// 释放锁成功开始唤醒阻塞节点</span><br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更新 state 值，每调用一次，state 值减一，当 state -1 正好为 0 时，返回 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">// 条件成立说明前面【已经有线程触发唤醒操作】了，这里返回 false</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 计数器减一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-comment">// 计数器为 0 时返回 true</span><br>            <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>state &#x3D; 0 时，当前线程需要执行<strong>唤醒阻塞节点的任务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">// 判断队列是否是空队列</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;<br>            <span class="hljs-comment">// 头节点的状态为 signal，说明后继节点没有被唤醒过</span><br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-comment">// cas 设置头节点的状态为 0，设置失败继续自旋</span><br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-comment">// 唤醒后继节点</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-comment">// 如果有其他线程已经设置了头节点的状态，重新设置为 PROPAGATE 传播属性</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">// 条件不成立说明被唤醒的节点非常积极，直接将自己设置为了新的head，</span><br>        <span class="hljs-comment">// 此时唤醒它的节点（前驱）执行 h == head 不成立，所以不会跳出循环，会继续唤醒新的 head 节点的后继节点</span><br>        <span class="hljs-keyword">if</span> (h == head)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-5-CyclicBarrier"><a href="#7-5-CyclicBarrier" class="headerlink" title="7.5 CyclicBarrier"></a>7.5 CyclicBarrier</h3><h4 id="基本使用-8"><a href="#基本使用-8" class="headerlink" title="基本使用"></a>基本使用</h4><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>CyclicBarrier</code> 和 <code>CountDownLatch</code> 非常类似，它也可以实现线程间的技术等待，但是它的功能比 <code>CountDownLatch</code> 更加复杂和强大。主要应用场景和 <code>CountDownLatch</code> 类似。</p><blockquote><p><code>CountDownLatch</code> 的实现是基于 AQS 的，而 <code>CycliBarrier</code> 是基于 <code>ReentrantLock</code>(<code>ReentrantLock</code> 也属于 AQS 同步器)和 <code>Condition</code> 的。</p></blockquote><p><code>CyclicBarrier</code> 的字面意思是可循环使用（<code>Cyclic</code>）的屏障（<code>Barrier</code>）。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</p><p>常用方法：</p><ul><li><code>public CyclicBarrier(int parties, Runnable barrierAction)</code>：用于在线程到达屏障 <code>parties</code> 时，执行 <code>barrierAction</code><ul><li><code>parties</code>：代表多少个线程到达屏障开始触发线程任务</li><li><code>barrierAction</code>：线程任务</li></ul></li><li><code>public int await()</code>：线程调用 <code>await</code> 方法通知 <code>CyclicBarrier</code> 本线程已经到达屏障，然后当前线程被阻塞。</li></ul><p>与 <code>CountDownLatch</code> 的区别：<code>CyclicBarrier</code> 是可以重用的</p><p>应用：可以实现多线程中，某个任务在等待其他线程执行完毕以后触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">2</span>, () -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;task1 task2 finish...&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123; <span class="hljs-comment">// 循环重用，如果使用 CountDownLatch，由于 CountDownLatch 不能重用，每一次都要 new 一个新的 CountDownLatch 对象出来</span><br>        service.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;task1 begin...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                barrier.await();    <span class="hljs-comment">// 2 - 1 = 1</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br><br>        service.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;task2 begin...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                barrier.await();    <span class="hljs-comment">// 1 - 1 = 0</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>    &#125;<br>    service.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现原理-7"><a href="#实现原理-7" class="headerlink" title="实现原理"></a>实现原理</h4><h5 id="成员属性-5"><a href="#成员属性-5" class="headerlink" title="成员属性"></a>成员属性</h5><ul><li><p>全局锁：利用可重入锁实现的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// barrier 实现是依赖于Condition条件队列，condition 条件队列必须依赖lock才能使用</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-comment">// 线程挂起实现使用的 condition 队列，当前代所有线程到位，这个条件队列内的线程才会被唤醒</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">trip</span> <span class="hljs-operator">=</span> lock.newCondition();<br></code></pre></td></tr></table></figure></li><li><p>线程数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> parties;<span class="hljs-comment">// 代表多少个线程到达屏障开始触发线程任务</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<span class="hljs-comment">// 表示当前“代”还有多少个线程未到位，初始值为 parties</span><br></code></pre></td></tr></table></figure></li><li><p>当前代中最后一个线程到位后要执行的事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable barrierCommand;<br></code></pre></td></tr></table></figure></li><li><p>代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示 barrier 对象当前 代</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">generation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generation</span> &#123;<br>    <span class="hljs-comment">// 表示当前“代”是否被打破，如果被打破再来到这一代的线程 就会直接抛出 BrokenException 异常</span><br>    <span class="hljs-comment">// 且在这一代挂起的线程都会被唤醒，然后抛出 BrokerException 异常。</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">broken</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">CyclicBarrie</span><span class="hljs-params">(<span class="hljs-type">int</span> parties, Runnable barrierAction)</span> &#123;<br>    <span class="hljs-comment">// 因为小于等于 0 的 barrier 没有任何意义</span><br>    <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br><br>    <span class="hljs-built_in">this</span>.parties = parties;<br>    <span class="hljs-built_in">this</span>.count = parties;<br>    <span class="hljs-comment">// 可以为 null</span><br>    <span class="hljs-built_in">this</span>.barrierCommand = barrierAction;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/./Resources/image-20230724162537145.png" alt="image-20230724162537145"></p><h5 id="成员方法-5"><a href="#成员方法-5" class="headerlink" title="成员方法"></a>成员方法</h5><ul><li><p>await()：阻塞等待所有线程到位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> dowait(<span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (TimeoutException toe) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(toe); <span class="hljs-comment">// cannot happen</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// timed：表示当前调用await方法的线程是否指定了超时时长，如果 true 表示线程是响应超时的</span><br><span class="hljs-comment">// nanos：线程等待超时时长，单位是纳秒</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dowait</span><span class="hljs-params">(<span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    <span class="hljs-comment">// 加锁</span><br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取当前代</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> generation;<br><br>        <span class="hljs-comment">// 【如果当前代是已经被打破状态，则当前调用await方法的线程，直接抛出Broken异常】</span><br>        <span class="hljs-keyword">if</span> (g.broken)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><span class="hljs-comment">// 如果当前线程被中断了，则打破当前代，然后当前线程抛出中断异常</span><br>        <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>            <span class="hljs-comment">// 设置当前代的状态为 broken 状态，唤醒在 trip 条件队列内的线程</span><br>            breakBarrier();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;<br><br>        <span class="hljs-comment">// 逻辑到这说明，当前线程中断状态是 false， 当前代的 broken 为 false（未打破状态）</span><br>        <br>        <span class="hljs-comment">// 假设 parties 给的是 5，那么index对应的值为 4,3,2,1,0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> --count;<br>        <span class="hljs-comment">// 条件成立说明当前线程是最后一个到达 barrier 的线程，【需要开启新代，唤醒阻塞线程】</span><br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 栅栏任务启动标记</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">ranAction</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> barrierCommand;<br>                <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span>)<br>                    <span class="hljs-comment">// 启动触发的任务</span><br>                    command.run();<br>                <span class="hljs-comment">// run()未抛出异常的话，启动标记设置为 true</span><br>                ranAction = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 开启新的一代，这里会【唤醒所有的阻塞队列】</span><br>                nextGeneration();<br>                <span class="hljs-comment">// 返回 0 因为当前线程是此代最后一个到达的线程，index == 0</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 如果 command.run() 执行抛出异常的话，会进入到这里</span><br>                <span class="hljs-keyword">if</span> (!ranAction)<br>                    breakBarrier();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 自旋，一直到条件满足、当前代被打破、线程被中断，等待超时</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 根据是否需要超时等待选择阻塞方法</span><br>                <span class="hljs-keyword">if</span> (!timed)<br>                    <span class="hljs-comment">// 当前线程释放掉 lock，【进入到 trip 条件队列的尾部挂起自己】，等待被唤醒</span><br>                    trip.await();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>                    nanos = trip.awaitNanos(nanos);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                <span class="hljs-comment">// 被中断后来到这里的逻辑</span><br>                <br>                <span class="hljs-comment">// 当前代没有变化并且没有被打破</span><br>                <span class="hljs-keyword">if</span> (g == generation &amp;&amp; !g.broken) &#123;<br>                    <span class="hljs-comment">// 打破屏障</span><br>                    breakBarrier();<br>                    <span class="hljs-comment">// node 节点在【条件队列】内收到中断信号时 会抛出中断异常</span><br>                    <span class="hljs-keyword">throw</span> ie;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 等待过程中代变化了，完成一次自我打断</span><br>                    Thread.currentThread().interrupt();<br>                &#125;<br>            &#125;<br><span class="hljs-comment">// 唤醒后的线程，【判断当前代已经被打破，线程唤醒后依次抛出 BrokenBarrier 异常】</span><br>            <span class="hljs-keyword">if</span> (g.broken)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><br>            <span class="hljs-comment">// 当前线程挂起期间，最后一个线程到位了，然后触发了开启新的一代的逻辑</span><br>            <span class="hljs-keyword">if</span> (g != generation)<br>                <span class="hljs-keyword">return</span> index;<br><span class="hljs-comment">// 当前线程 trip 中等待超时，然后主动转移到阻塞队列</span><br>            <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>                breakBarrier();<br>                <span class="hljs-comment">// 抛出超时异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 解锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>breakBarrier()：打破 Barrier 屏障</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breakBarrier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 将代中的 broken 设置为 true，表示这一代是被打破了，再来到这一代的线程，直接抛出异常</span><br>    generation.broken = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 重置 count 为 parties</span><br>    count = parties;<br>    <span class="hljs-comment">// 将在trip条件队列内挂起的线程全部唤醒，唤醒后的线程会检查当前是否是打破的，然后抛出异常</span><br>    trip.signalAll();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>nextGeneration()：开启新的下一代 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextGeneration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 将在 trip 条件队列内挂起的线程全部唤醒</span><br>    trip.signalAll();<br>    <span class="hljs-comment">// 重置 count 为 parties</span><br>    count = parties;<br><br>    <span class="hljs-comment">// 开启新的一代，使用一个新的generation对象，表示新的一代，新的一代和上一代【没有任何关系】</span><br>    generation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>参考视频：<a href="https://space.bilibili.com/457326371/">https://space.bilibili.com/457326371/</a></p><h3 id="7-6-Semaphore"><a href="#7-6-Semaphore" class="headerlink" title="7.6 Semaphore"></a>7.6 Semaphore</h3><h4 id="基本使用-9"><a href="#基本使用-9" class="headerlink" title="基本使用"></a>基本使用</h4><p>区别于<code>synchronized</code> 和 <code>ReentrantLock</code> ，<code>Semaphore</code> 是<strong>共享锁</strong>；</p><p><code>synchronized</code> 和 <code>ReentrantLock</code> 都是一次只允许一个线程访问某个资源，而 <code>Semaphore</code>(信号量)可以用来控制**同时访问特定资源的<u>线程数量</u>**；</p><p>构造方法：</p><ul><li><p><code>public Semaphore(int permits)</code>：<code>permits</code> 表示许可线程的数量（<code>state</code>）</p><ul><li>当初始的资源个数为 1 的时候，<code>Semaphore</code> 退化为排他锁。</li></ul></li><li><p><code>public Semaphore(int permits, boolean fair)</code>：<code>fair</code> 表示公平性，如果设为 <code>true</code>，下次执行的线程会是等待最久的线程</p></li></ul><p><code>常用API</code>：</p><ul><li><code>public void acquire()</code>：表示获取许可</li><li><code>public void release()</code>：表示释放许可，<code>acquire()</code> 和 <code>release()</code> 方法之间的代码为<strong>同步代码</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 1.创建Semaphore对象</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 2. 10个线程同时运行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 3. 获取许可</span><br>                semaphore.acquire();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; running...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; end...&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 4. 释放许可</span><br>                semaphore.release();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现原理-8"><a href="#实现原理-8" class="headerlink" title="实现原理"></a>实现原理</h4><p>加锁流程：</p><ul><li><p><code>Semaphore</code> 的 <code>permits</code>（<code>state</code>）为 3，这时 5 个线程来获取资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Semaphore 是共享锁的一种实现，它默认构造 AQS 的 state 值为 permits，你可以将 permits 的值理解为许可证的数量，只有拿到许可证的线程才能执行。</span><br>Sync(<span class="hljs-type">int</span> <span class="hljs-keyword">permits</span>) &#123;<br>    setState(<span class="hljs-keyword">permits</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230724153540117.png" alt="image-20230724153540117"></p><p>假设其中 <code>Thread-1</code>，<code>Thread-2</code>，<code>Thread-4</code> <code>CAS</code> 竞争成功，<code>permits</code> 变为 0，而 <code>Thread-0</code> 和 <code>Thread-3</code> 竞争失败，进入 <code>AQS</code> 队列 <code>park</code> 阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// acquire() -&gt; sync.acquireSharedInterruptibly(1)，可中断</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-comment">// 尝试获取通行证，获取成功返回 &gt;= 0的值</span><br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 获取许可证失败，进入阻塞</span><br>        doAcquireSharedInterruptibly(arg);<br>&#125;<br><br><span class="hljs-comment">// tryAcquireShared() -&gt; nonfairTryAcquireShared()</span><br><span class="hljs-comment">// 非公平，公平锁会在循环内 hasQueuedPredecessors()方法判断阻塞队列是否有临头节点(第二个节点)</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nonfairTryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 获取 state ，state 这里【表示通行证】</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-comment">// 计算当前线程获取通行证完成之后，通行证还剩余数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>        <span class="hljs-comment">// 如果许可已经用完, 返回负数, 表示获取失败,</span><br>        <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>            <span class="hljs-comment">// 许可证足够分配的，如果 cas 重试成功, 返回正数, 表示获取成功</span><br>            compareAndSetState(available, remaining))<br>            <span class="hljs-keyword">return</span> remaining;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>竞争失败，进入 <code>doAcquireSharedInterruptibly</code> 流程被 <code>park</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 将调用 Semaphore.aquire 方法的线程，包装成 node 加入到 AQS 的阻塞队列中</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.SHARED);<br>    <span class="hljs-comment">// 获取标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 前驱节点是头节点可以再次获取许可</span><br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-comment">// 再次尝试获取许可，【返回剩余的许可证数量】</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 成功后本线程出队（AQS）, 所在 Node设置为 head</span><br>                    <span class="hljs-comment">// r 表示【可用资源数】, 为 0 则不会继续传播</span><br>                    setHeadAndPropagate(node, r); <br>                    p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                    failed = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 不成功, 设置上一个节点 waitStatus = Node.SIGNAL, 下轮进入 park 阻塞</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 被打断后进入该逻辑</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;    <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 设置自己为 head 节点</span><br>    setHead(node);<br>    <span class="hljs-comment">// propagate 表示有【共享资源】（例如共享读锁或信号量）</span><br>    <span class="hljs-comment">// head waitStatus == Node.SIGNAL 或 Node.PROPAGATE，doReleaseShared 函数中设置的</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-comment">// 如果是最后一个节点或者是等待共享读锁的节点，做一次唤醒</span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-Semaphore%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B1.png"></p></li><li><p>这时 <code>Thread-4</code> 释放了 <code>permits</code>，状态如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// release() -&gt; releaseShared()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试释放锁</span><br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;    <br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 获取当前锁资源的可用许可证数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + releases;<br>        <span class="hljs-comment">// 索引越界判断</span><br>        <span class="hljs-keyword">if</span> (next &lt; current)            <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);        <br>        <span class="hljs-comment">// 释放锁</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(current, next))            <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;    <br>    <span class="hljs-comment">// PROPAGATE 详解    </span><br>    <span class="hljs-comment">// 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark</span><br>    <span class="hljs-comment">// 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-Semaphore%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B2.png"></p></li><li><p>接下来 <code>Thread-0</code> 竞争成功，permits 再次设置为 0，设置自己为 head 节点，并且 unpark 接下来的共享状态的 Thread-3 节点，但由于 permits 是 0，因此 Thread-3 在尝试不成功后再次进入 park 状态</p><p><img src="/./Resources/image-20230724154943867.png" alt="image-20230724154943867"></p></li></ul><h4 id="PROPAGATE"><a href="#PROPAGATE" class="headerlink" title="PROPAGATE"></a>PROPAGATE</h4><p>假设存在某次循环中队列里排队的结点情况为 <code>head(-1) → t1(-1) → t2(0)</code>，存在将要释放信号量的 T3 和 T4，释放顺序为先 T3 后 T4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 老版本代码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;    <br>    setHead(node);    <br>    <span class="hljs-comment">// 有空闲资源    </span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> &amp;&amp; node.waitStatus != <span class="hljs-number">0</span>) &#123;    <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;        <br>        <span class="hljs-comment">// 下一个        </span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())            <br>            unparkSuccessor(node);        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常流程：</p><ul><li>T3 调用 releaseShared(1)，直接调用了 unparkSuccessor(head)，head.waitStatus 从 -1 变为 0</li><li>T1 由于 T3 释放信号量被唤醒，然后 T4 释放，唤醒 T2</li></ul><p>BUG 流程：</p><ul><li>T3 调用 releaseShared(1)，直接调用了 unparkSuccessor(head)，head.waitStatus 从 -1 变为 0</li><li>T1 由于 T3 释放信号量被唤醒，调用 tryAcquireShared，返回值为 0（获取锁成功，但没有剩余资源量）</li><li>T1 还没调用 setHeadAndPropagate 方法，T4 调用 releaseShared(1)，此时 head.waitStatus 为 0（此时读到的 head 和 1 中为同一个 head），不满足条件，因此不调用 unparkSuccessor(head)</li><li>T1 获取信号量成功，调用 setHeadAndPropagate(t1.node, 0) 时，因为不满足 propagate &gt; 0（剩余资源量 &#x3D;&#x3D; 0），从而不会唤醒后继结点， <strong>T2 线程得不到唤醒</strong></li></ul><p>更新后流程：</p><ul><li><p>T3 调用 releaseShared(1)，直接调用了 unparkSuccessor(head)，head.waitStatus 从 -1 变为 0</p></li><li><p>T1 由于 T3 释放信号量被唤醒，调用 tryAcquireShared，返回值为 0（获取锁成功，但没有剩余资源量）</p></li><li><p>T1 还没调用 setHeadAndPropagate 方法，T4 调用 releaseShared()，此时 head.waitStatus 为 0（此时读到的 head 和 1 中为同一个 head），调用 doReleaseShared() 将等待状态置为 <strong>PROPAGATE（-3）</strong></p></li><li><p>T1 获取信号量成功，调用 setHeadAndPropagate 时，读到 h.waitStatus &lt; 0，从而调用 doReleaseShared() 唤醒 T2</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;    <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// 设置自己为 head 节点</span><br>    setHead(node);<br>    <span class="hljs-comment">// propagate 表示有共享资源（例如共享读锁或信号量）</span><br>    <span class="hljs-comment">// head waitStatus == Node.SIGNAL 或 Node.PROPAGATE</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-comment">// 如果是最后一个节点或者是等待共享读锁的节点，做一次唤醒</span><br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 唤醒</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark</span><br>    <span class="hljs-comment">// 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE    </span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;<br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-comment">// 防止 unparkSuccessor 被多次执行</span><br>                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-comment">// 唤醒后继节点</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-comment">// 如果已经是 0 了，改为 -3，用来解决传播性</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (h == head)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-Exchanger"><a href="#7-7-Exchanger" class="headerlink" title="7.7 Exchanger"></a>7.7 Exchanger</h3><p>Exchanger：交换器，是一个用于线程间协作的工具类，用于进行线程间的数据交换</p><p>工作流程：两个线程通过 exchange 方法交换数据，如果第一个线程先执行 exchange() 方法，它会一直等待第二个线程也执行 exchange 方法，当两个线程都到达同步点时，这两个线程就可以交换数据</p><p>常用方法：</p><ul><li><code>public Exchanger()</code>：创建一个新的交换器</li><li><code>public V exchange(V x)</code>：等待另一个线程到达此交换点</li><li><code>public V exchange(V x, long timeout, TimeUnit unit)</code>：等待一定的时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExchangerDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建交换对象（信使）</span><br>        Exchanger&lt;String&gt; exchanger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exchanger</span>&lt;&gt;();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(exchanger).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(exchanger).start();<br>    &#125; <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Exchanger&lt;String&gt; <span class="hljs-title function_">exchanger</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(Exchanger&lt;String&gt; exchanger)</span>&#123;<br>        <span class="hljs-built_in">this</span>.exchanger = exchanger;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            sout(<span class="hljs-string">&quot;线程A，做好了礼物A，等待线程B送来的礼物B&quot;</span>);<br>            <span class="hljs-comment">//如果等待了5s还没有交换就死亡（抛出异常）！</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> exchanger.exchange(<span class="hljs-string">&quot;礼物A&quot;</span>,<span class="hljs-number">5</span>,TimeUnit.SECONDS);<br>            sout(<span class="hljs-string">&quot;线程A收到线程B的礼物：&quot;</span> + s);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程A等待了5s，没有收到礼物,最终就执行结束了!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Exchanger&lt;String&gt; exchanger;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadB</span><span class="hljs-params">(Exchanger&lt;String&gt; exchanger)</span> &#123;<br>        <span class="hljs-built_in">this</span>.exchanger = exchanger;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sout(<span class="hljs-string">&quot;线程B,做好了礼物B,等待线程A送来的礼物A.....&quot;</span>);<br>            <span class="hljs-comment">// 开始交换礼物。参数是送给其他线程的礼物!</span><br>            sout(<span class="hljs-string">&quot;线程B收到线程A的礼物：&quot;</span> + exchanger.exchange(<span class="hljs-string">&quot;礼物B&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="八、并发包"><a href="#八、并发包" class="headerlink" title="八、并发包"></a>八、并发包</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h4 id="并发集合"><a href="#并发集合" class="headerlink" title="并发集合"></a>并发集合</h4><h5 id="集合对比"><a href="#集合对比" class="headerlink" title="集合对比"></a>集合对比</h5><p>三种集合：</p><ul><li><code>HashMap</code> 是线程不安全的，性能好</li><li><code>Hashtable</code> 线程安全基于 <code>synchronized</code>，综合性能差，已经被淘汰</li><li><code>ConcurrentHashMap</code> 保证了线程安全，综合性能较好，不止线程安全，而且效率高，性能好</li></ul><p>集合对比：</p><ol><li><code>Hashtable</code> 继承 Dictionary 类，HashMap、ConcurrentHashMap 继承 AbstractMap，均实现 Map 接口</li><li><code>Hashtable</code> 底层是数组 + 链表，JDK8 以后 HashMap 和 ConcurrentHashMap 底层是数组 + 链表 + 红黑树</li><li><code>HashMap</code> 线程非安全，Hashtable 线程安全，Hashtable 的方法都加了 synchronized 关来确保线程同步</li><li><code>ConcurrentHashMap</code>、<code>Hashtable</code> <strong>不允许 null 值</strong>，HashMap 允许 null 值</li><li><code>ConcurrentHashMap</code>、<code>HashMap</code> 的初始容量为 16，Hashtable 初始容量为11，填充因子默认都是 0.75，两种 Map 扩容是当前容量翻倍：capacity * 2，Hashtable 扩容时是容量翻倍 + 1：capacity*2 + 1</li></ol><p><img src="/./Resources/ConcurrentHashMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="ConcurrentHashMap数据结构"></p><p>工作步骤：</p><ol><li><p>初始化，使用 cas 来保证并发安全，懒惰初始化 table</p></li><li><p>树化，当 table.length &lt; 64 时，先尝试扩容，超过 64 时，并且 bin.length &gt; 8 时，会将<strong>链表树化</strong>，树化过程会用 synchronized 锁住链表头</p><p>说明：锁住某个槽位的对象头，是一种很好的<strong>细粒度的加锁</strong>方式，类似 MySQL 中的行锁</p></li><li><p>put，如果该 bin 尚未创建，只需要使用 cas 创建 bin；如果已经有了，锁住链表头进行后续 put 操作，元素添加至 bin 的尾部</p></li><li><p>get，无锁操作仅需要保证可见性，扩容过程中 get 操作拿到的是 ForwardingNode 会让 get 操作在新 table 进行搜索</p></li><li><p>扩容，扩容时以 bin 为单位进行，需要对 bin 进行 synchronized，但这时其它竞争线程也不是无事可做，它们会帮助把其它 bin 进行扩容</p></li><li><p>size，元素个数保存在 baseCount 中，并发时的个数变动保存在 CounterCell[] 当中，最后统计数量时累加</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：多个线程同时往HashMap容器中存入数据会出现安全问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcurrentHashMapDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddMapDataThread</span>().start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddMapDataThread</span>().start();<br>        <br>        Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<span class="hljs-comment">//休息5秒，确保两个线程执行完毕</span><br>        System.out.println(<span class="hljs-string">&quot;Map大小：&quot;</span> + map.size());<span class="hljs-comment">//20万</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddMapDataThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000000</span> ; i++ )&#123;<br>            ConcurrentHashMapDemo.map.put(<span class="hljs-string">&quot;键：&quot;</span>+i , <span class="hljs-string">&quot;值&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="并发死链"><a href="#并发死链" class="headerlink" title="并发死链"></a>并发死链</h5><p><code>JDK1.7</code> 的 <code>HashMap</code> 采用的头插法（拉链法）进行节点的添加，<code>HashMap</code> 的扩容长度为原来的 2 倍</p><p><code>HashMap JDK 1.7</code>：<code>resize()</code> 中节点（<code>Entry</code>）转移的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Entry[] newTable, <span class="hljs-type">boolean</span> rehash)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> newTable.length;<span class="hljs-comment">//得到新数组的长度   </span><br>    <span class="hljs-comment">// 遍历整个数组对应下标下的链表，e代表一个节点</span><br>    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;   <br>        <span class="hljs-comment">// 当e == null时，则该链表遍历完了，继续遍历下一数组下标的链表 </span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">null</span> != e) &#123; <br>            <span class="hljs-comment">// 先把e节点的下一节点存起来</span><br>            Entry&lt;K,V&gt; next = e.next; <br>            <span class="hljs-keyword">if</span> (rehash) &#123;              <span class="hljs-comment">//得到新的hash值</span><br>                e.hash = <span class="hljs-literal">null</span> == e.key ? <span class="hljs-number">0</span> : hash(e.key);  <br>            &#125;<br>            <span class="hljs-comment">// 在新数组下得到新的数组下标</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexFor(e.hash, newCapacity);  <br>             <span class="hljs-comment">// 将e的next指针指向新数组下标的位置</span><br>            e.next = newTable[i];   <br>            <span class="hljs-comment">// 将该数组下标的节点变为e节点</span><br>            newTable[i] = e; <br>            <span class="hljs-comment">// 遍历链表的下一节点</span><br>            e = next;                                   <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小结：</p><p><code>JDK 8</code> 虽然将扩容算法做了调整，改用了尾插法，但仍不意味着能够在多线程环境下能够安全扩容，还会出现其它问题（如扩容丢数据）</p><p>B站视频解析：<a href="https://www.bilibili.com/video/BV1n541177Ea">https://www.bilibili.com/video/BV1n541177Ea</a></p></blockquote><h4 id="重要属性和内部类"><a href="#重要属性和内部类" class="headerlink" title="重要属性和内部类"></a>重要属性和内部类</h4><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li><p>存储数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;K,V&gt;[] table;<br></code></pre></td></tr></table></figure></li><li><p>散列表的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">// 最大长度</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">// 默认长度</span><br></code></pre></td></tr></table></figure></li><li><p>并发级别，<code>JDK7</code> 遗留下来，<code>JDK1.8</code> 中不代表并发级别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br></code></pre></td></tr></table></figure></li><li><p>负载因子，<code>JDK1.8</code> 的 <code>ConcurrentHashMap</code> 中是固定值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br></code></pre></td></tr></table></figure></li><li><p>阈值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<span class="hljs-comment">// 链表树化的阈值</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<span class="hljs-comment">// 红黑树转化为链表的阈值</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<span class="hljs-comment">// 当数组长度达到64且某个桶位中的链表长度超过8，才会真正树化</span><br></code></pre></td></tr></table></figure></li><li><p>扩容相关：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TRANSFER_STRIDE</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">// 线程迁移数据【最小步长】，控制线程迁移任务的最小区间</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">RESIZE_STAMP_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">// 用来计算扩容时生成的【标识戳】</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_RESIZERS</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">32</span> - RESIZE_STAMP_BITS)) - <span class="hljs-number">1</span>;<span class="hljs-comment">// 65535-1并发扩容最多线程数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RESIZE_STAMP_SHIFT</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span> - RESIZE_STAMP_BITS;<span class="hljs-comment">// 扩容时使用</span><br></code></pre></td></tr></table></figure></li><li><p>节点哈希值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOVED</span>     <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 表示当前节点是 FWD 节点</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEBIN</span>   <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>; <span class="hljs-comment">// 表示当前节点已经树化，且当前节点为 TreeBin 对象</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RESERVED</span>  <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>; <span class="hljs-comment">// 表示节点时临时节点</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">HASH_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span>; <span class="hljs-comment">// 正常节点的哈希值的可用的位数</span><br></code></pre></td></tr></table></figure></li><li><p>扩容过程：volatile 修饰保证多线程的可见性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 扩容过程中，会将扩容中的新 table 赋值给 nextTable 保持引用，扩容结束之后，这里会被设置为 null</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;<br><span class="hljs-comment">// 记录扩容进度，所有线程都要从 0 - transferIndex 中分配区间任务，简单说就是老表转移到哪了，索引从高到低转移</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> transferIndex;<br></code></pre></td></tr></table></figure></li><li><p>累加统计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// LongAdder 中的 baseCount 未发生竞争时或者当前LongAdder处于加锁状态时，增量累到到 baseCount 中</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> baseCount;<br><span class="hljs-comment">// LongAdder 中的 cellsBuzy，0 表示当前 LongAdder 对象无锁状态，1 表示当前 LongAdder 对象加锁状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> cellsBusy;<br><span class="hljs-comment">// LongAdder 中的 cells 数组，</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> CounterCell[] counterCells;<br></code></pre></td></tr></table></figure></li><li><p>控制变量：</p><ul><li><p><code>sizeCtl &lt; 0</code></p><ul><li>-1：正在初始化。有线程正在创建 table 数组，当前线程需要自旋等待</li><li>-x：正在进行扩容。高 16 位表示扩容的标识戳；低 16 位表示当前参与并发扩容工作的线程数量 + 1</li></ul></li><li><p><code>siztCtl = 0</code></p><ul><li>默认值</li><li>创建 table 数组时使用 <code>DEFAULT_CAPACITY</code> 为数组大小</li></ul></li><li><p><code>sizeCtl &gt; 0</code></p><ul><li>如果 table 未初始化，表示初始容量（默认16）</li><li>如果 table 已经初始化，表示下次扩容时的触发条件（阈值，元素个数，不是数组的长度）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> sizeCtl;<span class="hljs-comment">// volatile 保持可见性</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h5><ul><li><p><code>Node</code> 节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; &#123;<br>    <span class="hljs-comment">// 节点哈希值</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>    <span class="hljs-keyword">final</span> K key;<br>    <span class="hljs-keyword">volatile</span> V val;<br>    <span class="hljs-comment">// 单向链表</span><br>    <span class="hljs-keyword">volatile</span> Node&lt;K,V&gt; next;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>TreeBin</code> 节点：</p><ul><li>作为 treebin 的头节点，存储 root 和 first</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeBin</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; &#123;<br>    <span class="hljs-comment">// 红黑树根节点</span><br>    TreeNode&lt;K,V&gt; root;<br>    <span class="hljs-comment">// 链表的头节点</span><br>    <span class="hljs-keyword">volatile</span> TreeNode&lt;K,V&gt; first;<br>    <span class="hljs-comment">// 等待者线程</span><br>    <span class="hljs-keyword">volatile</span> Thread waiter;<br>  <br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> lockState;<br>    <span class="hljs-comment">// 写锁状态 写锁是独占状态，以散列表来看，真正进入到 TreeBin 中的写线程同一时刻只有一个线程</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WRITER</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 等待者状态（写线程在等待），当 TreeBin 中有读线程目前正在读取数据时，写线程无法修改数据</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WAITER</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 读锁状态是共享，同一时刻可以有多个线程 同时进入到 TreeBi 对象中获取数据，每一个线程都给 lockState + 4</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">READER</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>TreeNode</code> 节点：</p><ul><li>作为 treebin 的节点，存储 parent, left, right</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; &#123;<br>    TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// red-black tree links</span><br>    TreeNode&lt;K,V&gt; left;<br>    TreeNode&lt;K,V&gt; right;<br>    TreeNode&lt;K,V&gt; prev;   <span class="hljs-comment">//双向链表</span><br>    <span class="hljs-type">boolean</span> red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>ForwardingNode</code> 节点：转移节点</p><ul><li>扩容时如果某个 bin 迁移完毕，用 ForwardingNode 作为旧 table bin的头结点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForwardingNode</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; &#123;<br>    <span class="hljs-comment">// 持有扩容后新的哈希表的引用</span><br>    <span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] nextTable;<br>    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;<br>        <span class="hljs-comment">// ForwardingNode 节点的 hash 值设为 -1</span><br>        <span class="hljs-built_in">super</span>(MOVED, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-built_in">this</span>.nextTable = tab;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><ul><li><p>变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示sizeCtl属性在 ConcurrentHashMap 中内存偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> SIZECTL;<br><span class="hljs-comment">// 表示transferIndex属性在 ConcurrentHashMap 中内存偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> TRANSFERINDEX;<br><span class="hljs-comment">// 表示baseCount属性在 ConcurrentHashMap 中内存偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> BASECOUNT;<br><span class="hljs-comment">// 表示cellsBusy属性在 ConcurrentHashMap 中内存偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> CELLSBUSY;<br><span class="hljs-comment">// 表示cellValue属性在 CounterCell 中内存偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> CELLVALUE;<br><span class="hljs-comment">// 表示数组第一个元素的偏移地址</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> ABASE;<br><span class="hljs-comment">// 用位移运算替代乘法</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> ASHIFT;<br></code></pre></td></tr></table></figure></li><li><p>赋值方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 表示数组单元所占用空间大小，scale 表示 Node[] 数组中每一个单元所占用空间大小，int 是 4 字节</span><br><span class="hljs-type">int</span> <span class="hljs-variable">scale</span> <span class="hljs-operator">=</span> U.arrayIndexScale(ak);<br><span class="hljs-comment">// 判断一个数是不是 2 的 n 次幂，比如 8：1000 &amp; 0111 = 0000</span><br><span class="hljs-keyword">if</span> ((scale &amp; (scale - <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;data type scale not a power of two&quot;</span>);<br><br><span class="hljs-comment">// numberOfLeadingZeros(n)：返回当前数值转换为二进制后，从高位到低位开始统计，看有多少个0连续在一起</span><br><span class="hljs-comment">// 8 → 1000 numberOfLeadingZeros(8) = 28</span><br><span class="hljs-comment">// 4 → 100 numberOfLeadingZeros(4) = 29   int 值就是占4个字节</span><br>ASHIFT = <span class="hljs-number">31</span> - Integer.numberOfLeadingZeros(scale);<br><br><span class="hljs-comment">// ASHIFT = 31 - 29 = 2 ，int 的大小就是 2 的 2 次方，获取次方数</span><br><span class="hljs-comment">// ABASE + （5 &lt;&lt; ASHIFT） 用位移运算替代了乘法，获取 arr[5] 的值</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><p>无参构造， 散列表结构延迟初始化，默认的数组大小是 16：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentHashMap</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>有参构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-comment">// 指定容量初始化</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="hljs-number">1</span>)) ?<br>               MAXIMUM_CAPACITY :<br>               <span class="hljs-comment">// 假如传入的参数是 16，16 + 8 + 1 ，最后得到 32</span><br>               <span class="hljs-comment">// 传入 12， 12 + 6 + 1 = 19，最后得到 32，尽可能的大，与 HashMap不一样</span><br>               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// sizeCtl &gt; 0，当目前 table 未初始化时，sizeCtl 表示初始化容量</span><br>    <span class="hljs-built_in">this</span>.sizeCtl = cap;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> c - <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HashMap</code> 部分详解了该函数，核心思想就是<strong>把最高位是 1 的位以及右边的位全部置 1</strong>，结果加 1 后就是 2 的 n 次幂</p></li><li><p>多个参数构造方法：</p><p><code>JDK1.8</code> 中实现了懒惰初始化，在构造方法中仅仅计算了 <code>table</code> 的大小，以后在第一次使用时才会真正创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> initialCapacity 初始容量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> loadFactor 负载因子</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> concurrencyLevel 并发度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor, <span class="hljs-type">int</span> concurrencyLevel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!(loadFactor &gt; <span class="hljs-number">0.0f</span>) || initialCapacity &lt; <span class="hljs-number">0</span> || concurrencyLevel &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-comment">// 初始容量小于并发级别</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; concurrencyLevel)  <br>        <span class="hljs-comment">// 把并发级别赋值给初始容量</span><br>        initialCapacity = concurrencyLevel; <br>   <span class="hljs-comment">// loadFactor 默认是 0.75</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>)(<span class="hljs-number">1.0</span> + (<span class="hljs-type">long</span>)initialCapacity / loadFactor);<br>    <span class="hljs-comment">// tablesizeFor 仍然是保证计算的大小是 2^n，即16,32,64 ...</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> (size &gt;= (<span class="hljs-type">long</span>)MAXIMUM_CAPACITY) ?<br>        MAXIMUM_CAPACITY : tableSizeFor((<span class="hljs-type">int</span>)size);<br>    <span class="hljs-comment">// sizeCtl &gt; 0，当目前 table 未初始化时，sizeCtl 表示初始化容量</span><br>    <span class="hljs-built_in">this</span>.sizeCtl = cap;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>集合构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentHashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sizeCtl = DEFAULT_CAPACITY;<span class="hljs-comment">// 默认16</span><br>    putAll(m);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>    <span class="hljs-comment">// 尝试触发扩容</span><br>    tryPresize(m.size());<br>    <span class="hljs-keyword">for</span> (Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">V</span>&gt; e : m.entrySet())<br>        putVal(e.getKey(), e.getValue(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryPresize</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-comment">// 扩容为大于 2 倍的最小的 2 的 n 次幂</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="hljs-number">1</span>)) ? MAXIMUM_CAPACITY :<br>    tableSizeFor(size + (size &gt;&gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> sc;<br>    <span class="hljs-keyword">while</span> ((sc = sizeCtl) &gt;= <span class="hljs-number">0</span>) &#123;<br>        Node&lt;K,V&gt;[] tab = table; <span class="hljs-type">int</span> n;<br>        <span class="hljs-comment">// 数组还未初始化，【一般是调用集合构造方法才会成立，put 后调用该方法都是不成立的】</span><br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>) &#123;<br>            n = (sc &gt; c) ? sc : c;<br>            <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc, -<span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (table == tab) &#123;<br>                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;?,?&gt;[n];<br>                        table = nt;<br>                        sc = n - (n &gt;&gt;&gt; <span class="hljs-number">2</span>);<span class="hljs-comment">// 扩容阈值：n - 1/4 n</span><br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    sizeCtl = sc;<span class="hljs-comment">// 扩容阈值赋值给sizeCtl</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未达到扩容阈值或者数组长度已经大于最大长度</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 与 addCount 逻辑相同</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tab == table) &#123;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="成员方法-6"><a href="#成员方法-6" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="数据访存"><a href="#数据访存" class="headerlink" title="数据访存"></a>数据访存</h5><ul><li><p><code>tabAt()</code>：获取 <code>Node[]</code> 中第 i 个 Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// i 是数组索引</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="hljs-title function_">tabAt</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-comment">// (i &lt;&lt; ASHIFT) + ABASE == ABASE + i * 4 （一个 int 占 4 个字节），这就相当于寻址，替代了乘法</span><br>    <span class="hljs-keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="hljs-type">long</span>)i &lt;&lt; ASHIFT) + ABASE);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>casTabAt()</code>：cas 修改 <code>Node[]</code> 中第 i 个 Node 的值，c 为旧值，v 为新值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> &lt;K,V&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">casTabAt</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;<br>    <span class="hljs-keyword">return</span> U.compareAndSwapObject(tab, ((<span class="hljs-type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>setTabAt()</code>：直接 修改 <code>Node[]</code> 中第 i 个 Node 的值，v 为新值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> &lt;K,V&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTabAt</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> i, Node&lt;K,V&gt; v)</span> &#123;<br>    U.putObjectVolatile(tab, ((<span class="hljs-type">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h5><ul><li><p><code>put()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// 第三个参数 onlyIfAbsent 为 false，表示哈希表中存在相同的 key 时【用当前数据覆盖旧数据】</span><br>    <span class="hljs-comment">// 否则以最旧的为准</span><br>    <span class="hljs-keyword">return</span> putVal(key, value, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>putVal()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent)</span> &#123;<br>    <span class="hljs-comment">// 【ConcurrentHashMap 不能存放 null 值】</span><br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">// 扰动运算，高低位都参与寻址运算</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-comment">// 表示当前 k-v 封装成 node 后插入到指定桶位后，在桶位中的所属链表的下标位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// tab 引用当前 map 的数组 table，开始自旋</span><br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<br>        <span class="hljs-comment">// f 表示桶位的头节点，n 表示哈希表数组的长度</span><br>        <span class="hljs-comment">// i 表示 key 通过寻址计算后得到的桶位下标，fh 表示桶位头结点的 hash 值</span><br>        Node&lt;K,V&gt; f; <span class="hljs-type">int</span> n, i, fh;<br>        <br>        <span class="hljs-comment">// 【CASE1】：表示当前 map 中的 table 尚未初始化</span><br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">//【延迟初始化】，使用了 cas</span><br>            tab = initTable();<br>     <br>        <span class="hljs-comment">// 【CASE2】：i 表示 key 使用【寻址算法】得到 key 对应数组的下标位置，tabAt 获取指定桶位的头结点f</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 对应的数组为 null 说明没有哈希冲突，直接新建节点添加到表中</span><br>            <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="hljs-literal">null</span>)))<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 【CASE3】：逻辑说明数组已经被初始化，并且当前 key 对应的位置不为 null</span><br>        <span class="hljs-comment">// 条件成立表示当前桶位的头结点为 FWD 结点，表示目前 map 正处于扩容过程中</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            <span class="hljs-comment">// 当前线程【需要去帮助哈希表完成扩容】</span><br>            tab = helpTransfer(tab, f);<br>        <br>        <span class="hljs-comment">// 【CASE4】：哈希表没有在扩容且已经发生冲突，当前桶位可能是链表也可能是红黑树</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当插入 key 存在时，会将旧值赋值给 oldVal 返回</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 【锁住当前 key 寻址的桶位的头节点】</span><br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-comment">// 这里重新获取一下桶的头节点有没有被修改，因为可能被其他线程修改过，这里是线程安全的获取</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-comment">// 【头节点的哈希值大于 0 说明当前桶位是普通的链表节点】</span><br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// 当前的插入操作没出现重复的 key，追加到链表的末尾，binCount表示链表长度 -1</span><br>                        <span class="hljs-comment">// 插入的key与链表中的某个元素的 key 一致，变成替换操作，binCount 表示第几个节点冲突</span><br>                        binCount = <span class="hljs-number">1</span>;<br>                        <span class="hljs-comment">// 迭代循环当前桶位的链表，e 是每次循环处理节点，e 初始是头节点</span><br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;<br>                            <span class="hljs-comment">// 当前循环节点 key</span><br>                            K ek;<br>                            <span class="hljs-comment">// key 的哈希值与当前节点的哈希一致，并且 key 的值也相同</span><br>                            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                                ((ek = e.key) == key ||<br>                                 (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))) &#123;<br>                                <span class="hljs-comment">// 把当前节点的 value 赋值给 oldVal</span><br>                                oldVal = e.val;<br>                                <span class="hljs-comment">// 允许覆盖</span><br>                                <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                    <span class="hljs-comment">// 新数据覆盖旧数据</span><br>                                    e.val = value;<br>                                <span class="hljs-comment">// 跳出循环</span><br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                            Node&lt;K,V&gt; pred = e;<br>                            <span class="hljs-comment">// 如果下一个节点为空，把数据封装成节点插入链表尾部，【binCount 代表长度 - 1】</span><br>                            <span class="hljs-keyword">if</span> ((e = e.next) == <span class="hljs-literal">null</span>) &#123;<br>                                pred.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(hash, key,<br>                                                          value, <span class="hljs-literal">null</span>);<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 当前桶位头节点是红黑树</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        Node&lt;K,V&gt; p;<br>                        binCount = <span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,<br>                                                              value)) != <span class="hljs-literal">null</span>) &#123;<br>                            oldVal = p.val;<br>                            <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                p.val = value;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">// 条件成立说明当前是链表或者红黑树</span><br>            <span class="hljs-keyword">if</span> (binCount != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 如果 binCount &gt;= TREEIFY_THRESHOLD（8） 表示处理的桶位一定是链表，说明长度是 9</span><br>                <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)<br>                    <span class="hljs-comment">// 树化</span><br>                    treeifyBin(tab, i);<br>                <span class="hljs-keyword">if</span> (oldVal != <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> oldVal;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 统计当前 table 一共有多少数据，判断是否达到扩容阈值标准，触发扩容</span><br>    <span class="hljs-comment">// binCount = 0 表示当前桶位为 null，node 可以直接放入，2 表示当前桶位已经是红黑树</span><br>    addCount(<span class="hljs-number">1L</span>, binCount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>spread()</code>：扰动函数</p><p>将 hashCode 无符号右移 16 位，高 16bit 和低 16bit 做异或，最后与 HASH_BITS 相与变成正数，<strong>与树化节点和转移节点区分</strong>，把高低位都利用起来减少哈希冲突，保证散列的均匀性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">spread</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span> &#123;<br>    <span class="hljs-keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>)) &amp; HASH_BITS; <span class="hljs-comment">// 0111 1111 1111 1111 1111 1111 1111 1111</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>initTable()</code>：初始化数组，延迟初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;<br>    <span class="hljs-comment">// tab 引用 map.table，sc 引用 sizeCtl</span><br>    Node&lt;K,V&gt;[] tab; <span class="hljs-type">int</span> sc;<br>    <span class="hljs-comment">// table 尚未初始化，开始自旋</span><br>    <span class="hljs-keyword">while</span> ((tab = table) == <span class="hljs-literal">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// sc &lt; 0 说明 table 正在初始化或者正在扩容，当前线程可以释放 CPU 资源</span><br>        <span class="hljs-keyword">if</span> ((sc = sizeCtl) &lt; <span class="hljs-number">0</span>)<br>            Thread.<span class="hljs-keyword">yield</span>();<br>        <span class="hljs-comment">// sizeCtl 设置为 -1，相当于加锁，【设置的是 SIZECTL 位置的数据】，</span><br>        <span class="hljs-comment">// 因为是 sizeCtl 是基本类型，不是引用类型，所以 sc 保存的是数据的副本</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc, -<span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 线程安全的逻辑，再进行一次判断</span><br>                <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// sc &gt; 0 创建 table 时使用 sc 为指定大小，否则使用 16 默认值</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (sc &gt; <span class="hljs-number">0</span>) ? sc : DEFAULT_CAPACITY;<br>                    <span class="hljs-comment">// 创建哈希表数组</span><br>                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;?,?&gt;[n];<br>                    table = tab = nt;<br>                    <span class="hljs-comment">// 扩容阈值，n &gt;&gt;&gt; 2  =&gt; 等于 1/4 n ，n - (1/4)n = 3/4 n =&gt; 0.75 * n</span><br>                    sc = n - (n &gt;&gt;&gt; <span class="hljs-number">2</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 解锁，把下一次扩容的阈值赋值给 sizeCtl</span><br>                sizeCtl = sc;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tab;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>treeifyBin()：树化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> index)</span> &#123;<br>    Node&lt;K,V&gt; b; <span class="hljs-type">int</span> n, sc;<br>    <span class="hljs-keyword">if</span> (tab != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 条件成立：【说明当前 table 数组长度未达到 64，此时不进行树化操作，进行扩容操作】</span><br>        <span class="hljs-keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>            <span class="hljs-comment">// 当前容量的 2 倍</span><br>            tryPresize(n &lt;&lt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 条件成立：说明当前桶位有数据，且是普通 node 数据。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((b = tabAt(tab, index)) != <span class="hljs-literal">null</span> &amp;&amp; b.hash &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 【树化加锁】</span><br>            <span class="hljs-keyword">synchronized</span> (b) &#123;<br>                <span class="hljs-comment">// 条件成立：表示加锁没问题。</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, index) == b) &#123;<br>                    TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>                        TreeNode&lt;K,V&gt; p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span> ((p.prev = tl) == <span class="hljs-literal">null</span>)<br>                            hd = p;<br>                        <span class="hljs-keyword">else</span><br>                            tl.next = p;<br>                        tl = p;<br>                    &#125;<br>                    setTabAt(tab, index, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBin</span>&lt;K,V&gt;(hd));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>addCount()</code>：添加计数，<strong>代表哈希表中的数据总量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCount</span><span class="hljs-params">(<span class="hljs-type">long</span> x, <span class="hljs-type">int</span> check)</span> &#123;<br>    <span class="hljs-comment">// 【上面这部分的逻辑就是 LongAdder 的累加逻辑】 </span><br>    CounterCell[] as; <span class="hljs-type">long</span> b, s;<br>    <span class="hljs-comment">// 判断累加数组 cells 是否初始化，没有就去累加 base 域，累加失败进入条件内逻辑</span><br>    <span class="hljs-keyword">if</span> ((as = counterCells) != <span class="hljs-literal">null</span> ||<br>        !U.compareAndSwapLong(<span class="hljs-built_in">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;<br>        CounterCell a; <span class="hljs-type">long</span> v; <span class="hljs-type">int</span> m;<br>        <span class="hljs-comment">// true 未竞争，false 发生竞争</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">uncontended</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 判断 cells 是否被其他线程初始化</span><br>        <span class="hljs-keyword">if</span> (as == <span class="hljs-literal">null</span> || (m = as.length - <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span> ||<br>            <span class="hljs-comment">// 前面的条件为 fasle 说明 cells 被其他线程初始化，通过 hash 寻址对应的槽位</span><br>            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="hljs-literal">null</span> ||<br>            <span class="hljs-comment">// 尝试去对应的槽位累加，累加失败进入 fullAddCount 进行重试或者扩容</span><br>            !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;<br>            <span class="hljs-comment">// 与 Striped64#longAccumulate 方法相同</span><br>            fullAddCount(x, uncontended);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 表示当前桶位是 null，或者一个链表节点</span><br>        <span class="hljs-keyword">if</span> (check &lt;= <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 【获取当前散列表元素个数】，这是一个期望值</span><br>        s = sumCount();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 表示一定 【是一个 put 操作调用的 addCount】</span><br>    <span class="hljs-keyword">if</span> (check &gt;= <span class="hljs-number">0</span>) &#123;<br>        Node&lt;K,V&gt;[] tab, nt; <span class="hljs-type">int</span> n, sc;<br>        <br>        <span class="hljs-comment">// 条件一：true 说明当前 sizeCtl 可能为一个负数表示正在扩容中，或者 sizeCtl 是一个正数，表示扩容阈值</span><br>        <span class="hljs-comment">//        false 表示哈希表的数据的数量没达到扩容条件</span><br>        <span class="hljs-comment">// 然后判断当前 table 数组是否初始化了，当前 table 长度是否小于最大值限制，就可以进行扩容</span><br>        <span class="hljs-keyword">while</span> (s &gt;= (<span class="hljs-type">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="hljs-literal">null</span> &amp;&amp;<br>               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;<br>            <span class="hljs-comment">// 16 -&gt; 32 扩容 标识为：1000 0000 0001 1011，【负数，扩容批次唯一标识戳】</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> resizeStamp(n);<br>            <br>            <span class="hljs-comment">// 表示当前 table，【正在扩容】，sc 高 16 位是扩容标识戳，低 16 位是线程数 + 1</span><br>            <span class="hljs-keyword">if</span> (sc &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 条件一：判断扩容标识戳是否一样，fasle 代表一样</span><br>                <span class="hljs-comment">// 勘误两个条件：</span><br>                <span class="hljs-comment">// 条件二是：sc == (rs &lt;&lt; 16 ) + 1，true 代表扩容完成，因为低16位是1代表没有线程扩容了</span><br>                <span class="hljs-comment">// 条件三是：sc == (rs &lt;&lt; 16) + MAX_RESIZERS，判断是否已经超过最大允许的并发扩容线程数</span><br>                <span class="hljs-comment">// 条件四：判断新表的引用是否是 null，代表扩容完成</span><br>                <span class="hljs-comment">// 条件五：【扩容是从高位到低位转移】，transferIndex &lt; 0 说明没有区间需要扩容了</span><br>                <span class="hljs-keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="hljs-number">1</span> ||<br>                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="hljs-literal">null</span> ||<br>                    transferIndex &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-comment">// 设置当前线程参与到扩容任务中，将 sc 低 16 位值加 1，表示多一个线程参与扩容</span><br>                <span class="hljs-comment">// 设置失败其他线程或者 transfer 内部修改了 sizeCtl 值</span><br>                <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc, sc + <span class="hljs-number">1</span>))<br>                    <span class="hljs-comment">//【协助扩容线程】，持有nextTable参数</span><br>                    transfer(tab, nt);<br>            &#125;<br>            <span class="hljs-comment">// 逻辑到这说明当前线程是触发扩容的第一个线程，线程数量 + 2</span><br>            <span class="hljs-comment">// 1000 0000 0001 1011 0000 0000 0000 0000 +2 =&gt; 1000 0000 0001 1011 0000 0000 0000 0010</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc,(rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="hljs-number">2</span>))<br>                <span class="hljs-comment">//【触发扩容条件的线程】，不持有 nextTable，初始线程会新建 nextTable</span><br>                transfer(tab, <span class="hljs-literal">null</span>);<br>            s = sumCount();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>resizeStamp()：扩容标识符，<strong>每次扩容都会产生一个，不是每个线程都产生</strong>，16 扩容到 32 产生一个，32 扩容到 64 产生一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩容的标识符</span><br><span class="hljs-comment"> * 16 -&gt; 32 从16扩容到32</span><br><span class="hljs-comment"> * numberOfLeadingZeros(16) =&gt; 1 0000 =&gt; 32 - 5 = 27 =&gt; 0000 0000 0001 1011</span><br><span class="hljs-comment"> * (1 &lt;&lt; (RESIZE_STAMP_BITS - 1)) =&gt; 1000 0000 0000 0000 =&gt; 32768</span><br><span class="hljs-comment"> * ---------------------------------------------------------------</span><br><span class="hljs-comment"> * 0000 0000 0001 1011</span><br><span class="hljs-comment"> * 1000 0000 0000 0000</span><br><span class="hljs-comment"> * 1000 0000 0001 1011</span><br><span class="hljs-comment"> * 永远是负数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">resizeStamp</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 或运算</span><br>    <span class="hljs-keyword">return</span> Integer.numberOfLeadingZeros(n) | (<span class="hljs-number">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class="hljs-number">1</span>)); <span class="hljs-comment">// (16 -1 = 15)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h5><p>扩容机制：</p><ul><li>当链表中元素个数超过 8 个，数组的大小还未超过 64 时，此时进行数组的扩容，如果超过则将链表转化成红黑树。<ul><li>树化和反树化，与 JDK8 中的 HashMap 一致，具体地，参考：<a href="../%E7%AC%AC14%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81.md#8.2.2%20JDK8%E4%B8%AD%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">JDK8中过程分析</a></li></ul></li><li>put 数据后调用 addCount() 方法，判断当前哈希表的容量超过阈值 sizeCtl，超过进行扩容</li><li>增删改线程发现其他线程正在扩容，帮其扩容</li></ul><p>常见方法：</p><ul><li><p>transfer()：数据转移到新表中，完成扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;<br>    <span class="hljs-comment">// n 表示扩容之前 table 数组的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> tab.length, stride;<br>    <span class="hljs-comment">// stride 表示分配给线程任务的步长，默认就是 16 </span><br>    <span class="hljs-keyword">if</span> ((stride = (NCPU &gt; <span class="hljs-number">1</span>) ? (n &gt;&gt;&gt; <span class="hljs-number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)<br>        stride = MIN_TRANSFER_STRIDE;<br>    <span class="hljs-comment">// 如果当前线程为触发本次扩容的线程，需要做一些扩容准备工作，【协助线程不做这一步】</span><br>    <span class="hljs-keyword">if</span> (nextTab == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个容量是之前【二倍的 table 数组】</span><br>            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="hljs-number">1</span>];<br>            nextTab = nt;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            sizeCtl = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 把新表赋值给对象属性 nextTable，方便其他线程获取新表</span><br>        nextTable = nextTab;<br>        <span class="hljs-comment">// 记录迁移数据整体位置的一个标记，transferIndex 计数从1开始不是 0，所以这里是长度，不是长度-1</span><br>        transferIndex = n;<br>    &#125;<br>    <span class="hljs-comment">// 新数组的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">nextn</span> <span class="hljs-operator">=</span> nextTab.length;<br>    <span class="hljs-comment">// 当某个桶位数据处理完毕后，将此桶位设置为 fwd 节点，其它写线程或读线程看到后，可以从中获取到新表</span><br>    ForwardingNode&lt;K,V&gt; fwd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);<br>    <span class="hljs-comment">// 推进标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">advance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 完成标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">finishing</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">// i 表示分配给当前线程任务，执行到的桶位</span><br>    <span class="hljs-comment">// bound 表示分配给当前线程任务的下界限制，因为是倒序迁移，16 迁移完 迁移 15，15完成去迁移14</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, bound = <span class="hljs-number">0</span>;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-type">int</span> fh;<br>        <br>        <span class="hljs-comment">// 给当前线程【分配任务区间】</span><br>        <span class="hljs-keyword">while</span> (advance) &#123;<br>            <span class="hljs-comment">// 分配任务的开始下标，分配任务的结束下标</span><br>            <span class="hljs-type">int</span> nextIndex, nextBound;<br>         <br>            <span class="hljs-comment">// --i 让当前线程处理下一个索引，true说明当前的迁移任务尚未完成，false说明线程已经完成或者还未分配</span><br>            <span class="hljs-keyword">if</span> (--i &gt;= bound || finishing)<br>                advance = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 迁移的开始下标，小于0说明没有区间需要迁移了，设置当前线程的 i 变量为 -1 跳出循环</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="hljs-number">0</span>) &#123;<br>                i = -<span class="hljs-number">1</span>;<br>                advance = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 逻辑到这说明还有区间需要分配，然后给当前线程分配任务，</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, TRANSFERINDEX, nextIndex,<br>                      <span class="hljs-comment">// 判断区间是否还够一个步长，不够就全部分配</span><br>                      nextBound = (nextIndex &gt; stride ? nextIndex - stride : <span class="hljs-number">0</span>))) &#123;<br>                <span class="hljs-comment">// 当前线程的结束下标</span><br>                bound = nextBound;<br>                <span class="hljs-comment">// 当前线程的开始下标，上一个线程结束的下标的下一个索引就是这个线程开始的下标</span><br>                i = nextIndex - <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 任务分配结束，跳出循环执行迁移操作</span><br>                advance = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 【分配完成，开始数据迁移操作】</span><br>        <span class="hljs-comment">// 【CASE1】：i &lt; 0 成立表示当前线程未分配到任务，或者任务执行完了</span><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;<br>            <span class="hljs-type">int</span> sc;<br>            <span class="hljs-comment">// 如果迁移完成</span><br>            <span class="hljs-keyword">if</span> (finishing) &#123;<br>                nextTable = <span class="hljs-literal">null</span>;<span class="hljs-comment">// help GC</span><br>                table = nextTab;<span class="hljs-comment">// 新表赋值给当前对象</span><br>                sizeCtl = (n &lt;&lt; <span class="hljs-number">1</span>) - (n &gt;&gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">// 扩容阈值为 2n - n/2 = 3n/2 = 0.75*(2n)</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 当前线程完成了分配的任务区间，可以退出，先把 sizeCtl 赋值给 sc 保留</span><br>            <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 判断当前线程是不是最后一个线程，不是的话直接 return，</span><br>                <span class="hljs-keyword">if</span> ((sc - <span class="hljs-number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-comment">// 所以最后一个线程退出的时候，sizeCtl 的低 16 位为 1</span><br>                finishing = advance = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 【这里表示最后一个线程需要重新检查一遍是否有漏掉的区间】</span><br>                i = n;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 【CASE2】：当前桶位未存放数据，只需要将此处设置为 fwd 节点即可。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i)) == <span class="hljs-literal">null</span>)<br>            advance = casTabAt(tab, i, <span class="hljs-literal">null</span>, fwd);<br>        <span class="hljs-comment">// 【CASE3】：说明当前桶位已经迁移过了，当前线程不用再处理了，直接处理下一个桶位即可</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            advance = <span class="hljs-literal">true</span>; <br>        <span class="hljs-comment">// 【CASE4】：当前桶位有数据，而且 node 节点不是 fwd 节点，说明这些数据需要迁移</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 【锁住头节点】</span><br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-comment">// 二次检查，防止头节点已经被修改了，因为这里才是线程安全的访问</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-comment">// 【迁移数据的逻辑，和 HashMap 相似】</span><br>                        <br>                    <span class="hljs-comment">// ln 表示低位链表引用</span><br>                    <span class="hljs-comment">// hn 表示高位链表引用</span><br>                    Node&lt;K,V&gt; ln, hn;<br>                    <span class="hljs-comment">// 哈希 &gt; 0 表示当前桶位是链表桶位</span><br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// 和 HashMap 的处理方式一致，与老数组长度相与，16 是 10000</span><br>                        <span class="hljs-comment">// 判断对应的 1 的位置上是 0 或 1 分成高低位链表</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">runBit</span> <span class="hljs-operator">=</span> fh &amp; n;<br>                        Node&lt;K,V&gt; lastRun = f;<br>                        <span class="hljs-comment">// 遍历链表，寻找【逆序看】最长的对应位相同的链表，看下面的图更好的理解</span><br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="hljs-literal">null</span>; p = p.next) &#123;<br>                            <span class="hljs-comment">// 将当前节点的哈希 与 n</span><br>                            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> p.hash &amp; n;<br>                            <span class="hljs-comment">// 如果当前值与前面节点的值 对应位 不同，则修改 runBit，把 lastRun 指向当前节点</span><br>                            <span class="hljs-keyword">if</span> (b != runBit) &#123;<br>                                runBit = b;<br>                                lastRun = p;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-comment">// 判断筛选出的链表是低位的还是高位的</span><br>                        <span class="hljs-keyword">if</span> (runBit == <span class="hljs-number">0</span>) &#123;<br>                            ln = lastRun;<span class="hljs-comment">// ln 指向该链表</span><br>                            hn = <span class="hljs-literal">null</span>;<span class="hljs-comment">// hn 为 null</span><br>                        &#125;<br>                        <span class="hljs-comment">// 说明 lastRun 引用的链表为高位链表，就让 hn 指向高位链表头节点</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            hn = lastRun;<br>                            ln = <span class="hljs-literal">null</span>;<br>                        &#125;<br>                        <span class="hljs-comment">// 从头开始遍历所有的链表节点，迭代到 p == lastRun 节点跳出循环</span><br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">ph</span> <span class="hljs-operator">=</span> p.hash; <span class="hljs-type">K</span> <span class="hljs-variable">pk</span> <span class="hljs-operator">=</span> p.key; <span class="hljs-type">V</span> <span class="hljs-variable">pv</span> <span class="hljs-operator">=</span> p.val;<br>                            <span class="hljs-keyword">if</span> ((ph &amp; n) == <span class="hljs-number">0</span>)<br>                                <span class="hljs-comment">// 【头插法】，从右往左看，首先 ln 指向的是上一个节点，</span><br>                                <span class="hljs-comment">// 所以这次新建的节点的 next 指向上一个节点，然后更新 ln 的引用</span><br>                                ln = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);<br>                            <span class="hljs-keyword">else</span><br>                                hn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);<br>                        &#125;<br>                        <span class="hljs-comment">// 高低位链设置到新表中的指定位置</span><br>                        setTabAt(nextTab, i, ln);<br>                        setTabAt(nextTab, i + n, hn);<br>                        <span class="hljs-comment">// 老表中的该桶位设置为 fwd 节点</span><br>                        setTabAt(tab, i, fwd);<br>                        advance = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 条件成立：表示当前桶位是 红黑树结点</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;<br>                        TreeNode&lt;K,V&gt; lo = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                        TreeNode&lt;K,V&gt; hi = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">lc</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, hc = <span class="hljs-number">0</span>;<br>                        <span class="hljs-comment">// 迭代 TreeBin 中的双向链表，从头结点至尾节点</span><br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>                            <span class="hljs-comment">// 迭代的当前元素的 hash</span><br>                            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> e.hash;<br>                            TreeNode&lt;K,V&gt; p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt;<br>                                (h, e.key, e.val, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                            <span class="hljs-comment">// 条件成立表示当前循环节点属于低位链节点</span><br>                            <span class="hljs-keyword">if</span> ((h &amp; n) == <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">if</span> ((p.prev = loTail) == <span class="hljs-literal">null</span>)<br>                                    lo = p;<br>                                <span class="hljs-keyword">else</span><br>                                    <span class="hljs-comment">//【尾插法】</span><br>                                    loTail.next = p;<br>                                <span class="hljs-comment">// loTail 指向尾节点</span><br>                                loTail = p;<br>                                ++lc;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">if</span> ((p.prev = hiTail) == <span class="hljs-literal">null</span>)<br>                                    hi = p;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = p;<br>                                hiTail = p;<br>                                ++hc;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-comment">// 拆成的高位低位两个链，【判断是否需要需要转化为链表】，反之保持树化</span><br>                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :<br>                        (hc != <span class="hljs-number">0</span>) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;<br>                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :<br>                        (lc != <span class="hljs-number">0</span>) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;<br>                        setTabAt(nextTab, i, ln);<br>                        setTabAt(nextTab, i + n, hn);<br>                        setTabAt(tab, i, fwd);<br>                        advance = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>链表处理的 LastRun 机制，<strong>可以减少节点的创建</strong></p><p><img src="/./Resources/JUC-ConcurrentHashMap-LastRun%E6%9C%BA%E5%88%B6.png"></p></li><li><p>helpTransfer()：帮助扩容机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;<br>    Node&lt;K,V&gt;[] nextTab; <span class="hljs-type">int</span> sc;<br>    <span class="hljs-comment">// 数组不为空，节点是转发节点，获取转发节点指向的新表开始协助主线程扩容</span><br>    <span class="hljs-keyword">if</span> (tab != <span class="hljs-literal">null</span> &amp;&amp; (f <span class="hljs-keyword">instanceof</span> ForwardingNode) &amp;&amp;<br>        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 扩容标识戳</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> resizeStamp(tab.length);<br>        <span class="hljs-comment">// 判断数据迁移是否完成，迁移完成会把 新表赋值给 nextTable 属性</span><br>        <span class="hljs-keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp; (sc = sizeCtl) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="hljs-number">1</span> ||<br>                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// 设置扩容线程数量 + 1</span><br>            <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc, sc + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 协助扩容</span><br>                transfer(tab, nextTab);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nextTab;<br>    &#125;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><p>ConcurrentHashMap 使用 get()  方法获取指定 key 的数据</p><ul><li><p><code>get()</code>：获取指定数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="hljs-type">int</span> n, eh; K ek;<br>    <span class="hljs-comment">// 扰动运算，获取 key 的哈希值 </span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-comment">// 判断当前哈希表的数组是否初始化</span><br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        <span class="hljs-comment">// 如果 table 已经初始化，进行【哈希寻址】，映射到数组对应索引处，获取该索引处的头节点，(n - 1) &amp; h) = n % h</span><br>        (e = tabAt(tab, (n - <span class="hljs-number">1</span>) &amp; h)) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 对比头结点 hash 与查询 key 的 hash 是否一致</span><br>        <span class="hljs-keyword">if</span> ((eh = e.hash) == h) &#123;<br>            <span class="hljs-comment">// 进行值的判断，如果成功就说明当前节点就是要查询的节点，直接返回</span><br>            <span class="hljs-keyword">if</span> ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>        <span class="hljs-comment">// 当前槽位的【哈希值小于0】说明是红黑树节点或者是正在扩容的 fwd 节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eh &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> (p = e.find(h, key)) != <span class="hljs-literal">null</span> ? p.val : <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 当前桶位是【链表】，循环遍历查找</span><br>        <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.hash == h &amp;&amp;<br>                ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek))))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>ForwardingNode#find</code>：转移节点的查找方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&lt;K,V&gt; <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> h, Object k)</span> &#123;<br>    <span class="hljs-comment">// 获取新表的引用</span><br>    outer: <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;)  &#123;<br>        <span class="hljs-comment">// e 表示在扩容而创建新表使用寻址算法得到的桶位头结点，n 表示为扩容而创建的新表的长度</span><br>        Node&lt;K,V&gt; e; <span class="hljs-type">int</span> n;<br> <br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span> || tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span> ||<br>            <span class="hljs-comment">// 在新表中重新定位 hash 对应的头结点，表示在 oldTable 中对应的桶位在迁移之前就是 null</span><br>            (e = tabAt(tab, (n - <span class="hljs-number">1</span>) &amp; h)) == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> eh; K ek;<br>            <span class="hljs-comment">// 【哈希相同值也相同】，表示新表当前命中桶位中的数据，即为查询想要数据</span><br>            <span class="hljs-keyword">if</span> ((eh = e.hash) == h &amp;&amp; ((ek = e.key) == k || (ek != <span class="hljs-literal">null</span> &amp;&amp; k.equals(ek))))<br>                <span class="hljs-keyword">return</span> e;<br><br>            <span class="hljs-comment">// eh &lt; 0 说明当前新表中该索引的头节点是 TreeBin 类型，或者是 FWD 类型</span><br>            <span class="hljs-keyword">if</span> (eh &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 在并发很大的情况下新扩容的表还没完成可能【再次扩容】，在此方法处再次拿到 FWD 类型</span><br>                <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ForwardingNode) &#123;<br>                    <span class="hljs-comment">// 继续获取新的 fwd 指向的新数组的地址，递归了</span><br>                    tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;<br>                    <span class="hljs-keyword">continue</span> outer;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-comment">// 说明此桶位为 TreeBin 节点，使用TreeBin.find 查找红黑树中相应节点。</span><br>                    <span class="hljs-keyword">return</span> e.find(h, k);<br>            &#125;<br><br>            <span class="hljs-comment">// 逻辑到这说明当前桶位是链表，将当前元素指向链表的下一个元素，判断当前元素的下一个位置是否为空</span><br>            <span class="hljs-keyword">if</span> ((e = e.next) == <span class="hljs-literal">null</span>)<br>                <span class="hljs-comment">// 条件成立说明迭代到链表末尾，【未找到对应的数据，返回 null】</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h5><ul><li><p>remove()：删除指定元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> replaceNode(key, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>replaceNode()：替代指定的元素，会协助扩容，<strong>增删改（写）都会协助扩容，查询（读）操作不会</strong>，因为读操作不涉及加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">replaceNode</span><span class="hljs-params">(Object key, V value, Object cv)</span> &#123;<br>    <span class="hljs-comment">// 计算 key 扰动运算后的 hash</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-comment">// 开始自旋</span><br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-type">int</span> n, i, fh;<br>        <br>        <span class="hljs-comment">// 【CASE1】：table 还未初始化或者哈希寻址的数组索引处为 null，直接结束自旋，返回 null</span><br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span> || (f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 【CASE2】：条件成立说明当前 table 正在扩容，【当前是个写操作，所以当前线程需要协助 table 完成扩容】</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            tab = helpTransfer(tab, f);<br>        <span class="hljs-comment">// 【CASE3】：当前桶位可能是 链表 也可能是 红黑树 </span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 保留替换之前数据引用</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 校验标记</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">validated</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 【加锁当前桶位头结点】，加锁成功之后会进入代码块</span><br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-comment">// 双重检查</span><br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-comment">// 说明当前节点是链表节点</span><br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        validated = <span class="hljs-literal">true</span>;<br>                        <span class="hljs-comment">//遍历所有的节点</span><br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = f, pred = <span class="hljs-literal">null</span>;;) &#123;<br>                            K ek;<br>                            <span class="hljs-comment">// hash 和值都相同，定位到了具体的节点</span><br>                            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                                ((ek = e.key) == key ||<br>                                 (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))) &#123;<br>                                <span class="hljs-comment">// 当前节点的value</span><br>                                <span class="hljs-type">V</span> <span class="hljs-variable">ev</span> <span class="hljs-operator">=</span> e.val;<br>                                <span class="hljs-keyword">if</span> (cv == <span class="hljs-literal">null</span> || cv == ev ||<br>                                    (ev != <span class="hljs-literal">null</span> &amp;&amp; cv.equals(ev))) &#123;<br>                                    <span class="hljs-comment">// 将当前节点的值 赋值给 oldVal 后续返回会用到</span><br>                                    oldVal = ev;<br>                                    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>)<span class="hljs-comment">// 条件成立说明是替换操作</span><br>                                        e.val = value;<br>                                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>)<span class="hljs-comment">// 非头节点删除操作，断开链表</span><br>                                        pred.next = e.next;<br>                                    <span class="hljs-keyword">else</span><br>                                        <span class="hljs-comment">// 说明当前节点即为头结点，将桶位头节点设置为以前头节点的下一个节点</span><br>                                        setTabAt(tab, i, e.next);<br>                                &#125;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                            pred = e;<br>                            <span class="hljs-keyword">if</span> ((e = e.next) == <span class="hljs-literal">null</span>)<br>                                <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 说明是红黑树节点</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        validated = <span class="hljs-literal">true</span>;<br>                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;<br>                        TreeNode&lt;K,V&gt; r, p;<br>                        <span class="hljs-keyword">if</span> ((r = t.root) != <span class="hljs-literal">null</span> &amp;&amp;<br>                            (p = r.findTreeNode(hash, key, <span class="hljs-literal">null</span>)) != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">V</span> <span class="hljs-variable">pv</span> <span class="hljs-operator">=</span> p.val;<br>                            <span class="hljs-keyword">if</span> (cv == <span class="hljs-literal">null</span> || cv == pv ||<br>                                (pv != <span class="hljs-literal">null</span> &amp;&amp; cv.equals(pv))) &#123;<br>                                oldVal = pv;<br>                                <span class="hljs-comment">// 条件成立说明替换操作</span><br>                                <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>)<br>                                    p.val = value;<br>                                <span class="hljs-comment">// 删除操作</span><br>                                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t.removeTreeNode(p))<br>                                    setTabAt(tab, i, untreeify(t.first));<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 其他线程修改过桶位头结点时，当前线程 sync 头结点锁错对象，validated 为 false，会进入下次 for 自旋</span><br>            <span class="hljs-keyword">if</span> (validated) &#123;<br>                <span class="hljs-keyword">if</span> (oldVal != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 替换的值为 null，【说明当前是一次删除操作，更新当前元素个数计数器】</span><br>                    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>)<br>                        addCount(-<span class="hljs-number">1L</span>, -<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">return</span> oldVal;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>参考视频：<a href="https://space.bilibili.com/457326371/">https://space.bilibili.com/457326371/</a></p><h4 id="JDK7原理"><a href="#JDK7原理" class="headerlink" title="JDK7原理"></a>JDK7原理</h4><p>ConcurrentHashMap 对锁粒度进行了优化，<strong>分段锁技术</strong>，将整张表分成了多个数组（Segment），每个数组又是一个类似 HashMap 数组的结构。允许多个修改操作并发进行，Segment 是一种可重入锁，继承 ReentrantLock，并发时锁住的是每个 Segment，其他 Segment 还是可以操作的，这样不同 Segment 之间就可以实现并发，大大提高效率。</p><p>底层结构： <strong>Segment 数组 + HashEntry 数组 + 链表</strong>（数组 + 链表是 HashMap 的结构）</p><ul><li><p>优点：如果多个线程访问不同的 segment，实际是没有冲突的，这与 JDK8 中是类似的</p></li><li><p>缺点：Segments 数组默认大小为16，这个容量初始化指定后就不能改变了，并且不是懒惰初始化</p><p>![](.&#x2F;Resources&#x2F;JUC-ConcurrentHashMap 1.7底层结构.png)</p></li></ul><h3 id="CopyOnWrite"><a href="#CopyOnWrite" class="headerlink" title="CopyOnWrite"></a>CopyOnWrite</h3><h4 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h4><p>CopyOnWriteArrayList 采用了<strong>写入时拷贝</strong>的思想，增删改操作会将底层数组拷贝一份，在新数组上执行操作，不影响其它线程的<strong>并发读，读写分离</strong></p><p>CopyOnWriteArraySet 底层对 CopyOnWriteArrayList 进行了包装，装饰器模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">CopyOnWriteArraySet</span><span class="hljs-params">()</span> &#123;<br>    al = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;E&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>存储结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Object[] array;<span class="hljs-comment">// volatile 保证了读写线程之间的可见性</span><br></code></pre></td></tr></table></figure></li><li><p>全局锁：保证线程的执行安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br></code></pre></td></tr></table></figure></li><li><p>新增数据：需要加锁，<strong>创建新的数组操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    <span class="hljs-comment">// 加锁，保证线程安全</span><br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取旧的数组</span><br>        Object[] elements = getArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> elements.length;<br>        <span class="hljs-comment">// 【拷贝新的数组（这里是比较耗时的操作，但不影响其它读线程）】</span><br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 添加新元素</span><br>        newElements[len] = e;<br>        <span class="hljs-comment">// 替换旧的数组，【这个操作以后，其他线程获取数组就是获取的新数组了】</span><br>        setArray(newElements);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读操作：不加锁，<strong>在原数组上操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> get(getArray(), index);<br>&#125;<br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(Object[] a, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">return</span> (E) a[index];<br>&#125;<br></code></pre></td></tr></table></figure><p>适合读多写少的应用场景</p></li><li><p>迭代器：CopyOnWriteArrayList 在返回迭代器时，<strong>创建一个内部数组当前的快照（引用）</strong>，即使其他线程替换了原始数组，迭代器遍历的快照依然引用的是创建快照时的数组，所以这种实现方式也存在一定的数据延迟性，对其他线程并行添加的数据不可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取到数组引用，整个遍历的过程该数组都不会变，一直引用的都是老数组，</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">COWIterator</span>&lt;E&gt;(getArray(), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// 迭代器会创建一个底层array的快照，故主类的修改不影响该快照</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">COWIterator</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ListIterator</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">// 内部数组快照</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] snapshot;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">COWIterator</span><span class="hljs-params">(Object[] elements, <span class="hljs-type">int</span> initialCursor)</span> &#123;<br>        cursor = initialCursor;<br>        <span class="hljs-comment">// 数组的引用在迭代过程不会改变</span><br>        snapshot = elements;<br>    &#125;<br>    <span class="hljs-comment">// 【不支持写操作】，因为是在快照上操作，无法同步回去</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h4><p>数据一致性就是读到最新更新的数据：</p><ul><li><p>强一致性：当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值</p></li><li><p>弱一致性：系统并不保证进程或者线程的访问都会返回最新的更新过的值，也不会承诺多久之后可以读到</p></li></ul><img src="./Resources/JUC-CopyOnWriteArrayList弱一致性.png" style="zoom:80%;" /><table><thead><tr><th>时间点</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>Thread-0 getArray()</td></tr><tr><td>2</td><td>Thread-1 getArray()</td></tr><tr><td>3</td><td>Thread-1 setArray(arrayCopy)</td></tr><tr><td>4</td><td>Thread-0 array[index]</td></tr></tbody></table><p>Thread-0 读到了脏数据</p><p>不一定弱一致性就不好</p><ul><li>数据库的<strong>事务隔离级别</strong>就是弱一致性的表现</li><li>并发高和一致性是矛盾的，需要权衡</li></ul><hr><h4 id="安全失败"><a href="#安全失败" class="headerlink" title="安全失败"></a>安全失败</h4><p>在 java.util 包的集合类就都是快速失败的，而 java.util.concurrent 包下的类都是安全失败</p><ul><li><p>快速失败：在 A 线程使用<strong>迭代器</strong>对集合进行遍历的过程中，此时 B 线程对集合进行修改（增删改），或者 A 线程在遍历过程中对集合进行修改，都会导致 A 线程抛出 ConcurrentModificationException 异常</p><ul><li>AbstractList 类中的成员变量 modCount，用来记录 List 结构发生变化的次数，<strong>结构发生变化</strong>是指添加或者删除至少一个元素的操作，或者是调整内部数组的大小，仅仅设置元素的值不算结构发生变化</li><li>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了抛出 CME 异常</li></ul></li><li><p>安全失败：采用安全失败机制的集合容器，在<strong>迭代器</strong>遍历时直接在原集合数组内容上访问，但其他线程的增删改都会新建数组进行修改，就算修改了集合底层的数组容器，迭代器依然引用着以前的数组（<strong>快照思想</strong>），所以不会出现异常</p><p>ConcurrentHashMap 不会出现并发时的迭代异常，因为在迭代过程中 CHM 的迭代器并没有判断结构的变化，迭代器还可以根据迭代的节点状态去寻找并发扩容时的新表进行迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConcurrentHashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();<br><span class="hljs-comment">// KeyIterator</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> map.keySet().iterator();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Traverser(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> limit) &#123;<br>    <span class="hljs-comment">// 引用还是原来集合的 Node 数组，所以其他线程对数据的修改是可见的</span><br>    <span class="hljs-built_in">this</span>.tab = tab;<br>    <span class="hljs-built_in">this</span>.baseSize = size;<br>    <span class="hljs-built_in">this</span>.baseIndex = <span class="hljs-built_in">this</span>.index = index;<br>    <span class="hljs-built_in">this</span>.baseLimit = limit;<br>    <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> next != <span class="hljs-literal">null</span>; &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>    Node&lt;K,V&gt; p;<br>    <span class="hljs-keyword">if</span> ((p = next) == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-type">K</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> p.key;<br>    lastReturned = p;<br>    <span class="hljs-comment">// 在方法中进行下一个节点的获取，会进行槽位头节点的状态判断</span><br>    advance();<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections类是用来操作集合的工具类，提供了集合转换成线程安全的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Collection&lt;T&gt; <span class="hljs-title function_">synchronizedCollection</span><span class="hljs-params">(Collection&lt;T&gt; c)</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedCollection</span>&lt;&gt;(c);<br> &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; Map&lt;K,V&gt; <span class="hljs-title function_">synchronizedMap</span><span class="hljs-params">(Map&lt;K,V&gt; m)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedMap</span>&lt;&gt;(m);<br>&#125;<br></code></pre></td></tr></table></figure><p>源码：底层也是对方法进行加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mutex) &#123;<span class="hljs-keyword">return</span> c.add(e);&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="SkipListMap"><a href="#SkipListMap" class="headerlink" title="SkipListMap"></a>SkipListMap</h3><h4 id="底层结构-1"><a href="#底层结构-1" class="headerlink" title="底层结构"></a>底层结构</h4><p>跳表 SkipList 是一个<strong>有序的链表</strong>，默认升序，底层是链表加多级索引的结构。跳表可以对元素进行快速查询，类似于平衡树，是一种利用空间换时间的算法</p><p>对于单链表，即使链表是有序的，如果查找数据也只能从头到尾遍历链表，所以采用链表上建索引的方式提高效率，跳表的查询时间复杂度是 **O(logn)**，空间复杂度 O(n)</p><p>ConcurrentSkipListMap 提供了一种线程安全的并发访问的排序映射表，内部是跳表结构实现，通过 CAS + volatile 保证线程安全</p><p>平衡树和跳表的区别：</p><ul><li>对平衡树的插入和删除往往很可能导致平衡树进行一次全局的调整；而对跳表的插入和删除，<strong>只需要对整个结构的局部进行操作</strong></li><li>在高并发的情况下，保证整个平衡树的线程安全需要一个全局锁；对于跳表则只需要部分锁，拥有更好的性能</li></ul><p><img src="/./Resources/JUC-ConcurrentSkipListMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><p>BaseHeader 存储数据，headIndex 存储索引，纵向上<strong>所有索引都指向链表最下面的节点</strong></p><hr><h4 id="成员变量-2"><a href="#成员变量-2" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li><p>标识索引头节点位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">BASE_HEADER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure></li><li><p>跳表的顶层索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> HeadIndex&lt;K,V&gt; head;<br></code></pre></td></tr></table></figure></li><li><p>比较器，为 null 则使用自然排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator;<br></code></pre></td></tr></table></figure></li><li><p>Node 节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K, V&gt;&#123;<br>    <span class="hljs-keyword">final</span> K key;  <span class="hljs-comment">// key 是 final 的, 说明节点一旦定下来, 除了删除, 一般不会改动 key</span><br>    <span class="hljs-keyword">volatile</span> Object value; <span class="hljs-comment">// 对应的 value</span><br>    <span class="hljs-keyword">volatile</span> Node&lt;K, V&gt; next; <span class="hljs-comment">// 下一个节点，单向链表</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>索引节点 Index，只有向下和向右的指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span>&lt;K, V&gt;&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;K, V&gt; node; <span class="hljs-comment">// 索引指向的节点，每个都会指向数据节点</span><br>    <span class="hljs-keyword">final</span> Index&lt;K, V&gt; down; <span class="hljs-comment">// 下边level层的Index，分层索引</span><br>    <span class="hljs-keyword">volatile</span> Index&lt;K, V&gt; right; <span class="hljs-comment">// 右边的Index，单向</span><br><br>    <span class="hljs-comment">// 在 index 本身和 succ 之间插入一个新的节点 newSucc</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">link</span><span class="hljs-params">(Index&lt;K, V&gt; succ, Index&lt;K, V&gt; newSucc)</span>&#123;<br>        Node&lt;K, V&gt; n = node;<br>        newSucc.right = succ;<br>        <span class="hljs-comment">// 把当前节点的右指针从 succ 改为 newSucc</span><br>        <span class="hljs-keyword">return</span> n.value != <span class="hljs-literal">null</span> &amp;&amp; casRight(succ, newSucc);<br>    &#125;<br><br>    <span class="hljs-comment">// 断开当前节点和 succ 节点，将当前的节点 index 设置其的 right 为 succ.right，就是把 succ 删除</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">unlink</span><span class="hljs-params">(Index&lt;K, V&gt; succ)</span>&#123;<br>        <span class="hljs-keyword">return</span> node.value != <span class="hljs-literal">null</span> &amp;&amp; casRight(succ, succ.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>头索引节点 HeadIndex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeadIndex</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Index</span>&lt;K,V&gt; &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> level;<span class="hljs-comment">// 表示索引层级，所有的 HeadIndex 都指向同一个 Base_header 节点</span><br>    HeadIndex(Node&lt;K,V&gt; node, Index&lt;K,V&gt; down, Index&lt;K,V&gt; right, <span class="hljs-type">int</span> level) &#123;<br>        <span class="hljs-built_in">super</span>(node, down, right);<br>        <span class="hljs-built_in">this</span>.level = level;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="成员方法-7"><a href="#成员方法-7" class="headerlink" title="成员方法"></a>成员方法</h4><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><ul><li><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentSkipListMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = <span class="hljs-literal">null</span>;<span class="hljs-comment">// comparator 为 null，使用 key 的自然序，如字典序</span><br>    initialize();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>    keySet = <span class="hljs-literal">null</span>;<br>    entrySet = <span class="hljs-literal">null</span>;<br>    values = <span class="hljs-literal">null</span>;<br>    descendingMap = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 初始化索引头节点，Node 的 key 为 null，value 为 BASE_HEADER 对象，下一个节点为 null</span><br>    <span class="hljs-comment">// head 的分层索引 down 为 null，链表的后续索引 right 为 null，层级 level 为第 1 层</span><br>    head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeadIndex</span>&lt;K,V&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(<span class="hljs-literal">null</span>, BASE_HEADER, <span class="hljs-literal">null</span>), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>cpr：排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//　x 是比较者，y 是被比较者，比较者大于被比较者 返回正数，小于返回负数，相等返回 0</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cpr</span><span class="hljs-params">(Comparator c, Object x, Object y)</span> &#123;<br>    <span class="hljs-keyword">return</span> (c != <span class="hljs-literal">null</span>) ? c.compare(x, y) : ((Comparable)x).compareTo(y);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="添加方法-1"><a href="#添加方法-1" class="headerlink" title="添加方法"></a>添加方法</h5><ul><li><p>findPredecessor()：寻找前置节点</p><p>从最上层的头索引开始向右查找（链表的后续索引），如果后续索引的节点的 key 大于要查找的 key，则头索引移到下层链表，在下层链表查找，以此反复，一直查找到没有下层的分层索引为止，返回该索引的节点。如果后续索引的节点的 key 小于要查找的 key，则在该层链表中向后查找。由于查找的 key 可能永远大于索引节点的 key，所以只能找到目标的前置索引节点。如果遇到空值索引的存在，通过 CAS 来断开索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node&lt;K,V&gt; <span class="hljs-title function_">findPredecessor</span><span class="hljs-params">(Object key, Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cmp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(); <span class="hljs-comment">// don&#x27;t postpone errors</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 1.初始数据 q 是 head，r 是最顶层 h 的右 Index 节点</span><br>        <span class="hljs-keyword">for</span> (Index&lt;K,V&gt; q = head, r = q.right, d;;) &#123;<br>            <span class="hljs-comment">// 2.右索引节点不为空，则进行向下查找</span><br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>                Node&lt;K,V&gt; n = r.node;<br>                <span class="hljs-type">K</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> n.key;<br>                <span class="hljs-comment">// 3.n.value 为 null 说明节点 n 正在删除的过程中，此时【当前线程帮其删除索引】</span><br>                <span class="hljs-keyword">if</span> (n.value == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 在 index 层直接删除 r 索引节点</span><br>                    <span class="hljs-keyword">if</span> (!q.unlink(r))<br>                        <span class="hljs-comment">// 删除失败重新从 head 节点开始查找，break 一个 for 到步骤 1，又从初始值开始</span><br>                        <span class="hljs-keyword">break</span>;<br>                    <br>                    <span class="hljs-comment">// 删除节点 r 成功，获取新的 r 节点,</span><br>                    r = q.right;<br>                    <span class="hljs-comment">// 回到步骤 2，还是从这层索引开始向右遍历</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 4.若参数 key &gt; r.node.key，则继续向右遍历, continue 到步骤 2 处获取右节点</span><br>                <span class="hljs-comment">//   若参数 key &lt; r.node.key，说明需要进入下层索引，到步骤 5</span><br>                <span class="hljs-keyword">if</span> (cpr(cmp, key, k) &gt; <span class="hljs-number">0</span>) &#123;<br>                    q = r;<br>                    r = r.right;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 5.先让 d 指向 q 的下一层，判断是否是 null，是则说明已经到了数据层，也就是第一层</span><br>            <span class="hljs-keyword">if</span> ((d = q.down) == <span class="hljs-literal">null</span>) <br>                <span class="hljs-keyword">return</span> q.node;<br>            <span class="hljs-comment">// 6.未到数据层, 进行重新赋值向下扫描</span><br>            q = d;<span class="hljs-comment">// q 指向 d</span><br>            r = d.right;<span class="hljs-comment">// r 指向 q 的后续索引节点，此时(q.key &lt; key &lt; r.key)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./Resources/JUC-ConcurrentSkipListMap-Put%E6%B5%81%E7%A8%8B.png"></p></li><li><p>put()：添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// 非空判断，value不能为空</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-keyword">return</span> doPut(key, value, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> V <span class="hljs-title function_">doPut</span><span class="hljs-params">(K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent)</span> &#123;<br>    Node&lt;K,V&gt; z;<br>    <span class="hljs-comment">// 非空判断，key 不能为空</span><br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cmp = comparator;<br>    <span class="hljs-comment">// outer 循环，【把待插入数据插入到数据层的合适的位置，并在扫描过程中处理已删除(value = null)的数据】</span><br>    outer: <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">//0.for (;;)</span><br>        <span class="hljs-comment">//1.将 key 对应的前继节点找到, b 为前继节点，是数据层的, n 是前继节点的 next, </span><br><span class="hljs-comment">//  若没发生条件竞争，最终 key 在 b 与 n 之间 (找到的 b 在 base_level 上)</span><br>        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; b = findPredecessor(key, cmp), n = b.next;;) &#123;<br>            <span class="hljs-comment">// 2.n 不为 null 说明 b 不是链表的最后一个节点</span><br>            <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span>) &#123;<br>                Object v; <span class="hljs-type">int</span> c;<br>                <span class="hljs-comment">// 3.获取 n 的右节点</span><br>                Node&lt;K,V&gt; f = n.next;<br>                <span class="hljs-comment">// 4.条件竞争，并发下其他线程在 b 之后插入节点或直接删除节点 n, break 到步骤 0</span><br>                <span class="hljs-keyword">if</span> (n != b.next)              <br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//  若节点 n 已经删除, 则调用 helpDelete 进行【帮助删除节点】</span><br>                <span class="hljs-keyword">if</span> ((v = n.value) == <span class="hljs-literal">null</span>) &#123;<br>                    n.helpDelete(b, f);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 5.节点 b 被删除中，则 break 到步骤 0,</span><br><span class="hljs-comment">//  【调用findPredecessor帮助删除index层的数据, node层的数据会通过helpDelete方法进行删除】</span><br>                <span class="hljs-keyword">if</span> (b.value == <span class="hljs-literal">null</span> || v == n) <br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 6.若 key &gt; n.key，则进行向后扫描</span><br>                <span class="hljs-comment">//   若 key &lt; n.key，则证明 key 应该存储在 b 和 n 之间</span><br>                <span class="hljs-keyword">if</span> ((c = cpr(cmp, key, n.key)) &gt; <span class="hljs-number">0</span>) &#123;<br>                    b = n;<br>                    n = f;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 7.key 的值和 n.key 相等，则可以直接覆盖赋值</span><br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// onlyIfAbsent 默认 false，</span><br>                    <span class="hljs-keyword">if</span> (onlyIfAbsent || n.casValue(v, value)) &#123;<br>                        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="hljs-type">V</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> (V)v;<br>                        <span class="hljs-comment">// 返回被覆盖的值</span><br>                        <span class="hljs-keyword">return</span> vv;<br>                    &#125;<br>                    <span class="hljs-comment">// cas失败，break 一层循环，返回 0 重试</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// else c &lt; 0; fall through</span><br>            &#125;<br>            <span class="hljs-comment">// 8.此时的情况 b.key &lt; key &lt; n.key，对应流程图1中的7，创建z节点指向n</span><br>            z = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(key, value, n);<br>            <span class="hljs-comment">// 9.尝试把 b.next 从 n 设置成 z</span><br>            <span class="hljs-keyword">if</span> (!b.casNext(n, z))<br>                <span class="hljs-comment">// cas失败，返回到步骤0，重试</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// 10.break outer 后, 上面的 for 循环不会再执行, 而后执行下面的代码</span><br>            <span class="hljs-keyword">break</span> outer;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 【以上插入节点已经完成，剩下的任务要根据随机数的值来表示是否向上增加层数与上层索引】</span><br>    <br>    <span class="hljs-comment">// 随机数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rnd</span> <span class="hljs-operator">=</span> ThreadLocalRandom.nextSecondarySeed();<br>    <br>    <span class="hljs-comment">// 如果随机数的二进制与 10000000000000000000000000000001 进行与运算为 0</span><br>    <span class="hljs-comment">// 即随机数的二进制最高位与最末尾必须为 0，其他位无所谓，就进入该循环</span><br>    <span class="hljs-comment">// 如果随机数的二进制最高位与最末位不为 0，不增加新节点的层数</span><br>    <br>    <span class="hljs-comment">// 11.判断是否需要添加 level，32 位</span><br>    <span class="hljs-keyword">if</span> ((rnd &amp; <span class="hljs-number">0x80000001</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 索引层 level，从 1 开始，就是最底层</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, max;<br>        <span class="hljs-comment">// 12.判断最低位前面有几个 1，有几个leve就加几：0..0 0001 1110，这是4个，则1+4=5</span><br>        <span class="hljs-comment">//    【最大有30个就是 1 + 30 = 31</span><br>        <span class="hljs-keyword">while</span> (((rnd &gt;&gt;&gt;= <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>            ++level;<br>        <span class="hljs-comment">// 最终会指向 z 节点，就是添加的节点 </span><br>        Index&lt;K,V&gt; idx = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 指向头索引节点</span><br>        HeadIndex&lt;K,V&gt; h = head;<br>        <br>        <span class="hljs-comment">// 13.判断level是否比当前最高索引小，图中 max 为 3</span><br>        <span class="hljs-keyword">if</span> (level &lt;= (max = h.level)) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= level; ++i)<br>                <span class="hljs-comment">// 根据层数level不断创建新增节点的上层索引，索引的后继索引留空</span><br>                <span class="hljs-comment">// 第一次idx为null，也就是下层索引为空，第二次把上次的索引作为下层索引，【类似头插法】</span><br>                idx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Index</span>&lt;K,V&gt;(z, idx, <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 循环以后的索引结构</span><br>            <span class="hljs-comment">// index-3← idx</span><br>            <span class="hljs-comment">//   ↓</span><br>            <span class="hljs-comment">// index-2</span><br>            <span class="hljs-comment">//   ↓</span><br>            <span class="hljs-comment">// index-1</span><br>            <span class="hljs-comment">//   ↓</span><br>            <span class="hljs-comment">//  z-node</span><br>        &#125;<br>        <span class="hljs-comment">// 14.若 level &gt; max，则【只增加一层 index 索引层】，3 + 1 = 4</span><br>        <span class="hljs-keyword">else</span> &#123; <br>            level = max + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//创建一个 index 数组，长度是 level+1，假设 level 是 4，创建的数组长度为 5</span><br>            Index&lt;K,V&gt;[] idxs = (Index&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Index</span>&lt;?,?&gt;[level+<span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// index[0]的数组 slot 并没有使用，只使用 [1,level] 这些数组的 slot</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= level; ++i)<br>                idxs[i] = idx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Index</span>&lt;K,V&gt;(z, idx, <span class="hljs-literal">null</span>);<br>              <span class="hljs-comment">// index-4   ← idx</span><br>                    <span class="hljs-comment">//   ↓</span><br>                  <span class="hljs-comment">// ......</span><br>                    <span class="hljs-comment">//   ↓</span><br>                    <span class="hljs-comment">// index-1</span><br>                    <span class="hljs-comment">//   ↓</span><br>                    <span class="hljs-comment">//  z-node</span><br>            <br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                h = head;<br>                <span class="hljs-comment">// 获取头索引的层数，3</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">oldLevel</span> <span class="hljs-operator">=</span> h.level;<br>                <span class="hljs-comment">// 如果 level &lt;= oldLevel，说明其他线程进行了 index 层增加操作，退出循环</span><br>                <span class="hljs-keyword">if</span> (level &lt;= oldLevel)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 定义一个新的头索引节点</span><br>                HeadIndex&lt;K,V&gt; newh = h;<br>                <span class="hljs-comment">// 获取头索引的节点，就是 BASE_HEADER</span><br>                Node&lt;K,V&gt; oldbase = h.node;<br>                <span class="hljs-comment">// 升级 baseHeader 索引，升高一级，并发下可能升高多级</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> oldLevel + <span class="hljs-number">1</span>; j &lt;= level; ++j)<br>                    <span class="hljs-comment">// 参数1：底层node，参数二：down，为以前的头节点，参数三：right，新建</span><br>                    newh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeadIndex</span>&lt;K,V&gt;(oldbase, newh, idxs[j], j);<br>                <span class="hljs-comment">// 执行完for循环之后，baseHeader 索引长这个样子，这里只升高一级</span><br>                <span class="hljs-comment">// index-4             →             index-4← idx</span><br>                <span class="hljs-comment">//   ↓                                  ↓</span><br>                <span class="hljs-comment">// index-3                           index-3     </span><br>                <span class="hljs-comment">//   ↓                                  ↓</span><br>                <span class="hljs-comment">// index-2                           index-2</span><br>                <span class="hljs-comment">//   ↓                                  ↓</span><br>                <span class="hljs-comment">// index-1                           index-1</span><br>                <span class="hljs-comment">//   ↓                                  ↓</span><br>                <span class="hljs-comment">// baseHeader    →    ....      →     z-node</span><br>                <br>                <span class="hljs-comment">// cas 成功后，head 字段指向最新的 headIndex，baseHeader 的 index-4</span><br>                <span class="hljs-keyword">if</span> (casHead(h, newh)) &#123;<br>                    <span class="hljs-comment">// h 指向最新的 index-4 节点</span><br>                    h = newh;<br>                    <span class="hljs-comment">// 让 idx 指向 z-node 的 index-3 节点，</span><br><span class="hljs-comment">// 因为从 index-3 - index-1 的这些 z-node 索引节点 都没有插入到索引链表</span><br>                    idx = idxs[level = oldLevel];<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 15.【把新加的索引插入索引链表中】，有上述两种情况，一种索引高度不变，另一种是高度加 1</span><br>        <span class="hljs-comment">// 要插入的是第几层的索引</span><br>        splice: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">insertionLevel</span> <span class="hljs-operator">=</span> level;;) &#123;<br>            <span class="hljs-comment">// 获取头索引的层数，情况 1 是 3，情况 2 是 4</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> h.level;<br>            <span class="hljs-comment">// 【遍历 insertionLevel 层的索引，找到合适的插入位置】</span><br>            <span class="hljs-keyword">for</span> (Index&lt;K,V&gt; q = h, r = q.right, t = idx;;) &#123;<br>                <span class="hljs-comment">// 如果头索引为 null 或者新增节点索引为 null，退出插入索引的总循环</span><br>                <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span> || t == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-comment">// 此处表示有其他线程删除了头索引或者新增节点的索引</span><br>                    <span class="hljs-keyword">break</span> splice;<br>                <span class="hljs-comment">// 头索引的链表后续索引存在，如果是新层则为新节点索引，如果是老层则为原索引</span><br>                <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 获取r的节点</span><br>                    Node&lt;K,V&gt; n = r.node;<br>                    <span class="hljs-comment">// 插入的key和n.key的比较值</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> cpr(cmp, key, n.key);<br>                    <span class="hljs-comment">// 【删除空值索引】</span><br>                    <span class="hljs-keyword">if</span> (n.value == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (!q.unlink(r))<br>                            <span class="hljs-keyword">break</span>;<br>                        r = q.right;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// key &gt; r.node.key，向右扫描</span><br>                    <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>) &#123;<br>                        q = r;<br>                        r = r.right;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 执行到这里，说明 key &lt; r.node.key，判断是否是第 j 层插入新增节点的前置索引</span><br>                <span class="hljs-keyword">if</span> (j == insertionLevel) &#123;<br>                    <span class="hljs-comment">// 【将新索引节点 t 插入 q r 之间】</span><br>                    <span class="hljs-keyword">if</span> (!q.link(r, t))<br>                        <span class="hljs-keyword">break</span>; <br>                    <span class="hljs-comment">// 如果新增节点的值为 null，表示该节点已经被其他线程删除</span><br>                    <span class="hljs-keyword">if</span> (t.node.value == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 找到该节点</span><br>                        findNode(key);<br>                        <span class="hljs-keyword">break</span> splice;<br>                    &#125;<br>                    <span class="hljs-comment">// 插入层逐层自减，当为最底层时退出循环</span><br>                    <span class="hljs-keyword">if</span> (--insertionLevel == <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span> splice;<br>                &#125;<br><span class="hljs-comment">// 其他节点随着插入节点的层数下移而下移</span><br>                <span class="hljs-keyword">if</span> (--j &gt;= insertionLevel &amp;&amp; j &lt; level)<br>                    t = t.down;<br>                q = q.down;<br>                r = q.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>findNode()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node&lt;K,V&gt; <span class="hljs-title function_">findNode</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 原理与doGet相同，无非是 findNode 返回节点，doGet 返回 value</span><br>    <span class="hljs-keyword">if</span> ((c = cpr(cmp, key, n.key)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="获取方法-1"><a href="#获取方法-1" class="headerlink" title="获取方法"></a>获取方法</h5><ul><li><p>get(key)：获取对应的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> doGet(key);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>doGet()：扫描过程会对已 value &#x3D; null 的元素进行删除处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> V <span class="hljs-title function_">doGet</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cmp = comparator;<br>    outer: <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 1.找到最底层节点的前置节点</span><br>        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; b = findPredecessor(key, cmp), n = b.next;;) &#123;<br>            Object v; <span class="hljs-type">int</span> c;<br>            <span class="hljs-comment">// 2.【如果该前置节点的链表后续节点为 null，说明不存在该节点】</span><br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">break</span> outer;<br>            <span class="hljs-comment">// b → n → f</span><br>            Node&lt;K,V&gt; f = n.next;<br>            <span class="hljs-comment">// 3.如果n不为前置节点的后续节点，表示已经有其他线程删除了该节点</span><br>            <span class="hljs-keyword">if</span> (n != b.next) <br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// 4.如果后续节点的值为null，【需要帮助删除该节点】</span><br>            <span class="hljs-keyword">if</span> ((v = n.value) == <span class="hljs-literal">null</span>) &#123;<br>                n.helpDelete(b, f);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 5.如果前置节点已被其他线程删除，重新循环</span><br>            <span class="hljs-keyword">if</span> (b.value == <span class="hljs-literal">null</span> || v == n)<br>                <span class="hljs-keyword">break</span>;<br>             <span class="hljs-comment">// 6.如果要获取的key与后续节点的key相等，返回节点的value</span><br>            <span class="hljs-keyword">if</span> ((c = cpr(cmp, key, n.key)) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="hljs-type">V</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> (V)v;<br>                <span class="hljs-keyword">return</span> vv;<br>            &#125;<br>            <span class="hljs-comment">// 7.key &lt; n.key，因位 key &gt; b.key，b 和 n 相连，说明不存在该节点或者被其他线程删除了</span><br>            <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span> outer;<br>            b = n;<br>            n = f;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="删除方法-1"><a href="#删除方法-1" class="headerlink" title="删除方法"></a>删除方法</h5><ul><li><p>remove()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> doRemove(key, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">doRemove</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cmp = comparator;<br>    outer: <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 1.找到最底层目标节点的前置节点，b.key &lt; key</span><br>        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; b = findPredecessor(key, cmp), n = b.next;;) &#123;<br>            Object v; <span class="hljs-type">int</span> c;<br>            <span class="hljs-comment">// 2.如果该前置节点的链表后续节点为 null，退出循环，说明不存在这个元素</span><br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">break</span> outer;<br>            <span class="hljs-comment">// b → n → f</span><br>            Node&lt;K,V&gt; f = n.next;<br>            <span class="hljs-keyword">if</span> (n != b.next)                    <span class="hljs-comment">// inconsistent read</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> ((v = n.value) == <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// n is deleted</span><br>                n.helpDelete(b, f);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (b.value == <span class="hljs-literal">null</span> || v == n)      <span class="hljs-comment">// b is deleted</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//3.key &lt; n.key，说明被其他线程删除了，或者不存在该节点</span><br>            <span class="hljs-keyword">if</span> ((c = cpr(cmp, key, n.key)) &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span> outer;<br>            <span class="hljs-comment">//4.key &gt; n.key，继续向后扫描</span><br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>) &#123;<br>                b = n;<br>                n = f;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">//5.到这里是 key = n.key，value 不为空的情况下判断 value 和 n.value 是否相等</span><br>            <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> &amp;&amp; !value.equals(v))<br>                <span class="hljs-keyword">break</span> outer;<br>            <span class="hljs-comment">//6.【把 n 节点的 value 置空】</span><br>            <span class="hljs-keyword">if</span> (!n.casValue(v, <span class="hljs-literal">null</span>))<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//7.【给 n 添加一个删除标志 mark】，mark.next = f，然后把 b.next 设置为 f，成功后n出队</span><br>            <span class="hljs-keyword">if</span> (!n.appendMarker(f) || !b.casNext(n, f))<br>                <span class="hljs-comment">// 对 key 对应的 index 进行删除，调用了 findPredecessor 方法</span><br>                findNode(key);<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 进行操作失败后通过 findPredecessor 中进行 index 的删除</span><br>                findPredecessor(key, cmp);<br>                <span class="hljs-keyword">if</span> (head.right == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-comment">// 进行headIndex 对应的index 层的删除</span><br>                    tryReduceLevel();<br>            &#125;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="hljs-type">V</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> (V)v;<br>            <span class="hljs-keyword">return</span> vv;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 findPredecessor() 中的 unlink() 后索引已经被删除</p><p><img src="/./Resources/JUC-ConcurrentSkipListMap-remove%E6%B5%81%E7%A8%8B.png"></p></li><li><p>appendMarker()：添加删除标记节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">appendMarker</span><span class="hljs-params">(Node&lt;K,V&gt; f)</span> &#123;<br>    <span class="hljs-comment">// 通过 CAS 让 n.next 指向一个 key 为 null，value 为 this，next 为 f 的标记节点</span><br>    <span class="hljs-keyword">return</span> casNext(f, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(f));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>helpDelete()：将添加了删除标记的节点清除，参数是该节点的前驱和后继节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">helpDelete</span><span class="hljs-params">(Node&lt;K,V&gt; b, Node&lt;K,V&gt; f)</span> &#123;<br>    <span class="hljs-comment">// this 节点的后续节点为 f，且本身为 b 的后续节点，一般都是正确的，除非被别的线程删除</span><br>    <span class="hljs-keyword">if</span> (f == next &amp;&amp; <span class="hljs-built_in">this</span> == b.next) &#123;<br>        <span class="hljs-comment">// 如果 n 还还没有被标记</span><br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span> || f.value != f) <br>            casNext(f, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(f));<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 通过 CAS，将 b 的下一个节点 n 变成 f.next，即成为图中的样式</span><br>            b.casNext(<span class="hljs-built_in">this</span>, f.next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>tryReduceLevel()：删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryReduceLevel</span><span class="hljs-params">()</span> &#123;<br>    HeadIndex&lt;K,V&gt; h = head;<br>    HeadIndex&lt;K,V&gt; d;<br>    HeadIndex&lt;K,V&gt; e;<br>    <span class="hljs-keyword">if</span> (h.level &gt; <span class="hljs-number">3</span> &amp;&amp;<br>        (d = (HeadIndex&lt;K,V&gt;)h.down) != <span class="hljs-literal">null</span> &amp;&amp;<br>        (e = (HeadIndex&lt;K,V&gt;)d.down) != <span class="hljs-literal">null</span> &amp;&amp;<br>        e.right == <span class="hljs-literal">null</span> &amp;&amp;<br>        d.right == <span class="hljs-literal">null</span> &amp;&amp;<br>        h.right == <span class="hljs-literal">null</span> &amp;&amp;<br>        <span class="hljs-comment">// 设置头索引</span><br>        casHead(h, d) &amp;&amp; <br>        <span class="hljs-comment">// 重新检查</span><br>        h.right != <span class="hljs-literal">null</span>) <br>        <span class="hljs-comment">// 重新检查返回true，说明其他线程增加了索引层级，把索引头节点设置回来</span><br>        casHead(d, h);   <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>参考文章：<a href="https://my.oschina.net/u/3768341/blog/3135659">https://my.oschina.net/u/3768341/blog/3135659</a></p><p>参考视频：<a href="https://www.bilibili.com/video/BV1Er4y1P7k1">https://www.bilibili.com/video/BV1Er4y1P7k1</a></p><hr><h3 id="NoBlocking"><a href="#NoBlocking" class="headerlink" title="NoBlocking"></a>NoBlocking</h3><h4 id="非阻塞队列"><a href="#非阻塞队列" class="headerlink" title="非阻塞队列"></a>非阻塞队列</h4><p>并发编程中，需要用到安全的队列，实现安全队列可以使用 2 种方式：</p><ul><li>加锁，这种实现方式是阻塞队列</li><li>使用循环 CAS 算法实现，这种方式是非阻塞队列</li></ul><p>ConcurrentLinkedQueue 是一个基于链接节点的无界线程安全队列，采用先进先出的规则对节点进行排序，当添加一个元素时，会添加到队列的尾部，当获取一个元素时，会返回队列头部的元素</p><p>补充：ConcurrentLinkedDeque 是双向链表结构的无界并发队列</p><p>ConcurrentLinkedQueue 使用约定：</p><ol><li>不允许 null 入列</li><li>队列中所有未删除的节点的 item 都不能为 null 且都能从 head 节点遍历到</li><li>删除节点是将 item 设置为 null，队列迭代时跳过 item 为 null 节点</li><li>head 节点跟 tail 不一定指向头节点或尾节点，可能<strong>存在滞后性</strong></li></ol><p>ConcurrentLinkedQueue 由 head 节点和 tail 节点组成，每个节点由节点元素和指向下一个节点的引用组成，组成一张链表结构的队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;E&gt; head;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node&lt;E&gt; tail;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">volatile</span> E item;<br>    <span class="hljs-keyword">volatile</span> Node&lt;E&gt; next;<br>    <span class="hljs-comment">//.....</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><p>无参构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentLinkedQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 默认情况下 head 节点存储的元素为空，dummy 节点，tail 节点等于 head 节点</span><br>    head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>有参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentLinkedQueue</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>    Node&lt;E&gt; h = <span class="hljs-literal">null</span>, t = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 遍历节点</span><br>    <span class="hljs-keyword">for</span> (E e : c) &#123;<br>        checkNotNull(e);<br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(e);<br>        <span class="hljs-keyword">if</span> (h == <span class="hljs-literal">null</span>)<br>            h = t = newNode;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 单向链表</span><br>            t.lazySetNext(newNode);<br>            t = newNode;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-literal">null</span>)<br>        h = t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(<span class="hljs-literal">null</span>);<br>    head = h;<br>    tail = t;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="入队方法"><a href="#入队方法" class="headerlink" title="入队方法"></a>入队方法</h4><p>与传统的链表不同，单线程入队的工作流程：</p><ul><li>将入队节点设置成当前队列尾节点的下一个节点</li><li>更新 tail 节点，如果 tail 节点的 next 节点不为空，则将入队节点设置成 tail 节点；如果 tail 节点的 next 节点为空，则将入队节点设置成 tail 的 next 节点，所以 tail 节点不总是尾节点，<strong>存在滞后性</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    checkNotNull(e);<br>    <span class="hljs-comment">// 创建入队节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(e);<br><br>    <span class="hljs-comment">// 循环 CAS 直到入队成功</span><br>    <span class="hljs-keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123;<br>        <span class="hljs-comment">// p 用来表示队列的尾节点，初始情况下等于 tail 节点，q 是 p 的 next 节点</span><br>        Node&lt;E&gt; q = p.next;<br>        <span class="hljs-comment">// 条件成立说明 p 是尾节点</span><br>        <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// p 是尾节点，设置 p 节点的下一个节点为新节点</span><br>            <span class="hljs-comment">// 设置成功则 casNext 返回 true，否则返回 false，说明有其他线程更新过尾节点，继续寻找尾节点，继续 CAS</span><br>            <span class="hljs-keyword">if</span> (p.casNext(<span class="hljs-literal">null</span>, newNode)) &#123;<br>                <span class="hljs-comment">// 首次添加时，p 等于 t，不进行尾节点更新，所以尾节点存在滞后性</span><br>                <span class="hljs-keyword">if</span> (p != t)<br>                    <span class="hljs-comment">// 将 tail 设置成新入队的节点，设置失败表示其他线程更新了 tail 节点</span><br>                    casTail(t, newNode); <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == q)<br>            <span class="hljs-comment">// 当 tail 不指向最后节点时，如果执行出列操作，可能将 tail 也移除，tail 不在链表中 </span><br>        <span class="hljs-comment">// 此时需要对 tail 节点进行复位，复位到 head 节点</span><br>            p = (t != (t = tail)) ? t : head;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-comment">// 推动 tail 尾节点往队尾移动</span><br>            p = (p != t &amp;&amp; t != (t = tail)) ? t : q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>图解入队：</p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%85%A5%E9%98%9F%E6%93%8D%E4%BD%9C1.png"></p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%85%A5%E9%98%9F%E6%93%8D%E4%BD%9C2.png"></p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%85%A5%E9%98%9F%E6%93%8D%E4%BD%9C3.png"></p><p>当 tail 节点和尾节点的距离<strong>大于等于 1</strong> 时（每入队两次）更新 tail，可以减少 CAS 更新 tail 节点的次数，提高入队效率</p><p>线程安全问题：</p><ul><li>线程 1 线程 2 同时入队，无论从哪个位置开始并发入队，都可以循环 CAS，直到入队成功，线程安全</li><li>线程 1 遍历，线程 2 入队，所以造成 ConcurrentLinkedQueue 的 size 是变化，需要加锁保证安全</li><li>线程 1 线程 2 同时出列，线程也是安全的</li></ul><hr><h4 id="出队方法"><a href="#出队方法" class="headerlink" title="出队方法"></a>出队方法</h4><p>出队列的就是从队列里返回一个节点元素，并清空该节点对元素的引用，并不是每次出队都更新 head 节点</p><ul><li>当 head 节点里有元素时，直接弹出 head 节点里的元素，而不会更新 head 节点</li><li>当 head 节点里没有元素时，出队操作才会更新 head 节点</li></ul><p><strong>批处理方式</strong>可以减少使用 CAS 更新 head 节点的消耗，从而提高出队效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>    restartFromHead:<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// p 节点表示首节点，即需要出队的节点，FIFO</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> p.item;<br><span class="hljs-comment">// 如果 p 节点的元素不为 null，则通过 CAS 来设置 p 节点引用元素为 null，成功返回 item</span><br>            <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span> &amp;&amp; p.casItem(item, <span class="hljs-literal">null</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (p != h)<br>                   <span class="hljs-comment">// 对 head 进行移动</span><br>                    updateHead(h, ((q = p.next) != <span class="hljs-literal">null</span>) ? q : p);<br>                <span class="hljs-keyword">return</span> item;<br>            &#125;<br>           <span class="hljs-comment">// 逻辑到这说明头节点的元素为空或头节点发生了变化，头节点被另外一个线程修改了</span><br>            <span class="hljs-comment">// 那么获取 p 节点的下一个节点，如果 p 节点的下一节点也为 null，则表明队列已经空了</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((q = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                updateHead(h, p);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>      <span class="hljs-comment">// 第一轮操作失败，下一轮继续，调回到循环前</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == q)<br>                <span class="hljs-keyword">continue</span> restartFromHead;<br>            <span class="hljs-comment">// 如果下一个元素不为空，则将头节点的下一个节点设置成头节点</span><br>            <span class="hljs-keyword">else</span><br>                p = q;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateHead</span><span class="hljs-params">(Node&lt;E&gt; h, Node&lt;E&gt; p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (h != p &amp;&amp; casHead(h, p))<br>        <span class="hljs-comment">// 将旧结点 h 的 next 域指向为 h，help gc</span><br>        h.lazySetNext(h);<br>&#125;<br></code></pre></td></tr></table></figure><p>在更新完 head 之后，会将旧的头结点 h 的 next 域指向为 h，图中所示的虚线也就表示这个节点的自引用，被移动的节点（item 为 null 的节点）会被 GC 回收</p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%87%BA%E9%98%9F%E6%93%8D%E4%BD%9C1.png"></p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%87%BA%E9%98%9F%E6%93%8D%E4%BD%9C2.png"></p><p><img src="/./Resources/JUC-ConcurrentLinkedQueue%E5%87%BA%E9%98%9F%E6%93%8D%E4%BD%9C3.png"></p><p>如果这时，有一个线程来添加元素，通过 tail 获取的 next 节点则仍然是它本身，这就出现了p &#x3D;&#x3D; q 的情况，出现该种情况之后，则会触发执行 head 的更新，将 p 节点重新指向为 head</p><p>参考文章：<a href="https://www.jianshu.com/p/231caf90f30b">https://www.jianshu.com/p/231caf90f30b</a></p><hr><h4 id="成员方法-8"><a href="#成员方法-8" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><p>peek()：会改变 head 指向，执行 peek() 方法后 head 会指向第一个具有非空元素的节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取链表的首部元素，只读取而不移除</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>    restartFromHead:<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> p.item;<br>            <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span> || (q = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 更改h的位置为非空元素节点</span><br>                updateHead(h, p);<br>                <span class="hljs-keyword">return</span> item;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p == q)<br>                <span class="hljs-keyword">continue</span> restartFromHead;<br>            <span class="hljs-keyword">else</span><br>                p = q;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>size()：用来获取当前队列的元素个数，因为整个过程都没有加锁，在并发环境中从调用 size 方法到返回结果期间有可能增删元素，导致统计的元素个数不精确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// first() 获取第一个具有非空元素的节点，若不存在，返回 null</span><br>    <span class="hljs-comment">// succ(p) 方法获取 p 的后继节点，若 p == p.next，则返回 head</span><br>    <span class="hljs-comment">// 类似遍历链表</span><br>    <span class="hljs-keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="hljs-literal">null</span>; p = succ(p))<br>        <span class="hljs-keyword">if</span> (p.item != <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">// 最大返回Integer.MAX_VALUE</span><br>            <span class="hljs-keyword">if</span> (++count == Integer.MAX_VALUE)<br>                <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>remove()：移除元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 删除的元素不能为null</span><br>    <span class="hljs-keyword">if</span> (o != <span class="hljs-literal">null</span>) &#123;<br>        Node&lt;E&gt; next, pred = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="hljs-literal">null</span>; pred = p, p = next) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">removed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> p.item;<br>            <span class="hljs-comment">// 节点元素不为null</span><br>            <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 若不匹配，则获取next节点继续匹配</span><br>                <span class="hljs-keyword">if</span> (!o.equals(item)) &#123;<br>                    next = succ(p);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 若匹配，则通过 CAS 操作将对应节点元素置为 null</span><br>                removed = p.casItem(item, <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-comment">// 获取删除节点的后继节点</span><br>            next = succ(p);<br>            <span class="hljs-comment">// 将被删除的节点移除队列</span><br>            <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span> &amp;&amp; next != <span class="hljs-literal">null</span>) <span class="hljs-comment">// unlink</span><br>                pred.casNext(p, next);<br>            <span class="hljs-keyword">if</span> (removed)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JUC并发编程&quot;&gt;&lt;a href=&quot;#JUC并发编程&quot; class=&quot;headerlink&quot; title=&quot;JUC并发编程&quot;&gt;&lt;/a&gt;JUC并发编程&lt;/h1&gt;&lt;h2 id=&quot;一、进程与线程&quot;&gt;&lt;a href=&quot;#一、进程与线程&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/"/>
    
    <category term="Juc" scheme="http://conquers.github.io/categories/Java/Juc/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL OverView</title>
    <link href="http://conquers.github.io/posts/359ea42e.html"/>
    <id>http://conquers.github.io/posts/359ea42e.html</id>
    <published>2023-06-26T06:54:45.000Z</published>
    <updated>2023-07-18T02:51:12.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文使用的环境为 阿里云云服务器、<code>MySQL 5.7</code> 和 <code>MySQL 8</code>，均使用 <code>Docker</code> 安装，除非特别说明，默认使用<code>MySQL 5.7</code>。</p><p>如果出现结果不一致，使用命令行即可，因为可视化软件会自动请求一些其他内容。</p></blockquote><ul><li>基础篇<ul><li><a href="http://conquers.github.io/posts/e967e26.html">Mysql 基础篇</a></li></ul></li><li>高级篇<ul><li>架构篇<ul><li><a href="http://conquers.github.io/posts/2237bb15.html">第04章 逻辑架构</a></li><li><a href="http://conquers.github.io/posts/8d469f79.html">第05章 存储引擎</a></li></ul></li><li>索引及调优篇<ul><li>6-12</li><li><a href="http://conquers.github.io/posts/98817d56.html">第06章 索引的数据结构</a></li><li><a href="http://conquers.github.io/posts/69ea2410.html">第08章 索引的创建与设计原则</a></li><li><a href="http://conquers.github.io/posts/43d93e27.html">第09章 性能分析工具的使用</a></li><li><a href="http://conquers.github.io/posts/ada7f77e.html">第10章 索引优化与查询优化</a></li></ul></li><li>事务篇<ul><li><a href="http://conquers.github.io/posts/dfe5e713.html">第13章 事务基础知识</a></li><li><a href="http://conquers.github.io/posts/fa7ec77e.html">第14章 MySQL 日志</a></li><li><a href="http://conquers.github.io/posts/b7d439cb.html">第15章 锁</a></li><li><a href="http://conquers.github.io/posts/99914452.html">第16章 多版本并发控制</a></li></ul></li><li>日志与备份篇<ul><li><a href="http://conquers.github.io/posts/1c2dcbdd.html">第17章 其他数据库日志</a></li><li><a href="http://conquers.github.io/posts/f71f2862.html">第18章 主从复制</a></li><li><a href="http://conquers.github.io/posts/be31b856.html">第19章 数据库备份与恢复</a></li></ul></li><li>架构篇</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文使用的环境为 阿里云云服务器、&lt;code&gt;MySQL 5.7&lt;/code&gt; 和 &lt;code&gt;MySQL 8&lt;/code&gt;，均使用 &lt;code&gt;Docker&lt;/code&gt; 安装，除非特别说明，默认使用&lt;code&gt;MySQL 5.7&lt;/code&gt;。</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="http://conquers.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://conquers.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://conquers.github.io/posts/7273cdc.html"/>
    <id>http://conquers.github.io/posts/7273cdc.html</id>
    <published>2023-04-18T11:44:51.000Z</published>
    <updated>2023-07-18T07:07:00.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、目录概述"><a href="#0、目录概述" class="headerlink" title="0、目录概述"></a>0、目录概述</h2><p><img src="/Resources/Pasted%20image%2020230418194747.png"></p><h2 id="1、Maven概述"><a href="#1、Maven概述" class="headerlink" title="1、Maven概述"></a>1、Maven概述</h2><h3 id="1-1、Maven是什么"><a href="#1-1、Maven是什么" class="headerlink" title="1.1、Maven是什么"></a>1.1、Maven是什么</h3><ul><li><p><strong>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）</strong></p></li><li><p>Maven是用<strong>Java语言</strong>编写的。他管理的东西统统以面向对象的形式进行设计，最终它把一个项目看成一个对象，而这个对象叫做 **POM(project object model)**，即项目对象模型。</p></li></ul><h3 id="1-2、Maven的作用"><a href="#1-2、Maven的作用" class="headerlink" title="1.2、Maven的作用"></a>1.2、Maven的作用</h3><p>（1）项目构建：提供标准的，跨平台的自动化构建项目的方式。</p><p>（2）依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突等问题。（最直观的感受就是不需要去各大网站去手动下载jar包，只需要去中央仓库获得坐标，即可引入）</p><p>（3）统一开发结构：提供标准的，统一的项目开发结构。</p><h2 id="2、下载安装Maven"><a href="#2、下载安装Maven" class="headerlink" title="2、下载安装Maven"></a>2、下载安装Maven</h2><p><a href="https://maven.apache.org/">Maven – Welcome to Apache Maven</a></p><h2 id="2-1-最新版下载"><a href="#2-1-最新版下载" class="headerlink" title="2.1 最新版下载"></a>2.1 最新版下载</h2><p><img src="/Resources/Pasted%20image%2020230418200656.png"></p><h3 id="2-2、旧版下载"><a href="#2-2、旧版下载" class="headerlink" title="2.2、旧版下载"></a>2.2、旧版下载</h3><p>旧版本下载步骤：我们以3.6.1版本为例<br><img src="/Resources/Pasted%20image%2020230418200518.png"></p><p>点击 sources<br><img src="/Resources/Pasted%20image%2020230418200525.png"></p><h3 id="2-3、安装"><a href="#2-3、安装" class="headerlink" title="2.3、安装"></a>2.3、安装</h3><p>maven是一个绿色软件，解压即安装，非常容易，我们将下载好的<code>apache-maven-3.6.1-bin.zip</code>直接解压到目录下即可</p><p>各目录结构说明：</p><ul><li><p>bin：可执行程序目录，</p></li><li><p>boot：maven自身的启动加载器</p></li><li><p>conf：maven配置文件的存放目录</p></li><li><p>lib：maven运行所需库的存放目录</p></li></ul><h3 id="2-4、配置"><a href="#2-4、配置" class="headerlink" title="2.4、配置"></a>2.4、配置</h3><p>省略，下次需要重新配置的时候，再写<br><strong>Maven 需要使用Java才能运行，所以也需要配置JAVA_HOME给它使用</strong></p><h2 id="3、Maven基础概念"><a href="#3、Maven基础概念" class="headerlink" title="3、Maven基础概念"></a>3、Maven基础概念</h2><h3 id="3-1、仓库"><a href="#3-1、仓库" class="headerlink" title="3.1、仓库"></a>3.1、仓库</h3><p>仓库：用于存储资源，主要是各种jar包<br><img src="/Resources/Pasted%20image%2020230418201332.png"></p><ul><li><p><strong>中央仓库</strong>：maven团队自身维护的仓库，属于开源的（<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore</a>）</p></li><li><p><strong>私服</strong>：各公司&#x2F;部门等小范围内存储资源的仓库，私服也可以从中央仓库获取资源（狭义理解：相当于现在使用的aliyun镜像仓库）</p></li><li><p><strong>本地仓库</strong>：开发者自己电脑上存储资源的仓库，也可从远程仓库获取资源</p></li><li><p>私服的作用：</p><ul><li>（1）保存具有版权的资源，包含购买或自主研发的jar</li><li>（2）一定范围内共享资源，能做到仅对内不对外开放</li></ul></li></ul><h3 id="3-2、坐标"><a href="#3-2、坐标" class="headerlink" title="3.2、坐标"></a>3.2、坐标</h3><p><strong>坐标</strong>：maven中的坐标用于描述仓库中资源的位置</p><p>maven坐标的主要组成如下：</p><ul><li><p>groupId：定义当前资源<strong>隶属组织</strong>名称（通常是域名反写，如：org.mybatis）</p></li><li><p>artifactId：定义当前资源的名称（通常是<strong>项目或模块名称</strong>，如：crm，sms）</p></li><li><p>version：定义当前资源的<strong>版本号</strong></p></li><li><p>packaging：定义资源的打包方式，取值一般有如下三种</p><ul><li>jar：该资源打成jar包，默认是jar，java工程打包为jar</li><li>war：该资源打成war包，web工程打包为war</li><li>pom：该资源是一个父资源（表明使用maven分模块管理），打包时只生成一个pom.xml不生成jar或其他包结构</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定pom的模型版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--打包方式 web工程打包为war java工程打包为jar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--组织id--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>web01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--版本id  release代表完成版,SNAPSHOT代表快照（开发）版--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--设置当前工程的所有依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--具体的依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="4、创建一个MavenWeb项目"><a href="#4、创建一个MavenWeb项目" class="headerlink" title="4、创建一个MavenWeb项目"></a>4、创建一个MavenWeb项目</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="5、创建一个普通的Maven项目"><a href="#5、创建一个普通的Maven项目" class="headerlink" title="5、创建一个普通的Maven项目"></a>5、创建一个普通的Maven项目</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="6、Maven依赖管理"><a href="#6、Maven依赖管理" class="headerlink" title="6、Maven依赖管理"></a>6、Maven依赖管理</h2><h3 id="6-1、依赖配置与依赖传递"><a href="#6-1、依赖配置与依赖传递" class="headerlink" title="6.1、依赖配置与依赖传递"></a>6.1、依赖配置与依赖传递</h3><p><strong>依赖配置</strong><br>依赖是指在当前项目中运行所需的jar，依赖配置的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置当前项目所依赖的所有jar--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置具体的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖所属群组id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖所属项目id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖版本号--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>依赖传递：</strong><br>依赖具有传递性，分两种</p><p>（1）直接依赖：在当前项目中通过依赖配置建立的依赖关系</p><p>（2）间接依赖：被依赖的资源如果依赖其他资源，则表明当前项目间接依赖其他资源</p><h4 id="6-1-1、依赖传递冲突"><a href="#6-1-1、依赖传递冲突" class="headerlink" title="6.1.1、依赖传递冲突"></a>6.1.1、依赖传递冲突</h4><p><strong>依赖传递的冲突问题：</strong></p><p><img src="/Resources/Pasted%20image%2020230419154239.png"></p><p>以一个项目为根，直接依赖称为1度资源，直接依赖的直接依赖称为2度资源，直接依赖的直接依赖的直接依赖称为3度资源。</p><p>在依赖传递过程中产生了冲突，我们有三种优先法则</p><ul><li><p>（1）<strong>路径优先</strong>：当依赖中出现相同资源时，层级越深，优先级越低，反之则越高<br><img src="/Resources/Pasted%20image%2020230419154959.png"></p></li><li><p>（2）<strong>声明优先</strong>：当资源在相同层级被依赖时，配置顺序靠前的覆盖靠后的<br><img src="/Resources/Pasted%20image%2020230419155139.png"></p></li><li><p>（3）<strong>特殊优先</strong>：当同级配置了相同资源的不同版本时，后配置的覆盖先配置的<br><img src="/Resources/Pasted%20image%2020230419155238.png"></p></li></ul><h4 id="6-1-2、可选依赖"><a href="#6-1-2、可选依赖" class="headerlink" title="6.1.2、可选依赖"></a>6.1.2、可选依赖</h4><p>可选依赖指的是对外隐藏当前所依赖的资源➡不透明</p><ul><li>加一个<code>&lt;optional&gt;</code> 标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="6-1-3、排除依赖"><a href="#6-1-3、排除依赖" class="headerlink" title="6.1.3、排除依赖"></a>6.1.3、排除依赖</h4><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2、依赖范围"><a href="#6-2、依赖范围" class="headerlink" title="6.2、依赖范围"></a>6.2、依赖范围</h3><p>依赖的jar默认情况可以在任何地方可用，可以通过<code>scope</code>标签设定其作用范围</p><p>这里的范围主要是指以下三种范围</p><ul><li><p>（1）主程序范围有效（src&#x2F;main目录范围内）</p></li><li><p>（2）测试程序范围内有效（src&#x2F;test目录范围内）</p></li><li><p>（3）是否参与打包（package指令范围内）</p></li></ul><p>此外：<code>scope</code>标签的取值有四种：<code>compile,test,provided,runtime</code></p><p>这四种取值与范围的对应情况如下：<br><img src="/Resources/Pasted%20image%2020230419155846.png"></p><h2 id="7、Maven生命周期与插件"><a href="#7、Maven生命周期与插件" class="headerlink" title="7、Maven生命周期与插件"></a>7、Maven生命周期与插件</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="8、分模块开发与设计"><a href="#8、分模块开发与设计" class="headerlink" title="8、分模块开发与设计"></a>8、分模块开发与设计</h2><p><img src="/Resources/Pasted%20image%2020230419161942.png"></p><h2 id="9、聚合"><a href="#9、聚合" class="headerlink" title="9、聚合"></a>9、聚合</h2><p>聚合的目的是为了：一次构件多个项目。<br>多模块构建维护：基于第8部分的思想，将不同模块划分成不同的模块（服务）。</p><p>项目结构：</p><ul><li>MavenAggregation：总的项目（也可以不用建这个，直接建Parent也可以,，但是这样看起来清晰一些）</li><li>Parent 父项目<ul><li>Child1 模块1</li><li>Child2 模块2</li></ul></li></ul><p>创建项目 <code>MavenTest (emtpy project)</code><br><img src="/Resources/Pasted%20image%2020230419171949.png"></p><p><code>new Module -&gt; Parent (Spring Initializr)</code> 后，删除无用内容，只保留 <code>pom.xml</code><br><img src="/Resources/Pasted%20image%2020230419163310.png"></p><p>修改 <code>pom.xml</code> 文件，与自动创建的文件相比，只多了<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 手动添加这句话，代表该项目只用作构建管理，只提供pom文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>引入为 <code>maven</code> 项目<br><img src="/Resources/Pasted%20image%2020230419172117.png"></p><p>创建子项目 <code>new Module -&gt; Child1 (Spring Initializr)</code> ，<code>new Module -&gt; Child2 (Spring Initializr)</code> </p><p>项目结构：<br><img src="/Resources/Pasted%20image%2020230419172847.png"></p><p>定义父项管理的子项目：在 <code>pom.xml</code> 文件添加以下语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 管理的工程列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体的工程名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../Child1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../Child2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时 <code>Maven</code> 项目结构就会变成父与子的关系<br><img src="/Resources/Pasted%20image%2020230419193203.png"></p><p>此时，就可以通过对父项目的操作，统一对所有的子项目进行操作，即同时执行生命周期指令：如 <code>compile</code><br><img src="/Resources/Pasted%20image%2020230419193451.png"></p><p>所有日志信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Reactor Build Order:<br>[INFO] <br>[INFO] Child1                                                             [jar]<br>[INFO] Child2                                                             [jar]<br>[INFO] Parent                                                             [pom]<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Child1 &gt;-------------------------<br>[INFO] Building Child1 0.0.1-SNAPSHOT                                     [1/3]<br>[INFO] --------------------------------[ jar ]---------------------------------<br>[INFO] <br>[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ Child1 ---<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered resources.<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered properties files.<br>[INFO] Copying 1 resource<br>[INFO] Copying 0 resource<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ Child1 ---<br>[INFO] Changes detected - recompiling the module!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to E:\Projects\MavenAggregation\Child1\target\classes<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Child2 &gt;-------------------------<br>[INFO] Building Child2 0.0.1-SNAPSHOT                                     [2/3]<br>[INFO] --------------------------------[ jar ]---------------------------------<br>[INFO] <br>[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ Child2 ---<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered resources.<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered properties files.<br>[INFO] Copying 1 resource<br>[INFO] Copying 0 resource<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ Child2 ---<br>[INFO] Changes detected - recompiling the module!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to E:\Projects\MavenAggregation\Child2\target\classes<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Parent &gt;-------------------------<br>[INFO] Building Parent 0.0.1-SNAPSHOT                                     [3/3]<br>[INFO] --------------------------------[ pom ]---------------------------------<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Reactor Summary <span class="hljs-keyword">for</span> Parent 0.0.1-SNAPSHOT:<br>[INFO] <br>[INFO] Child1 ............................................. SUCCESS [  2.427 s]<br>[INFO] Child2 ............................................. SUCCESS [  0.076 s]<br>[INFO] Parent ............................................. SUCCESS [  0.001 s]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  2.726 s<br>[INFO] Finished at: 2023-04-19T19:33:27+08:00<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><h2 id="10、继承"><a href="#10、继承" class="headerlink" title="10、继承"></a>10、继承</h2><p>继承的目的是为了：消除重复的配置。<br>在 <code>Java</code> 中可以通过 <code>extends</code> 继承，得到父类的属性和方法，在 <code>Maven</code> 中可以通过在 <code>pom.xml</code> 中使用<code>&lt;parent&gt;xxxxx&lt;/parent&gt;</code> 继承父项目，具体地：</p><p>创建项目 <code>MavenTest (emtpy project)</code>，<code>new Module -&gt; MavenParent (Spring Initializr)</code> </p><p>查看 <code>MavenParent</code> 的 <code>pom.xml</code> 文件可以发现，已经继承了 <code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 手动添加这句话，代表该项目只用作构建管理，只提供pom文件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时不再需要指定依赖的版本，因为已经在<code>spring-boot-starter-parent</code>中定义过。在<code>dependencies</code>里的部分配置可以不用填写<code>version</code>信息，这些version信息会从<code>spring-boot-dependencies</code>里得到继承。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>MavenParent</code> 同级目录下，<code>new Module -&gt; MavenChild1 (Spring Initializr)，MavenChild2 (Spring Initializr)</code></p><p>将子项目 <code>MavenChild2</code> 和 <code>MavenChild1</code> 的 <code>pom.xml</code> 文件中 <code>parent</code> 标签内的内容更换为如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 见下面标签解释 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目结构如下；<strong>其中已有的两个依赖是自动引入的</strong><br><img src="/Resources/Pasted%20image%2020230418164047.png"></p><p>在父项目中引入新的依赖后，子项目就成功引入了 parent 中引入的依赖<br><img src="/Resources/Pasted%20image%2020230418164219.png"></p><p>有些时候，不是所有的子项目都想要依赖 parent 中的依赖，maven 还支持在 parent 中定义依赖，子项目可以有选择性的引入 parent 的依赖，将修改 web 包放到 dependencyManagement 下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 必须加上版本号，不然会因为找不到版本报错--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和原始版本相比，这里唯一的变化是将 <code>dependencies</code> 元素移到了 <code>dependencyManagement</code> 元素内部。修改 <code>MavenChild1</code> 项目如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230418193357.png"><br>这时 <code>MavenParent</code> 和 <code>MavenChild2</code> 中的依赖都已经不见了，只有我们显式在 <code>MavenChild1</code> 中定义的依赖还在。</p><p>除了 dependencies 依赖与 dependencyManagement 依赖版本的继承，还有很多其他可以继承的元素：<br><img src="/Resources/Pasted%20image%2020230419204107.png"></p><p>详细内容可参考：<a href="https://blog.csdn.net/zzuhkp/article/details/123518287">Spring Boot 第三篇：理解 spring-boot-starter-parent_大鹏cool的博客-CSDN博客</a></p><h2 id="11、聚合与继承的关系"><a href="#11、聚合与继承的关系" class="headerlink" title="11、聚合与继承的关系"></a>11、聚合与继承的关系</h2><p>作用</p><ul><li>聚合用于快速构建项目</li><li>继承用于快速配置</li></ul><p>相同点</p><ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul><p>不同点</p><ul><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li><li>聚合是聚合模块通过module引用被聚合模块，而继承是子模块通过parent引用父模块。</li></ul><p><strong>实际项目中通常把聚合和继承结合起来一起使用。parent项目既是聚合模块，也是父模块。</strong></p><h2 id="12、属性"><a href="#12、属性" class="headerlink" title="12、属性"></a>12、属性</h2><p>等同于定义变量，方便统一维护。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">定义：一般用 `技术名` + `.version`<br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xxxxx.version</span>&gt;</span>版本号<span class="hljs-tag">&lt;/<span class="hljs-name">xxxx.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>使用：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;xxxxx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13、工程版本"><a href="#13、工程版本" class="headerlink" title="13、工程版本"></a>13、工程版本</h2><p><img src="/Resources/Pasted%20image%2020230419205408.png"><br><img src="/Resources/Pasted%20image%2020230419205601.png"></p><h2 id="14、标签：用到了，不懂再继续添加"><a href="#14、标签：用到了，不懂再继续添加" class="headerlink" title="14、标签：用到了，不懂再继续添加"></a>14、标签：用到了，不懂再继续添加</h2><blockquote><p><code>&lt;relativePath&gt; &lt;/relativePath&gt;</code></p></blockquote><p>作用指定parent的pom文件的路径，Maven构建jar包时候查找顺序：relativePath元素中的地址&gt;本地仓库&gt;远程仓库</p><p><strong>写文档的时候，1和2的结果好像是一致的，在使用2的时候，只要改变父项目中定义的版本号，子项目就会跟着改，最好是使用第3种</strong></p><p>1、<code>默认值</code><br>默认我们不用写<code>&lt;relativePath&gt;</code>，那默认值就是 ..&#x2F;pom.xml，会从本地路径中获取parent的pom，我们建多模块的项目就是这个情况。</p><p>2、<code>&lt;relativePath/&gt;设定空值</code><br>也就是说我指定了relativePath，但值是空的，设定一个空值将始终从仓库中获取，不从本地路径获取。很常见的场景就是使用 springboot 的时候</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、<code>&lt;relativePath&gt;某个pom的路径&lt;relativePath/&gt;</code><br>指定本地的路径，从本地路径获取parent的pom。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>***<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p></blockquote><ul><li>pom：专门用于聚合工程用</li><li>jar：</li><li>war：web工程</li></ul><blockquote><p><code>&lt;type&gt;pom&lt;/type&gt;</code></p></blockquote><p>dependency中type默认为jar即引入一个特定的jar包。那么为什么还会有type为pom呢?当我们需要引入很多jar包的时候会导致pom.xml过大，我们可以想到的一种解决方案是定义一个父项目，但是父项目只有一个，也有可能导致父项目的pom.xml文件过大。这个时候我们引进来一个type为pom，意味着我们可以将所有的jar包打包成一个pom，然后我们依赖了pom，即可以下载下来所有依赖的jar包</p><blockquote><p><code>&lt;scope&gt;import&lt;/scope&gt;</code></p></blockquote><p>与上面的标签一起使用。<br>将SpringCloud的依赖拷贝引用过来了这样就解决了单继承的问题。要注意的是  <scope>import</scope>必须在<code>&lt;dependencyManagement&gt;</code>下使用并且必须声明<code>&lt;type&gt;pom&lt;/type&gt;</code>，那么<code>&lt;scope&gt;import&lt;/scope&gt;</code>的作用我就可以理解为当前依赖是引用拷贝来的不受单继承影响。<br>参考说明：<a href="https://blog.csdn.net/HD243608836/article/details/129321636">maven中＜scope＞import＜&#x2F;scope＞标签＜type＞pom＜&#x2F;type＞标签的含义_pom文件type标签_HD243608836的博客-CSDN博客</a></p><blockquote><p><code>&lt;exclusion&gt;</code></p></blockquote><p>防止依赖会造成冲突<br><img src="/Resources/Pasted%20image%2020230418153201.png"></p><h2 id="99、导入依赖时出现的错误"><a href="#99、导入依赖时出现的错误" class="headerlink" title="99、导入依赖时出现的错误"></a>99、导入依赖时出现的错误</h2><blockquote><p>Failure to transfer …..</p></blockquote><p>出现这种内含<code>Failure to transfer......</code>错误的原因是我们通过坐标依赖导入的<br>jar包没有完全下载，也就是下载了一半就停了，是个下载类型的文件而不是真正的jar包，出现这种错误的原因典型的就比如我这种情况正在下载的时候断网了，然后这个网络链接突然中断，此时文件就是一个损坏的半成品，<code>Maven</code>中的代码似乎不能像迅雷那样继续下载，但是又能检测到它的存在，因此我们再次点击这个加载，还是报错。</p><p>解决办法为找到本地Maven仓库，一般我们都知道在哪，如果忘了可以进入我们的Maven中的settings.xml中看一下，打开之后我们用windows的搜索功能查找<code>*.lastUpdated</code>，这就是那种损坏的半成品文件的后缀，然后将这些文件全部删除，删除之后再重新导入依赖就好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0、目录概述&quot;&gt;&lt;a href=&quot;#0、目录概述&quot; class=&quot;headerlink&quot; title=&quot;0、目录概述&quot;&gt;&lt;/a&gt;0、目录概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/Resources/Pasted%20image%2020230418194747.p</summary>
      
    
    
    
    
    <category term="Maven" scheme="http://conquers.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA</title>
    <link href="http://conquers.github.io/posts/3c1e27f1.html"/>
    <id>http://conquers.github.io/posts/3c1e27f1.html</id>
    <published>2022-08-22T11:46:16.000Z</published>
    <updated>2023-07-20T11:51:39.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="使用IDEA连接数据库"><a href="#使用IDEA连接数据库" class="headerlink" title="使用IDEA连接数据库"></a>使用IDEA连接数据库</h2><p><img src="/./Resources/image-20230720194819644.png" alt="image-20230720194819644"><br><img src="/./Resources/image-20230720194826538.png" alt="image-20230720194826538"></p><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>连接好后点击右键<br><img src="/./Resources/image-20230720194838338.png" alt="image-20230720194838338"><br><img src="/./Resources/image-20230720194845126.png" alt="image-20230720194845126"></p><h2 id="使用IDEA创建SPRINGBOOT项目"><a href="#使用IDEA创建SPRINGBOOT项目" class="headerlink" title="使用IDEA创建SPRINGBOOT项目"></a>使用IDEA创建SPRINGBOOT项目</h2><blockquote><p>新建项目</p></blockquote><p>第一种是新建项目，第二种是从本地文件导入，第三种是从远程仓库拉取<br><img src="/./Resources/image-20230720194851925.png" alt="image-20230720194851925"></p><blockquote><p>填写相关信息</p></blockquote><p><img src="/./Resources/image-20230720194913026.png" alt="image-20230720194913026"></p><blockquote><p>选择一些依赖，创建自动添加对应的maven依赖，这里不选，注意版本使用2.X.X（3.X.X以上需要JDK17以上）<br><img src="/./Resources/image-20230720194918320.png" alt="image-20230720194918320"></p></blockquote><blockquote><p><strong><code>pom.xml</code></strong></p></blockquote><p>在第一个白框中，可以修改springboot的版本号！<br><img src="/./Resources/image-20230720194923683.png" alt="image-20230720194923683"></p><h2 id="使用IDEA打包SPRINGBOOT项目"><a href="#使用IDEA打包SPRINGBOOT项目" class="headerlink" title="使用IDEA打包SPRINGBOOT项目"></a>使用IDEA打包SPRINGBOOT项目</h2><p><img src="/./Resources/image-20230720194929170.png" alt="image-20230720194929170"></p><p><strong>打包后的文件分为两种</strong></p><ul><li><code>.war</code> <code>.jar</code></li><li><code>.war.original</code> <code>.jar.original</code><blockquote><p>以jar包举例<br>.jar.original 是普通jar包，<strong>不包含依赖</strong><br>.jar 是可执行jar包，<strong>包含了pom中的所有依赖</strong>，可以直接用java -jar 命令执行</p></blockquote></li></ul><hr><h2 id="使用IDEA连接虚拟机"><a href="#使用IDEA连接虚拟机" class="headerlink" title="使用IDEA连接虚拟机"></a>使用IDEA连接虚拟机</h2><ol><li><p>启动虚拟机并打开IDEA | tools | Deployment | Browse Remote Host<br><img src="/./Resources/image-20230720194935896.png" alt="image-20230720194935896"></p></li><li><p>点击省略号并填写相关参数<br><img src="/./Resources/image-20230720194940770.png" alt="image-20230720194940770"></p></li><li><p>再次点击省略号填写ip，用户名，密码</p></li><li><p><img src="/./Resources/image-20230720194949112.png" alt="image-20230720194949112"></p></li><li><p><img src="/./Resources/image-20230720194955313.png" alt="image-20230720194955313"></p><blockquote><p>如果出现 cannot be established，直接点yes</p></blockquote></li><li><p>完成后侧边栏显示远程服务器<br><img src="/./Resources/image-20230720195007856.png" alt="image-20230720195007856"></p><blockquote><p>将文件拖到这里即可</p></blockquote></li><li><p>使用ssh连接远程服务器 tools | start SSH Session<br><img src="/./Resources/image-20230720195012695.png" alt="image-20230720195012695"></p></li></ol><hr><h2 id="使用IDEA开启自动编译"><a href="#使用IDEA开启自动编译" class="headerlink" title="使用IDEA开启自动编译"></a>使用IDEA开启自动编译</h2><p>开启自动编译<br><img src="/./Resources/image-20230720195017475.png" alt="image-20230720195017475"></p><p><img src="/./Resources/image-20230720195021791.png" alt="image-20230720195021791"></p><p>开启允许在运行过程中修改文件</p><blockquote><p>很多文章介绍IntelliJ IDEA开启热部署功能都会写到在IntelliJ IDEA中的注册表（ctrl + alt + shift + &#x2F;）中开启compiler.automake.allow.when.app.running选项，此选项在IntelliJ IDEA 2021.2之后的版本迁移到高级设置中。如下图所示：<br><img src="/./Resources/image-20230720195027169.png" alt="image-20230720195027169"></p></blockquote><h2 id="使用IDEA自动导包"><a href="#使用IDEA自动导包" class="headerlink" title="使用IDEA自动导包"></a>使用IDEA自动导包</h2><blockquote><p>一次性导入多个包 <a href="https://blog.csdn.net/Azure_xw/article/details/120297747">idea 批量导入包_Azure.yao的博客-CSDN博客_idea一次性导入多个包</a></p></blockquote><p><img src="/./Resources/image-20230720195032353.png" alt="image-20230720195032353"></p><h2 id="IDEA打开侧边栏和底部控制台"><a href="#IDEA打开侧边栏和底部控制台" class="headerlink" title="IDEA打开侧边栏和底部控制台"></a>IDEA打开侧边栏和底部控制台</h2><p>View | Appearance | Tool Window Bars<br><img src="/./Resources/image-20230720195039386.png" alt="image-20230720195039386"><br><img src="/./Resources/image-20230720195044165.png" alt="image-20230720195044165"></p><p><img src="/./Resources/image-20230720195052478.png" alt="image-20230720195052478"></p><h2 id="IDEA以不同端口启动相同Springboot项目"><a href="#IDEA以不同端口启动相同Springboot项目" class="headerlink" title="IDEA以不同端口启动相同Springboot项目"></a>IDEA以不同端口启动相同Springboot项目</h2><p>复制一份改端口麻烦！<br>启动后修改参数麻烦！<br>edit Configurations<br><img src="/./Resources/image-20230720195102638.png" alt="image-20230720195102638"><br>选择想要启动的项目复制一份<br><img src="/./Resources/image-20230720195107805.png" alt="image-20230720195107805"><br>修改端口号</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dserver</span>.<span class="hljs-keyword">port</span>=8789<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230720195112659.png" alt="image-20230720195112659"><br>启动：<br><img src="/./Resources/image-20230720195118201.png" alt="image-20230720195118201"></p><h2 id="IDEA以指定端口启动npm"><a href="#IDEA以指定端口启动npm" class="headerlink" title="IDEA以指定端口启动npm"></a>IDEA以指定端口启动npm</h2><p><img src="/./Resources/image-20230720195123114.png" alt="image-20230720195123114"></p><h2 id="使用IDEA启动时默认不打开项目"><a href="#使用IDEA启动时默认不打开项目" class="headerlink" title="使用IDEA启动时默认不打开项目"></a>使用IDEA启动时默认不打开项目</h2><p><img src="/./Resources/image-20230720195127333.png" alt="image-20230720195127333"></p><h2 id="IDEA-DEBUG中Step-into与Force-Step-into"><a href="#IDEA-DEBUG中Step-into与Force-Step-into" class="headerlink" title="IDEA DEBUG中Step into与Force Step into"></a>IDEA DEBUG中Step into与Force Step into</h2><blockquote><p><a href="https://blog.csdn.net/qq_39123467/article/details/125732158">idea调试中Step into与Force Step into区别</a></p></blockquote><ul><li>step into会进入你自己写的方法。  </li><li>Force step into能够进入所有的方法，比如jdk的方法。</li></ul><h2 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h2><ul><li>ctrl + shift + f 全局搜索（如果不起作用，可能是输入法简繁的切换快捷键占用了）</li></ul><h2 id="IDEA-文件夹目录合并为一行解决方法"><a href="#IDEA-文件夹目录合并为一行解决方法" class="headerlink" title="IDEA 文件夹目录合并为一行解决方法"></a>IDEA 文件夹目录合并为一行解决方法</h2><p>取消勾选：不合并为一行<br>勾选：合并为一行<br><img src="/./Resources/image-20230720195132440.png" alt="image-20230720195132440"></p><h2 id="IDEA-服务老是消失"><a href="#IDEA-服务老是消失" class="headerlink" title="IDEA 服务老是消失"></a>IDEA 服务老是消失</h2><p><a href="https://blog.csdn.net/weixin_42661168/article/details/115365200">https://blog.csdn.net/weixin_42661168/article/details/115365200</a></p><h2 id="IDEA-Commit时自动格式化和删除无效引用"><a href="#IDEA-Commit时自动格式化和删除无效引用" class="headerlink" title="IDEA Commit时自动格式化和删除无效引用"></a>IDEA Commit时自动格式化和删除无效引用</h2><p><img src="/./Resources/image-20230720195138944.png" alt="image-20230720195138944"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA&quot;&gt;&lt;a href=&quot;#IDEA&quot; class=&quot;headerlink&quot; title=&quot;IDEA&quot;&gt;&lt;/a&gt;IDEA&lt;/h1&gt;&lt;h2 id=&quot;使用IDEA连接数据库&quot;&gt;&lt;a href=&quot;#使用IDEA连接数据库&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="IDEA" scheme="http://conquers.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://conquers.github.io/posts/6f2612a2.html"/>
    <id>http://conquers.github.io/posts/6f2612a2.html</id>
    <published>2022-08-17T10:54:29.000Z</published>
    <updated>2023-07-25T02:35:31.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>官方网站：<a href="https://spring.io/projects/spring-boot/">Spring Boot</a></p><h2 id="SpringBoot的引言"><a href="#SpringBoot的引言" class="headerlink" title="SpringBoot的引言"></a>SpringBoot的引言</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来<strong>简化Spring应用的初始搭建以及开发过程</strong>。该框架使用了<strong>特定的方式来进行配置</strong>，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><p><strong>springboot</strong>(微框架) &#x3D; <strong>springmvc</strong>(控制器) + <strong>spring core</strong>(项目管理)</p><h2 id="SpringBoot的优势"><a href="#SpringBoot的优势" class="headerlink" title="SpringBoot的优势"></a>SpringBoot的优势</h2><ol><li>创建完整的独立的 <code>Spring</code> 应用程序<ul><li><code>springmvc</code> + <code>spring</code></li></ul></li><li>嵌入的 <code>Tomcat</code> ，无需部署 <code>WAR</code> 文件<ul><li>内嵌 <code>Tomcat</code></li></ul></li><li>简化 <code>Maven</code> 配置，自动配置 <code>Spring</code> ，没有 <code>XM</code> L配置</li></ol><h2 id="SpringBoot约定"><a href="#SpringBoot约定" class="headerlink" title="SpringBoot约定"></a>SpringBoot约定</h2><p><strong>项目结构图</strong><br><img src="/Resources/Pasted%20image%2020220817195034.png"></p><ol><li><p>springboot约定springboot项目中有且只能存在一个入口类(Class)<br>类名：推荐<strong>xxx(项目名)Application.java</strong></p><ul><li>a. 入口类必须在所有子包之上</li><li>b. 入口类中必须存在一个启动项目项目main函数</li></ul></li><li><p>springboot项目约定必须在项目根目录中存在一个名字为<code>application.yml</code> l <code>application.properties</code> 配置文件</p></li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>环境要求</strong></p><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>JDK</td><td>1.8+</td></tr><tr><td>MAVEN</td><td>3.2+</td></tr><tr><td>SpringBoot</td><td>2.7.2</td></tr></tbody></table><blockquote><p>2022-8-17 SpringBoot最新版</p></blockquote><p><strong>新建项目中引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--继承springboot的父项目 便于维护版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        springboot-boot-starter-web--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;parent&gt;</code>继承父项目不导入任何依赖，只是对下面的依赖进行一个版本控制<br>原因：各个依赖有着严格的版本限制，并且方便维护。</p><p><code>&lt;version&gt;</code> SpringBoot 版本号在 2.4.x 以前结尾有一个RELEASE，从 2.4.x 以后只以数字命名。</p></blockquote><p><strong>在resources目录中创建<code>application.yml</code></strong></p><blockquote><p>这里也可以不用写✍，默认8080端口。<del>建都建了，不写点东西，不合适</del></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br></code></pre></td></tr></table></figure><p><strong>创建springboot入口类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 启动springboot应用</span><br><span class="hljs-comment">         * 参数1:指定入口类的类对象.class(类的对象是new xxx)</span><br><span class="hljs-comment">         * 参数2:main函数参数</span><br><span class="hljs-comment">         */</span><br>        SpringApplication.run(Application.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><p>⭐<code>@SpringBootApplication</code><br>修饰范围：用在类上只能用在入口类上只能出现一次<br>作用：标识这个类是一个 <code>springboot</code> 入口类（启动整个 <code>springboot</code> 项目的总入口）</p><p><code>@SpringBootApplication</code> 由多个注解构成，4个元注解，由 <code>Java</code> 提供，</p><table><thead><tr><th>注解名</th><th>含义</th></tr></thead><tbody><tr><td><code>@Target(&#123;ElementType.TYPE&#125;)</code></td><td>指定注解作用范围</td></tr><tr><td><code>@Retention(RetentionPolicy.RUNTIME) </code></td><td>指定注解什么时候生效，这里指的是运行时</td></tr><tr><td><code>@Documented</code></td><td></td></tr><tr><td><code>@Inherited</code></td><td></td></tr><tr><td>⭐<code>@SpringBootConfiguration</code></td><td>用来自动配置 <code>spring springmvc</code> 相关环境<br>组合了 <code>@Configuration</code> 注解，也就是 <code>@SpringBootConfiguration</code> 修饰的类就是 <code>Java</code> 配置类</td></tr><tr><td>⭐<code>@EnableAutoConfiguration</code></td><td>开启自动配置 <br><code>META-INF/spring.factories</code>文件中加载需要自动注入的 <code>Java</code> 类<br><strong>自动配置核心注解</strong><br><strong>自动配置spring相关环境</strong><br><strong>自动与项目中引入的第三方技术自动配置其环境</strong></td></tr><tr><td>⭐<code>@ComponentScan</code></td><td>组件扫描，默认扫描 <code>@SpringBootApplication</code> 注解的类的当前包及其子包下面所有被 <code>@Compoent</code> 注解修饰的 <code>Java</code> 类</td></tr></tbody></table><p><strong>运行</strong><br><img src="/Resources/Pasted%20image%2020220817201942.png"><br><img src="/Resources/Pasted%20image%2020220817202007.png"></p><blockquote><p><code>SpringApplication.run(Application.class,args);</code><br>启动springboot应用时候需要传递main函数参数作为启动的第二个参数：<br>怎么传参：通过idea里面的vm options可以覆盖掉某些配置，例如下图，可以覆盖端口<br><img src="/Resources/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.drawio.png"></p></blockquote><h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p><strong>建包并创建控制器(controller)</strong><br><img src="/Resources/Pasted%20image%2020220817202555.png"></p><blockquote><p>之前在写代码的时候一直疑惑的点：RequestMapping前面的斜线需不需要加<br>参考资料：<a href="https://blog.csdn.net/hehuihh/article/details/117371593">注解RequestMapping中的URI路径最前面到底需不需要加斜线？</a><br><img src="/Resources/Pasted%20image%2020220817202819.png"></p></blockquote><p>测试地址：<code>http://localhost:端口号/请求路径</code>      <a href="http://localhost:8989/hello">http://localhost:8989/hello</a></p><blockquote><p>修改端口号见上面创建<code>application.yml</code>的时候<br><img src="/Resources/Pasted%20image%2020220817202616.png"></p></blockquote><p><strong>修改项目名</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span> <span class="hljs-comment"># 修改内嵌服务器端口号</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span> <span class="hljs-comment">#修改项目名注意:项目名必须&quot;/&quot;开头</span><br></code></pre></td></tr></table></figure><p>测试地址：<a href="http://localhost:8989/springboot/hello">http://localhost:8989/springboot/hello</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件的拆分"><a href="#配置文件的拆分" class="headerlink" title="配置文件的拆分"></a>配置文件的拆分</h3><p>说明：在实际开发过程中生产环境和开发环境有可能是不一样的，因此将生产中的配置和开发中的配置拆分开，是非常必要的。在springboot中也提供了配置文件拆分的方式，这里以生产中项名名称与开发项目名称不一致为例：<br>开发的时候项目名为springboot，生产的时候项目名为springboot_prod，</p><p>主配置文件<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 公共配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 需要使用哪套环境就用谁，注意是 环境-后面的xxx</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><blockquote><p>区别于主配置文件，文件命令的要求为<code>application-xxx.yml</code></p></blockquote><p>开发环境配置文件<code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220818183340.png"></p><p>生产环境配置文件<code>application-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot_prod</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220818183418.png"></p><h3 id="加载外部配置文件"><a href="#加载外部配置文件" class="headerlink" title="加载外部配置文件"></a>加载外部配置文件</h3><p>在项目外创建<code>application-local-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/spring</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/%E5%8A%A0%E8%BD%BD%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.drawio.png"></p><blockquote><p>等同于命令行<code>java -jar --spring.config.location=我是绝对路径 xxxx.jar</code></p></blockquote><p>可以发现外部配置文件已经生效<br><img src="/Resources/Pasted%20image%2020220818184446.png"></p><h2 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h2><blockquote><p>区别于之前的2.7.2 这里的spring boot版本变为了2.7.3，突然更新了。</p></blockquote><p>除了以上最开始的创建项目的方式，还可以使用 <code>Springboot init</code> 快速初始化<br><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E5%88%9B%E5%BB%BASPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA创建SPRINGBOOT项目</a></p><h2 id="工厂创建对象"><a href="#工厂创建对象" class="headerlink" title="工厂创建对象"></a>工厂创建对象</h2><h3 id="创建单个对象"><a href="#创建单个对象" class="headerlink" title="创建单个对象"></a>创建单个对象</h3><p>在springboot中可以管理单个对象可以直接使用 <code>spring</code> 框架中注解形式创建。</p><ul><li><code>@Component</code>：创建<strong>通用对象</strong><ul><li><code>@Controller</code>：创建<strong>控制层对象</strong></li><li><code>@Service</code>：      创建<strong>业务层对象</strong></li><li><code>@Repository</code>：创建<strong>DAO层对象</strong><ul><li>在工厂中创建对象，默认工厂中的名称为类名首字母小写</li><li>以上注解都有value属性， value属性用来指明被标注的类在工厂中的名称。即如果不加，工厂中的名称为类名首字母小写。加了，工厂中的名称为指明的名称。<br>  图示</li></ul></li></ul></li></ul><blockquote><p>在<code>DemoServiceImpl</code>添加<code>@Service</code>注解后，spring工厂就会有这个对象，通过<code>@Autowired</code> 自动注入（向工厂拿<code>DemoService</code>对象），以使用<code>DemoService</code><br><img src="/Resources/Pasted%20image%2020220818194412.png"></p></blockquote><h3 id="创建多个对象"><a href="#创建多个对象" class="headerlink" title="创建多个对象"></a>创建多个对象</h3><p>在SpringBoot中也提供了如<code>@configuration</code> + <code>@Bean</code>注解进行创建</p><ul><li><code>@Configuration</code> 修饰范围：用在类上（相当于<code>spring.xml</code>），作用：代表这个类是一个 <code>springboot</code> 中配置类。<ul><li><code>@Bean</code> 创建对象，相当于<code>spring.xml</code>中的bean标签<ul><li>默认使用 <code>@Bean</code> 创建对象在工厂中唯一标识为方法名称</li><li>修改在工厂中对象标识可以在使用 <code>@Bean(&quot;工厂中名字&quot;)</code> 指定一个名字</li></ul></li></ul></li></ul><p><img src="/Resources/Pasted%20image%2020220818200142.png"></p><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h3 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h3><h4 id="Value-⭐"><a href="#Value-⭐" class="headerlink" title="@Value ⭐"></a>@Value ⭐</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;wtt&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;inject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">inject</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject ok&quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220819111052.png"></p><blockquote><p>但是这样的方式，并不利于解耦，且作用等同于赋值。<br>注：端口号修改为了8989</p></blockquote><p><strong>优化方式：在配置文件中定义注入值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;bir&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Date bir;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;price&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double price;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;sex&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-comment">/* --------------------------------------------------------------------------------------------------------------*/</span><br><br><span class="hljs-comment">// 注入数组</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;qqs&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String[] qqs;<br><br><span class="hljs-comment">// 注入list</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;lists&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; lists;<br><br><span class="hljs-comment">// 注入map</span><br>    <span class="hljs-meta">@Value(&quot;#&#123;$&#123;maps&#125;&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; maps;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;inject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">inject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject ok:&quot;</span> + name + age + bir + price + sex + <span class="hljs-string">&quot;----&quot;</span> + Arrays.toString(qqs);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>  <br>  <br><span class="hljs-comment"># 声明注入的值  </span><br><span class="hljs-attr">name:</span> <span class="hljs-string">wtt</span>  <br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span>  <br><span class="hljs-attr">price:</span> <span class="hljs-number">23.23</span>  <br><span class="hljs-comment"># 日期默认格式为YYYY/mm/dd HH/MM/ss  </span><br><span class="hljs-attr">bir:</span> <span class="hljs-number">2022</span><span class="hljs-string">/12/12</span> <span class="hljs-number">12</span><span class="hljs-string">:12:12</span><br><span class="hljs-attr">sex:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 注入数组，多个元素用&quot;,&quot;隔开</span><br><span class="hljs-attr">qqs:</span> <span class="hljs-number">6099</span><span class="hljs-string">,7088,8009</span><br><span class="hljs-comment"># 注入list，多个元素用&quot;,&quot;隔开（与注入数组一致）</span><br><span class="hljs-attr">lists:</span> <span class="hljs-number">6099</span><span class="hljs-string">,7088,8009</span><br><span class="hljs-comment"># 注入map，使用json格式，注入的时候必须使用&quot;#&#123;$&#123;属性&#125;&#125;&quot;进行注入</span><br><span class="hljs-string">maps:&quot;&#123;&#x27;aa&#x27;:&#x27;bb&#x27;,&#x27;cc&#x27;:&#x27;dd&#x27;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220819111907.png"></p><h3 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h3><h4 id="ConfigurationProperties-⭐"><a href="#ConfigurationProperties-⭐" class="headerlink" title="@ConfigurationProperties ⭐"></a>@ConfigurationProperties ⭐</h4><p><strong>再次优化方式：以对象的方式一次性注入</strong></p><blockquote><p>这里的代码会出现问题，正确代码见下，主要是为了引入<strong>注意点</strong>。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 声明对象方式的注入</span><br><span class="hljs-attr">users:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wtt</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br>  <span class="hljs-attr">sex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;users&quot;)</span><span class="hljs-comment">//修饰范围:用在类上﹐作用:用来将指定前缀的属性注入到当前对象中属性名一致属性的属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionObjectController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;injectObject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">injectObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject Object OK...&quot;</span> + name + age + sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>💡补充：<br><img src="/Resources/Pasted%20image%2020220822160459.png"><br>不论是value还是prefix 都是一样的，因为在源码中，两者是等同的概念。<br><img src="/Resources/Pasted%20image%2020220822160530.png"></p></blockquote><p>测试：<br>❗<strong>这里并没有拿到对应的属性值</strong>，是由于没有设置set方法。<img src="/Resources/Pasted%20image%2020220822160841.png"></p><ul><li><strong>按照以下代码编写set代码即可</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;users&quot;)</span><span class="hljs-comment">//修饰范围:用在类上﹐作用:用来将指定前缀的属性注入到当前对象中属性名一致属性的属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionObjectController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(Boolean sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;injectObject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">injectObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject Object OK...&quot;</span> + name + age + sex;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>❗<strong>上面的白框里面的内容</strong>，<a href="https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/configuration-metadata.html#appendix.configuration-metadata.annotation-processor">Open documentation…</a><br>简而言之：引入<code>spring-boot-configuration-processor</code> 这个jar包，重启项目后即可（但是我重启了没用），此时我们加上注解之后，再编写yml文件的时候会有提示对应的属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>、<br>    <span class="hljs-comment">&lt;!--代表整个依赖不会被传递，即不会传给子项目--&gt;</span><br>    <span class="hljs-comment">&lt;!--假设A导入了B，B引入了一个包，其中optional属性不加或者为false，那么A就引入该包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>在service的某个类上，ctrl + shift + T<br><img src="/Resources/Pasted%20image%2020220822200810.png"></p><p><img src="/Resources/Pasted%20image%2020220822200823.png"><br>测试代码即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        userDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>每次测试一个新的测试类都要加上<code>@SpringBootTest</code>注解，很麻烦，所以可以通过继承的方式进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTests</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasicTests</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        userDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="热部署工具"><a href="#热部署工具" class="headerlink" title="热部署工具"></a>热部署工具</h2><p>为了进一步提高开发效率，springboot为我们提供了<strong>全局项目热部署</strong>，以后在开发过程中修改了部分代码以及相关配置文件后，<strong>不需要每次重启使修改生效</strong>，在项目中开启了springboot全局热部署之后只需要在修改之后<strong>等待几秒即可使修改生效</strong>。</p><p>前置：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91">使用IDEA开启自动编译</a></p><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;demo&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>🎨信息从Main变成了restartedMain<br><img src="/Resources/Pasted%20image%2020220822202451.png"></p><p>发送请求<br><img src="/Resources/Pasted%20image%2020220822202651.png"></p><p>此时我们修改测试代码内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;demo&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo123&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220822205010.png"></p><p>查看日志信息<br><img src="/Resources/Pasted%20image%2020220822205002.png"></p><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><p>springboot框架集成日志 <strong>logback</strong> 日志。</p><p>Logback是由log4j创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进!</p><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p><code>All &lt; Trace &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; Fatal &lt; OFF</code></p><ul><li>OFF<br>关闭：最高级别，<strong>不打印日志</strong>。</li><li>FATAL<br>致命：<strong>指明非常严重的</strong>可能会导致应用终止执行错误<strong>事件</strong>。</li><li>ERROR<br>错误：<strong>指明错误事件</strong>，但应用可能还能继续运行。</li><li>WARN<br>警告：指明可能<strong>潜在的危险</strong>状况。</li><li>INFO<br>信息：指明描述信息，从粗粒度上<strong>描述</strong>了应用<strong>运行过程</strong>。</li><li>DEBUG<br>调试：指明<strong>细致的事件信息</strong>，对调试应用最有用。</li><li>TRACE<br>跟踪：指明<strong>程序运行轨迹</strong>，比DEBUG级别的粒度更细。</li><li>ALL<br>所有：<strong>所有日志</strong>级别，包括定制级别。<blockquote><p>日志级别由低到高:<code>日志级别越高输出的日志信息越少</code></p></blockquote></li></ul><h3 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a>日志分类</h3><ul><li>rootLogger：用来监听项目中所有的运行日志包括引入依赖jar中的日志</li><li>logger：用来监听项目中指定包中的日志信息</li></ul><h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><blockquote><p>注意:SpringBoot框架中默认根日志为INFO<br><img src="/Resources/Pasted%20image%2020220823091739.png"></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment"># 指定根日志级别(一般不推荐修改根日志,输出信息太多,推荐使用子日志)</span><br>    <span class="hljs-comment"># root: debug</span><br>    <span class="hljs-comment"># 指定某个包中日志</span><br>    <span class="hljs-attr">com.cqupt.dao:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-comment"># 日志名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">log.log</span><br>    <span class="hljs-comment"># 日志文件路径</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./</span><br></code></pre></td></tr></table></figure><h3 id="使用日志"><a href="#使用日志" class="headerlink" title="使用日志"></a>使用日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明一个日志对象</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(UserService.class);<br><br><br><span class="hljs-comment">//打印某些日志信息</span><br>log.debug(<span class="hljs-string">&quot;&quot;</span>);<br>log.error(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>简化操作：优化需要每次手动声明日志对象<br><img src="/Resources/Pasted%20image%2020220823092741.png"><br><img src="/Resources/Pasted%20image%2020220823092801.png"><br><img src="/Resources/Pasted%20image%2020220823093036.png"><br>🔖使用的时候如果想debug，就logd，如果想info，就logi，以此类推。</p></blockquote><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h2><p>springboot是对原有项目中spring框架和springmvc的进一步封装，因此在springboot中同样支持spring框架中AOP切面编程，不过在springboot中为了快速开发仅仅提供了注解方式的切面编程。<br><a href="../Spring5/Spring5.md#%E4%B8%89%E3%80%81Aop">Spring中的Aop</a></p><p>Aspect（切面）&#x3D; <strong>Advice</strong>（通知）+ <strong>Pointcut</strong>（切入点）<br>Advice（通知）：业务逻辑中一些<strong>附加操作</strong>称之为通知<br>Pointcut（切入点）：<strong>配置通知</strong>应用于项目中那些业务操作</p><h3 id="为什么需要切面编程"><a href="#为什么需要切面编程" class="headerlink" title="为什么需要切面编程"></a>为什么需要切面编程</h3><p>在某个模块业务逻辑中有三种方法</p><blockquote><p>仅作演示，不符合业务逻辑</p></blockquote><p><code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>其中对应的实现类中<br><code>serviceImpl</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span>&#123;<br>dao.save();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>&#123;<br>dao.delete();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span>()</span>&#123;<br>dao.queryById();<br>&#125;<br></code></pre></td></tr></table></figure><p>需求：调用<code>dao.save();</code> <code>dao.delete();</code> <code>dao.queryById();</code>之前，先做某些操作（一致的操作或者是封装起来的某些方法）<br>那么，对应的实现类中<br><code>serviceImpl</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span>&#123;<br>xxxxx;<br>dao.save();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>&#123;<br>xxxxx;<br>dao.delete();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span>()</span>&#123;<br>xxxxx;<br>dao.queryById();<br>&#125;<br></code></pre></td></tr></table></figure><p>可见：这样的话，代码会有<strong>冗余</strong>并且当业务足够多时，每个都需要去手动添加，比较<strong>麻烦</strong>，不利于后期项目维护！</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写业务代码</strong><br><code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.save()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.delete()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.queryById()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在UserService上ctrl + shift + T 新建测试类<br><img src="/Resources/Pasted%20image%2020220823141237.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        userService.save();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        userService.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span> &#123;<br>        userService.queryById();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在springboot项目中新建config(配置)包</strong><br><img src="/Resources/Pasted%20image%2020220823140646.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Aspect</span> 修饰范围:只能用在类上.作用:代表这个类是一个切面类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> 配置类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspectConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Before</span>():代表这个方法是一个前置附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;操作1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@After</span>():代表这个方法是一个后置附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;操作2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试Before和After"><a href="#测试Before和After" class="headerlink" title="测试Before和After"></a>测试Before和After</h3><p>测试<code>@Before</code>和<code>@After</code><br><img src="/Resources/Pasted%20image%2020220823142122.png"></p><p>📌注意：使用<code>@Before</code>和 <code>@After</code>注解声明方法上可以定义一个参数<code>JoinPoint</code>来获取一些内容信息。前置通知和后置通知都<strong>没有返回值</strong>。<br><img src="/Resources/Pasted%20image%2020220823152935.png"></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span>+joinPoint.getTarget());<br>    System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span>+joinPoint.getSignature().getName());<br>    System.out.println(<span class="hljs-string">&quot;操作1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823143151.png"></p><h3 id="测试Around"><a href="#测试Around" class="headerlink" title="测试Around"></a>测试Around</h3><p>Around类似方法拦截器，当方法调用时，先经过Around，Around通过后，再进去核心业务逻辑，结束后，再经过Around；<br><img src="/Resources/Pasted%20image%2020220823144110.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Around</span>():代表这个方法是一个环绕附加操作,括号内填切入点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">()</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823144445.png"></p><blockquote><p>这里不会触发核心业务逻辑，原因是因为没有走第3步，第4步流程，第3步，第4步见下。</p></blockquote><p>📌注意：使用 <code>Around</code> 注解声明方法上可以定义一个参数<code>ProceedingJoinPoint</code>来获取一些内容信息和<strong>放行及执行核心业务逻辑</strong>。环绕通知<strong>存在返回值</strong>，参数为ProceedingJoinPoint，如果执行放行，才会执行目标方法，一旦放行必须将目标方法的返回值返回，否则调用者无法接受返回数据</p><p>流程<br><img src="/Resources/Pasted%20image%2020220823150600.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span>  <br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>    System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);  <br>    System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span> + proceedingJoinPoint.getTarget());  <br>    System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span> + proceedingJoinPoint.getSignature().getName());  <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();  <br>    System.out.println(<span class="hljs-string">&quot;环绕的后置操作&quot;</span>);  <br>    <span class="hljs-keyword">return</span> proceed;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ol><li>execution方法级别切入点表达式：控制越细运行效率越低<br><code>(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</code></li><li>within类级别切入点表达式：控制越粗运行效率越高<br><code>(&quot;within(com.cqupt.service.*.*)&quot;)</code></li><li>基于注解的切入点表达式<br><code>@annotation(com.cqupt.annotations.xxx)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Retention</span>(RetentionPolicy.RUNTIME) 运行时生效  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Target</span>(ElementType.METHOD) 作用在方法类型  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <br><span class="hljs-meta">@Target(ElementType.METHOD)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAdvice &#123;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Aspect 修饰范围:只能用在类上</span><br><span class="hljs-comment"> * 作用:代表这个类是一个切面类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspectConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Around</span>():代表这个方法是一个环绕附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-comment">//@Around(&quot;within(com.cqupt.service.*.*)&quot;)</span><br>    <span class="hljs-meta">@Around(&quot;@annotation(com.cqupt.annotations.MyAdvice)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span> + proceedingJoinPoint.getTarget());<br>        System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span> + proceedingJoinPoint.getSignature().getName());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;环绕的后置操作&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Test</span><br>   <span class="hljs-meta">@MyAdvice</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userService.findById();<br>       System.out.println(name);<br>   &#125;<br>   <br>   <span class="hljs-meta">@MyAdvice</span> 地方写错了<br>------------------修正------------------<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@MyAdvice</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.findById()&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;findById&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>但是这里没有起作用，是由于位置写错了！</p></blockquote><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h3 id="文件上传（已经不适用了）"><a href="#文件上传（已经不适用了）" class="headerlink" title="文件上传（已经不适用了）"></a>文件上传（已经不适用了）</h3><p>用户访问当前系统，将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</p><h4 id="准备上传页面"><a href="#准备上传页面" class="headerlink" title="准备上传页面"></a>准备上传页面</h4><blockquote><p>jsp的位置位于main下<br><img src="/Resources/Pasted%20image%2020220823165618.png"></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;  <br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  <br>&lt;head&gt;  <br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;  <br>    &lt;title&gt;Title&lt;/title&gt;  <br>&lt;/head&gt;  <br>&lt;body&gt;  <br>&lt;h1&gt;测试文件上传&lt;/h1&gt;  <br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/file/upload&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;  <br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;  <br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;上传文件&quot;</span>&gt;  <br>&lt;/form&gt;  <br>&lt;/body&gt;  <br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="编写后端代码"><a href="#编写后端代码" class="headerlink" title="编写后端代码"></a>编写后端代码</h4><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        解析jsp的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>更改idea中工作目录以加载web-app文件夹下的内容</strong><br><img src="/Resources/Pasted%20image%2020220823161934.png"></p><p>编写业务代码</p><blockquote><p>📢 使用@Controller，不要使用@RestController！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 测试文件上传  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file    文件  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//定义:接收文件对象multipartFile file变量名要与form中input type=&quot;file&quot;标签name属性名一致  </span><br>        System.out.println(<span class="hljs-string">&quot;上传的文件名字:&quot;</span> + file.getOriginalFilename());  <br>        System.out.println(<span class="hljs-string">&quot;上传的文件大小:&quot;</span> + file.getSize());  <br>  <br>        <span class="hljs-comment">// 1.获取绝对路径(真实路径)  </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);  <br>        System.out.println(realPath);  <br>        <span class="hljs-comment">// 2. 上传文件   参数1:将文件写入到那个目录  </span><br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath, file.getOriginalFilename()));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/upload.jsp&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>测试上传图片成功！但是上传大文件不可以！</p><blockquote><p>图片的文件大小比较小，所以不会发生错误！<br>错误信息为：当前文件的大小是xxx，但是服务器允许的大小为10M</p></blockquote><p><img src="/Resources/Pasted%20image%2020220823171344.png"></p><p>解决办法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span>  <span class="hljs-comment">#运行请求传递文件大小最大为10M</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">100MB</span>     <span class="hljs-comment">#运行服务器可以处理的最大文件大小</span><br></code></pre></td></tr></table></figure><h4 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h4><p>现在的打包方式已经从war变成了jar，因此上述的文件上传的方式已经不再适用了。因此现在是通过注入目录的方式，把目录写到服务器的一个文件夹中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\&quot;</span>, file.getOriginalFilename()));<br><br><span class="hljs-comment">//或者使用属性注入的方式</span><br><span class="hljs-meta">@Value(&quot;$&#123;realPath&#125;&quot;)</span>  <br><span class="hljs-keyword">private</span> String realPath;<br>file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath, file.getOriginalFilename()));<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823192504.png"></p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="准备下载页面"><a href="#准备下载页面" class="headerlink" title="准备下载页面"></a>准备下载页面</h4><blockquote><p><img src="/Resources/Pasted%20image%2020220823195227.png"></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;测试文件下载&lt;/h1&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?filename=HELP.MD&quot;</span>&gt; HELP.MD&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="编写后端代码-1"><a href="#编写后端代码-1" class="headerlink" title="编写后端代码"></a>编写后端代码</h4><p><strong>导入依赖</strong></p><p><strong>更改idea中工作目录以加载web-app文件夹下的内容</strong></p><p>编写业务代码</p><blockquote><p>📢 使用@Controller，不要使用@RestController！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试文件下载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename 文件名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String filename, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前下载文件的名字:&quot;</span> + filename);<br>        <span class="hljs-comment">// 1.去指定目录中读取文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\Projects\\springboot_study\\springboot_day05\\src\\main\\webapp\\download&quot;</span>, filename);<br>        <span class="hljs-comment">// 2.将文件读取为文件输入流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// 2.5获取响应流之前一定要设置以附件形式下载</span><br>        response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + filename);<br>        <span class="hljs-comment">// 3.获取响应输出流</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-comment">// 4.输入流复制给输出流</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            len = fileInputStream.read(b);<br>            <span class="hljs-keyword">if</span> (len == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            outputStream.write(b, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        <span class="hljs-comment">// 5.释放资源</span><br>        fileInputStream.close();<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li><p><code>filter</code>（过滤器）：过滤器可以拦截<code>javaweb</code>中请求，放行，中断</p></li><li><p><code>interceptor</code>（拦截器）：类似于javaweb中<code>filter</code>功能</p></li></ul><p><strong>拦截器：只能拦截器controller相关的请求！</strong></p><blockquote><p>🔔 拦截器的底层实现就是AOP！ 在<a href="SpringBoot.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">AOP</a>中，说明了为什么需要切面编程。<strong>拦截器也是一样的作用</strong>。</p><ol><li>将controller中共有代码放入到拦截器中执行，减少controller中代码冗余。</li><li>拦截器可以中断请求轨迹。</li><li>请求之前如果该请求配置了拦截器，请求会先经过拦截器，拦截器放行之后执行请求的controller，controller执行完成之后会回到拦截器继续执行拦截器中的代码（💫<strong>环绕通知</strong>！）</li></ol></blockquote><h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><blockquote><p>在Springboot中，HandlerInterceptor已经做了默认实现，按需使用下面三个方法即可。<br>这里之前已经做过一部分，因此没有实践代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义拦截器1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kioo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最先执行的方法</span><br><span class="hljs-comment">     * 返回值为true时,放行 - &gt; 执行controller中的业务代码</span><br><span class="hljs-comment">     * 返回值为false时,中断</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================1=====================================&quot;</span>);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当controller执行完毕后,会执行该方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================2=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最后完成:当响应结束之后会执行拦截器中这个方法内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================3=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义拦截器2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kioo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最先执行的方法</span><br><span class="hljs-comment">     * 返回值为true时,放行 - &gt; 执行controller中的业务代码</span><br><span class="hljs-comment">     * 返回值为false时,中断</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================4=====================================&quot;</span>);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当controller执行完毕后,会执行该方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================5=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最后完成:当响应结束之后会执行拦截器中这个方法内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================6=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()) <span class="hljs-comment">// 拦截器</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)              <span class="hljs-comment">// 拦截路径</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)     <span class="hljs-comment">// 排除路径</span><br>                .order(<span class="hljs-number">1</span>);                           <span class="hljs-comment">// 执行顺序</span><br><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor2</span>()) <span class="hljs-comment">// 拦截器</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)              <span class="hljs-comment">// 拦截路径</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)     <span class="hljs-comment">// 排除路径</span><br>                .order(<span class="hljs-number">2</span>);                           <span class="hljs-comment">// 执行顺序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：order用来执行多个栏截器的执行顺序, order里面写自然数，按照自然数顺序执行<br><img src="/Resources/interceptor.drawio%202.png"></p></blockquote><h3 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;  <br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abc&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试验证拦截器及拦截器的顺序"><a href="#测试验证拦截器及拦截器的顺序" class="headerlink" title="测试验证拦截器及拦截器的顺序"></a>测试验证拦截器及拦截器的顺序</h3><p><img src="/Resources/Pasted%20image%2020220824205701.png"></p><h2 id="Springboot部署方式"><a href="#Springboot部署方式" class="headerlink" title="Springboot部署方式"></a>Springboot部署方式</h2><h3 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p><strong>一开始就指定WAR打包</strong><br>指定项目打包的方式为WAR</p><blockquote><p>最后一个packaging 换成War！<br><img src="/./Resources/image-20230718113952695.png" alt="image-20230718113952695"></p></blockquote><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p><strong>之后将JAR打包方式修改成WAR</strong><br>在<code>pom.xml</code>中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>去除内嵌的TOMCAT依赖</strong><br><img src="/Resources/Pasted%20image%2020220825091550.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!--provided当前idea环境可用，不参与打包--&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在插件中指定入口类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span>-Dfile.encoding-UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.cqupt.SpringbootDay06Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置入口类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDay06Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringBootServletInitializer</span> &#123;<br>    <span class="hljs-comment">// SpringBootServletInitializer: 不再使用内嵌容器启动，使用外部web容器(tomcat)启动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootDay06Application.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置入口类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.sources(SpringbootDay06Application.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h4><p><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a><br><img src="/Resources/Pasted%20image%2020220825090335.png"></p><blockquote><p>带 <code>.original</code> 的是不含依赖包的<br>参考：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a></p></blockquote><p>一旦使用war包部署注意：</p><ul><li><ol><li><code>application.yml</code>中配置<code>port, context-path</code>失效</li></ol></li><li><ol start="2"><li>访问时使用打成war包的名字和外部tomcat端口号进行访问项目<blockquote><p><strong>部署</strong>：省略</p></blockquote></li></ol></li></ul><h3 id="JAR"><a href="#JAR" class="headerlink" title="JAR"></a>JAR</h3><h4 id="第一种-1"><a href="#第一种-1" class="headerlink" title="第一种"></a>第一种</h4><p><strong>一开始就指定JAR打包</strong></p><blockquote><p>最后一个packaging 点Jar！<br><img src="/Resources/Pasted%20image%2020220822194842.png"></p></blockquote><h4 id="第二种-1"><a href="#第二种-1" class="headerlink" title="第二种"></a>第二种</h4><p><strong>之后将JAR打包方式修改成WAR</strong><br>在<code>pom.xml</code>中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="打包测试-1"><a href="#打包测试-1" class="headerlink" title="打包测试"></a>打包测试</h4><p><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a><br><img src="/Resources/Pasted%20image%2020220825093115.png"></p><blockquote><p>带 <code>.original</code> 的是不含依赖包的<br>参考：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a></p></blockquote><p><strong>启动项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar xxxx.jar<br></code></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>springboot项目在使用jsp模板时，jar包部署默认无法找到jsp页面</p><p><strong>解决</strong><br>修改插件版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>指定jap打包配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-comment">&lt;!--打包时将jsp文件拷贝到META-INF目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定resources插件处理哪个目录下的资源文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定必须要放在此目录下才能被访问到--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h2><p><strong>REST</strong>：<strong>表现层状态转化</strong>(Representational State Transfer)，如果一个架构符合REST原则，就称它为 RestFul 架构风格。</p><p><strong>资源</strong>：所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</p><p><strong>表现层</strong>：我们把”资源”具体呈现出来的形式，叫做它的”表现层”(Representation)。</p><p>状态转化(State Transfer)：如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”(State Transfer)。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><ul><li><em>传统url</em>：<code>http://localhost:8080/项目名/user/findById?id=21</code></li><li><em>Resturl</em>：<code>http://localhost:8080/项目名/user/findById/21</code></li></ul><blockquote><p>REST原则就是指一个URL代表一个唯一资源，并且通过HTTP协议里面四个动词：<strong>GET</strong>、<strong>POST</strong>、<strong>PUT</strong>、<strong>DELETE</strong>对应四种服务器端的基本操作：GET用来获取资源，POST用来添加资源(也可以用于更新资源)，PUT用来更新资源，DELETE用来删除资源。</p></blockquote><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-comment">// 1.标识当前服务是基于restful的架构风格</span><br><span class="hljs-comment">// 2.@responseBody + @controller组合</span><br><span class="hljs-comment">// 用了@responseBody就表示只接受json数据</span><br><span class="hljs-meta">@RequestMapping(&quot;/rest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestFulController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Rest使用原则：</span><br><span class="hljs-comment">     * 1. 使用RestURL 替换 传统URL参数作为 URL整体</span><br><span class="hljs-comment">     * 2. 使用四种http动词 get post put delete</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@GetMapping</span> <span class="hljs-doctag">@PostMapping</span> <span class="hljs-doctag">@PutMapping</span> <span class="hljs-doctag">@DeleteMapping</span></span><br><span class="hljs-comment">     * 3. 通常服务返回的数据都是json格式或者xml格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;findOne/&#123;id&#125;/&#123;name&#125;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span> + id;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PutMapping(&quot;saveOne&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;updateOne&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;delOne/&#123;id&#125;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一旦遵循Rest原则，那么必须发<strong>对应的请求</strong>！并且路径也必须<strong>匹配规则</strong>！<br>浏览器只会发送get请求，因此会报错！<br><img src="/Pasted%20image%2020220720111001.png" alt="Pasted image 20220720111001.png"><br><strong>少一个斜杠</strong>都不行！<br><img src="/Pasted%20image%2020220720111024.png" alt="Pasted image 20220720111024.png"></p></blockquote><blockquote><p>补充：这里的笔记出自ES中的部分，没有按照视频中的走，基本上跳过了视频的部分。视频地址：<a href="https://www.bilibili.com/video/BV1Cv411p7cQ?p=47">RESTFUL的使用</a>，以后如果需要用到RESTFUL开发，再深入了解RESTFUL。</p></blockquote><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><p><strong>仅看了前后端分离的异常处理</strong>，传统方法开发的异常处理仅复制了笔记，用作参考。具体的使用方法见：<a href="https://www.bilibili.com/video/BV1Cv411p7cQ?p=49">异常处理&amp;传统方式异常处理</a>。</p></blockquote><h4 id="传统开发的异常处理"><a href="#传统开发的异常处理" class="headerlink" title="传统开发的异常处理"></a>传统开发的异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局异常处理之传统web开发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerExceptionResolver</span> &#123;<br>    <span class="hljs-comment">//参数1:当前请求对象</span><br>    <span class="hljs-comment">//参数2:当前请求的响应对象</span><br>    <span class="hljs-comment">//参数3:当前出现异常的控割器对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;<br>        <span class="hljs-comment">//异常处理...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;500&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RestFul的异常处理"><a href="#RestFul的异常处理" class="headerlink" title="RestFul的异常处理"></a>RestFul的异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局异常处理之RestFul</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandlerRest</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><p><strong>CORS</strong></p><ul><li>CORS是一个W3C标准，全称是”<strong>跨域资源共享</strong>“（Cross-origin resource sharing）。</li><li>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</li></ul><h2 id="同源策略-同源策略-same-origin-policy-是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。"><a href="#同源策略-同源策略-same-origin-policy-是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。" class="headerlink" title="同源策略- 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。"></a><strong>同源策略</strong><br>- 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。</h2><p><strong>源</strong></p><ul><li>源[origin]就是协议、域名和端口号。例如：<code>http://www.baidu.com:80</code>这个URL。</li></ul><p><strong>同源</strong></p><ul><li>若地址里面的协议、域名和端口号均相同则属于同源。</li></ul><p><img src="/Resources/Pasted%20image%2020220825102617.png"></p><h2 id="哪些操作不受同源限制-页面中的链接，重定向以及表单提交是不会受到同源策略限制的；-跨域资源的引入是可以的。如嵌入到页面中的-lt-script-src-quot-quot-gt-lt-script-gt-lt-img-gt-lt-link-gt-lt-iframe-gt-等。"><a href="#哪些操作不受同源限制-页面中的链接，重定向以及表单提交是不会受到同源策略限制的；-跨域资源的引入是可以的。如嵌入到页面中的-lt-script-src-quot-quot-gt-lt-script-gt-lt-img-gt-lt-link-gt-lt-iframe-gt-等。" class="headerlink" title="哪些操作不受同源限制- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的；- 跨域资源的引入是可以的。如嵌入到页面中的&lt;script src=&quot; ...&quot;&gt;&lt;/script&gt;, &lt;img&gt;, &lt;link&gt;, &lt;iframe&gt;等。"></a><strong>哪些操作不受同源限制</strong><br>- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的；<br>- 跨域资源的引入是可以的。如嵌入到页面中的<code>&lt;script src=&quot; ...&quot;&gt;&lt;/script&gt;, &lt;img&gt;, &lt;link&gt;, &lt;iframe&gt;</code>等。</h2><p><strong>哪些操作受到同源限制</strong></p><ul><li>在浏览器中发起一个AJAX请求，会受到同源策略限制。</li><li>出现错误:Access-Control-Allow-0rigin<br>![[Pasted image 20220621095746.png]]</li></ul><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>第一种<br>在controller上面添加@CrossOrigin注解</p><p>第二种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//下面的两种感觉都可以，有时候第一种可以，有时候第二种可以，有时候都可以</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigurerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowCredentials(<span class="hljs-literal">false</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>        ;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title function_">corsWebFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br><br><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.setAllowCredentials(<span class="hljs-literal">true</span>);<br>source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsWebFilter</span>(source);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Jasypt-加密"><a href="#Jasypt-加密" class="headerlink" title="Jasypt 加密"></a>Jasypt 加密</h2><p>…</p><h2 id="在SpringBoot中集成Mybatis"><a href="#在SpringBoot中集成Mybatis" class="headerlink" title="在SpringBoot中集成Mybatis"></a>在SpringBoot中集成Mybatis</h2><p>单独使用参考：[[MyBatis]]</p><p>初始化一个Springboot应用，依赖选spring-web，不再赘述。</p><h3 id="导入依赖-2"><a href="#导入依赖-2" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><code>pom.xml</code></p><blockquote><p>依赖参考，如果初始化的时候，没有选择spring-web，可以全部复制导入<br>💡：如果是mysql版本用的是8的话，需要导8的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot_day04</span><br><br><span class="hljs-comment"># 整合mybatis相关配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.153.135:3306/yingxue?characterEncoding=UTF-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment">#mapper配置文件的位置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:com/cqupt/mapper/*.xml</span><br>  <span class="hljs-comment">#别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.cqupt.entity</span><br></code></pre></td></tr></table></figure><blockquote><p>💡：如果是mysql依赖版本用的是8的话，<code>driver-class-name: com.mysql.jdbc.Driver</code>换成<code>driver-class-name: com.mysql.cj.jdbc.Driver</code></p><p>❗：创建mapper📂时，注意需要使用 <code>/</code> 的方式，不要使用 <code>.</code> 的方式，否则认为一层目录。最后导致找不到mapper文件。<br><img src="/Resources/Pasted%20image%2020220822191755.png"></p></blockquote><h3 id="编写业务层代码"><a href="#编写业务层代码" class="headerlink" title="编写业务层代码"></a>编写业务层代码</h3><blockquote><p>可以根据数据库字段自己编写，但是现在可以使用其他工具来编写简化操作</p></blockquote><h4 id="使用MyBatis-Generator（不建议）"><a href="#使用MyBatis-Generator（不建议）" class="headerlink" title="使用MyBatis Generator（不建议）"></a>使用MyBatis Generator（不建议）</h4><p>根据数据库中的表，自动的生成JavaBean文件、对应的mapper接口、以及对应的mapper配置文件中大部分查询语句。</p><h5 id="导入依赖-3"><a href="#导入依赖-3" class="headerlink" title="导入依赖"></a>导入依赖</h5><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;last.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置策略文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置代码生成相关的策略文件-mybatis-generator-config-xml"><a href="#配置代码生成相关的策略文件-mybatis-generator-config-xml" class="headerlink" title="配置代码生成相关的策略文件 mybatis-generator-config.xml"></a>配置代码生成相关的策略文件 mybatis-generator-config.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jdbc连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- schema为数据库名，tableName为对应的数据库表名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注释 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 类型转换 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成实体类配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成Mapper.xml文件配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成Mapper.java 接口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点</p><ol><li>每次代码生成需要配置对应的 mybatis-generator-config 通过 XML 的形式配置相关生成属性和规则</li><li>无法生成通用的 Controller、Service 类，无法自定义模板等<br>综上两点： mybatis-generator 使用非常不方便。</li></ol><h4 id="使用EasyCode（推荐）"><a href="#使用EasyCode（推荐）" class="headerlink" title="使用EasyCode（推荐）"></a>使用EasyCode（推荐）</h4><blockquote><p>下面的截图来自微服务的实战</p></blockquote><p><a href="IDEA#%E4%BD%BF%E7%94%A8IDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93">使用IDEA连接数据库</a></p><p>使用EasyCode（IDEA中的插件）快速生成代码<br><img src="/./Resources/image-20230718114042119.png" alt="image-20230718114042119"></p><p><img src="/./Resources/image-20230718114048107.png" alt="image-20230718114048107"></p><p>这里的mapper不知道为什么去了admin的src目录下，手动修改一下路径<br>并将mapper文件夹的名字改为<code>com.cqupt.mapper</code></p><p>调整完后项目结构图如下<br><img src="/./Resources/image-20230718114056565.png" alt="image-20230718114056565"></p><p>扫描Mapper</p><ul><li>在入口类上加入<code>@MapperScan(&quot;com.cqupt.dao&quot;)</code><br>修饰范围：用在类上，用来扫描dao接口所在包，同时将所有dao接口在工厂中创建对象</li><li>在Mapper类上加入<code>@Mapper</code><blockquote><p>以上选择任意一个皆可</p></blockquote></li></ul><h2 id="在Springboot中集成Mybatis-Plus"><a href="#在Springboot中集成Mybatis-Plus" class="headerlink" title="在Springboot中集成Mybatis-Plus"></a>在Springboot中集成Mybatis-Plus</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><blockquote><p>为了方便测试，准备一张测试表</p></blockquote><p>对应的表结构![[Pasted image 20220620200304.png]]</p><p>对应的sql脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL dump 10.13  Distrib 5.7.38, for osx10.17 (x86_64)</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Host: 127.0.0.1    Database: ms</span><br><span class="hljs-comment">-- ------------------------------------------------------</span><br><span class="hljs-comment">-- Server version5.7.38</span><br><br><span class="hljs-comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;<br><span class="hljs-comment">/*!40101 SET NAMES utf8 */</span>;<br><span class="hljs-comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;<br><span class="hljs-comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;<br><span class="hljs-comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Table structure for table `sys_user`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_user`;<br><span class="hljs-comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;<br><span class="hljs-comment">/*!40101 SET character_set_client = utf8 */</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_user` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `nickname` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `user_id_uindex` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Dumping data for table `sys_user`</span><br><span class="hljs-comment">--</span><br><br>LOCK TABLES `sys_user` WRITE;<br><span class="hljs-comment">/*!40000 ALTER TABLE `sys_user` DISABLE KEYS */</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `sys_user` (`id`, `username`, `password`, `nickname`, `email`, `phone`, `address`, `create_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;管理员&#x27;</span>,<span class="hljs-string">&#x27;admin@mail.com&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span>,<span class="hljs-string">&#x27;2022-06-20 09:04:56&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;wt&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-comment">/*!40000 ALTER TABLE `sys_user` ENABLE KEYS */</span>;<br>UNLOCK TABLES;<br><span class="hljs-comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;<br><span class="hljs-comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;<br><span class="hljs-comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;<br><span class="hljs-comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;<br><span class="hljs-comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;<br><span class="hljs-comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;<br><span class="hljs-comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;<br><br><span class="hljs-comment">-- Dump completed on 2022-06-20 20:03:25</span><br><br></code></pre></td></tr></table></figure><h3 id="导入依赖-4"><a href="#导入依赖-4" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MybatisPlus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p><code>application.yml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"># DataSource Config<br>spring:<br>  datasource:<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>    url: jdbc:mysql://localhost:3306/ms?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai<br>    username: root<br>    password: root<br>server:<br>  port: 8081<br>mybatis-plus:<br>  mapper-locations: classpath*:/mapper/**Mapper.xml<br></code></pre></td></tr></table></figure><p><code>MybatisPlusConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;scan.cqupt.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用MybatisPlus-generator-自动生成"><a href="#使用MybatisPlus-generator-自动生成" class="headerlink" title="使用MybatisPlus-generator 自动生成"></a>使用MybatisPlus-generator 自动生成</h3><p>官方开发文档：<br>示例：<a href="https://baomidou.com/pages/779a6e/#%E4%BD%BF%E7%94%A8">代码生成器（新） | MyBatis-Plus</a></p><h4 id="导入依赖-5"><a href="#导入依赖-5" class="headerlink" title="导入依赖"></a>导入依赖</h4><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MybatisPlus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        mp代码生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        模板引擎--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写MybatisPlusCodeAutoGeneration"><a href="#编写MybatisPlusCodeAutoGeneration" class="headerlink" title="编写MybatisPlusCodeAutoGeneration"></a>编写MybatisPlusCodeAutoGeneration</h4><p>配置说明：<a href="https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig">代码生成器配置新 | MyBatis-Plus</a><br>使用的时候，需要用户名，密码，数据库地址，表名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusCodeAutoGeneration</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/vueblog&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自动生成代码输出目录，这里默认类路径下的src/main/java/com.cqupt/</span><br><span class="hljs-comment">     * System.getProperty(&quot;user.dir&quot;) - &gt; 项目目录</span><br><span class="hljs-comment">     * File.separator - &gt; /</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">OUTPUT_DIR</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + File.separator + <span class="hljs-string">&quot;src/main/java&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FastAutoGenerator.create(URL, USERNAME, PASSWORD)<br>                .globalConfig(builder -&gt; builder<br>                        .author(<span class="hljs-string">&quot;wangtaotao&quot;</span>)<span class="hljs-comment">// 设置作者</span><br>                        .fileOverride()<span class="hljs-comment">// 覆盖已生成文件</span><br>                        .disableOpenDir()<span class="hljs-comment">//禁用代码生成后打开输出目录对话框</span><br>                        .outputDir(OUTPUT_DIR))<br>                .packageConfig(builder -&gt; builder<br>                        .parent(<span class="hljs-string">&quot;com.cqupt&quot;</span>)<span class="hljs-comment">// 设置父包名</span><br>                        .entity(<span class="hljs-string">&quot;entity&quot;</span>))<span class="hljs-comment">//可以指定实体(DO)所在的包名</span><br>                .strategyConfig(builder -&gt; builder<br>                        <span class="hljs-comment">//addInclude指定包含的表名，不调用该方法默认为所有表生成代码</span><br>                        <span class="hljs-comment">//addTablePrefix可以过滤表前缀，即t_user变成user</span><br>                        .addInclude(<span class="hljs-string">&quot;m_user&quot;</span>).addTablePrefix(<span class="hljs-string">&quot;m_&quot;</span>)<br>                        .addInclude(<span class="hljs-string">&quot;m_blog&quot;</span>).addTablePrefix(<span class="hljs-string">&quot;m_&quot;</span>)<br>                        <span class="hljs-comment">// 禁用为实体类生成序列化ID；formatFileName格式化生成的实体类名称，即t_user -&gt; UserDO</span><br>                        <span class="hljs-comment">//.entityBuilder().disableSerialVersionUID().formatFileName(&quot;%sDO&quot;)</span><br>                        <span class="hljs-comment">// formatMapperFileName格式化Mapper接口名称，即t_user -&gt; UserMapper</span><br>                        <span class="hljs-comment">// formatXmlFileName格式化Mapper.xml文件名称，即t_user -&gt; UserMapper.xml</span><br>                        .mapperBuilder()<br>                        .formatMapperFileName(<span class="hljs-string">&quot;%sMapper&quot;</span>)<br>                        .formatXmlFileName(<span class="hljs-string">&quot;%sMapper&quot;</span>)<br>                        .serviceBuilder()<br>                        .formatServiceFileName(<span class="hljs-string">&quot;%sService&quot;</span>)<br>                        .build()<br>                )<br>                <span class="hljs-comment">// MyBatis-Plus代码生成器是通过模板引擎来渲染文件的，默认模板引擎是Velocity，根据依赖我们使用Freemarker</span><br>                .templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>())<br>                .execute();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>生成结果：<br>![[Pasted image 20220620183018.png|250]]</p><h5 id="MybatisPlus-generator-相关问题"><a href="#MybatisPlus-generator-相关问题" class="headerlink" title="MybatisPlus-generator 相关问题"></a>MybatisPlus-generator 相关问题</h5><ol><li><p><code>Cannot resolve symbol ‘FastAutoGenerator’</code><br>参考：<a href="https://blog.csdn.net/weixin_45203988/article/details/123756905">新版本代码自动生成(MybatisPlus-generator) 代码示例+问题解决_建桥之魂的博客-CSDN博客</a><br>原因：mybatis-plus-generator版本太低，换新的</p></li><li><p>如果需要显示json回显到浏览器，则需要在Controller把<code>@Controller</code>改成<code>@RestController</code></p></li></ol><h3 id="实现增删改查"><a href="#实现增删改查" class="headerlink" title="实现增删改查"></a>实现增删改查</h3><p>MybatisPlus已经实现了大部分CRUD操作，因此，只需要直接使用即可。</p><blockquote><p>controller -&gt; service -&gt; serviceImpl -&gt; mapper</p><p>controller是为前端提供的访问入口，不用关心具体的业务逻辑。具体的业务逻辑放在了serviceImpl里，controller只需调用它封装好的方法即可。</p><p>service提供业务逻辑要用到的方法，serviceImpl提供方法的具体实现。说人话，ServiceImpl负责了主要的功能编写，Controller提供了使用的入口。</p><p>mapper为serviceImpl提供操作数据的方法，但方法的具体实现(也就是SQL语句)放在了mapper下的xml文件里。</p></blockquote><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-06-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getById(id);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20220620190924.png]]</p><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> userService.save(user);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@RequestBody：通过获取post请求中的请求体</p></blockquote><p>![[Pasted image 20220620195105.png]]</p><h5 id="增删查改全部代码"><a href="#增删查改全部代码" class="headerlink" title="增删查改全部代码"></a>增删查改全部代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-06-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getById(id);<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;deleteById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.updateById(user);<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;getAll&quot;)</span>  <br> <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>&#123;  <br>     <span class="hljs-keyword">return</span> userService.list();  <br>&#125;<br><br><span class="hljs-comment">// 分页查询</span><br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-keyword">public</span> IPage&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer pageNum,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam</span> Integer pageSize)</span> &#123;<br>        IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum, pageSize);<br>        <span class="hljs-keyword">return</span> userService.page(page);<br>    &#125;<br><br> <span class="hljs-comment">//分页查询 匹配用户名使用QueryWrapper</span><br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-keyword">public</span> IPage&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer pageNum,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam</span> Integer pageSize,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam(defaultValue = &quot;&quot;)</span> String username)</span> &#123;<br>        IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum, pageSize);<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> userService.page(page, queryWrapper);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="在SpringBoot中集成Swagger"><a href="#在SpringBoot中集成Swagger" class="headerlink" title="在SpringBoot中集成Swagger"></a>在SpringBoot中集成Swagger</h2><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><ul><li>后端：后端控制层，服务层，数据访问层</li><li>前端：前端控制层，视图层</li></ul><p>前端测试后端工具Postman</p><p>后端提供接口，需要时时更新消息和改动</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><ul><li>Api框架</li><li>RestFul Api 文档在线自动生成工具 &#x3D;&gt; <strong>Api文档与Api定义同步更新</strong></li><li>在线测试Api接口</li><li>支持多种语言</li></ul><h3 id="在项目中使用Swagger需要springfox"><a href="#在项目中使用Swagger需要springfox" class="headerlink" title="在项目中使用Swagger需要springfox"></a>在项目中使用Swagger需要springfox</h3><ul><li>swagger2</li><li>ui</li></ul><h3 id="SpringBoot集成Swagger3（新版）"><a href="#SpringBoot集成Swagger3（新版）" class="headerlink" title="SpringBoot集成Swagger3（新版）"></a>SpringBoot集成Swagger3（新版）</h3><blockquote><p>注意：不要同时导入2和3，会报错</p></blockquote><h4 id="导依赖"><a href="#导依赖" class="headerlink" title="导依赖"></a>导依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写配置文件-1"><a href="#编写配置文件-1" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><blockquote><p>跟2一样，只是注解换了一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Swagger3Config &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/20 21:20&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     配置Swagger的Docket的Bean实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                <span class="hljs-comment">//为当前包下controller生成API文档</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cqupt.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-comment">//添加登录认证</span><br><span class="hljs-comment">//                .securitySchemes(securitySchemes())</span><br><span class="hljs-comment">//                .securityContexts(securityContexts());</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     配置Swagger信息 = apiInfo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                作者信息</span><br><span class="hljs-comment">                 */</span><br>                .title(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br><br><span class="hljs-comment">//    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class="hljs-comment">//        //设置请求头信息</span><br><span class="hljs-comment">//        List&lt;ApiKey&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        ApiKey apiKey = new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;, &quot;header&quot;);</span><br><span class="hljs-comment">//        result.add(apiKey);</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class="hljs-comment">//        //设置需要登录认证的路径</span><br><span class="hljs-comment">//        List&lt;SecurityContext&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        result.add(getContextByPath(&quot;/brand/.*&quot;));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private SecurityContext getContextByPath(String pathRegex)&#123;</span><br><span class="hljs-comment">//        return SecurityContext.builder()</span><br><span class="hljs-comment">//                .securityReferences(defaultAuth())</span><br><span class="hljs-comment">//                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="hljs-comment">//                .build();</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class="hljs-comment">//        List&lt;SecurityReference&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        AuthorizationScope authorizationScope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);</span><br><span class="hljs-comment">//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];</span><br><span class="hljs-comment">//        authorizationScopes[0] = authorizationScope;</span><br><span class="hljs-comment">//        result.add(new SecurityReference(&quot;Authorization&quot;, authorizationScopes));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><p><code>http://localhost:端口号/swagger-ui/index.html#/</code></p><h3 id="SpringBoot集成Swagger2"><a href="#SpringBoot集成Swagger2" class="headerlink" title="SpringBoot集成Swagger2"></a>SpringBoot集成Swagger2</h3><h4 id="导入依赖-6"><a href="#导入依赖-6" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Swagger-UI API文档生产工具--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写配置文件-2"><a href="#编写配置文件-2" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p><code>SwaggerConfig.java</code></p><blockquote><p>这里注释掉了登录认证</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SwaggerConfig &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/20 20:32&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 配置Swagger的Docket的Bean实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>.apiInfo(apiInfo())<br>.select()<br><span class="hljs-comment">//为当前包下controller生成API文档</span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cqupt.controller&quot;</span>))<br>.paths(PathSelectors.any())<br>.build();<br><span class="hljs-comment">//添加登录认证</span><br><span class="hljs-comment">//                .securitySchemes(securitySchemes())</span><br><span class="hljs-comment">//                .securityContexts(securityContexts());</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 配置Swagger信息 = apiInfo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">作者信息</span><br><span class="hljs-comment"> */</span><br>.title(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>.description(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>.contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>))<br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>.build();<br>&#125;<br><br><span class="hljs-comment">//    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class="hljs-comment">//        //设置请求头信息</span><br><span class="hljs-comment">//        List&lt;ApiKey&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        ApiKey apiKey = new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;, &quot;header&quot;);</span><br><span class="hljs-comment">//        result.add(apiKey);</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class="hljs-comment">//        //设置需要登录认证的路径</span><br><span class="hljs-comment">//        List&lt;SecurityContext&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        result.add(getContextByPath(&quot;/brand/.*&quot;));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private SecurityContext getContextByPath(String pathRegex)&#123;</span><br><span class="hljs-comment">//        return SecurityContext.builder()</span><br><span class="hljs-comment">//                .securityReferences(defaultAuth())</span><br><span class="hljs-comment">//                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="hljs-comment">//                .build();</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class="hljs-comment">//        List&lt;SecurityReference&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        AuthorizationScope authorizationScope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);</span><br><span class="hljs-comment">//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];</span><br><span class="hljs-comment">//        authorizationScopes[0] = authorizationScope;</span><br><span class="hljs-comment">//        result.add(new SecurityReference(&quot;Authorization&quot;, authorizationScopes));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h4><p><code>http://localhost:端口号/swagger-ui.html</code>访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;p&gt;官方网站：&lt;a href=&quot;https://spring.io/projec</summary>
      
    
    
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="http://conquers.github.io/categories/Java/Spring/"/>
    
    <category term="Spring Boot" scheme="http://conquers.github.io/categories/Java/Spring/Spring-Boot/"/>
    
    
    <category term="SpringBoot" scheme="http://conquers.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot支付宝沙箱支付</title>
    <link href="http://conquers.github.io/posts/a53e2688.html"/>
    <id>http://conquers.github.io/posts/a53e2688.html</id>
    <published>2022-08-08T08:45:02.000Z</published>
    <updated>2023-07-18T06:59:50.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot支付宝沙箱支付"><a href="#Springboot支付宝沙箱支付" class="headerlink" title="Springboot支付宝沙箱支付"></a>Springboot支付宝沙箱支付</h1><h2 id="使用沙箱环境"><a href="#使用沙箱环境" class="headerlink" title="使用沙箱环境"></a>使用沙箱环境</h2><h3 id="进入支付宝开发平台—沙箱环境"><a href="#进入支付宝开发平台—沙箱环境" class="headerlink" title="进入支付宝开发平台—沙箱环境"></a>进入支付宝开发平台—沙箱环境</h3><ul><li>沙箱环境配置：<a href="https://opendocs.alipay.com/common/02kkv7">https://opendocs.alipay.com/common/02kkv7</a></li></ul><p>开发者使用支付宝账号登录 <a href="https://openhome.alipay.com/develop/manage">开放平台控制台</a>（需实名认证的支付宝账号）。<br><img src="/Resources/Pasted%20image%2020220808162913.png"></p><h3 id="生成应用私钥和应用公钥"><a href="#生成应用私钥和应用公钥" class="headerlink" title="生成应用私钥和应用公钥"></a>生成应用私钥和应用公钥</h3><blockquote><p>获取<a href="https://opendocs.alipay.com/common/02kipl">生成密钥</a>的工具<br>下载安装-&gt;生成密钥<br><img src="/Resources/Pasted%20image%2020220809105134.png"></p></blockquote><h3 id="获取支付宝公钥、APPID和PID"><a href="#获取支付宝公钥、APPID和PID" class="headerlink" title="获取支付宝公钥、APPID和PID"></a>获取支付宝公钥、APPID和PID</h3><p><img src="/Resources/Pasted%20image%2020220809105646.png"></p><p>将上一步的应用公钥复制进来<br><img src="/Resources/Pasted%20image%2020220809105301.png"></p><p><img src="/Resources/Pasted%20image%2020220809105351.png"></p><h2 id="配置SpringBoot"><a href="#配置SpringBoot" class="headerlink" title="配置SpringBoot"></a>配置SpringBoot</h2><blockquote><p>配置一个提交表单的页面<br><img src="/Resources/Pasted%20image%2020220809150035.png"></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/alipay/pay&quot;</span>&gt;</span><br>    订单号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tradeNo&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    订单名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    付款金额：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;下单&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口说明：<a href="https://opendocs.alipay.com/open/02e7gq?scene=20">app支付接口2.0</a></p><blockquote><p>新建一个Springboot 项目<br>导入Springweb和alipay-sdk的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.16.57.ALL<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义配置类"><a href="#定义配置类" class="headerlink" title="定义配置类"></a>定义配置类</h3><blockquote><p>将以上获取到的支付宝公钥、应用私钥、APPID填写到如下配置类中<br>变量名的含义已在注释给出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请在这里配置您的基本信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">app_id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用私钥，您的PKCS8格式RSA2私钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">merchant_private_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.html 对应APPID下的支付宝公钥。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">alipay_public_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝异步通知路径,付款完毕后会异步调用本项目的方法,必须为公网地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">notify_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/alipay/failure&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝同步通知路径,也就是当付款完毕后跳转本项目的页面,可以不是公网地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">return_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/alipay/success&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 签名方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">sign_type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;RSA2&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字符编码格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝网关，这是沙箱的网关</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">gatewayUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">log_path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\logs\\&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写日志，方便测试（看网站需求，也可以改成把记录存入数据库）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sWord 要写入日志里的文本内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logResult</span><span class="hljs-params">(String sWord)</span> &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(log_path + <span class="hljs-string">&quot;alipay_log_&quot;</span> + System.currentTimeMillis() + <span class="hljs-string">&quot;.txt&quot;</span>);<br>            <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 这里的getParentFile()获取的是最后一级文件前的所有目录名</span><br><span class="hljs-comment">                 * 即如果是E:\logs\logs\logs\log.txt,则getParentFile()的结果是E:\logs\logs\logs\</span><br><span class="hljs-comment">                 */</span><br>                file.getParentFile().mkdirs();<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 追加</span><br><span class="hljs-comment">             * fileWriter = new FileWriter(file,true);</span><br><span class="hljs-comment">             * 覆盖(默认)</span><br><span class="hljs-comment">             * fileWriter = new FileWriter(file,false);</span><br><span class="hljs-comment">             */</span><br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file,<span class="hljs-literal">false</span>);<br>            fileWriter.write(sWord);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileWriter.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建支付的Controller类"><a href="#创建支付的Controller类" class="headerlink" title="创建支付的Controller类"></a>创建支付的Controller类</h3><p>在Controller类中创建点击支付跳转支付宝页面的方法：支付方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/alipay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayService alipayService;<br><br>    <span class="hljs-comment">// 支付失败</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/failure&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付失败&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 支付成功</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 支付</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/pay&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toPay</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;tradeNo&quot;)</span> String orderNumber, <span class="hljs-meta">@RequestParam(&quot;totalAmount&quot;)</span> String totalAmount, <span class="hljs-meta">@RequestParam(&quot;subject&quot;)</span> String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pays</span> <span class="hljs-operator">=</span> alipayService.pay(orderNumber, totalAmount, subject, response, request);<br>    <span class="hljs-comment">// 支付成功添加日志</span><br>        AlipayConfig.logResult(pays);<br>        <span class="hljs-keyword">return</span> pays;<br>    &#125;<br><br>    <span class="hljs-comment">// 退款</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/refund&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toRefund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> alipayService.refund(response, session);<br>    <span class="hljs-comment">// 退款成功添加日志</span><br>        AlipayConfig.logResult(pay);<br>        <span class="hljs-keyword">return</span> pay;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建支付的Service类"><a href="#创建支付的Service类" class="headerlink" title="创建支付的Service类"></a>创建支付的Service类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlipayService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNumber 订单编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalAmount 总计金额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response    响应</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request     请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AlipayApiException</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">pay</span><span class="hljs-params">(String orderNumber, String totalAmount, String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 退款查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> （唯一）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ，同一笔交易多次退款需要保证唯一，如需部分退款，则此参数必传</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="创建支付的ServiceImpl类"><a href="#创建支付的ServiceImpl类" class="headerlink" title="创建支付的ServiceImpl类"></a>创建支付的ServiceImpl类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AlipayService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调取支付宝接口 web端支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">DefaultAlipayClient</span> <span class="hljs-variable">alipayClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(<br>            AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, <span class="hljs-string">&quot;json&quot;</span>, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调取支付宝接口 app端支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">AlipayClient</span> <span class="hljs-variable">alipayClients</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(<br>            AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, <span class="hljs-string">&quot;json&quot;</span>, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">pay</span><span class="hljs-params">(String orderNumber, String totalAmount, String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">AlipayTradePagePayRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayRequest</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 同步通知，支付完成后，支付成功页面</span><br><span class="hljs-comment">         */</span><br>        alipayRequest.setReturnUrl(AlipayConfig.return_url);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 异步通知，支付完成后，需要进行的异步处理</span><br><span class="hljs-comment">         */</span><br>        alipayRequest.setNotifyUrl(AlipayConfig.notify_url);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        //商户订单号，后端可以写一个工具类生成一个订单号，必填</span><br><span class="hljs-comment">        String order_number = new String(&quot;orderNumber&quot;);</span><br><span class="hljs-comment">        //付款金额，从前台获取，必填</span><br><span class="hljs-comment">        String total_amount = new String(&quot;totalAmount&quot;);</span><br><span class="hljs-comment">        //订单名称/标题，可自定义</span><br><span class="hljs-comment">        String subject = new String(&quot;支付宝沙箱测试&quot;);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 除了需要提供之前设置好的私有属性（URL，公钥，私钥，网关等等）外，还需要提供的参数</span><br>        <span class="hljs-comment">// outTradeNo，订单号，必须为String64位，不能为空且不能重复</span><br>        <span class="hljs-comment">// totalAmount，支付金额，不能为空</span><br>        <span class="hljs-comment">// subject，订单名称，不能为空</span><br>        <span class="hljs-comment">// body，商品描述，可以为空</span><br>        <span class="hljs-comment">// 上面三个必填参数很重要且必须遵守支付宝的规定，在扫码支付的时候能看到且有用</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">bizContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        bizContent.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderNumber);<br>        bizContent.put(<span class="hljs-string">&quot;total_amount&quot;</span>,totalAmount);<br>        bizContent.put(<span class="hljs-string">&quot;subject&quot;</span>,subject);<br>        bizContent.put(<span class="hljs-string">&quot;product_code&quot;</span>,<span class="hljs-string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);<br>        alipayRequest.setBizContent(bizContent.toString());<br><span class="hljs-comment">//        String result = alipayClient.pageExecute(alipayRequest).getBody().replace(&#x27;\&quot;&#x27;, &#x27;\&#x27;&#x27;).replace(&#x27;\n&#x27;, &#x27; &#x27;);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> alipayClient.pageExecute(alipayRequest).getBody();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-comment">//设置请求参数</span><br>        <span class="hljs-type">AlipayTradeRefundRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradeRefundRequest</span>();<br>        <span class="hljs-comment">//商户订单号，必填</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_trade_no</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;20200523&quot;</span>);<br>        <span class="hljs-comment">//需要退款的金额，该金额不能大于订单金额，必填</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund_amount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;198&quot;</span>);<br>        <span class="hljs-comment">//标识一次退款请求，同一笔交易多次退款需要保证唯一。如需部分退款，则此参数必传；不传该参数则代表全额退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_request_no</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(UUID.randomUUID().toString());<br>        <span class="hljs-comment">// 字符转义很重要</span><br>        alipayRequest.setBizContent(<span class="hljs-string">&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;</span> + out_trade_no + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;refund_amount\&quot;:\&quot;&quot;</span> + refund_amount + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;out_request_no\&quot;:\&quot;&quot;</span> + out_request_no + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        <span class="hljs-comment">// 请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> alipayClient.execute(alipayRequest).getBody();<br>        <span class="hljs-comment">// 输出</span><br>        System.out.println(result);<span class="hljs-comment">//以下写自己的订单退款代码</span><br>        <span class="hljs-comment">// logger.info(&quot;返回结果=&#123;&#125;&quot;,result);</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/Resources/Pasted%20image%2020220809150109.png"><br><img src="/Resources/Pasted%20image%2020220809150118.png"><br>输入沙箱中提供的买家账户密码即可完成付款，至此沙箱支付完成。</p><h3 id="一些补充-关于returnUrl和notifyUrl"><a href="#一些补充-关于returnUrl和notifyUrl" class="headerlink" title="一些补充 关于returnUrl和notifyUrl"></a>一些补充 关于returnUrl和notifyUrl</h3><blockquote><p>returnUrl 异步<br>notifyUrl 同步</p></blockquote><h4 id="returnUrl"><a href="#returnUrl" class="headerlink" title="returnUrl"></a>returnUrl</h4><p>前面付完款之后的同步回调直接返回一个”success”</p><blockquote><p>这里的success是notifyUrl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，付完款后，支付宝会反馈一些信息，补充代码如下</p><blockquote><p>对数据库进行操作的代码可以在该方法中进行，也可以在异步回调方法中进行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">(HttpServletResponse response, HttpServletRequest request)</span> &#123;<br>    Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Map&lt;String, String[]&gt; requestParams = request.getParameterMap();<br>    requestParams.forEach((key,value)-&gt;&#123;<br>        System.out.println(key);<br>        System.out.println(Arrays.toString(value));<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220809151035.png"></p><h4 id="notifyUrl"><a href="#notifyUrl" class="headerlink" title="notifyUrl"></a>notifyUrl</h4><ul><li><p>上面为支付宝同步调用处理,但是官方建议应在异步调用方法中处理付款成功后的操作，但因异步调用的路径必须为公网地址，支付宝才可以发送请求给我们,故这里不写异步调用的方法了,需要注意的是，异步调用为post请求，且传递来的参数会多一些，但基本与同步调用的操作一致。</p></li><li><p>异步回调方法必须为公网IP，因为这个URL地址是支付宝官方来调用我们本机的，是我们完成支付操作后，支付宝需要进行一些金额的处理（与银行对接）所以需要几秒的时间，当支付宝处理完成后异步的调用我们的notify方法（一般在这个方法中进行数据库的操作），这个过程异步进行，所以用户一般感觉不到（用户感觉到的是同步调用的方法）。</p></li><li><p>设置公网IP有两种方案，1、内网穿透，2、将项目部署到服务器</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot支付宝沙箱支付&quot;&gt;&lt;a href=&quot;#Springboot支付宝沙箱支付&quot; class=&quot;headerlink&quot; title=&quot;Springboot支付宝沙箱支付&quot;&gt;&lt;/a&gt;Springboot支付宝沙箱支付&lt;/h1&gt;&lt;h2 id=&quot;使用沙箱环</summary>
      
    
    
    
    <category term="支付SDK" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    <category term="支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>支付宝支付</title>
    <link href="http://conquers.github.io/posts/3338cec1.html"/>
    <id>http://conquers.github.io/posts/3338cec1.html</id>
    <published>2022-08-08T06:21:14.000Z</published>
    <updated>2023-07-18T07:00:37.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>官方网站：<a href="https://open.alipay.com/">支付宝开放平台</a><br>开发文档：<a href="https://opendocs.alipay.com/open/01bxlm">网页&#x2F;移动应用文档指引</a></p><blockquote><p>开发测试可以直接跳转到沙箱环境</p></blockquote><h2 id="正式环境（常规接入流程）"><a href="#正式环境（常规接入流程）" class="headerlink" title="正式环境（常规接入流程）"></a>正式环境（常规接入流程）</h2><p>详细的开发文档：<a href="https://opendocs.alipay.com/open/03k9zr">指南</a><br><img src="/Resources/Pasted%20image%2020220808143344.png"><br><strong>指南含有详细的操作文档，以下仅为实践记录内容（按照操作指南开发支付应用）。</strong></p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>开发者使用支付宝账号登录 <a href="https://openhome.alipay.com/develop/manage">开放平台控制台</a>（需实名认证的支付宝账号）。</p><h4 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h4><p>本文主要介绍 <strong>网页&#x2F;移动应用</strong> 创建流程，小程序、生活号和第三方应用请查看 <a href="https://opendocs.alipay.com/mini/introduce/create">创建小程序</a>、<a href="https://opendocs.alipay.com/fw/guide">创建生活号</a>、<a href="https://opendocs.alipay.com/isv/03kvcj">创建第三方应用</a>。</p><p><img src="/Resources/Pasted%20image%2020220808143820.png"></p><h4 id="填写应用基础信息"><a href="#填写应用基础信息" class="headerlink" title="填写应用基础信息"></a>填写应用基础信息</h4><p><img src="/Resources/Pasted%20image%2020220808144650.png"></p><h4 id="产品绑定"><a href="#产品绑定" class="headerlink" title="产品绑定"></a>产品绑定</h4><p><img src="/Resources/Pasted%20image%2020220808144812.png"></p><h3 id="绑定应用"><a href="#绑定应用" class="headerlink" title="绑定应用"></a>绑定应用</h3><p>以下需要登录登录 <a href="https://b.alipay.com/index2.htm">商家服务平台</a> 开通支付服务<br><img src="/Resources/Pasted%20image%2020220808151057.png"></p><p>查看pid<br><img src="/Resources/Pasted%20image%2020220808151139.png"></p><h4 id="官方文档的步骤（目前来看不需要了）"><a href="#官方文档的步骤（目前来看不需要了）" class="headerlink" title="官方文档的步骤（目前来看不需要了）"></a><del>官方文档的步骤</del>（目前来看不需要了）</h4><p>第一步：进入发起绑定入口<br>登录 <a href="https://b.alipay.com/page/home">商家平台</a> &gt; <strong>账号中心</strong> &gt; <strong>绑定</strong> &gt; <strong>APPID绑定</strong>，点击 <strong>添加绑定</strong>。</p><p>第二步：提交绑定申请<br>填写应用 APPID，点击 <strong>下一步</strong> 即可完成绑定。<br><strong>注意：</strong>同一主体账号绑定应用不会通知商家，且不同主体账号不支持绑定应用。</p><blockquote><p>官方文档是需要添加绑定的，但是我登录进来就自动绑定了</p></blockquote><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>进行开发设置<br><img src="/Resources/Pasted%20image%2020220808144921.png"></p><p>先下载安装好密钥生成器<br><img src="/Resources/Pasted%20image%2020220808145634.png"></p><p>打开后生成私钥和公钥<br><img src="/Resources/Pasted%20image%2020220808145836.png"></p><p>复制公钥<br><img src="/Resources/Pasted%20image%2020220808150104.png"></p><h4 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h4><p><img src="/Resources/Pasted%20image%2020220808150533.png"><br><img src="/Resources/Pasted%20image%2020220808150541.png"><br><img src="/Resources/Pasted%20image%2020220808150556.png"></p><h3 id="上线应用"><a href="#上线应用" class="headerlink" title="上线应用"></a>上线应用</h3><p>暂时省略</p><h3 id="开通产品"><a href="#开通产品" class="headerlink" title="开通产品"></a>开通产品</h3><p>暂时省略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;支付宝&quot;&gt;&lt;a href=&quot;#支付宝&quot; class=&quot;headerlink&quot; title=&quot;支付宝&quot;&gt;&lt;/a&gt;支付宝&lt;/h1&gt;&lt;p&gt;官方网站：&lt;a href=&quot;https://open.alipay.com/&quot;&gt;支付宝开放平台&lt;/a&gt;&lt;br&gt;开发文档：&lt;a hre</summary>
      
    
    
    
    <category term="支付SDK" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
    <category term="支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付宝支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 7.8实战</title>
    <link href="http://conquers.github.io/posts/7b1830e5.html"/>
    <id>http://conquers.github.io/posts/7b1830e5.html</id>
    <published>2022-08-04T03:09:05.000Z</published>
    <updated>2023-07-18T12:20:29.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于在项目中使用的是ElasticSearch7.8，之前学的是6.8的视频，大部分概念性内容在ElasticSearch6.8已经写过（基本上大差不差），不再赘述，但是7的接口相较于6发生了很大的变化，因此本文主要是实践部分！</p><ul><li><p>最新的参考文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/">Spring Data Elasticsearch - Reference Documentation</a></p></li><li><p>版本对应关系：<br><img src="/Resources/Pasted%20image%2020220804165455.png"></p></li></ul><h2 id="0、环境准备"><a href="#0、环境准备" class="headerlink" title="0、环境准备"></a>0、环境准备</h2><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Java</td><td>1.8</td></tr><tr><td>SpringData-ElasticSearch</td><td>4.3.3</td></tr><tr><td>ElasticSearch</td><td>7.8（没有使用对应的7.15.2是因为7.15.2太占内存）</td></tr><tr><td>Sringboot</td><td>2.6.6</td></tr></tbody></table><hr><h2 id="1、SpringBoot集成ElasticSearch"><a href="#1、SpringBoot集成ElasticSearch" class="headerlink" title="1、SpringBoot集成ElasticSearch"></a>1、SpringBoot集成ElasticSearch</h2><blockquote><p>以热词词频统计模块为基础实践</p></blockquote><p>思路一：通过前端传输的搜索内容分词，存到redis或者其他地方进行词频统计</p><p>思路二：通过前端传输的搜索内容存到Es，根据Es的分词结果（词频和词）存到redis</p><blockquote><p>以下使用思路二为主要思路</p></blockquote><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">repositories:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">uris:</span> <span class="hljs-string">http://localhost:9200</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">elastic</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">elastic</span><br></code></pre></td></tr></table></figure><p><code>RestClientConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAndPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9200&quot;</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(hostAndPort)<br>                .withBasicAuth(<span class="hljs-string">&quot;elastic&quot;</span>, <span class="hljs-string">&quot;elastic&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ElasticsearchRestTemplate <span class="hljs-title function_">elasticsearchRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//自定义ElasticsearchRestTemplate</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchRestTemplate</span>(elasticsearchClient());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建映射对象"><a href="#2、创建映射对象" class="headerlink" title="2、创建映射对象"></a>2、创建映射对象</h4><p>和访问数据库一样，统统以对象的形式访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;searchcontent&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContent</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Text, analyzer = &quot;ik_pinyin_analyzer&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Date, format = DateFormat.date_hour_minute_second)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、创建索引即映射"><a href="#3、创建索引即映射" class="headerlink" title="3、创建索引即映射"></a>3、创建索引即映射</h4><p><del>第一种：使用<code>ElasticsearchRestTemplate</code>创建索引</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br>    <span class="hljs-comment">// 如果索引已存在,删除索引</span><br>    <span class="hljs-keyword">if</span> (exists) &#123;<br>        <span class="hljs-comment">// 删除索引</span><br>        elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    &#125;<br>    <span class="hljs-comment">// 创建索引</span><br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br>    <span class="hljs-comment">// 创建映射</span><br>    <span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>    System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充：这里不使用这种方式，因为需要使用pinyin分词器，日常使用<code>@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</code>这种没有问题，但是涉及到自定义分词器就麻烦了</p></blockquote><p>第二种：使用<code>Kibana</code>创建索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT searchcontent<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;pinyin_filter&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;pinyin_filter&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>,<br>                    <span class="hljs-string">&quot;keep_first_letter&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_full_pinyin&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>:<span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_original&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;limit_first_letter_length&quot;</span> : 16,<br>                    <span class="hljs-string">&quot;lowercase&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese_in_first_letter&quot;</span> : <span class="hljs-literal">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>  &#125;,<br><span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;content&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>,<br><span class="hljs-string">&quot;fielddata&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br>  <span class="hljs-string">&quot;createTime&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、创建接口类"><a href="#4、创建接口类" class="headerlink" title="4、创建接口类"></a>4、创建接口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span>;<br><br>    List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实现类"><a href="#5、创建实现类" class="headerlink" title="5、创建实现类"></a>5、创建实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ElasticsearchRestTemplate elasticsearchRestTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EsSearchContentServiceImpl</span><span class="hljs-params">(ElasticsearchRestTemplate elasticsearchRestTemplate, RestHighLevelClient restHighLevelClient)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elasticsearchRestTemplate = elasticsearchRestTemplate;<br>        <span class="hljs-built_in">this</span>.restHighLevelClient = restHighLevelClient;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br>        <span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>        esSearchContent.setContent(message);<br>        esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        indexQuery.setObject(esSearchContent);<br>        elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;String&gt; hotWords = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//创建search请求</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>();<br>        searchRequest.indices(<span class="hljs-string">&quot;searchcontent&quot;</span>);<br>        <span class="hljs-comment">//生成DSL查询语句</span><br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>        <span class="hljs-comment">//构建查询条件</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoolQueryBuilder</span>();<br><br>        <span class="hljs-comment">//时间范围的设定</span><br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">rangequerybuilder</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;createTime&quot;</span>);<br>        rangequerybuilder.gte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        rangequerybuilder.lte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        boolQueryBuilder.filter(rangequerybuilder);<br><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        <span class="hljs-type">AggregationBuilder</span> <span class="hljs-variable">aggregation</span> <span class="hljs-operator">=</span> AggregationBuilders.terms(<span class="hljs-string">&quot;count&quot;</span>)<br>                .field(<span class="hljs-string">&quot;content&quot;</span>)<br>                .includeExclude(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IncludeExclude</span>(<span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span>, <span class="hljs-literal">null</span>))<br>                .minDocCount(<span class="hljs-number">3</span>);<br>        searchSourceBuilder.aggregation(aggregation);<br><br>        searchRequest.source(searchSourceBuilder);<br><br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>            <span class="hljs-type">Terms</span> <span class="hljs-variable">terms</span> <span class="hljs-operator">=</span> searchResponse.getAggregations().get(<span class="hljs-string">&quot;count&quot;</span>);<br>            List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; elasticBucket = terms.getBuckets();<br>            elasticBucket.forEach(hotWord -&gt; &#123;<br>                System.out.println(hotWord.getKeyAsString());<br>                hotWords.add(hotWord.getKeyAsString());<br><br>                System.out.println(hotWord.getDocCount());<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> hotWords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、插入数据"><a href="#6、插入数据" class="headerlink" title="6、插入数据"></a>6、插入数据</h4><p>这里的插入数据，即使用搜索服务（也可以使用kibana或者Springboot往里面直接插入数据）<br>分别发起三次搜索（因为上面进行分词的时候最少也要出现3次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;原装书籍&quot;</span>,...&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230718145331.png"></p><p>查询结果<br><img src="/Resources/Pasted%20image%2020230718145351.png"></p><p>在Kibana中查看存入的数据<br><img src="/Resources/Pasted%20image%2020230718145419.png"></p><hr><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><h4 id="1、使用Kibana进行词频统计"><a href="#1、使用Kibana进行词频统计" class="headerlink" title="1、使用Kibana进行词频统计"></a>1、使用Kibana进行词频统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /productindexwtt/_search<br>&#123;<br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [],<br>      <span class="hljs-string">&quot;should&quot;</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;messages&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;size&quot;</span>: 100,<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;content&quot;</span>,<br>        <span class="hljs-string">&quot;min_doc_count&quot;</span>: 3,<br>        <span class="hljs-string">&quot;include&quot;</span>: <span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试词频统计<br><img src="/Resources/Pasted%20image%2020230718145452.png"></p><h4 id="2、在Springboot中测试功能"><a href="#2、在Springboot中测试功能" class="headerlink" title="2、在Springboot中测试功能"></a>2、在Springboot中测试功能</h4><p>效果：<br><img src="/Resources/Pasted%20image%2020220804164859.png"></p><hr><h4 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h4><p>使用聚合搜索时，使用getAggregations()拿取数据时报错，排查分析后是版本问题：将Springboot版本降至2.3.3.RELEASE即可解决。</p><blockquote><p>由于项目版本不能动，因此这里不使用ElasticsearchTemplate进行聚合搜索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> searchHits.getAggregations();<br></code></pre></td></tr></table></figure><p>最后折中选择使用了RestHighLevelClient，代码见上。</p><h2 id="2、ElasticsearchTemplate的用法"><a href="#2、ElasticsearchTemplate的用法" class="headerlink" title="2、ElasticsearchTemplate的用法"></a>2、ElasticsearchTemplate的用法</h2><blockquote><p>在6.8中有<code>ElasticsearchRepository</code>和<code>RestHighLevelClient</code>的用法</p></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br><span class="hljs-comment">// 如果索引已存在,删除索引</span><br><span class="hljs-keyword">if</span> (exists) &#123;<br><span class="hljs-comment">// 删除索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>&#125;<br><span class="hljs-comment">// 创建索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br><span class="hljs-comment">// 创建映射</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除索引</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    System.out.println(<span class="hljs-string">&quot;是否删除成功 : &quot;</span> + deleted);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增文档数据"><a href="#新增文档数据" class="headerlink" title="新增文档数据"></a>新增文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增文档数据</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br><span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>esSearchContent.setContent(<span class="hljs-string">&quot;message&quot;</span>);<br>esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>indexQuery.setObject(esSearchContent);<br>elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br><span class="hljs-comment">//这里也可以使用下面的save</span><br>elasticsearchRestTemplate.save(esSearchContent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除文档数据"><a href="#删除文档数据" class="headerlink" title="删除文档数据"></a>删除文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除文档数据</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDoc</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 返回被删除的数据id</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.delete(<span class="hljs-string">&quot;IYzHaIIBQknQYDuAgCU-&quot;</span>, EsSearchContent.class);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询文档数据"><a href="#查询文档数据" class="headerlink" title="查询文档数据"></a>查询文档数据</h3><p>查询设计到很多方法，下面列举其中比较复杂的高亮查询，其他的皆可类比</p><blockquote><p>以下没有的方法可以去官网查看或者通过搜索引擎搜索得到</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> List&lt;EsProduct&gt; <span class="hljs-title function_">testSearch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 需要查询的字段</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()<br>                .must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;我是标题&quot;</span>));<br>        <br>        <span class="hljs-comment">// 分页 从第0页开始，每页10条数据</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br> <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">        构建高亮查询</span><br><span class="hljs-comment">        NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">                .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">                .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">                .withHighlightFields(</span><br><span class="hljs-comment">                        new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">                .withPageable(pageable)</span><br><span class="hljs-comment">                .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">                .build();</span><br><span class="hljs-comment">        */</span><br>        <br>    <span class="hljs-comment">//构建高亮查询</span><br>        <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>        searchQueryBuilder.withQuery(boolQueryBuilder);<br>        searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>        searchQueryBuilder.withPageable(pageable);<br>        searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 排序</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(rangeInDefined(searchSortType,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))&#123;<br>            sortByCondition(searchQueryBuilder,searchSortType);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 查询</span><br>        SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(searchQuery, EsProduct.class);<br>        <span class="hljs-comment">// 得到查询返回的内容</span><br>        List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>        <span class="hljs-comment">// 设置一个最后需要返回的实体类集合</span><br>        List&lt;EsProduct&gt; esProducts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 遍历返回的内容进行处理</span><br>        <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>            <span class="hljs-comment">// 高亮的内容</span><br>            Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>            <span class="hljs-comment">// 将高亮的内容填充到content中</span><br>            searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>            searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 放到实体类中</span><br>            esProducts.add(searchHit.getContent());<br>        &#125;<br>        <span class="hljs-keyword">return</span> esProducts;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><h5 id="问题1：should和must连用不起作用"><a href="#问题1：should和must连用不起作用" class="headerlink" title="问题1：should和must连用不起作用"></a>问题1：should和must连用不起作用</h5><p>参考文档：<a href="https://blog.csdn.net/qq_39818325/article/details/118578063">elasticsearch中的对象QueryBuilder同时使用should和must查询不成功</a><br>BoolQueryBuilder中的should和must一起用会出现问题：<br>解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码承接上述错误代码，新增下面一行 </span><br>boolQueryBuilder.minimumShouldMatch(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题2：rangeQuery不起作用"><a href="#问题2：rangeQuery不起作用" class="headerlink" title="问题2：rangeQuery不起作用"></a>问题2：rangeQuery不起作用</h5><p>解决问题：<br><strong>查看排序的字段是否是Integer或者其他数据类型</strong><br>创建索引的时候使用的是Keyword，修改为Integer好了</p><h5 id="问题3：有时候需要排序，有时候不需要排序"><a href="#问题3：有时候需要排序，有时候不需要排序" class="headerlink" title="问题3：有时候需要排序，有时候不需要排序"></a>问题3：有时候需要排序，有时候不需要排序</h5><p>代码替换成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">   构建高亮查询</span><br><span class="hljs-comment">   NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">           .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">           .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">           .withHighlightFields(</span><br><span class="hljs-comment">                   new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">           .withPageable(pageable)</span><br><span class="hljs-comment">           .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">           .build();</span><br><span class="hljs-comment">   */</span><br>   <br><span class="hljs-comment">//构建高亮查询</span><br>   <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>   searchQueryBuilder.withQuery(boolQueryBuilder);<br>   searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>   searchQueryBuilder.withPageable(pageable);<br>   searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="问题4：有些关键词不需要分词"><a href="#问题4：有些关键词不需要分词" class="headerlink" title="问题4：有些关键词不需要分词"></a>问题4：有些关键词不需要分词</h5><p>使用termQuery<br><code>.must(QueryBuilders.termQuery(&quot;title&quot;, &quot;我是标题&quot;));</code><br>如果一定要使用matchQuery，加上<code>.operator(Operator.AND</code><br><code>.must(QueryBuilders.matchQuery(&quot;title&quot;, &quot;我是标题&quot;).operator(Operator.AND));</code></p><h5 id="问题5：过滤分数太低的结果"><a href="#问题5：过滤分数太低的结果" class="headerlink" title="问题5：过滤分数太低的结果"></a>问题5：过滤分数太低的结果</h5><blockquote><p><strong>不要使用for循环遍历</strong><br>使用<code>withMinScore(1)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>searchQueryBuilder.withMinScore(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题6：-Test不能直接运行"><a href="#问题6：-Test不能直接运行" class="headerlink" title="问题6：@Test不能直接运行"></a>问题6：@Test不能直接运行</h5><p>类上面加了<code>@SpringBootTest</code><br>方法上面加了<code>@Test</code><br>但是不能运行，注意导包的路径应该为<code>import org.junit.jupiter.api.Test;</code><br><strong>否则不起作用</strong></p><h5 id="问题7：时间排序没数据"><a href="#问题7：时间排序没数据" class="headerlink" title="问题7：时间排序没数据"></a>问题7：时间排序没数据</h5><p>过滤最小分数的问题不知道为什么，去掉了<code>.withMinScore(1);</code>解决，但是又需要过滤最小分数。<br><img src="/Resources/Pasted%20image%2020220819164536.png"><br>但是为什么按照价格排序，却有数据返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> List&lt;SearchDto&gt; <span class="hljs-title function_">searchByKeyTitle</span><span class="hljs-params">(String title, String price, List&lt;String&gt; classType, List&lt;String&gt; publisherList, Integer typeInSearch,</span><br><span class="hljs-params">                                         String storeId, List&lt;String&gt; jointStoreList, <span class="hljs-type">int</span> searchSortType, <span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> packageType, String stockOfStore)</span> &#123;<br><br>     <span class="hljs-comment">// 构建搜索</span><br>     <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>     <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br><br>     <span class="hljs-comment">// 过滤</span><br>     conditionFilter(boolQueryBuilder, price, classType, publisherList, typeInSearch, storeId, jointStoreList, searchSortType, packageType, stockOfStore);<br>     searchQueryBuilder.withFilter(boolQueryBuilder);<br><br>     <span class="hljs-comment">// 分页</span><br>     <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(pageNo, pageSize);<br>     searchQueryBuilder.withPageable(pageable);<br><br>     <span class="hljs-comment">// 搜索</span><br>     List&lt;FunctionScoreQueryBuilder.FilterFunctionBuilder&gt; filterFunctionBuilders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">5</span>)));<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;author&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">10</span>)));<br>     FunctionScoreQueryBuilder.FilterFunctionBuilder[] builders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[filterFunctionBuilders.size()];<br>     filterFunctionBuilders.toArray(builders);<br>     <span class="hljs-type">FunctionScoreQueryBuilder</span> <span class="hljs-variable">functionScoreQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.functionScoreQuery(builders)<br>             .scoreMode(FunctionScoreQuery.ScoreMode.SUM)<br>             .setMinScore(<span class="hljs-number">2</span>);<br><br>     <span class="hljs-comment">// 排序</span><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 排序类型必须是在1-7的范围内，否则是参数错误</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-keyword">if</span> (rangeInDefined(searchSortType, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>)) &#123;<br>         sortByCondition(searchQueryBuilder, searchSortType);<br>     &#125;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 不管是什么排序类型，最后都要按照相关度二次排序</span><br><span class="hljs-comment">      */</span><br>     searchQueryBuilder.withSorts(SortBuilders.scoreSort().order(SortOrder.DESC));<br><br>     searchQueryBuilder.withQuery(functionScoreQueryBuilder);<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;author&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;publisherName&quot;</span>));<br>     searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>     <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> searchQueryBuilder.build();<br><br>     <span class="hljs-comment">//查询</span><br>     SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(build, EsProduct.class);<br>     <span class="hljs-comment">//得到查询返回的内容</span><br>     List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>     <span class="hljs-comment">//设置一个最后需要返回的实体类集合</span><br>     List&lt;SearchDto&gt; accurateSearch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-comment">//遍历返回的内容进行处理</span><br>     <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>         <span class="hljs-comment">//高亮的内容</span><br>         Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>         <span class="hljs-comment">//将高亮的内容填充到content中</span><br>         searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setPublisherName(highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getPublisherName() : highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>).get(<span class="hljs-number">0</span>));<br>         <span class="hljs-comment">// 封面图片拼接</span><br>         searchHit.getContent().setCoverPage(StringUtil.urlConnect(searchHit.getContent().getCoverPage(), StringUtil.PICTURE_TYPE_200));<br>         <span class="hljs-comment">//放到实体类中</span><br>         accurateSearch.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchDto</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Search</span>(searchHit.getContent())));<br>     &#125;<br>     System.out.println(accurateSearch);<br>     <span class="hljs-keyword">return</span> accurateSearch;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于在项目中使用的是ElasticSearch7.8，之前学的是6.8的视频，大部分概念性内容在ElasticSearch6.8已经写过（基</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
    <category term="SpringData" scheme="http://conquers.github.io/tags/SpringData/"/>
    
    <category term="SpringBoot" scheme="http://conquers.github.io/tags/SpringBoot/"/>
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>安装开发虚拟机</title>
    <link href="http://conquers.github.io/posts/cb06e7aa.html"/>
    <id>http://conquers.github.io/posts/cb06e7aa.html</id>
    <published>2022-07-20T08:09:50.000Z</published>
    <updated>2023-07-18T06:50:56.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装虚拟机"><a href="#1、安装虚拟机" class="headerlink" title="1、安装虚拟机"></a>1、安装虚拟机</h3><ul><li>安装VMware Workstation Pro：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation Pro | CN</a></li><li>安装其他虚拟机软件</li></ul><h3 id="2、虚拟机安装操作系统"><a href="#2、虚拟机安装操作系统" class="headerlink" title="2、虚拟机安装操作系统"></a>2、虚拟机安装操作系统</h3><h4 id="2-1-CentOs"><a href="#2-1-CentOs" class="headerlink" title="2.1 CentOs"></a>2.1 CentOs</h4><h5 id="1-下载CentOs"><a href="#1-下载CentOs" class="headerlink" title="1.下载CentOs"></a>1.下载CentOs</h5><ul><li>CentOs官网：<a href="https://www.centos.org/download/">https://www.centos.org</a></li><li>镜像下载地址：<a href="http://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso">iso.mirrors.ustc.edu.cn&#x2F;centos&#x2F;7.9.2009&#x2F;isos&#x2F;x86_64&#x2F;CentOS-7-x86_64-DVD-2009.iso</a></li></ul><h5 id="2-打开VMware，点击新建虚拟机"><a href="#2-打开VMware，点击新建虚拟机" class="headerlink" title="2.打开VMware，点击新建虚拟机"></a>2.打开VMware，点击新建虚拟机</h5><p><img src="/Resources/Pasted%20image%2020220720160950.png" alt="Resources/Pasted image 20220720160950.png"></p><h5 id="3-选择典型安装"><a href="#3-选择典型安装" class="headerlink" title="3.选择典型安装"></a>3.选择典型安装</h5><p><img src="/Resources/Pasted%20image%2020220720160957.png" alt="Resources/Pasted image 20220720160957.png"></p><h5 id="4-选择稍后安装操作系统"><a href="#4-选择稍后安装操作系统" class="headerlink" title="4.选择稍后安装操作系统"></a>4.选择稍后安装操作系统</h5><p>也可以选择第二个，只需要找到下载好的镜像文件就行。<br><img src="/Resources/Pasted%20image%2020220720161003.png" alt="Resources/Pasted image 20220720161003.png"></p><h5 id="5-选择操作系统"><a href="#5-选择操作系统" class="headerlink" title="5.选择操作系统"></a>5.选择操作系统</h5><p>这里选择Linux，版本根据镜像自行决定，因为这里安装的是CentOS 7 ，所以选择CentOS 7 64位<br><img src="/Resources/Pasted%20image%2020220720161010.png" alt="Resources/Pasted image 20220720161010.png"></p><h5 id="6-虚拟机命名"><a href="#6-虚拟机命名" class="headerlink" title="6.虚拟机命名"></a>6.虚拟机命名</h5><p><img src="/Resources/Pasted%20image%2020220720161020.png" alt="Resources/Pasted image 20220720161020.png"></p><h5 id="7-指定磁盘容量"><a href="#7-指定磁盘容量" class="headerlink" title="7.指定磁盘容量"></a>7.指定磁盘容量</h5><p><img src="/Resources/Pasted%20image%2020220720161028.png" alt="Resources/Pasted image 20220720161028.png"></p><h5 id="8-自定义硬件"><a href="#8-自定义硬件" class="headerlink" title="8.自定义硬件"></a>8.自定义硬件</h5><p><img src="/Resources/Pasted%20image%2020220720161036.png" alt="Resources/Pasted image 20220720161036.png"><br><img src="/Resources/Pasted%20image%2020220720161103.png" alt="Resources/Pasted image 20220720161103.png"></p><p><img src="/Resources/Pasted%20image%2020220720161111.png" alt="Resources/Pasted image 20220720161111.png"></p><h5 id="9-开启虚拟机"><a href="#9-开启虚拟机" class="headerlink" title="9.开启虚拟机"></a>9.开启虚拟机</h5><p><img src="/Resources/Pasted%20image%2020220720161346.png" alt="Resources/Pasted image 20220720161346.png"></p><h5 id="10-系统安装"><a href="#10-系统安装" class="headerlink" title="10.系统安装"></a>10.系统安装</h5><p>将鼠标点击虚拟机中的CentOS 7 系统后，使用键盘的上下键选择执行任务，按回车确定。</p><p><strong>（注：安装虚拟机的时候，如果鼠标在虚拟机内，是无法移到虚拟机外面的，即无法使用鼠标与物理机进行操作的，我们需要同时按住ctrl+alt健释放鼠标，这时，就可以在物理机进行操作了）</strong><br><img src="/Resources/Pasted%20image%2020220720161435.png" alt="Resources/Pasted image 20220720161435.png"></p><h5 id="11-选择语言"><a href="#11-选择语言" class="headerlink" title="11.选择语言"></a>11.选择语言</h5><p><img src="/Resources/Pasted%20image%2020220720161614.png" alt="Resources/Pasted image 20220720161614.png"></p><p><strong>11.软件选择</strong></p><p>默认为最小安装，最小安装的系统是dos界面（只有命令行的界面，和cmd一样）</p><p><strong>12.安装位置</strong><br><img src="/Resources/Pasted%20image%2020220720161755.png" alt="Resources/Pasted image 20220720161755.png"><br><img src="/Resources/Pasted%20image%2020220720161845.png" alt="Resources/Pasted image 20220720161845.png"></p><h5 id="12-root密码和创建普通用户"><a href="#12-root密码和创建普通用户" class="headerlink" title="12.root密码和创建普通用户"></a>12.root密码和创建普通用户</h5><p><img src="/Resources/Pasted%20image%2020220720162004.png" alt="Resources/Pasted image 20220720162004.png"><br><img src="/Resources/Pasted%20image%2020220720161943.png" alt="Resources/Pasted image 20220720161943.png"></p><p>完成后等待<br><img src="/Resources/Pasted%20image%2020220720162027.png" alt="Resources/Pasted image 20220720162027.png"><br><img src="/Resources/Pasted%20image%2020220720162323.png" alt="Resources/Pasted image 20220720162323.png"></p><h5 id="13-使用刚刚设置的密码即可登录"><a href="#13-使用刚刚设置的密码即可登录" class="headerlink" title="13.使用刚刚设置的密码即可登录"></a>13.使用刚刚设置的密码即可登录</h5><p><img src="/Resources/Pasted%20image%2020220720162500.png" alt="Resources/Pasted image 20220720162500.png"></p><h3 id="3、SSH连接虚拟机"><a href="#3、SSH连接虚拟机" class="headerlink" title="3、SSH连接虚拟机"></a>3、SSH连接虚拟机</h3><h4 id="虚拟机开启网卡"><a href="#虚拟机开启网卡" class="headerlink" title="虚拟机开启网卡"></a>虚拟机开启网卡</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163319.png" alt="Resources/Pasted image 20220720163319.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163216.png" alt="Resources/Pasted image 20220720163216.png"><br><img src="/Resources/Pasted%20image%2020220720163235.png" alt="Resources/Pasted image 20220720163235.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service network restart<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163357.png" alt="Resources/Pasted image 20220720163357.png"></p><h4 id="查看虚拟机的ip"><a href="#查看虚拟机的ip" class="headerlink" title="查看虚拟机的ip"></a>查看虚拟机的ip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720164333.png" alt="Resources/Pasted image 20220720164333.png"></p><h4 id="使用Xshell连接虚拟机"><a href="#使用Xshell连接虚拟机" class="headerlink" title="使用Xshell连接虚拟机"></a>使用Xshell连接虚拟机</h4><p>官网：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭&#x2F;学校免费 - NetSarang Website (xshell.com)</a></p><p><img src="/Resources/Pasted%20image%2020220720164345.png" alt="Resources/Pasted image 20220720164345.png"></p><h4 id="使用Final-Shell连接虚拟机"><a href="#使用Final-Shell连接虚拟机" class="headerlink" title="使用Final Shell连接虚拟机"></a>使用Final Shell连接虚拟机</h4><p>官网：<a href="http://www.hostbuf.com/t/988.html">FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS,Linux,版本3.9.8,更新时间2023.1.30 - SSH工具 SSH客户端 (hostbuf.com)</a></p><p><strong>连接成功</strong></p><p><img src="/Resources/image-20230415205209311.png" alt="image-20230415205209311"></p><h4 id="固定虚拟机的ip"><a href="#固定虚拟机的ip" class="headerlink" title="固定虚拟机的ip"></a>固定虚拟机的ip</h4><h5 id="一、搭建VMnet8虚拟局域网"><a href="#一、搭建VMnet8虚拟局域网" class="headerlink" title="一、搭建VMnet8虚拟局域网"></a>一、搭建VMnet8虚拟局域网</h5><p>打开VMware软件，点击编辑，点击列表中的虚拟网络编辑器<br>进入虚拟网络编辑器页面<br>点击右下角更改设置，选择VMnet8。<br><img src="/Resources/Pasted%20image%2020220729152928.png" alt="Resources/Pasted image 20220729152928.png"><br><img src="/Resources/Pasted%20image%2020220729152957.png" alt="Resources/Pasted image 20220729152957.png"><br><img src="/Resources/Pasted%20image%2020220729153059.png"></p><ul><li>选择NAT模式</li><li>勾选将主机虚拟适配器连接到此网络</li><li>取消DHCP服务</li></ul><p>点击NAT模式后面的<strong>NAT设置</strong>。</p><p><img src="/Resources/Pasted%20image%2020220729153453.png"><br>设置<strong>默认网关</strong>（后面会用到），该网关需要占用你划分的子网里面的一个IP地址，并且网关占用之后，不能再划分给该网络内其他主机。包括宿主机和虚拟机。记住该网关地址，在配置宿主机的VMnet8网卡时需要指定，添加一台新的虚拟机到该网络时同样需要指定。</p><h5 id="二、使用配置VMnet8虚拟网卡"><a href="#二、使用配置VMnet8虚拟网卡" class="headerlink" title="二、使用配置VMnet8虚拟网卡"></a>二、使用配置VMnet8虚拟网卡</h5><p>安装VMware软件之后，就会有VMnet8这个虚拟网卡。进入我们自己电脑的<strong>网络和Internet设置</strong>(右击网络图标)，进入更多网络适配器页面<br><img src="/Resources/Pasted%20image%2020220729153219.png"></p><p>就可以看到VMnet8这个虚拟网卡，我们首先配置一下网卡参数。右击VMnet8网卡，选择属性，双击IPv4协议进入编辑页面。</p><p><strong>默认网关选择刚刚在VM中填写的网关。</strong></p><blockquote><p>:下面不太清楚ip地址随便设了一个2，不知道为什么<br><del>IP地址：这个地方设置的IP地址，是宿主机访问VMnet8局域网内虚拟机时，宿主机使用的IP地址，代表宿主机在VMnet8虚拟网络中的地址，需要注意的是他并不是网关，并且不能使用已经分配给网关的地址。它需要单独占用一个VMnet8局域网内的主机地址，供宿主机使用。让VMnet8网络中的虚拟机可以看到宿主机，宿主机也可以看到虚拟机。</del></p></blockquote><p><img src="/Resources/Pasted%20image%2020220729160532.png"></p><p><img src="/Resources/Pasted%20image%2020230414094919.png"></p><h5 id="三、配置虚拟机网卡"><a href="#三、配置虚拟机网卡" class="headerlink" title="三、配置虚拟机网卡"></a>三、配置虚拟机网卡</h5><p>IP addr查看网卡名称<br><img src="/Resources/Pasted%20image%2020220729161206.png"></p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220729155603.png"></p><blockquote><p>需要加上DNS1&#x3D;114.114.114.114, DNS2&#x3D;8.8.8.8，不然会出现某些问题<strong>（使用docker，必须要做这一步，docker拉取镜像失败）</strong></p></blockquote><p>重启网络</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart network</span><br></code></pre></td></tr></table></figure><p>宿主机虚拟机相互ping<br>windows：查看ip：<code>ipconfig</code><br>centOs：查看ip：<code>ip addr</code></p><h4 id="ip失效"><a href="#ip失效" class="headerlink" title="ip失效"></a>ip失效</h4><p>尝试重启网络报错<br><img src="/Resources/Pasted%20image%2020220817162203.png"></p><blockquote><p>参考连接：<a href="https://blog.csdn.net/VariatioZbw/article/details/107482739">解决 Linux 网络 “Job for network.service failed because the control process exite”问题_zhangbw~的博客-CSDN博客</a><br><code>service NetworkManager stop</code> 解决</p></blockquote><blockquote><p>VMware 主机ping不通虚拟机的解决方法 （但是虚拟机可以ping主机）</p></blockquote><p>重启一下vm net8网卡<br><img src="/Resources/Pasted%20image%2020230413232524.png"></p><h3 id="4、虚拟机安装Java"><a href="#4、虚拟机安装Java" class="headerlink" title="4、虚拟机安装Java"></a>4、虚拟机安装Java</h3><h4 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h4><p>CentOS系统默认安装了openjdk的(如果操作系统不是最小安装)，需要卸载。<br><a href="https://www.cnblogs.com/insomina/p/15701444.html">CentOS安装Java JDK - 子非鱼灬亦非我 - 博客园</a></p><h4 id="使用rpm安装"><a href="#使用rpm安装" class="headerlink" title="使用rpm安装"></a>使用rpm安装</h4><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a><br><img src="/Resources/Pasted%20image%2020220720154430.png" alt="Resources/Pasted image 20220720154430.png"></p><h5 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h5><h5 id="2、创建目录"><a href="#2、创建目录" class="headerlink" title="2、创建目录"></a>2、创建目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br><span class="hljs-built_in">mkdir</span> java<br><span class="hljs-built_in">cd</span> java<br></code></pre></td></tr></table></figure><h5 id="3、传输镜像至虚拟机"><a href="#3、传输镜像至虚拟机" class="headerlink" title="3、传输镜像至虚拟机"></a>3、传输镜像至虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># windows向linux虚拟机传输文件</span><br>yum install lrzsz -y<br><br>rz<br></code></pre></td></tr></table></figure><h5 id="4、使用RPM安装镜像"><a href="#4、使用RPM安装镜像" class="headerlink" title="4、使用RPM安装镜像"></a>4、使用RPM安装镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ivh jdk-8u341-linux-x64.rpm<br><span class="hljs-comment"># 安装后的路径为: /usr/java/jdk1.8.0_341-amd64</span><br><span class="hljs-comment"># -i = install</span><br><span class="hljs-comment"># vh = 显示安装进度</span><br></code></pre></td></tr></table></figure><h5 id="5、配置环境变量"><a href="#5、配置环境变量" class="headerlink" title="5、配置环境变量"></a>5、配置环境变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br><br>JAVA_HOME=/usr/local/java//usr/java/jdk1.8.0_341-amd64<br>CLASSPATH=.:%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JAVA_HOME</span>/jre/bin<br><span class="hljs-built_in">export</span> PATH CLASSPATH JAVA_HOME<br></code></pre></td></tr></table></figure><h5 id="6、source让新增环境生效"><a href="#6、source让新增环境生效" class="headerlink" title="6、source让新增环境生效"></a>6、source让新增环境生效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h5 id="7、测试java-version"><a href="#7、测试java-version" class="headerlink" title="7、测试java -version"></a>7、测试java -version</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java version <span class="hljs-string">&quot;1.8.0_341&quot;</span><br>Java(TM) SE Runtime Environment (build 1.8.0_341-b10)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.341-b10, mixed mode)<br></code></pre></td></tr></table></figure><hr><p>以下是废弃方案</p><p><del>使用yum安装</del><br>安装jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure><blockquote><p>java-1.8.0-openjdk：只有运行环境，java安装目录下只有jre文件夹<br>java-1.8.0-openjdk-devel：开发环境<br>参考：<a href="https://blog.csdn.net/woshimeihuo/article/details/90608081">Fetching Title#ytt6</a></p></blockquote><p>配置环境变量</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs profile"># java_home的路径可能不同，需要到你电脑里的位置，java_home的路径一般在/usr/lib/jvm/，文件的名字可能不同，改成你里面的名字就好，如下图所示<br>export JAVA_HOME=/usr/lib/jvm/java<span class="hljs-number">-1.8</span><span class="hljs-number">.0</span>-openjdk<span class="hljs-number">-1.8</span><span class="hljs-number">.0</span><span class="hljs-number">.121</span><span class="hljs-number">-0.</span>b13.el7_3.x86_64<br><br>export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> <br>export PATH=$PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>保存关闭后，执行命令让设置立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="5、虚拟机安装git"><a href="#5、虚拟机安装git" class="headerlink" title="5、虚拟机安装git"></a>5、虚拟机安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装git</span><br>yum -y install git<br></code></pre></td></tr></table></figure><h3 id="6、虚拟机安装Docker"><a href="#6、虚拟机安装Docker" class="headerlink" title="6、虚拟机安装Docker"></a>6、虚拟机安装Docker</h3><h4 id="在CentOs上安装Docker"><a href="#在CentOs上安装Docker" class="headerlink" title="在CentOs上安装Docker"></a>在CentOs上安装Docker</h4><ul><li><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></li><li><p>卸载原始docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils<br></code></pre></td></tr></table></figure><p> 鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。执行下面的命令添加 <code>yum</code> 软件源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 官方源</span><br><span class="hljs-comment"># $ sudo yum-config-manager \</span><br><span class="hljs-comment">#     --add-repo \</span><br><span class="hljs-comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span><br></code></pre></td></tr></table></figure></li><li><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker<br>systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>测试 Docker 是否安装正确</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> hello-world<br><br>Unable to find image <span class="hljs-string">&#x27;hello-world:latest&#x27;</span> locally<br>latest: Pulling from library/hello-world<br>b8dfde127a29: Pull complete<br>Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latest<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash<br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><blockquote><p>执行docker run命令带<code>--rm</code>命令选项，等价于在容器退出后，执行<code>docker rm -v</code><br>  若能正常输出以上信息，则说明安装成功。</p></blockquote></li></ul><h4 id="配置docker镜像加速服务"><a href="#配置docker镜像加速服务" class="headerlink" title="配置docker镜像加速服务"></a>配置docker镜像加速服务</h4><p> 阿里云 - 控制台 - 容器镜像服务</p><p><img src="/Resources/image-20230601151355484.png" alt="image-20230601151355484"></p><p>依次执行下面的命令<br><img src="/Resources/image-20230601151421570.png" alt="image-20230601151421570"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://地址.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>使用 <code>docker info</code> 确认是否成功</p><h4 id="docker-安装容器"><a href="#docker-安装容器" class="headerlink" title="docker 安装容器"></a>docker 安装容器</h4><p><a href="https://conquers.github.io/posts/dcb3f659.html">Docker 安装容器合集</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、安装虚拟机&quot;&gt;&lt;a href=&quot;#1、安装虚拟机&quot; class=&quot;headerlink&quot; title=&quot;1、安装虚拟机&quot;&gt;&lt;/a&gt;1、安装虚拟机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装VMware Workstation Pro：&lt;a href=&quot;https://ww</summary>
      
    
    
    
    
    <category term="虚拟机" scheme="http://conquers.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 6.x使用教程</title>
    <link href="http://conquers.github.io/posts/d5bb74c6.html"/>
    <id>http://conquers.github.io/posts/d5bb74c6.html</id>
    <published>2022-07-19T03:31:39.000Z</published>
    <updated>2023-07-18T02:37:49.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p><img src="/Resources/elastic.png"></p><h2 id="🛬全文检索"><a href="#🛬全文检索" class="headerlink" title="🛬全文检索"></a>🛬全文检索</h2><p><strong>全文检索</strong>是计算机程序通过<strong>扫描</strong>文章中的每一个词，对每一个词<strong>建立</strong>一个索引，指明该词在文章中出现的<strong>次数</strong>和<strong>位置</strong>。当用户查询时根据建立的索引查找，类似于通过字典的检索字表查字的过程。</p><p>检索：</p><ul><li>索：(<em>建立</em> 索引) </li><li>检：(<em>检索</em> 索引)</li></ul><p>全文检索（Full-Text Retrieval(检索））以文本作为检索对象，找出含有指定词汇的文本。<strong>全面、准确和快速是衡量全文检索系统的关键指标。</strong></p><p>关于全文检索，我们要知道：</p><ol><li><p>只处理<em>文本</em>。</p></li><li><p>不处理<em>语义</em>。</p></li><li><p>搜索时英文<em>不区分大小写</em>。</p></li><li><p>结果列表有<em>相关度排序</em>。</p></li></ol><hr><h2 id="🚁Elastic-Search"><a href="#🚁Elastic-Search" class="headerlink" title="🚁Elastic Search"></a>🚁Elastic Search</h2><p><img src="/Resources/Pasted%20image%2020220720115306.png" alt="Resources/Pasted image 20220720115306.png"><br>官方网站：<a href="https://www.elastic.co/cn/">免费且开放的搜索：Elasticsearch、ELK 和 Kibana 的开发者 | Elastic</a><br>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html">Elasticsearch Guide | Elastic</a></p><p><strong>ElasticSearch</strong> 简称 <em>ES</em> ，是<strong>基于Apache Lucene构建的开源搜索引擎，是当前流行的企业级搜索引擎。</strong>Lucene本身就可以被认为迄今为止性能最好的一款开源搜索引擎工具包，但是Lucene的API相对复杂，需要深厚的搜索理论。很难集成到实际的应用中去。<strong>但是ES是采用java语言编写，提供了简单易用的RestFul API，开发者可以使用其简单的RestFul API，开发相关的搜索功能，从而避免Lucene的复杂性。</strong></p><h3 id="ES的应用场景"><a href="#ES的应用场景" class="headerlink" title="ES的应用场景"></a>ES的应用场景</h3><p><strong>ES主要以轻量级JSON作为数据存储格式，这点与MongoDB有点类似，但它在读写性能上优于 MongoDB 。同时也支持地理位置查询，还方便地理位置和文本混合查询 。 以及在统计、日志类数据存储和分析、可视化这方面是引领者。</strong></p><ul><li><p>国外:<br><em>Wikipedia</em>(维基百科)使用ES提供全文搜索并高亮关键字、<em>StackOverflow</em>(IT问答网站)结合全文搜索与地理位置查询、<em>Github</em>使用Elasticsearch检索1300亿行的代码。</p></li><li><p>国内:<br>百度(在云分析、网盟、预测、文库、钱包、风控等业务上都应用了ES，单集群每天导入30TB+数据， 总共每天60TB+)、新浪 、阿里巴巴、腾讯等公司均有对ES的使用。</p></li></ul><p>&#x3D;&#x3D;使用比较广泛的平台ELK(ElasticSearch, Logstash, Kibana)。&#x3D;&#x3D;</p><hr><h2 id="🪐安装ElasticSearch"><a href="#🪐安装ElasticSearch" class="headerlink" title="🪐安装ElasticSearch"></a>🪐安装ElasticSearch</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="http://localhost:4000/posts/dcb3f659.html#elasticsearch">Docker 安装 Elasticsearch</a></p><hr><h2 id="🌌ElasticSearch-基本概念"><a href="#🌌ElasticSearch-基本概念" class="headerlink" title="🌌ElasticSearch 基本概念"></a>🌌ElasticSearch 基本概念</h2><ul><li><p><strong>1、接近实时(NRT Near Real Time)</strong><br>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟(通常是 <em>1秒内</em> )</p></li><li><p><strong>2、索引(index)</strong><br><em>一个索引就是一个拥有几分相似特征的文档的集合</em>。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。<em>索引类似于关系型数据库中 Database 的概念</em>。在一个集群中，如果你想，可以定义任意多的索引。</p></li><li><p><strong>3、类型(type)</strong><br><em>在一个索引中，你可以定义一种或多种类型</em>。一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。<em>类型类似于关系型数据库中Table的概念</em>。</p><blockquote><p>NOTE: 在5.x版本以前可以在一个索引中定义多个类型,6.x之后版本也可以使用,但是不推荐,在7~8.x版本中彻底移除一个索引中创建多个类型</p></blockquote></li><li><p><strong>4、映射(Mapping)</strong><br><em>Mapping</em>是ES中的一个很重要的内容，<em>它类似于传统关系型数据中table的schema，用于定义一个索引(index)中的类型(type)的数据的结构</em>。 在ES中，我们可以手动创建type(相当于table)和mapping(相关与schema),也可以采用默认创建方式。在默认配置下，ES可以根据插入的数据自动地创建type及其mapping。 <em>mapping中主要包括字段名、字段数据类型和字段索引类型</em></p></li></ul><p><strong>5、文档(document)</strong><br>一个文档是一个可被索引的<em>基础信息单元</em>，<em>类似于表中的一条记录</em>。比如，你可以拥有某一个员工的文档，也可以拥有某个商品的一个文档。文档以采用了轻量级的数据交换格式JSON(JavaScript Object Notation)来表示。</p><p><img src="/Resources/Pasted%20image%2020220721085020.png" alt="Resources/Pasted image 20220721085020.png"></p><h3 id="索引库底层原理分析"><a href="#索引库底层原理分析" class="headerlink" title="索引库底层原理分析"></a>索引库底层原理分析</h3><p>ElasticSearch 对于不同的服务建立了不同的索引，每个索引又创建了类型（6以后只能创建一个），同时对类型进行了约束，现在我们往ES中索引文档，它内部是怎样工作的呢？<br><img src="/Resources/Pasted%20image%2020220725114905.png"></p><ul><li><p>现在我们添加按照其类型的约束添加“张三”这条数据，ES拿到这条数据</p></li><li><p>首先把整个文档进行储存在元数据区，同时会生成对应的”_id”，比如这里为0，到时候我们拿0去查询，就可以得到这个文档；</p></li><li><p>然后按照分词器（所谓分词器就是对你输入的数据，按照一定的规则进行划分，这里以标准分词器为例）进行划分，因为name属性是”text”类型，所以需要分词，按照规则，进行单字划分，先分“张”，然后记录这个字在右边哪个文档中出现，同时出现了几次（当然这里只是简单列举一下，实际情况可能更复杂），再分“三”，一样的操作；接下来是”age”属性，因为age是”Integer”类型，所以不需要分词，直接存储，记录。一直如此操作，直到对输入的数据完成…</p></li><li><p>现在我们要插入第二条数据，同样是现在元数据区进行储存，为其分配”_id”，然后是索引区操作，现在”张”这个字不仅在0文档出现，也出现在1文档。</p></li><li><p>需求： 现在用户想要查找address为”北京”的文档，ES会进行两次搜索，先是在索引区（分词后存放的数据）找到相匹配的文档的”id”，再是按照”id”去找到元数据区对应的文档，最后按照：比如在0文档出现的次数多，就把0文档排在前面，展示给用户。</p></li><li><p><strong>总结： 索引库储存数据，分为索引区和元数据区，元数据区储存完整文档，索引区存放分词过后的数据</strong></p></li></ul><hr><h2 id="🌈Kibana"><a href="#🌈Kibana" class="headerlink" title="🌈Kibana"></a>🌈Kibana</h2><p>Kibana是一个针对Elasticsearch的开源分析及<strong>可视化平台</strong>，使用Kibana可以查询、查看并与存储在ES索引的数据进行交互操作，使用Kibana能执行高级的数据分析，并能以图表、表格和地图的形式查看数据。</p><blockquote><p>Kibana版本和ElasticSearch版本必须一致！</p></blockquote><p><a href="http://localhost:4000/posts/dcb3f659.html#Kibana">Docker 安装 Kibana</a></p><h3 id="Kibana基本操作"><a href="#Kibana基本操作" class="headerlink" title="Kibana基本操作"></a>Kibana基本操作</h3><h4 id="整体界面"><a href="#整体界面" class="headerlink" title="整体界面"></a>整体界面</h4><p><img src="/Resources/Pasted%20image%2020220721112115.png" alt="Resources/Pasted image 20220721112115.png"></p><p><strong>PUT 创建索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721112724.png" alt="Resources/Pasted image 20220721112724.png"></p><blockquote><p>弃用：在7.0.0中，默认备份数将从[5]更改为[1]；如果希望继续使用默认的[5]个备份，则必须在创建索引请求或使用索引模板进行管理</p></blockquote><p>使用下面的命令，则不会报警告🟥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: 1,<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：索引的名字必须是小写！<br><img src="/Resources/Pasted%20image%2020220721113056.png" alt="Resources/Pasted image 20220721113056.png"></p></blockquote><p><strong>DELETE 删除索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除单个索引</span><br>DELETE /ems<br><br><span class="hljs-comment">#删除所有索引</span><br>DELETE /*<br></code></pre></td></tr></table></figure><p><strong>GET 查看索引信息</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /_cat/indices?v<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721114628.png" alt="Resources/Pasted image 20220721114628.png"></p><blockquote><p>red -&gt; 索引不可用<br>yellow -&gt;索引不健壮<br>green -&gt;索引健壮</p></blockquote><hr><h4 id="类型Type-和-映射Mapping"><a href="#类型Type-和-映射Mapping" class="headerlink" title="类型Type 和 映射Mapping"></a>类型Type 和 映射Mapping</h4><p><strong>创建索引时并创建类型</strong><br>其中emp是类型，id，name，age，bir是emp类型的四个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems <br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;id&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125; <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721141543.png" alt="Resources/Pasted image 20220721141543.png"></p><blockquote><p>Mapping Type：<strong>text, keyword, date, integer, long, double, boolean or ip</strong></p></blockquote><p><strong>查看创建索引以及索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142029.png" alt="Resources/Pasted image 20220721142029.png"></p><p><strong>只查看索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/_mapping<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142144.png" alt="Resources/Pasted image 20220721142144.png"></p><hr><h4 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h4><p><strong>插入一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档操作：</span><br><span class="hljs-comment"># 插入一条文档 PUT /索引/类型/1</span><br>PUT /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>:23,<br>  <span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142647.png" alt="Resources/Pasted image 20220721142647.png"></p><p><strong>查询一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142717.png" alt="Resources/Pasted image 20220721142717.png"></p><p><strong>删除一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>DELETE /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721143532.png" alt="Resources/Pasted image 20220721143532.png"></p><p><strong>更新一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721152834.png" alt="Resources/Pasted image 20220721152834.png"><br><img src="/Resources/Pasted%20image%2020220721152918.png" alt="Resources/Pasted image 20220721152918.png"></p><blockquote><p>如果像这样更新的话，不会保留原始数据（<strong>先删除，再插入</strong>）<br>可以使用下面的方式，保留原始数据！而且还可以新添加新的字段！（缺点是会自动匹配字段类型，不太准确）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>  &#125;<br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721153237.png" alt="Resources/Pasted image 20220721153237.png"><br><img src="/Resources/Pasted%20image%2020220721153251.png" alt="Resources/Pasted image 20220721153251.png"></p><p><strong>使用脚本更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每次给age+5</span><br>POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;ctx._source.age+=5&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><blockquote><p>批量时不会因为一个失败而全部失败,而是继续执行后续操作,批量在返回时按照执行的状态开始返回</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档批量操作 _bulk</span><br><span class="hljs-comment"># 添加(index) 删除(delete) 更新(update)</span><br>PUT /ems/emp/_bulk<br>&#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhang&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2011-11-11&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;delete&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;update&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;doc&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:18,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-11-12&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721154934.png" alt="Resources/Pasted image 20220721154934.png"></p><hr><h2 id="🌋ES高级检索Query"><a href="#🌋ES高级检索Query" class="headerlink" title="🌋ES高级检索Query"></a>🌋ES高级检索Query</h2><p>ES官方提供了两中检索方式：</p><ul><li><ol><li>通过 URL 参数进行搜索<br><code>GET /索引/类型/_search ?参数</code></li></ol></li><li><ol start="2"><li>通过 DSL(Domain Specified Language) 进行搜索<br><code>GET /索引/类型/_search &#123;&#125;</code></li></ol></li></ul><p>官方更推荐使用<strong>第二种方式</strong>，第二种方式是基于传递JSON作为请求体(request body)格式与ES进行交互，这种方式更强大，更简洁。<br><img src="/Resources/Pasted%20image%2020220725095720.png"></p><p>以下只展示大部分的命令，更多请查看官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl.html">Query DSL | Elasticsearch Guide [6.8] | Elastic</a></p><h4 id="构建测试数据"><a href="#构建测试数据" class="headerlink" title="构建测试数据"></a>构建测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.删除索引</span><br>DELETE /ems<br><br><span class="hljs-comment"># 2.创建索引并指定类型</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 3.插入测试数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="URL检索"><a href="#URL检索" class="headerlink" title="URL检索"></a>URL检索</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /ems/emp/_search?<span class="hljs-attribute">q</span>=*&amp;sort=age:desc&amp;size=5&amp;from=0&amp;_source=name,age,bir<br><br>_search：搜索的API<br><br><span class="hljs-attribute">q</span>=* ：匹配所有文档<br><br><span class="hljs-attribute">sort</span>=age：按照指定字段进行排序，默认为升序，:desc 降序排列<br><br>size：展示多少条数据<br><br><span class="hljs-keyword">from</span>：展示第几页<br><br>_source：只匹配哪些字段<br></code></pre></td></tr></table></figure><h4 id="DSL检索"><a href="#DSL检索" class="headerlink" title="DSL检索"></a>DSL检索</h4><h5 id="1-查询所有-match-all"><a href="#1-查询所有-match-all" class="headerlink" title="1. 查询所有(match_all)"></a>1. 查询所有(match_all)</h5><p><strong>match_all关键字</strong>：返回索引中的全部文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-对查询结果进行排序-sort"><a href="#2-对查询结果进行排序-sort" class="headerlink" title="2. 对查询结果进行排序(sort)"></a>2. 对查询结果进行排序(sort)</h5><blockquote><p>keyword类型不能作为排序依据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果以keyword类型的进行排序则会出现错误</span><br>GET /ems/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-查询结果中返回指定条数-size"><a href="#3-查询结果中返回指定条数-size" class="headerlink" title="3. 查询结果中返回指定条数(size)"></a>3. 查询结果中返回指定条数(size)</h5><p><strong>size 关键字</strong>：指定查询结果中返回指定条数。 <strong>默认返回值10条</strong><br>是对查询的结果进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-分页查询-from"><a href="#4-分页查询-from" class="headerlink" title="4. 分页查询(from)"></a>4. 分页查询(from)</h5><p><strong>from 关键字</strong>：用来指定起始返回位置，和size关键字连用可实现分页效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5,<br>  <span class="hljs-string">&quot;from&quot;</span>: 0<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-查询结果中返回指定字段-source"><a href="#5-查询结果中返回指定字段-source" class="headerlink" title="5. 查询结果中返回指定字段(_source)"></a>5. 查询结果中返回指定字段(_source)</h5><p><strong>_source 关键字</strong>：是一个数组,在数组中用来指定展示那些字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 展示单个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-string">&quot;name&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 展示多个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-关键词查询-term"><a href="#6-关键词查询-term" class="headerlink" title="6. 关键词查询(term)"></a>6. 关键词查询(term)</h5><p><strong>term 关键字</strong>：用来使用关键词查询</p><blockquote><p> 还有一个terms，多关键词查询</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># name 是text类型，会进行分词，所以name包含“张”的文档都行</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># bir 是date类型，不会进行分词，所以只能输入全部进行查询</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;2012-12&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：<br><strong>NOTE1</strong>：通过使用term查询得知ES中默认使用分词器为标准分词器(Standard Analyzer),标准分词器对于<strong>英文单词分词</strong>，对于<strong>中文单字分词</strong>。<br>（标准分词器不适合中文）</p><p><strong>NOTE2</strong>：通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词，只有<strong>text类型分词</strong>。<br>（查看分词的效果逻辑使用 <code>GET /_analyze &#123;&quot;text&quot;:&quot;redis is open source db&quot;&#125;</code><br><code>GET /_analyze &#123;&quot;text&quot;:&quot;Java 是一个跨平台的产品&quot;&#125;</code>)</p></blockquote><h5 id="7-范围查询-range"><a href="#7-范围查询-range" class="headerlink" title="7. 范围查询(range)"></a>7. 范围查询(range)</h5><p><strong>range 关键字</strong>：用来指定查询指定范围内的文档</p><blockquote><p>只是针对一些特殊的字段比如age等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询age&gt;=5,&lt;=10的文档</span><br><span class="hljs-comment"># gte &gt;=</span><br><span class="hljs-comment"># lte &lt;=</span><br><span class="hljs-comment"># gt &gt;</span><br><span class="hljs-comment"># le &lt;</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>        <span class="hljs-string">&quot;lte&quot;</span>: 10<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-前缀查询-prefix"><a href="#8-前缀查询-prefix" class="headerlink" title="8. 前缀查询(prefix)"></a>8. 前缀查询(prefix)</h5><p><strong>prefix 关键字</strong>：用来检索含有指定前缀的关键词的相关文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 指定的前缀并不是说元数据文档中name属性以”张”为前缀的，而是匹配的经过分词器分词后索引区的数据，这里”张无忌”经过分词后为：“张”,“无”,“忌”，无论匹配到哪个都会指向那份文档</p></blockquote><h5 id="9-通配符查询-wildcard"><a href="#9-通配符查询-wildcard" class="headerlink" title="9. 通配符查询(wildcard)"></a>9. 通配符查询(wildcard)</h5><p><strong>wildcard 关键字</strong>：通配符查询 ? 用来匹配一个任意字符 * 用来匹配多个任意字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;wildcard&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的匹配也是针对索引区里面的数据</p></blockquote><h5 id="10-多id查询-ids"><a href="#10-多id查询-ids" class="headerlink" title="10. 多id查询(ids)"></a>10. 多id查询(ids)</h5><p><strong>ids 关键字</strong>：值为数组类型,用来根据一组id获取多个对应的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;values&quot;</span>: [<span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<span class="hljs-string">&quot;BVSspHYBh-o7eO8i7bUf&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="11-模糊查询-fuzzy"><a href="#11-模糊查询-fuzzy" class="headerlink" title="11. 模糊查询(fuzzy)"></a>11. 模糊查询(fuzzy)</h5><p><strong>fuzzy 关键字</strong>: 用来模糊查询含有指定关键字的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;fuzzy&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;sprin&quot;</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment"># 这里搜索的关键词长度为5，允许一次模糊，索引区的数据为spring能相应匹配，刚好差1</span><br></code></pre></td></tr></table></figure><blockquote><p>模糊查询的规则： fuzzy 模糊查询 <strong>最大模糊错误 必须在0-2之间</strong><br>搜索关键词长度 <strong>小于2</strong> 不允许存在模糊（必须精确匹配，不允许错误）<br>搜索关键词长度为<strong>3-5</strong> 允许一次模糊（最多一次错误）<br>搜索关键词长度 <strong>大于5</strong> 允许两次模糊（最多两次错误））</p></blockquote><h5 id="12-布尔查询-bool"><a href="#12-布尔查询-bool" class="headerlink" title="12. 布尔查询(bool)"></a>12. 布尔查询(bool)</h5><p><strong>bool 关键字</strong>：用来组合多个条件实现复杂查询</p><ul><li><p>must: 相当于&amp;&amp;同时成立（and）</p></li><li><p>should: 相当于|| 成立一个就行（or）</p></li><li><p>must_not: 相当于! 不能满足任何一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>              <span class="hljs-string">&quot;lte&quot;</span>: 10<br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;南&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="13-高亮查询-highlight"><a href="#13-高亮查询-highlight" class="headerlink" title="13. 高亮查询(highlight)"></a>13. 高亮查询(highlight)</h5><p><strong>highlight 关键字</strong>：可以让符合条件的文档中的关键词高亮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果中：<br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;oGsdM4IBp8eFhO_IzLHc&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;em&gt;五&lt;/em&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br><br><span class="hljs-comment"># &quot;*&quot;:&#123;&#125;    代表所有地方只要包含查询的词都高亮</span><br><span class="hljs-comment"># &quot;name&quot;:&#123;&#125; 只有name包含查询的词高亮</span><br></code></pre></td></tr></table></figure><blockquote><p>highlight 是对查询后的结果进行高亮，所以要放在”query”之后进行，同时，并不是在原数据上进行操作，而是新增了一段highlight，并为需要高亮的地方增加标签。（默认是<code>&lt;em&gt;斜体&lt;/em&gt;</code>）</p></blockquote><blockquote><p>自定义高亮html标签: 可以在highlight中使用pre_tags和post_tags</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;span style=&#x27;color:red&#x27;&gt;五&lt;/span&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h5 id="14-多字段查询-multi-match"><a href="#14-多字段查询-multi-match" class="headerlink" title="14. 多字段查询(multi_match)"></a>14. 多字段查询(multi_match)</h5><p>有时候光进行一项字段匹配体验效果并不是很好，所以可以同时多字段匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国&quot;</span>,              <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>]  <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h5 id="15-多字段分词查询-query-string"><a href="#15-多字段分词查询-query-string" class="headerlink" title="15. 多字段分词查询(query_string)"></a>15. 多字段分词查询(query_string)</h5><p>该关键词可以增加分词器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /dangdang/book/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;query_string&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国声音&quot;</span>,          <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,   <span class="hljs-comment"># 分词器</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>] <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h2 id="🌄IK分词器"><a href="#🌄IK分词器" class="headerlink" title="🌄IK分词器"></a>🌄IK分词器</h2><p>默认ES中采用标准分词器进行分词，这种方式并不适用于中文网站，因此需要修改ES对中文友好分词,从而达到更佳的搜索的效果。<br>官方网站：<a href="https://github.com/medcl/elasticsearch-analysis-ik">GitHub - medcl&#x2F;elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary.</a></p><h3 id="在线安装IK"><a href="#在线安装IK" class="headerlink" title="在线安装IK"></a>在线安装IK</h3><p>v5.5.1版本后开始支持在线安装 </p><h4 id="0、进入elasticsearch目录"><a href="#0、进入elasticsearch目录" class="headerlink" title="0、进入elasticsearch目录"></a>0、进入elasticsearch目录</h4><p><code>docker exec -it elasticsearch bash</code></p><h4 id="1、删除ES原始数据"><a href="#1、删除ES原始数据" class="headerlink" title="1、删除ES原始数据"></a>1、删除ES原始数据</h4><p>因为之前可能使用的标准分词器，如果存在数据，现在又使用IK分词器会出现冲突<br>进入es安装目录中将data目录数据删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf data<br></code></pre></td></tr></table></figure><h4 id="2、安装IK"><a href="#2、安装IK" class="headerlink" title="2、安装IK"></a>2、安装IK</h4><p>在es安装的bin目录中执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.23/elasticsearch-analysis-ik-6.8.23.zip<br><br></code></pre></td></tr></table></figure><blockquote><p>NOTE: 要求版本严格与当前使用版本一致,如需使用其他版本替换 6.8.0 为使用的版本号</p></blockquote><h4 id="3、查看IK"><a href="#3、查看IK" class="headerlink" title="3、查看IK"></a>3、查看IK</h4><p>安装完成后会在plugins目录下，生成IK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@linux elasticsearch-6.8.0]$ <span class="hljs-built_in">ls</span> plugins/<br>analysis-ik<br></code></pre></td></tr></table></figure><h4 id="4、重启es"><a href="#4、重启es" class="headerlink" title="4、重启es"></a>4、重启es</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h4 id="5、测试分词安装成功"><a href="#5、测试分词安装成功" class="headerlink" title="5、测试分词安装成功"></a>5、测试分词安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.153.132:5601/ -&gt; devtools<br><br>GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;中华人民共和国国歌&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 结果</span><br>&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;中华人民共和国&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;国歌&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 9,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>IK分词器提供了两种mapping类型用来做文档的分词分别是 ik_max_word 和 ik_smart<br>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</p><p>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</p></blockquote><h3 id="本地安装IK"><a href="#本地安装IK" class="headerlink" title="本地安装IK"></a>本地安装IK</h3><h4 id="1、下载IK安装包"><a href="#1、下载IK安装包" class="headerlink" title="1、下载IK安装包"></a>1、下载IK安装包</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2">https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2</a></p><h4 id="2、安装unzip"><a href="#2、安装unzip" class="headerlink" title="2、安装unzip"></a>2、安装unzip</h4><p>由于安装包是zip格式的，所以需要unzip方式解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y unzip<br></code></pre></td></tr></table></figure><h4 id="3、创建IK目录"><a href="#3、创建IK目录" class="headerlink" title="3、创建IK目录"></a>3、创建IK目录</h4><p>本地方式不像在线安装方式会自己生成一个目录，所以我们需要自己创建一个目录，把ik解压在里面<br>这里我们就在plugins下新建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> IK<br></code></pre></td></tr></table></figure><h4 id="4、移动到es安装目录的plugins目录中"><a href="#4、移动到es安装目录的plugins目录中" class="headerlink" title="4、移动到es安装目录的plugins目录中"></a>4、移动到es安装目录的plugins目录中</h4><p><code>mv elasticsearch-analysis-ik-6.8.0.zip elasticsearch-6.8.0/plugins/IK</code></p><h4 id="5、解压IK"><a href="#5、解压IK" class="headerlink" title="5、解压IK"></a>5、解压IK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip elasticsearch-analysis-ik-6.8.0.zip<br></code></pre></td></tr></table></figure><h4 id="6、重启ES"><a href="#6、重启ES" class="headerlink" title="6、重启ES"></a>6、重启ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h3 id="卸载IK"><a href="#卸载IK" class="headerlink" title="卸载IK"></a>卸载IK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> plugins <br><span class="hljs-built_in">rm</span> -rf analysis-ik/<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除原有的ems索引数据</span><br>DELETE /ems<br><br><span class="hljs-comment"># 新建索引/类型/约束</span><br><span class="hljs-comment"># 同时针对属性增加了使用IK分词器</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>           <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>           <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>     <span class="hljs-comment">#可写可不写</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 添加数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br><br><br><span class="hljs-comment"># 测试</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;term&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;框架&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置扩展词"><a href="#配置扩展词" class="headerlink" title="配置扩展词"></a>配置扩展词</h3><p><strong>扩展词典：</strong> 就是有些词并不是关键词,但是也希望被ES用来作为检索的关键词,可以将这些词加入扩展词典。</p><p><strong>停用词典：</strong> 就是有些词是关键词,但是出于业务场景不想使用这些关键词被检索到，可以将这些词放入停用词典。</p><h4 id="配置本地词典"><a href="#配置本地词典" class="headerlink" title="配置本地词典"></a>配置本地词典</h4><p>查看配置文件的位置：</p><blockquote><p>在线安装的配置文件和本地安装的配置文件地址不同分别在以下目录：<br> <code>&#123;conf&#125;/analysis-ik/config/IKAnalyzer.cfg.xml</code> <code>&#123;plugins&#125;/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml</code></p></blockquote><p>在配置文件同目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入配置文件同目录（此次配置文件目录是第一种）</span><br><span class="hljs-built_in">cd</span> config/analysis-ik/<br><span class="hljs-built_in">cp</span> main.dic ext_dic<br>vim ext_dic<br><span class="hljs-comment"># 输入ggdG删除所有内容</span><br>insert -&gt; 碰瓷 -&gt; <span class="hljs-built_in">shift</span> ZZ<br>保存<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> config/analysis-ik/<br>vim IKAnalyzer.cfg.xml<br><span class="hljs-comment"># 如果打开中文是乱码的话</span><br>vim ~/.vimrc<br>加入以下配置即可<br><span class="hljs-built_in">set</span> encoding=utf-8set fileencoding=utf-8<br><br>再配置刚刚配置好的拓展词典<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726095647.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><p>配置完成后：<br><img src="/Resources/Pasted%20image%2020220726100547.png"></p><blockquote><p>新增的拓展词只能对之后的词构建索引，对于之前已经构建过索引的文档，则没有效果。如果需要对所有的文档适配所有的拓展词，必须重建所有文档的索引。</p></blockquote><h4 id="配置远程词典"><a href="#配置远程词典" class="headerlink" title="配置远程词典"></a>配置远程词典</h4><p>本地词典写入的词一旦写入，后面再想去填入或者停用，比较麻烦</p><p>比如，我这个博客网站我想根据用户输入的词的搜索达到多少后将其认定为热词添加到词典中，并且一段时间后进行一定的更新。</p><p><img src="/Resources/Pasted%20image%2020220726110610.png"><br>EMS这个应用就相当于我们的博客，在这个下面我们创建了一个文件ext.txt，专门用于存放热词，而这个热词具体怎么来，我们可以结合redis，当用户搜索词的次数达到多少，我们通过IO写入这个文件中，然后ES通过监听url这个地址上的数据发生了变化，就进行相应的更新。</p><h5 id="新建一个Springboot应用"><a href="#新建一个Springboot应用" class="headerlink" title="新建一个Springboot应用"></a>新建一个Springboot应用</h5><p>项目结构及相关内容如下</p><p><img src="/Resources/Pasted%20image%2020220726111721.png"></p><h5 id="配置访问静态资源"><a href="#配置访问静态资源" class="headerlink" title="配置访问静态资源"></a>配置访问静态资源</h5><p><img src="/Resources/Pasted%20image%2020220726112240.png"></p><h5 id="测试访问项目"><a href="#测试访问项目" class="headerlink" title="测试访问项目"></a>测试访问项目</h5><p><img src="/Resources/Pasted%20image%2020220726111748.png"></p><blockquote><p>如果遇到中文乱码，可以下载一个chrome拓展Charset更换编码格式即可<br>不改也是可以的，只要文本时utf-8即可。</p></blockquote><h5 id="改ES配置文件"><a href="#改ES配置文件" class="headerlink" title="改ES配置文件"></a>改ES配置文件</h5><p>查看自己的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726112411.png"></p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim IKAnalyzer.cfg.xml<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726113032.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><h5 id="重启ES"><a href="#重启ES" class="headerlink" title="重启ES"></a>重启ES</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>bug：kibana崩掉了，把远程词典注释了还是不行<br>重启后查看日志显示<code>index_closed_exception</code><br><img src="/Resources/Pasted%20image%2020220726143113.png"><br>排错ing<br>使用postman 发送post请求解决了，<del>不知道为啥</del><code>http://localhost:9200/.kibana/_open</code><br><strong>因为kibana的索引被关闭了（莫名其妙被关闭？不知道什么原因被关闭了，但是就是这个原因！）</strong></p></blockquote><blockquote><p>错误复现：使用postman 发送post请求<code>http://192.168.153.132:9200/.kibana/_close</code><br>关闭索引再次出现错误400，然后重启了之后就再启动自动退出报exit(1)。<br><img src="/Resources/Pasted%20image%2020220726154820.png"><br>重新发送打开索引的请求即可解决</p></blockquote><p><em>测试使用的时候如果新加了拓展词，那么测试的时候需要新增文档以测试，不然旧文档会以之前的分词模型来建立索引，就会出现查不到的情况。</em></p><blockquote><p><strong>即新加了拓展词只对之后加入的文档有效！</strong></p></blockquote><hr><h2 id="🧷ES过滤-Filter"><a href="#🧷ES过滤-Filter" class="headerlink" title="🧷ES过滤 Filter"></a>🧷ES过滤 Filter</h2><p>ES中的查询操作分为2种： <strong>查询(query)</strong> 和 <strong>过滤(filter)</strong></p><p>查询即是之前提到的query查询，它（查询）默认会计算每个返回文档的得分，然后根据得分排序。而过滤（filter）只会筛选出符合的文档，并不计算得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快。</p><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。<br><img src="/Resources/Pasted%20image%2020220726192122.png"></p><p>官网说明：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-filter-context.html">Query and filter context</a></p><h3 id="过滤语法"><a href="#过滤语法" class="headerlink" title="过滤语法"></a>过滤语法</h3><p><strong>NOTE:</strong></p><ul><li>在执行filter和query时，<strong>先执行filter在执行query</strong></li><li>Elasticsearch会<strong>自动缓存经常使用的过滤器</strong>，以加快性能</li><li>使用过滤查询<strong>必须使用bool查询</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;must&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;框架&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 0,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 20<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行过程： 先从ES从执行过滤查询，找到符合年龄范围在<code>[0,20]</code>的文档，这个过程不会计算得分，然后再执行查询操作，从满足条件的这些文档中又去查找”content”属性的值为”框架”的文档，并将可能的文档计算的得分。</p><hr><h3 id="常见的过滤器类型"><a href="#常见的过滤器类型" class="headerlink" title="常见的过滤器类型"></a>常见的过滤器类型</h3><h4 id="term-Filter"><a href="#term-Filter" class="headerlink" title="term Filter"></a>term Filter</h4><p>term 用在过滤中查询，表示查询指定字段含有该词的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="terms-Filter"><a href="#terms-Filter" class="headerlink" title="terms Filter"></a>terms Filter</h4><p>term只能匹配一个字段，要想过滤多个字段，使用terms</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: [<span class="hljs-string">&quot;spring&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="range-Filter"><a href="#range-Filter" class="headerlink" title="range Filter"></a>range Filter</h4><p>顾名思义：就是先查找满足某个指定范围的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>         <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>             <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>           &#125;<br>         &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 1,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 10<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="exists-Filter"><a href="#exists-Filter" class="headerlink" title="exists Filter"></a>exists Filter</h4><p>先过滤掉不存在指定字段的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;exists&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;age&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><h4 id="ids-Filter"><a href="#ids-Filter" class="headerlink" title="ids Filter"></a>ids Filter</h4><p>查找含有指定字段的索引记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;values&quot;</span>: [<br>              <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;OY0TqnYB5vZ1Et4zupDf&quot;</span><br>            ]<br>          &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><hr><h2 id="☕Java-操作ElasticSearch"><a href="#☕Java-操作ElasticSearch" class="headerlink" title="☕Java 操作ElasticSearch"></a>☕Java 操作ElasticSearch</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="初始化SpringBoot项目"><a href="#初始化SpringBoot项目" class="headerlink" title="初始化SpringBoot项目"></a>初始化SpringBoot项目</h4><p>选择依赖：devtools lombok springweb<br>更改springboot版本为2.3.7.RELEASE</p><h4 id="引入Es相关依赖："><a href="#引入Es相关依赖：" class="headerlink" title="引入Es相关依赖："></a>引入Es相关依赖：</h4><p><strong>版本必须与es版本一致</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport-netty4-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.70<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h3><p>快捷键：ctrl + shift + t</p><h3 id="测试Java连接Es客户端"><a href="#测试Java连接Es客户端" class="headerlink" title="测试Java连接Es客户端"></a>测试Java连接Es客户端</h3><p>#tips 小技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例如</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">xxx</span>?<br><span class="hljs-comment">// TransportClient 点进去看源码发现是抽象类，不能直接new，对着TransportClient按下crtl+h，查看实现类即可</span><br><span class="hljs-comment">// 这里我们查看可以发现，下面有一个PreBuiltTransportClient实现类</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>      <span class="hljs-comment">// 创建ES客户端对象</span><br>      <span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>      <span class="hljs-comment">// 设置操作ES服务主机和端口</span><br>      transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><span class="hljs-comment">// 为什么是9300，kibana是9200，因为TransportClient底层走的是TCP协议，而ES开放的TCP协议端口是9300，kibana走的是RESTFUL协议，ES开放的REST协议端口是9300。</span><br><br>      <span class="hljs-comment">// 操作</span><br><br>      <span class="hljs-comment">// 释放资源</span><br>      transportClient.close();<br>  &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><blockquote><p>下面的代码有问题，没问题的代码见后面！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestIndexAndTypeMapping</span> &#123;<br>    <span class="hljs-keyword">private</span> TransportClient transportClient;<br><br>    <span class="hljs-comment">//@Before</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>        <span class="hljs-comment">// 创建ES客户端对象</span><br>        <span class="hljs-built_in">this</span>.transportClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>        <span class="hljs-comment">// 设置操作ES服务主机和端口 http://192.168.153.133/</span><br>        transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><br>        <span class="hljs-comment">// 操作</span><br>    &#125;<br>    <span class="hljs-comment">//@After</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>        <span class="hljs-comment">// 释放资源</span><br>        transportClient.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建一个索引</span><br>        <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">createIndexResponse</span> <span class="hljs-operator">=</span> transportClient.admin().indices().prepareCreate(<span class="hljs-string">&quot;dangdang5&quot;</span>).get();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acknowledged</span> <span class="hljs-operator">=</span> createIndexResponse.isAcknowledged();<br>        System.out.println(acknowledged);<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>第一个：<br>问题：执行@Test方法报空指针异常，打断点发现是@before方法没有执行。<br>原因：junit4中是@before和@after，在junit5中用@BeforeEach和@AfterEach取代了。<br>解决：用新的注解取代旧注解<br>第二个：<br>问题：报错&#96;NoNodeAvailableException[None of the configured nodes are available: [</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/Resources/elast</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装容器合集</title>
    <link href="http://conquers.github.io/posts/dcb3f659.html"/>
    <id>http://conquers.github.io/posts/dcb3f659.html</id>
    <published>2022-07-11T13:45:45.000Z</published>
    <updated>2023-07-18T06:45:57.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="left">名称</th><th>版本号</th></tr></thead><tbody><tr><td align="left"><a href="#Portainer">Portainer</a></td><td><code>Docker version 24.0.2, build cb74dfc</code></td></tr><tr><td align="left"><code>Aliyun CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>VMware CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>FinalShell</code></td><td><code>3.9.8.2</code></td></tr><tr><td align="left"><code>Redis</code></td><td><code>latest</code> &#x3D; <code>6.2.6</code></td></tr><tr><td align="left"><a href="#MySQL%205.7">MySQL 5.7</a></td><td><code>5.7</code></td></tr><tr><td align="left"><a href="#MySQL%208">MySQL 8</a></td><td><code>8</code></td></tr><tr><td align="left"><code>Docker Hub</code></td><td><a href="https://hub.docker.com/">Docker Hub</a></td></tr><tr><td align="left"><a href="#Elasticsearch">Elasticsearch</a></td><td><code>6.8.23</code></td></tr><tr><td align="left"><a href="#Kibana">Kibana</a></td><td><code>6.8.23</code></td></tr><tr><td align="left"><a href="#Redis">Redis</a></td><td><code>6.X</code></td></tr><tr><td align="left"><a href="#RabbitMQ">RabbitMQ</a></td><td><code>latest</code></td></tr><tr><td align="left"><a href="#nacos">nacos</a></td><td><code>latest</code></td></tr><tr><td align="left"><a href="#XXL-JOB">XXL-JOB</a></td><td><code>2.3.1</code></td></tr><tr><td align="left"><a href="#Nginx">Nginx</a></td><td><code>1.19.10</code></td></tr><tr><td align="left"><code>...</code></td><td><code>...</code></td></tr></tbody></table><blockquote><p>说明：如果使用云服务器，创建容器后，需要在安全策略组中开放端口。</p></blockquote><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><h3 id="1、搜索镜像"><a href="#1、搜索镜像" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本"><a href="#2、安装指定版本" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull portainer/portainer<br></code></pre></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>如果需要使用 <code>minio</code>，那么可以将端口映射修改为9002</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 9002:9000 \<br>--restart=always \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>--name prtainer \<br>docker.io/portainer/portainer<br></code></pre></td></tr></table></figure><p>打开网址：<a href="http://ip:9002/">http://ip:9002/</a></p><p>首次登陆设置账号密码：admin:admin123</p><p><img src="/Resources/image-20230519142302931.png" alt="image-20230519142302931"></p><p>选择本地模式</p><p><img src="/Resources/image-20230519142344326.png" alt="image-20230519142344326"></p><p><img src="/Resources/image-20230519142426575.png" alt="image-20230519142426575"></p><p><img src="/Resources/image-20230519142741905.png" alt="image-20230519142741905"></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="1、搜索镜像-1"><a href="#1、搜索镜像-1" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-1"><a href="#2、安装指定版本-1" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像"><a href="#3、查看已安装的镜像" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动"><a href="#4、创建实例并启动" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="5、查看启动的服务"><a href="#5、查看启动的服务" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试ElaticSearch"><a href="#6、测试ElaticSearch" class="headerlink" title="6、测试ElaticSearch"></a>6、测试ElaticSearch</h3><p>浏览器访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost:9200<br></code></pre></td></tr></table></figure><p>使用curl模拟请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost:9200<br></code></pre></td></tr></table></figure><hr><h3 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h3><p>以下使用Docker安装ElasticSearch集群</p><blockquote><p>注意虚拟机的内存不能太小，不然起3个ES服务就要崩（一开始给了4个G，后面给了8个G）</p></blockquote><h4 id="在虚拟机中创建配置文件映射Es容器中的配置文件"><a href="#在虚拟机中创建配置文件映射Es容器中的配置文件" class="headerlink" title="在虚拟机中创建配置文件映射Es容器中的配置文件"></a>在虚拟机中创建配置文件映射Es容器中的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data3<br><br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins3<br><br><br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data1<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data2<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data3<br><br>vim software/elasticsearch/config/es1.yml<br>vim software/elasticsearch/config/es2.yml<br>vim software/elasticsearch/config/es3.yml<br><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node1                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9201                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9301                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node2                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9202                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9302                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node3                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9203                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9303                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br></code></pre></td></tr></table></figure><h4 id="调高JVM线程数限制数量"><a href="#调高JVM线程数限制数量" class="headerlink" title="调高JVM线程数限制数量"></a>调高JVM线程数限制数量</h4><p><a href="https://conquers.github.io/posts/dcb3f659.html#elasticsearch">Docker安装ElasticSearch</a> 没有报错是因为指明了单机模式运行，因此不会报错，只要是以集群方法启动，就必须调高 <code>JVM</code> 线程数限制数量。</p><blockquote><p>必须做这个，不然会报错，显示# ERROR: [1] bootstrap checks failed [1]: max virtual memory areas vm.max_map_count [65530] is too low</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf<br>添加如下配置<br>-&gt;&gt;<br>vm.max_map_count=262144 <br><br><span class="hljs-comment"># 刷新配置</span><br>sysctl -p<br></code></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">官网说明</a>：<br><img src="/Resources/Pasted%20image%2020220731202851.png"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9201</span>:<span class="hljs-number">9201</span> -p <span class="hljs-number">9301</span>:<span class="hljs-number">9301</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es1.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES01 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9202</span>:<span class="hljs-number">9202</span> -p <span class="hljs-number">9302</span>:<span class="hljs-number">9302</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es2.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES02 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9203</span>:<span class="hljs-number">9203</span> -p <span class="hljs-number">9303</span>:<span class="hljs-number">9303</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es3.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES03 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>浏览器分别访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9201</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9202</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9203</span>/<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220729142408.png"><br><code>http://192.168.153.135:9201/_cat/nodes?pretty</code><br><img src="/Resources/Pasted%20image%2020220729143126.png"></p><h4 id="查看集群健康"><a href="#查看集群健康" class="headerlink" title="查看集群健康"></a>查看集群健康</h4><p><code>http://192.168.153.135:9201/_cat/health?v</code><br><img src="/Resources/Pasted%20image%2020220729143530.png"><br>由于现在还没有用kibana连接ES，也没有自己创建索引，因此这里的分片数量为0</p><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><h4 id="Kibana-连接-ES集群"><a href="#Kibana-连接-ES集群" class="headerlink" title="Kibana 连接 ES集群"></a>Kibana 连接 ES集群</h4><p>如果你之前连接过一台ES集群（为什么说一台也是集群呢？因为ES启动方式就是集群启动，只是集群数量为一台），其实需要修改的地方都差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.135:9201 -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><p>进入kibana配置文件：<br>修改连接ES的地址为集群中的任意一台：<br><a href="https://conquers.github.io/posts/dcb3f659.html#6%E3%80%81%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">kibana 连接 ES集群-编写配置</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://192.168.153.135:9201&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="SpringBoot-连接ES集群"><a href="#SpringBoot-连接ES集群" class="headerlink" title="SpringBoot 连接ES集群"></a>SpringBoot 连接ES集群</h4><p>如果你之前有用 <code>SpringBoot</code> 连接 <code>ES</code> ，这里的配置差不多，只是需要将连接地址改为所有的节点地址（防止其中某一台断掉不可用）<br><a href="SpringData%E6%93%8D%E4%BD%9CElasticSearch.md#%E7%BC%96%E5%86%99yml%E9%85%8D%E7%BD%AE">SpringBoot连接ES-编写配置</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来替换 transportClient对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(<span class="hljs-string">&quot;192.168.153.135:9201&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9202&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9203&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Head-集群可视化"><a href="#Head-集群可视化" class="headerlink" title="Head 集群可视化"></a>Head 集群可视化</h3><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>创建容器并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name=elasticsearch-head \<br>  -p 9100:9100 \<br>  mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>解决跨域</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim software<span class="hljs-regexp">/elasticsearch/</span>config/es1.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es2.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es3.yml<br><span class="hljs-comment"># 分别添加如下内容</span><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>重启es集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart $(docker ps -a | awk <span class="hljs-string">&#x27;&#123; print $1 &#125;&#x27;</span> | <span class="hljs-built_in">tail</span> -n +2)<br></code></pre></td></tr></table></figure><p>访问页面<br><code>http://192.168.153.135:9100/</code><br><img src="/Resources/Pasted%20image%2020220729150733.png"></p><p>创建索引<br><img src="/Resources/Pasted%20image%2020220729150822.png"></p><p><strong>查看集群状态</strong><br>ElasticSearch6.X 默认为分片5和1复制：<br><img src="/Resources/Pasted%20image%2020220729151207.png"><br>可以看到主分片和副本分片分布在不同的节点，同时保证主副分片不在同一节点（保证节点发生故障时可用）</p><p><strong>现在我们停掉node1节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151637.png"><br>可以看到集群仍然可用，虽然有些副本失效了，但是还是保证了5个主分片可用（即保证了数据的完整性）</p><p><strong>现在我们停掉node2节点：</strong><br>集群仍然可用，只是集群数量现在只有一台，主分片依然完整。<br><img src="/Resources/Pasted%20image%2020220729151832.png"></p><p><strong>现在我们重启node2节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151859.png"><br>发现集群慢慢同步了数据，去分担node1节点的压力，此时完整的主副分片都分布在者&#x3D;这两个节点中，所以健康状态为：green</p><p><strong>现在我们重启node1节点：</strong><br>我们发现分片又重新分布在了不同的节点，健康状态为：green<br><img src="/Resources/Pasted%20image%2020220729151929.png"><br><img src="/Resources/Pasted%20image%2020220729151938.png"></p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><h3 id="1、搜索镜像-2"><a href="#1、搜索镜像-2" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-2"><a href="#2、安装指定版本-2" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull kibana:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像-1"><a href="#3、查看已安装的镜像-1" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动-1"><a href="#4、创建实例并启动-1" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#运行kibana 注意IP一定不要写错，与后面配置文件的ip一定要对应</span><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132:9200 -p 5601:5601 -d kibana:6.8.23<br><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132/:9200 -v /mydata/ElasticStackAll/Kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><blockquote><p>虚拟机的ip会更换会导致ElasticSearchIp的更换，从而导致kibana启动不了！就只能重装kabina容器<br>解决：后面用java去连接es，不需要kibana了<br>解决：<a href="%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9B%BA%E5%AE%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84ip">固定虚拟机的ip</a></p><p>启动时报错：<code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code><br>解决办法：</p><ol><li>修改配置文件：</li><li><code>vi /usr/lib/sysctl.d/00-system.conf</code></li><li>添加<code>net.ipv4.ip_forward=1</code></li><li>重启网络<code>systemctl restart network</code></li><li>停止容器<code>docker stop kibana</code></li><li>删掉启动失败的容器<code>docker rm kibana</code></li><li>重启docker<code>systemctl restart docker</code></li><li>重新启动kibana</li></ol></blockquote><h3 id="5、进入kibana容器"><a href="#5、进入kibana容器" class="headerlink" title="5、进入kibana容器"></a>5、进入kibana容器</h3><p>使用docker命令进入到kibana容器里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it kibana /bin/sh<br></code></pre></td></tr></table></figure><p>进入容器中找到<code>/usr/share/kibana/config/kibana.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用vi 修改文件内容</span><br>vi /usr/share/kibana/config/kibana.yml <br></code></pre></td></tr></table></figure><h3 id="6、覆盖配置文件"><a href="#6、覆盖配置文件" class="headerlink" title="6、覆盖配置文件"></a>6、覆盖配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.name:</span> <span class="hljs-string">kibana</span><br><span class="hljs-comment"># 只能写0，不然会报错Error: listen EADDRNOTAVAIL: address not available</span><br><span class="hljs-comment">#server.host: &quot;192.168.153.132&quot;</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-comment">#elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [ <span class="hljs-string">&quot;http://192.168.153.132:9200&quot;</span> ]<br><span class="hljs-attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#设置kibana中文显示</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><h3 id="7、重新启动kibana"><a href="#7、重新启动kibana" class="headerlink" title="7、重新启动kibana"></a>7、重新启动kibana</h3><p><code>docker restart kibana</code></p><h3 id="8、测试Kibana"><a href="#8、测试Kibana" class="headerlink" title="8、测试Kibana"></a>8、测试Kibana</h3><p><code>http://自己的IP地址:5601</code><br><code>http://192.168.153.132:5601</code><br>浏览器访问：<br><img src="/Resources/Pasted%20image%2020220721101717.png" alt="Develop/开发虚拟机/Resources/Pasted image 20220721101717.png"></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-单机"><a href="#Redis-单机" class="headerlink" title="Redis 单机"></a>Redis 单机</h3><p>使用云服务器需要开放端口6379-6384及16379-16384，具体根据需求，以下使用云服务器进行操作</p><p><img src="/Resources/image-20230602110426224.png" alt="image-20230602110426224"></p><p><img src="/Resources/image-20230602110742631.png" alt="image-20230602110742631"></p><p>说明：16379-16384的作用：<a href="https://redis.io/docs/management/scaling/">https://redis.io/docs/management/scaling/</a></p><p><img src="/Resources/image-20230602143938312.png" alt="image-20230602143938312"></p><p>使用虚拟机需要关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis:latest<br></code></pre></td></tr></table></figure><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><blockquote><p>创建配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在虚拟机中或者云服务器中</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 6379:6379 --name redis \<br>-v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>查看容器版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis redis-server -v<br><br><span class="hljs-comment"># Redis server v=6.2.6 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=b61f37314a089f19</span><br></code></pre></td></tr></table></figure><blockquote><p>下载配置文件</p></blockquote><p>根据上面查询到的版本下载配置文件：<a href="https://redis.io/docs/management/config/%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF6.2%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E4%B8%8B%E8%BD%BD6.2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6https://raw.githubusercontent.com/redis/redis/6.2/redis.conf">https://redis.io/docs/management/config/，这里的版本是6.2，那么就下载6.2的配置文件https://raw.githubusercontent.com/redis/redis/6.2/redis.conf</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">requirepass</span> redis<br><span class="hljs-comment"># bind 127.0.0.1 -::1</span><br>protected-mode <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><blockquote><p>重启Redis容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart redis<br></code></pre></td></tr></table></figure><h4 id="进入Redis容器"><a href="#进入Redis容器" class="headerlink" title="进入Redis容器"></a>进入Redis容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接进去redis客户端。</span><br>docker <span class="hljs-built_in">exec</span> -it redis redis-cli -a redis<br><br><span class="hljs-comment"># 不然的话，就需要以下两条命令才能进入redis客户端</span><br>docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<br>redis-cli -a redis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602142724660.png" alt="image-20230602142724660"></p><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><p>默认持久化方式是快照持久化，修改配置文件，AOF持久化</p><blockquote><p>参考Redis的持久化：<a href="https://conquers.github.io/posts//posts/bae4ff13.html#9%E3%80%81Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6">Redis的持久化机制</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /mydata/redis/conf/redis.conf<br><br><span class="hljs-comment"># 修改的下面内容</span><br>appendonly <span class="hljs-built_in">yes</span><br>保存<br> <br>docker restart redis<br></code></pre></td></tr></table></figure><h3 id="Redis分片集群（海量存储-高并发写）"><a href="#Redis分片集群（海量存储-高并发写）" class="headerlink" title="Redis分片集群（海量存储+高并发写）"></a>Redis分片集群（海量存储+高并发写）</h3><h4 id="下载镜像-1"><a href="#下载镜像-1" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node1/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node2/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node3/data<br></code></pre></td></tr></table></figure><h4 id="创建集群节点"><a href="#创建集群节点" class="headerlink" title="创建集群节点"></a>创建集群节点</h4><p>创建集群节点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node1 -v /mydata/redis/cluster/node1/data:/data  \<br>-p 6380:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node1.conf<br></code></pre></td></tr></table></figure><ul><li><p>部分参数解释：</p><ul><li><p><code>--cluster-enabled</code>：是否启动集群，选值：yes 、no</p></li><li><p><code>--cluster-config-file 配置文件.conf </code>：指定节点信息，自动生成</p></li><li><p><code>--cluster-node-timeout 毫秒值</code>： 配置节点连接超时时间</p></li><li><p><del><code>--appendonly</code>：是否开启持久化，选值：yes、no</del></p></li></ul></li></ul><p>启动集群点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node1<br></code></pre></td></tr></table></figure><p>创建集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node2 -v /mydata/redis/cluster/node2/data:/data  \<br>-p 6381:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node2.conf<br></code></pre></td></tr></table></figure><p>启动集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node2<br></code></pre></td></tr></table></figure><p>创建集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node3 -v /mydata/redis/cluster/node3/data:/data  \<br>-p 6382:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node3.conf<br></code></pre></td></tr></table></figure><p>启动集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node3<br><br><span class="hljs-comment"># 全部启动</span><br>docker start redis-node1 redis-node2 redis-node3<br></code></pre></td></tr></table></figure><p>查看集群信息</p><p><img src="/Resources/image-20230601152728965.png" alt="image-20230601152728965"></p><p>查看 <code>redis-node1 </code>、<code>redis-node2</code>、<code>redis-node3</code>容器被分配的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect redis-node1 // 172.17.0.2<br>docker inspect redis-node2 // 172.17.0.3<br>docker inspect redis-node3 // 172.17.0.4<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601152829433.png" alt="image-20230601152829433"></p><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以redis-node1为例，进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 创建集群</span><br>redis-cli --cluster create 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 --cluster-replicas 0<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601154142373.png" alt="image-20230601154142373"></p><ul><li>部分参数解释：<ul><li><code>--cluster-replicas</code> ：主从比例， 1 个主节点对应几个从节点，这里是0个</li></ul></li></ul><h4 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 进入redis-node2的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node2 /bin/bash<br><span class="hljs-comment"># 进入redis-node3的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node3 /bin/bash<br><br><span class="hljs-comment"># redis</span><br>redis-cli<br><span class="hljs-comment"># 查看集群信息</span><br>127.0.0.1:6379&gt; cluster nodes<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601155821525.png" alt="image-20230601155821525"></p><p>此时，由于之前创建集群的时候 <code>--cluster-replicas 0</code> ，因此每一个节点都是主节点</p><h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><p>尝试写入数据，发现只有 <code>node3</code> 可以查看或者写入数据，其他节点都会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(error) MOVED 15495 172.17.0.4:6379`<br>MOVED 指令的第一个参数 15495 是 key 对应的槽位编号，后面是目标节点地址。<br><br>槽位：<br>Redis 集群把所有的物理节点（向外提供服务的 master）映射到 [0 - 16383] slot 上，即所有 master 均分 16384 大小的 slot 空间，每个 master 占有一定的 slot 空间<br><br>当存储数据时，首先会对 key 使用 CRC16 算法进行加密，将得到的值 mod 16384，这样一来 key 的值始终在 0-16383 之间，Redis 则根据 key 值将其放入对应范围的节点，比如算出来的 key 值是 3000，节点1的 slot 空间是 [0 - 5460]，那么就会放到节点1，平均集群的压力<br><br>同理，当获取数据时，也会对 Key 进行同样的计算，根据得到的值去对应的节点获取数据<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601160012575.png" alt="image-20230601160012575"></p><p>错误原因：启动 <code>redis</code> 时，没有使用集群模式</p><p>解决办法：使用 <code>redis-cli</code>时要加上 <code>-c</code>参数</p><p>集群演示：每个容器中都用<code>redis-cli -c</code>启动，这样，每个节点都可以写入或者查看了</p><p><img src="/Resources/image-20230601164027890.png" alt="image-20230601164027890"></p><p>现在 <code>&#123;key : a, value : b&#125;</code>存放在 <code>node3</code> 中，此时停掉 <code>node3</code> 容器，其他节点就拿不到 <code>node3</code> 存储的数据了，重新启动 <code>node3</code> 容器，即可拿到值。</p><p><img src="/Resources/image-20230601164219994.png" alt="image-20230601164219994"></p><h4 id="集群修复"><a href="#集群修复" class="headerlink" title="集群修复"></a>集群修复</h4><p>像上面如果集群中有一个节点挂掉了，那么存储值也不可行了，因为分配的slot没有变，修复命令主要是用来新加入的集群没有slot，需要重新分配</p><p><img src="/Resources/image-20230601164631241.png" alt="image-20230601164631241"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用下面的命令可以重新分配slot，并让该集群剔除挂掉的节点</span><br>redis-cli --cluster fix 172.17.0.2:6379 --cluster-fix-with-unreachable-masters<br></code></pre></td></tr></table></figure><h3 id="Redis主从集群（海量存储-高并发写-高并发读）"><a href="#Redis主从集群（海量存储-高并发写-高并发读）" class="headerlink" title="Redis主从集群（海量存储+高并发写+高并发读）"></a>Redis主从集群（海量存储+高并发写+高并发读）</h3><h4 id="下载镜像-2"><a href="#下载镜像-2" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="删除之前创建的配置文件"><a href="#删除之前创建的配置文件" class="headerlink" title="删除之前创建的配置文件"></a>删除之前创建的配置文件</h4><p>停止redis容器，删除redis容器，删除对应的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除三个redis容器</span><br>docker stop redis-node1 redis-node2 redis-node3<br>docker <span class="hljs-built_in">rm</span> redis-node1 redis-node2 redis-node3<br><br><span class="hljs-comment"># 删除配置文件</span><br><span class="hljs-built_in">rm</span> -rf /mydata/redis/cluster/<br></code></pre></td></tr></table></figure><h4 id="创建虚拟网卡"><a href="#创建虚拟网卡" class="headerlink" title="创建虚拟网卡"></a>创建虚拟网卡</h4><p>主要是用于redis-cluster能于外界进行网络通信，一般常用桥接模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网卡</span><br>docker network create myredis<br><span class="hljs-comment"># 查看所有网卡</span><br>docker network <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143457332.png" alt="image-20230602143457332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看网卡详细信息</span><br>docker network inspect myredis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143532310.png" alt="image-20230602143532310"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除网卡命令 多个中间 空格隔开(补充)</span><br>docker network <span class="hljs-built_in">rm</span> myredis <br><span class="hljs-comment"># --help </span><br>docker network --<span class="hljs-built_in">help</span> <br></code></pre></td></tr></table></figure><h4 id="批量创建配置文件"><a href="#批量创建配置文件" class="headerlink" title="批量创建配置文件"></a>批量创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf<br><span class="hljs-built_in">cat</span>  &lt;&lt; <span class="hljs-string">EOF &gt; /mydata/redis/cluster/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="hljs-string">port $&#123;port&#125;</span><br><span class="hljs-string">requirepass redis</span><br><span class="hljs-string">bind 0.0.0.0</span><br><span class="hljs-string">protected-mode no</span><br><span class="hljs-string">daemonize no</span><br><span class="hljs-string">appendonly yes</span><br><span class="hljs-string">cluster-enabled yes </span><br><span class="hljs-string">cluster-config-file nodes.conf</span><br><span class="hljs-string">cluster-node-timeout 5000</span><br><span class="hljs-string">cluster-announce-ip  公网ip或者docker容器内部分配的ip</span><br><span class="hljs-string">cluster-announce-port $&#123;port&#125;</span><br><span class="hljs-string">cluster-announce-bus-port 1$&#123;port&#125;</span><br><span class="hljs-string">masterauth redis</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><p><code>port</code>：节点端口；</p><p><code>requirepass</code>：设置密码，访问时需要验证</p><p><code>protected-mode</code>：保护模式，默认值 yes，即开启。开启保护模式以后，需配置 <code>bind ip</code> 或者设置访问密码；关闭保护模式，外部网络可以直接访问；</p><p><code>daemonize</code>：是否以守护线程的方式启动（后台启动），默认 no；</p><p><code>appendonly</code>：是否开启 AOF 持久化模式，默认 no；</p><p><code>cluster-enabled</code>：是否开启集群模式，默认 no；</p><p><code>cluster-config-file</code>：集群节点信息文件；</p><p><code>cluster-node-timeout</code>：集群节点连接超时时间；</p><p><code>cluster-announce-ip</code>：集群节点 IP</p><ul><li><code>注意：</code> 如果你想要你的redis集群可以供外网访问，这里直接填 服务器的IP 地址即可</li><li>如若为了安全，只是在服务器内部进行访问，这里还需要做一些修改。</li></ul><p><code>cluster-announce-port</code>：集群节点映射端口；</p><p><code>cluster-announce-bus-port</code>：集群节点总线端口。</p><p>目录结构：（如果没有 <code>tree</code> 命令先安装 <code>yum install -y tree</code>）</p><p><img src="/Resources/image-20230602144300924.png" alt="image-20230602144300924"></p><h4 id="批量启动容器"><a href="#批量启动容器" class="headerlink" title="批量启动容器"></a>批量启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); \<br><span class="hljs-keyword">do</span> \<br>   docker run -it -d -p <span class="hljs-variable">$&#123;port&#125;</span>:<span class="hljs-variable">$&#123;port&#125;</span> -p 1<span class="hljs-variable">$&#123;port&#125;</span>:1<span class="hljs-variable">$&#123;port&#125;</span> \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf:/usr/local/etc/redis/redis.conf \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/data:/data \<br>  --restart always --name redis-<span class="hljs-variable">$&#123;port&#125;</span> --net myredis \<br>  --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-it</code>：交互</li><li><code>-d</code>：后台运行，容器启动完成后打印容器</li><li><code>--privileged</code>：是否让docker 应用容器 获取宿主机root权限（特殊权限-）</li><li><code>-p</code> :端口映射</li><li><code>-v</code>：文件挂载</li><li><code>--sysctl</code>：参数来设置系统参数，通过这些参数来调整系统性能</li><li><code>--restart always</code>：在容器退出时总是重启容器</li><li><code>--name</code>：给容器取名</li><li><code>--net myredis</code>：使用我们创建的虚拟网卡 （想详细了解，可以去看看Docker 网络方面知识）</li></ul><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps <br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144454028.png" alt="image-20230602144454028"></p><h4 id="创建Redis-Cluster集群"><a href="#创建Redis-Cluster集群" class="headerlink" title="创建Redis Cluster集群"></a>创建Redis Cluster集群</h4><p>可随意选择一个节点进入，创建Redis集群</p><p>以redis-6379容器为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器命令行</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6379 /bin/bash<br><br><span class="hljs-comment"># 创建集群</span><br>redis-cli  -a redis --cluster create ip:6379 ip:6380 ip:6381 ip:6382 ip:6383 ip:6384   --cluster-replicas 1<br><br><span class="hljs-comment"># 输入yes</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144851659.png" alt="image-20230602144851659"></p><p><img src="/Resources/image-20230602144912764.png" alt="image-20230602144912764"></p><h4 id="查看集群信息-1"><a href="#查看集群信息-1" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis客户端</span><br>redis-cli -c -a redis<br><br><span class="hljs-comment"># 查看信息</span><br>cluster info<br><br><span class="hljs-comment"># 查看信息</span><br>cluster nodes<br><br><span class="hljs-comment"># 退出redis 和 退出容器</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145031973.png" alt="image-20230602145031973"></p><p><img src="/Resources/image-20230602145107211.png" alt="image-20230602145107211"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>打开两个连接，分别进入6379和8381容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-6379 redis-cli -c -a redis<br><span class="hljs-comment"># 除了端口为6379的容器，其他容器都需要加上 -p xxxx，因为容器内部的端口不是6379，必须指定参数</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6380 redis-cli -c -a redis -p 6380<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145439120.png" alt="image-20230602145439120"></p><h4 id="外网测试"><a href="#外网测试" class="headerlink" title="外网测试"></a>外网测试</h4><p>使用 <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">Another Redis Desktop Manager </a>连接redis</p><blockquote><p>单个连接</p></blockquote><p><img src="/Resources/image-20230602145709520.png" alt="image-20230602145709520"></p><blockquote><p>连接集群</p></blockquote><p><img src="/Resources/image-20230602145936243.png" alt="image-20230602145936243"></p><p><img src="/Resources/image-20230602150008387.png" alt="image-20230602150008387"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>连接ARDM连接6382端口的redis，6382中没有数据，且使用<code> info replication</code> 显示从节点连接数为0</p><p><img src="/Resources/image-20230602152054362.png" alt="image-20230602152054362"></p><p>查看6382的信息能看到主节点的ip，但是master_link_status:down 表示没有连接上主节点</p><p><img src="/Resources/image-20230602152212215.png" alt="image-20230602152212215"></p><p>解决：所有的配置文件加上这一句话，redis的连接密码，已修改之前的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">masterauth redis<br></code></pre></td></tr></table></figure><p>重启之后6379中的数据在6382中出现了</p><p><img src="/Resources/image-20230602153239637.png" alt="image-20230602153239637"></p><p>主节点中，从节点的连接数也变成1</p><p><img src="/Resources/image-20230602153749398.png" alt="image-20230602153749398"></p><p>从节点中master_link_status:up</p><p><img src="/Resources/image-20230602153736068.png" alt="image-20230602153736068"></p><p>并且master_replid也一致了</p><h4 id="批量停止容器（补充）"><a href="#批量停止容器（补充）" class="headerlink" title="批量停止容器（补充）"></a>批量停止容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker stop redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量删除容器（补充）"><a href="#批量删除容器（补充）" class="headerlink" title="批量删除容器（补充）"></a>批量删除容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker <span class="hljs-built_in">rm</span> redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量重启容器（补充）"><a href="#批量重启容器（补充）" class="headerlink" title="批量重启容器（补充）"></a>批量重启容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker restart redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）"><a href="#Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）" class="headerlink" title="Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）"></a>Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）</h3><p>基于第二步的主从集群，继续搭建主从集群+哨兵：这里搭建的是3主3从3哨兵</p><p>待完成：云服务器+Docker实现</p><h3 id="Redis主从集群-哨兵（虚拟机-Docker-compose实现）"><a href="#Redis主从集群-哨兵（虚拟机-Docker-compose实现）" class="headerlink" title="Redis主从集群+哨兵（虚拟机+Docker-compose实现）"></a>Redis主从集群+哨兵（虚拟机+Docker-compose实现）</h3><h4 id="Docker-compose搭建Redis-Sentinel"><a href="#Docker-compose搭建Redis-Sentinel" class="headerlink" title="Docker-compose搭建Redis Sentinel"></a>Docker-compose搭建Redis Sentinel</h4><p>文件组织格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-cluster<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">redis-sentinel</span><br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h5 id="1-Master-x2F-Slave"><a href="#1-Master-x2F-Slave" class="headerlink" title="1. Master&#x2F;Slave"></a>1. Master&#x2F;Slave</h5><p>进入<code>redis-cluster</code>文件夹，创建<code>docker-compose.yml</code>文件，<br>下面的Compose文件设置了1Master 2Slave</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-master</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/master:/data</span><br><br>  <span class="hljs-attr">slave1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6380</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave1:/data</span><br><br><br>  <span class="hljs-attr">slave2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6381</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave2:/data</span><br></code></pre></td></tr></table></figure><blockquote><p><code>--slaveof</code>可以换成<code>-replicaof</code><br>注意，如果设置了Redis客户端访问密码requirepass， 那么也要设置相同的副本集同步密码masterauth。</p></blockquote><p>另外我们后面使用哨兵模式能够完成故障转移，现有的Master可能会变成Slave，故在当前Master容器中也要携带masterauth参数。</p><h6 id="启动并查看容器"><a href="#启动并查看容器" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>会产生3个Redis容器，分别映射到宿主机6379、6380、6381端口， 默认连接在 <strong><code>redis-cluster-default</code>网桥</strong>（这个后面会用到，网桥的名字可以在执行<code>docker-compose up -d</code>中看到，见下图）。<br><img src="/Resources/Pasted%20image%2020220922163825.png"><br><img src="/Resources/Pasted%20image%2020220922163938.png"></p><blockquote><p>使用工具连接Redis时需要使用密码redispwd</p></blockquote><h5 id="2-Redis-Sentinel"><a href="#2-Redis-Sentinel" class="headerlink" title="2. Redis Sentinel"></a>2. Redis Sentinel</h5><p>很明显我们即将搭建的Sentinel容器需要能访问到以上3个容器，故需要在形成Sentinel容器时使用外置的 <strong><code>redis-cluster-default</code>网桥</strong></p><h6 id="进入redis-sentinel文件夹，创建docker-compose-yml文件，"><a href="#进入redis-sentinel文件夹，创建docker-compose-yml文件，" class="headerlink" title="进入redis-sentinel文件夹，创建docker-compose.yml文件，"></a>进入redis-sentinel文件夹，创建docker-compose.yml文件，</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">sentinel1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26379</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26380</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-3</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26381</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">redis-cluster_default</span><br></code></pre></td></tr></table></figure><h6 id="创建哨兵文件，将如下内容拷贝进去"><a href="#创建哨兵文件，将如下内容拷贝进去" class="headerlink" title="创建哨兵文件，将如下内容拷贝进去"></a>创建哨兵文件，将如下内容拷贝进去</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs conf">port 26379  <br>dir /tmp  <br>sentinel monitor mymaster 192.168.153.135 6379 2  <br>sentinel down-after-milliseconds mymaster 30000  <br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><p>带注释版</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 自定义集群名，其中192.168.153.135为 redis-master 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2）  </span><br><span class="hljs-section"># sentinel通讯端口  </span><br>port 26379  <br>dir /tmp  <br><span class="hljs-section"># sentinel需要监控的master/slaver信息，格式为sentinel monitor <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterIP</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterPort</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>  </span><br><span class="hljs-section"># 其中<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>应该小于集群中slave的个数，当失效的节点数超过了<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>,则认为整个体系结构失效  </span><br>sentinel monitor mymaster 192.168.153.135 6379 2  <br><span class="hljs-section"># master被当前sentinel实例认定为失效的间隔时间，格式为sentinel down-after-milliseconds <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">milliseconds</span>&gt;</span></span>  </span><br>sentinel down-after-milliseconds mymaster 30000  <br><span class="hljs-section"># 当新master产时，同时进行“slaveof”到新master并进行同步复制的slave个数  </span><br><span class="hljs-section"># 在salve执行salveof同步时，将会终止客户端请求。  </span><br><span class="hljs-section"># 此值较大,意味着“集群”终止客户端请求的时间总和和较大。  </span><br><span class="hljs-section"># 此值较小,意味着“集群”在故障转移期间，多个salve向客户端提供服务时仍然使用旧数据。  </span><br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br><span class="hljs-section"># failover过期时间。当failover开始后，在此时间内仍然没有触发任何failover操作，当前sentinel将会认为此次failoer失败。  </span><br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><h6 id="将哨兵文件复制三份到docker-compose同一目录下"><a href="#将哨兵文件复制三份到docker-compose同一目录下" class="headerlink" title="将哨兵文件复制三份到docker-compose同一目录下"></a>将哨兵文件复制三份到docker-compose同一目录下</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-sentinel<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h6 id="启动并查看容器-1"><a href="#启动并查看容器-1" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>生成3个Sentinel容器。<br><img src="/Resources/Pasted%20image%2020220922163916.png"></p><h5 id="3-运行测试"><a href="#3-运行测试" class="headerlink" title="3. 运行测试"></a>3. 运行测试</h5><h6 id="测试Master-x2F-Slave"><a href="#测试Master-x2F-Slave" class="headerlink" title="测试Master&#x2F;Slave"></a>测试Master&#x2F;Slave</h6><p>使用可视化工具对6379（master节点）添加数据后，其他节点同步数据如图：<br><img src="/Resources/Pasted%20image%2020220921161453.png"></p><p>使用springboot应用添加数据后（添加的数据是<code>com.cqupt.dao.UserDao</code>），其他节点同步数据如图：（需要在<code>application.yml</code>中配置密码）<br><img src="/Resources/Pasted%20image%2020220921162153.png"></p><h6 id="测试Sentinel"><a href="#测试Sentinel" class="headerlink" title="测试Sentinel"></a>测试Sentinel</h6><p>查看哨兵的日志：<br><img src="/Resources/Pasted%20image%2020220922164106.png"></p><blockquote><p>上述日志中可以看出，哨兵监听master和slave节点</p></blockquote><p>等待30s后（防止其他错误发生，例如问题1等）停止redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164132.png"></p><p>通过redis可视化工具查看redis集群信息<br><img src="/Resources/Pasted%20image%2020220922142732.png"></p><blockquote><p>6380写入数据，同样可以在6381查看数据，另外6381不能写入数据，符合从节点的属性，因此在6379主节点挂掉后，6380成为了新的主节点，6381依然是从节点。</p></blockquote><p>打开redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164250.png"></p><blockquote><p>上述日志表明哨兵检测到原master重新启动，将原master节点变成新master的从节点<br>此时，6380写入数据，同样可以在6381，6379查看数据。<br>测试省略！</p></blockquote><h6 id="验证Sentinel"><a href="#验证Sentinel" class="headerlink" title="验证Sentinel"></a>验证Sentinel</h6><p>进入redis-slave-1发现已经变成了主节点<br><img src="/Resources/Pasted%20image%2020220922164945.png"></p><p>进入redis-master发现已经变成了从节点<br><img src="/Resources/Pasted%20image%2020220922165048.png"></p><h4 id="可能遇到的错误信息"><a href="#可能遇到的错误信息" class="headerlink" title="可能遇到的错误信息"></a>可能遇到的错误信息</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h5><p>在启动之后查看哨兵的日志可能出现如图所示（没有关闭master，但是检测到了master关闭）<br><img src="/Resources/Pasted%20image%2020220922143955.png"><br><strong>这就需要开放端口访问，见虚拟机关闭防火墙</strong></p><h5 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h5><p>但是经过测试后发现6380和6381可以同步数据，79获取不到在80新添加的数据，查看6379的日志发现连接不上master<br><img src="/Resources/Pasted%20image%2020220922144318.png"></p><p><strong>检查<code>docker-compose.yml</code>文件中是否每个节点都添加了<code>masterauth redispwd</code> 选项，当时在主节点中添加导致错误</strong><br><img src="/Resources/Pasted%20image%2020220922153640.png"></p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL-5-7"><a href="#MySQL-5-7" class="headerlink" title="MySQL 5.7"></a>MySQL 5.7</h3><h4 id="1、搜索镜像-3"><a href="#1、搜索镜像-3" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214516.png" alt="Pasted image 20220711214516.png"></p><h4 id="2、安装指定版本-3"><a href="#2、安装指定版本-3" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><p><img src="/Resources/Pasted%20image%2020220711214709.png" alt="Pasted image 20220711214709.png"><br><img src="/Resources/Pasted%20image%2020220711214718.png" alt="Pasted image 20220711214718.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-2"><a href="#3、查看已安装的镜像-2" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214829.png" alt="Pasted image 20220711214829.png"></p><h4 id="4、创建挂载的配置文件"><a href="#4、创建挂载的配置文件" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/conf<br><br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/&#123;data,conf,init&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动"><a href="#5、创建实例并启动" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3307:3306 --name mysql -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题，QWEIOP1234</span><br><br>部分参数说明<br>-p 3306:3306:将容器的3306端口映射到主机的3306端口<br><br>: 冒号前是宿主机的路径，冒号后是容器的路径<br>-v /mydata/mysql/conf:/etc/mysql:将配置文件夹挂载到主机<br>-v /mydata/mysql/log:/var/log/mysql:将日志文件夹挂载到主机<br>-v /mydata/mysql/data:/var/lib/mysql/:将配置文件夹挂载到主机<br>-e MYSQL_ROOT_PASSWORD=root:初始化root用户的密码<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220711215847.png" alt="Pasted image 20220711215847.png"></p><p>查看进程<code>docker ps</code><br><img src="/Resources/Pasted%20image%2020220712093152.png" alt="Pasted image 20220712093152.png"></p><p><code>docker exec -it mysql /bin/bash</code> 进入装载mysql的容器<br><img src="/Resources/Pasted%20image%2020220712093710.png" alt="Pasted image 20220712093710.png"><br><code>exit</code>退出装载mysql的容器</p><h4 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h4><h5 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mydata/mysql/conf<br></code></pre></td></tr></table></figure><h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><blockquote><p>按i进入编辑模式，按esc退出编辑模式，输入:wq保存退出</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi my.cnf<br></code></pre></td></tr></table></figure><p><code>my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[client]<br>default-character-set=utf8<br>[mysql]<br>default-character-set=utf8<br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></td></tr></table></figure><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql<br></code></pre></td></tr></table></figure><h5 id="进入交互模式"><a href="#进入交互模式" class="headerlink" title="进入交互模式"></a>进入交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql /bin/bash<br></code></pre></td></tr></table></figure><h5 id="查看容器的配置文件"><a href="#查看容器的配置文件" class="headerlink" title="查看容器的配置文件"></a>查看容器的配置文件</h5><p><img src="/Resources/Pasted%20image%2020220712102635.png" alt="Pasted image 20220712102635.png"></p><h5 id="退出交互模式"><a href="#退出交互模式" class="headerlink" title="退出交互模式"></a>退出交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="7、使用可视化数据库连接MySQL"><a href="#7、使用可视化数据库连接MySQL" class="headerlink" title="7、使用可视化数据库连接MySQL"></a>7、使用可视化数据库连接MySQL</h4><blockquote><p>注意，ip可能会改变，可以在虚拟机中使用<code>ip a</code>查看</p></blockquote><p><img src="/Resources/Pasted%20image%2020220711220215.png" alt="Pasted image 20220711220215.png"></p><blockquote><p>如果用的服务器的数据库，有可能被拒绝链接</p></blockquote><p>解决办法：<a href="https://blog.csdn.net/iiiiiilikangshuai/article/details/100905996">is not allowed to connect to this mysql server_可行的code的博客-CSDN博客</a></p><blockquote><p>如果用的虚拟机，有可能timed out: connect</p></blockquote><p>解决办法：关闭虚拟机的防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="MySQL-8"><a href="#MySQL-8" class="headerlink" title="MySQL 8"></a>MySQL 8</h3><h4 id="1、搜索镜像-4"><a href="#1、搜索镜像-4" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><h4 id="2、安装指定版本-4"><a href="#2、安装指定版本-4" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:latest 为<br><span class="hljs-comment"># 此时的latest 为8.0.27</span><br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-3"><a href="#3、查看已安装的镜像-3" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><h4 id="4、创建挂载的配置文件-1"><a href="#4、创建挂载的配置文件-1" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bask">mkdir -p /mydata/mysql8/data<br>mkdir -p /mydata/mysql8/log<br>mkdir -p /mydata/mysql8/conf<br>mkdir -p /mydata/mysql8/mysql-files<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># 设置3306端口</span><br>port=3306<br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=1000<br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br>max_connect_errors=100<br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br>character-set-server=utf8mb4<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br>default_authentication_plugin=mysql_native_password<br><span class="hljs-comment">#是否对sql语句大小写敏感，1表示不敏感</span><br>lower_case_table_names = 1<br><span class="hljs-comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span><br><span class="hljs-comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span><br>interactive_timeout = 1800<br>wait_timeout = 1800<br><span class="hljs-comment">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span><br><span class="hljs-comment">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span><br>lock_wait_timeout = 3600<br><span class="hljs-comment">#内部内存临时表的最大值。</span><br><span class="hljs-comment">#比如大数据量的group by ,order by时可能用到临时表，</span><br><span class="hljs-comment">#超过了这个值将写入磁盘，系统IO压力增大</span><br>tmp_table_size = 64M<br>max_heap_table_size = 64M<br>[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default-character-set=utf8mb4<br>[client]<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br>port=3306<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动-1"><a href="#5、创建实例并启动-1" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8 \<br>-v /mydata/mysql8/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8/data:/var/lib/mysql \<br>-v /mydata/mysql8/log:/var/log \<br>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \<br>-p 3307:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题</span><br><br><span class="hljs-comment"># 如果启动报错，确保data目录为空，再排查其他错误</span><br></code></pre></td></tr></table></figure><h3 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h3><p>以 <code>MySQL 8</code> 为例</p><p>安装好一台后，再以相同方式安装另一台如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/conf<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/mysql-files<br><br><span class="hljs-comment"># 配置文件复制 mysql8 的</span><br><br>docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8_slave \<br>-v /mydata/mysql8_slave/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8_slave/data:/var/lib/mysql \<br>-v /mydata/mysql8_slave/log:/var/log \<br>-v /mydata/mysql8_slave/mysql-files:/var/lib/mysql-files \<br>-p 3308:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br></code></pre></td></tr></table></figure><p>两台 <code>MySQL</code> 服务器如下：</p><p><img src="/Resources/image-20230629094614377.png" alt="image-20230629094614377"></p><p>修改 <code>mysql8</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]主服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#[必须]启用二进制日志,指名路径。</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">/var/log/mysql/binlog/atguigu-bin</span><br></code></pre></td></tr></table></figure><p>修改 <code>mysql8_slave</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]从服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 这里应该要启用二进制日志，但仅作演示，所以就省略了</span><br></code></pre></td></tr></table></figure><p>修改 <code>binlog</code> 文件夹权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exit</span> -it mysql8 /bin/bash<br><span class="hljs-built_in">cd</span> /var/log<br><span class="hljs-built_in">mkdir</span> -p mysql/binlog<br><span class="hljs-built_in">chown</span> -R -v mysql:mysql binlog<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql8 mysql8_slave<br></code></pre></td></tr></table></figure><p>使用可视化软件连接两个容器或者分别进入容器中的 <code>MySQL</code> </p><p>在 主机：<code>mysql8</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;主机密码&#x27;;<br><br>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;<br><br>mysql&gt; show master status;<br># 保存File和Position，下一步会用到<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230629100530400.png" alt="image-20230629100530400"></p><p>在从机：<code>mysql8_slave</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; change master to master_host=&#x27;主机ip&#x27;, master_user=&#x27;slave&#x27;, master_password=&#x27;主机密码&#x27;, master_port=主机端口, master_log_file=&#x27;atguigu-bin.000001&#x27;, master_log_pos=1531, master_connect_retry=30;<br># master_log_file 是上面的File<br># master_log_pos  是上面的Position<br><br><br>mysql&gt; show slave status;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|NO              |NO               |<br>+----------------+-----------------+<br><br>mysql&gt; start slave;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|Yes             |Yes              |<br>+----------------+-----------------+<br># Yes 说明启动数据同步成功<br></code></pre></td></tr></table></figure><p>验证测试：</p><p>主机创建数据库 <code>test_bck</code></p><p>创建数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE account(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>NAME VARCHAR(15),<br>balance DECIMAL(10,2)<br>);<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO test_bck.account (id, NAME, balance) VALUES (1, &#x27;wtt&#x27;, 100.00)<br></code></pre></td></tr></table></figure><p>刷新从数据库的连接，并进行查询，可以发现数据已经同步了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from test_bck.account;<br>+--+----+-------+<br>|id|NAME|balance|<br>+--+----+-------+<br>|1 |wtt |100.00 |<br>+--+----+-------+<br></code></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 从机执行<br># 停止同步<br>mysql&gt; stop slave;<br># 如果再次使用数据同步，需要重新配置主从<br>mysql&gt; reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)<br></code></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="1、搜索镜像-5"><a href="#1、搜索镜像-5" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-5"><a href="#2、安装指定版本-5" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx:1.19.10<br></code></pre></td></tr></table></figure><blockquote><p><img src="/./Resources/image-20230718113454570.png" alt="image-20230718113454570"><br>问题：报错<br>原因：没有配置DNS<br>解决：配置DNS解析服务器<a href="%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1">配置虚拟机网卡</a><br>添加DNS1&#x3D;114.114.114.114, DNS2&#x3D;8.8.8.8</p></blockquote><h3 id="3、查看已安装的镜像-4"><a href="#3、查看已安装的镜像-4" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="3-5、创建挂载的配置文件"><a href="#3-5、创建挂载的配置文件" class="headerlink" title="3.5、创建挂载的配置文件"></a>3.5、创建挂载的配置文件</h3><blockquote><p>映射文件前，首先要<strong>先创建好</strong>才可以映射！<br>如果没有创建就执行的话，docker会默认映射文件夹的类型📂（并且会自动创建相应的文件夹），这里就会自动创建software下的nginx文件夹📂和nginx.conf文件夹📂<br> <img src="/./Resources/image-20230718113501876.png" alt="image-20230718113501876"></p></blockquote><p>配置<code>nginx.conf</code>有两种方法：<br>第一种：网上找<br><strong>第二种：复制容器内的<code>nginx.conf</code></strong></p><ul><li>删除刚刚<code>docker</code>自动创建的<code>nginx.conf</code>📂  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf nginx.conf<br></code></pre></td></tr></table></figure></li><li>复制  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nginx:/etc/nginx/nginx.conf /root/software/nginx/nginx.conf<br></code></pre></td></tr></table></figure></li></ul><h3 id="4、创建实例并启动-2"><a href="#4、创建实例并启动-2" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 80:80 --name nginx -d -v /root/software/nginx/nginx.conf:/etc/nginx/nginx.conf nginx:1.19.10 <br><br>docker run -p 80:80 --name nginx -d -v /root/html:/usr/share/nginx/html nginx:1.19.10 <br></code></pre></td></tr></table></figure><blockquote><p>当挂载配置文件时：使用nginx的代理服务器功能，实现反向代理，负载均衡功能<br>当挂载nginx家目录时（家目录的位置在第8部分）：使用nginx的服务器功能<br><strong>也可以都挂载，两个-v</strong></p></blockquote><blockquote><p>这里没有映射整个目录，而仅仅是单个文件，说明该目录还有其他文件不能被覆盖！<br><img src="/./Resources/image-20230718113520721.png" alt="image-20230718113520721"></p></blockquote><h3 id="5、查看启动的服务-1"><a href="#5、查看启动的服务-1" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试Nginx"><a href="#6、测试Nginx" class="headerlink" title="6、测试Nginx"></a>6、测试Nginx</h3><p><img src="/./Resources/image-20230718113526938.png" alt="image-20230718113526938"></p><h3 id="7、进入容器"><a href="#7、进入容器" class="headerlink" title="7、进入容器"></a>7、进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="8、修改页面"><a href="#8、修改页面" class="headerlink" title="8、修改页面"></a>8、修改页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name index.html<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718113533242.png" alt="image-20230718113533242"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/nginx/html<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;i love docker&quot;</span> &gt; index.html<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718113539596.png" alt="image-20230718113539596"></p><h3 id="9、挂载配置文件"><a href="#9、挂载配置文件" class="headerlink" title="9、挂载配置文件"></a>9、挂载配置文件</h3><p>首先查找nginx是否有配置文件<br><img src="/./Resources/image-20230718113547625.png" alt="image-20230718113547625"><br>所以应该在宿主机中创建配置文件以映射到这个文件</p><p>官网确认：</p><blockquote><p><code>:ro</code> ：只读<br><img src="/./Resources/image-20230718113552193.png" alt="image-20230718113552193"></p></blockquote><p><strong>简易版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br><br>docker run --name nginx-test -p 80:80 -d nginx<br><br><span class="hljs-built_in">mkdir</span> -p /mydata/nginx/&#123;conf,html,logs&#125;<br><br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/nginx.conf /mydata/nginx/conf/nginx.conf<br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/conf.d /mydata/nginx/conf/conf.d<br>docker <span class="hljs-built_in">cp</span> nginx-test:/usr/share/nginx/html/ /mydata/nginx/<br><br>docker stop nginx-test<br>docker <span class="hljs-built_in">rm</span> nginx-test<br><br><br><br>docker run \<br>-p 80:80 \<br>--name nginx \<br>-v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v /mydata/nginx/conf/conf.d:/etc/nginx/conf.d \<br>-v /mydata/nginx/log:/var/log/nginx \<br>-v /mydata/nginx/html:/usr/share/nginx/html \<br>-d nginx<br></code></pre></td></tr></table></figure><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="1、下载-RabbitMQ-镜像"><a href="#1、下载-RabbitMQ-镜像" class="headerlink" title="1、下载 RabbitMQ 镜像"></a>1、下载 RabbitMQ 镜像</h3><p>下载最新版本的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p>更多版本的镜像可以访问 Docker 官网：<code>https://hub.docker.com/_/rabbitmq?tab=tags</code></p><h3 id="2、创建并运行-RabbitMQ-容器"><a href="#2、创建并运行-RabbitMQ-容器" class="headerlink" title="2、创建并运行 RabbitMQ 容器"></a>2、创建并运行 RabbitMQ 容器</h3><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 15672:15672 -p 5672:5672 \<br>-e RABBITMQ_DEFAULT_USER=admin \<br>-e RABBITMQ_DEFAULT_PASS=admin \<br>--hostname myRabbit \<br>--name rabbitmq \<br>rabbitmq:management<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d：表示在后台运行容器；</li><li>-p：将容器的端口 5672（应用访问端口）和 15672 （控制台Web端口号）映射到主机中；</li><li>-e：指定环境变量：<ul><li>RABBITMQ_DEFAULT_VHOST：默认虚拟机名；</li><li>RABBITMQ_DEFAULT_USER：默认的用户名；</li><li>RABBITMQ_DEFAULT_PASS：默认的用户密码；</li></ul></li><li>–hostname：指定主机名（RabbitMQ 的一个重要注意事项是它根据所谓的 节点名称 存储数据，默认为主机名）；</li><li>–name rabbitmq：设置容器名称；</li><li>rabbitmq：容器使用的镜像名称；</li></ul><h4 id="查看启动情况："><a href="#查看启动情况：" class="headerlink" title="查看启动情况："></a>查看启动情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -l<br>------------<br>CONTAINER ID   IMAGE                 COMMAND                  CREATED              STATUS              PORTS                                                                                                                                                 NAMES<br>5df031b58d0f   rabbitmq:management   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbitmq<br></code></pre></td></tr></table></figure><p>设置 docker 启动的时候自动启动（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update rabbitmq --restart=always<br></code></pre></td></tr></table></figure><h3 id="3、访问-RabbitMQ-后台管理"><a href="#3、访问-RabbitMQ-后台管理" class="headerlink" title="3、访问 RabbitMQ 后台管理"></a>3、访问 RabbitMQ 后台管理</h3><p>浏览器输入地址：<a href="http://ip:15672/">http://ip:15672</a> 即可访问后台管理页面，这里的 ip 为运行 RabbitMQ 所在的服务器的 IP 地址；<br>默认的用户名和密码都是 guest（如果没有在容器创建的时候指定用户名密码）；<br>但由于我们启动的时候设置了默认的用户名和密码，所以我们可以使用设置的用户名和密码登录。(admin.admin)<br><img src="/Resources/Pasted%20image%2020220713154424.png" alt="Pasted image 20220713154424.png"><br><img src="/Resources/Pasted%20image%2020220713154355.png" alt="Pasted image 20220713154355.png"></p><p>提示： 如果无法访问可以尝试开启防火墙 15672 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=15672/tcp --permanent　　　　　　　　<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>安装之前你需要准备一个mysql，当前安装方式是将数据持久化到数据库中的，这里的部署是单机模式</p><h3 id="1、Docker-拉取镜像"><a href="#1、Docker-拉取镜像" class="headerlink" title="1、Docker 拉取镜像"></a>1、Docker 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nacos/nacos-server<br></code></pre></td></tr></table></figure><h3 id="2、挂载目录"><a href="#2、挂载目录" class="headerlink" title="2、挂载目录"></a>2、挂载目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#新建nacos目录</span><br>mkdir -p <span class="hljs-regexp">/mydata/</span>nacos<br></code></pre></td></tr></table></figure><h3 id="3、启动nacos并复制文件到宿主机，关闭容器"><a href="#3、启动nacos并复制文件到宿主机，关闭容器" class="headerlink" title="3、启动nacos并复制文件到宿主机，关闭容器"></a>3、启动nacos并复制文件到宿主机，关闭容器</h3><p>这一步启动nacos是为了将nacos里面的文件拷贝出到挂载目录中，这样我们就可以直接修改挂载目录中文件来映射到容器里面去了</p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 8848:8848 --name nacos -d nacos/nacos-server<br></code></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/logs/ /mydata/nacos/logs/<br>docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/conf/ /mydata/nacos/conf/<br></code></pre></td></tr></table></figure><h4 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> -f nacos<br></code></pre></td></tr></table></figure><h3 id="4、mysql中创建nacos所需的表"><a href="#4、mysql中创建nacos所需的表" class="headerlink" title="4、mysql中创建nacos所需的表"></a>4、mysql中创建nacos所需的表</h3><ul><li>mysql中新建一个库，名字可自定义，这里就用nacos-config</li><li>从 <a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">nacos&#x2F;nacos-db.sql</a> 复制sql语句，在nacos-config库中执行，创建所需的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="5、再次启动nacos"><a href="#5、再次启动nacos" class="headerlink" title="5、再次启动nacos"></a>5、再次启动nacos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name nacos -p 8848:8848  -p 9848:9848 -p 9849:9849 --privileged=<span class="hljs-literal">true</span> -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -v /mydata/nacos/logs/:/home/nacos/logs -v /mydata/nacos/conf/:/home/nacos/conf/ --restart=always nacos/nacos-server<br></code></pre></td></tr></table></figure><ul><li>docker run -d ： 启动容器 -d是后台启动并返回容器id的意思</li><li>-name nacos ：为容器指定一个名称</li><li>-p 8848:8848 -p 9848:9848 -p 9849:9849 ： 指定端口映射，注意这里的p不能大写，大写是随机端口映射</li><li>–privileged&#x3D;true ： 扩大容器内的权限，将容器内的权限变为root权限，不加的话就是普通用户权限，可能会出现cannot open directory</li><li>-e JVM_XMS&#x3D;256m ： 为jvm启动时分配的内存</li><li>-e JVM_XMX&#x3D;256m ： 为jvm运行过程中分配的最大内存</li><li>-e MODE&#x3D;standalone ： 使用 standalone模式（单机模式）,MODE值有cluster（集群）模式&#x2F;standalone模式两种，MODE必须大写</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;logs&#x2F;:&#x2F;home&#x2F;nacos&#x2F;logs : 将容器的&#x2F;home&#x2F;nacos&#x2F;logs目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;logs</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;conf&#x2F;:&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;： 将容器的&#x2F;home&#x2F;nacos&#x2F;conf目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;conf</li><li>–restart&#x3D;always ：重启docker时，自动启动相关容器</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要在防火墙开放相关端口，如果你是云服务器，开放安全组，下面提供相关语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 开放端口8848 9848 9849</span><br>firewall-cmd --zone=public --add-port=8848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9849/tcp --permanent<br><br><span class="hljs-comment">## 重启防火墙</span><br>firewall-cmd --reload<br><br><span class="hljs-comment">## 查看所有开启的端口</span><br>firewall-cmd --zone=public --list-ports<br><br><span class="hljs-comment">## 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件-1"><a href="#6、修改配置文件-1" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://192.168.153.135:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br><span class="hljs-comment"># 上面的 192.168.153.135 写你的 MySQL 数据库的 IP</span><br></code></pre></td></tr></table></figure><h3 id="7、验证（可选）"><a href="#7、验证（可选）" class="headerlink" title="7、验证（可选）"></a>7、验证（可选）</h3><p>验证配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 因为我们在第三步已经复制了logs和conf到了我们的宿主机里面，那么我们可以直接修改application.properties文件映射到容器里，可以通过下面的语句来查看</span><br><br><span class="hljs-comment">## 进入到nacos容器里</span><br>docker <span class="hljs-built_in">exec</span> -it nacos /bin/bash<br><br><span class="hljs-comment">## 查看application.properties文件</span><br><span class="hljs-built_in">cat</span> /home/nacos/conf/application.properties<br><br><span class="hljs-comment">## 退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>验证数据库是否连接成功：</p><p>进入nacos，新建命名空间，查看表tenant_info是否有对应的信息</p><h3 id="8、问题"><a href="#8、问题" class="headerlink" title="8、问题"></a>8、问题</h3><p>第六步修改配置文件，最初的版本为：数据库ip为localhost</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://localhost:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br></code></pre></td></tr></table></figure><p>第一次可以运行，但是当虚拟机重启时，就连不上console了，经过一顿百度，可能是因为这个配置文件是错误的，nacos自动使用了内置的数据源，内置数据源是基于内存的，断电消失，因此重启之后，数据也没有了，导致进不去了，之后有时间使用docker 重新建一个实例化一个容器，然后再试试</p><h2 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull minio/minio<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/minio/config<br><span class="hljs-built_in">mkdir</span> -p /mydata/minio/data<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--name minio \<br>-p 9000:9000 \<br>-p 9001:9001 \<br>-e <span class="hljs-string">&quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \<br>-v /mydata/minio/data:/data \<br>-v /mydata/minio/config:/root/.minio \<br>-d minio/minio server /data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[MinIO Console](http://192.168.153.135:9001/login)<br></code></pre></td></tr></table></figure><h2 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h2><p>一、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><p>二、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p -m 777 /mydata/xxl-job/data/applogs<br></code></pre></td></tr></table></figure><p>三、创建application.properties文件，<strong>修改数据库相关信息</strong>然后放入到&#x2F;mydata&#x2F;xxl-job目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">### web</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/xxl-job-admin</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### actuator</span><br><span class="hljs-attr">management.server.servlet.context-path</span>=<span class="hljs-string">/actuator</span><br><span class="hljs-attr">management.health.mail.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### resources</span><br><span class="hljs-attr">spring.mvc.servlet.load-on-startup</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/static/</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### freemarker</span><br><span class="hljs-attr">spring.freemarker.templateLoaderPath</span>=<span class="hljs-string">classpath:/templates/</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.request-context-attribute</span>=<span class="hljs-string">request</span><br><span class="hljs-attr">spring.freemarker.settings.number_format</span>=<span class="hljs-string">0.##########</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="hljs-comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, datasource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://192.168.153.135:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### datasource-pool</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.datasource.hikari.minimum-idle</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">spring.datasource.hikari.auto-commit</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.hikari.idle-timeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">spring.datasource.hikari.pool-name</span>=<span class="hljs-string">HikariCP</span><br><span class="hljs-attr">spring.datasource.hikari.max-lifetime</span>=<span class="hljs-string">900000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-timeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-test-query</span>=<span class="hljs-string">SELECT 1</span><br><span class="hljs-attr">spring.datasource.hikari.validation-timeout</span>=<span class="hljs-string">1000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, email</span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-attr">spring.mail.port</span>=<span class="hljs-string">25</span><br><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.from</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, access token</span><br><span class="hljs-attr">xxl.job.accessToken</span>=<span class="hljs-string">default_token</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span><br><span class="hljs-attr">xxl.job.i18n</span>=<span class="hljs-string">zh_CN</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">## xxl-job, triggerpool max size</span><br><span class="hljs-attr">xxl.job.triggerpool.fast.max</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">xxl.job.triggerpool.slow.max</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, log retention days</span><br><span class="hljs-attr">xxl.job.logretentiondays</span>=<span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>四、导入mysql数据库，执行tables_xxl_job.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<br># XXL<span class="hljs-operator">-</span>JOB v2<span class="hljs-number">.3</span><span class="hljs-number">.1</span><br># Copyright (c) <span class="hljs-number">2015</span><span class="hljs-operator">-</span>present, xuxueli.<br> <br><span class="hljs-keyword">CREATE</span> database if <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `xxl_job` <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci;<br>use `xxl_job`;<br> <br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_info` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;作者&#x27;</span>,<br>  `alarm_email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;报警邮件&#x27;</span>,<br>  `schedule_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;NONE&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度类型&#x27;</span>,<br>  `schedule_conf` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度配置，值含义取决于调度类型&#x27;</span>,<br>  `misfire_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度过期策略&#x27;</span>,<br>  `executor_route_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器路由策略&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_block_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;阻塞处理策略&#x27;</span>,<br>  `executor_timeout` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;任务执行超时时间，单位秒&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `glue_updatetime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE更新时间&#x27;</span>,<br>  `child_jobid` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;子任务ID，多个逗号分隔&#x27;</span>,<br>  `trigger_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度状态：0-停止，1-运行&#x27;</span>,<br>  `trigger_last_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;上次调度时间&#x27;</span>,<br>  `trigger_next_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;下次调度时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `executor_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器地址，本次执行的地址&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_sharding_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务分片参数，格式如 1/2&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `trigger_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `trigger_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-结果&#x27;</span>,<br>  `trigger_msg` text COMMENT <span class="hljs-string">&#x27;调度-日志&#x27;</span>,<br>  `handle_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-时间&#x27;</span>,<br>  `handle_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-状态&#x27;</span>,<br>  `handle_msg` text COMMENT <span class="hljs-string">&#x27;执行-日志&#x27;</span>,<br>  `alarm_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `I_trigger_time` (`trigger_time`),<br>  KEY `I_handle_code` (`handle_code`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log_report` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `trigger_day` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `running_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;运行中-日志数量&#x27;</span>,<br>  `suc_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行成功-日志数量&#x27;</span>,<br>  `fail_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行失败-日志数量&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_trigger_day` (`trigger_day`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_logglue` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_registry` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `registry_group` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_value` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_group` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器AppName&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器名称&#x27;</span>,<br>  `address_type` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;</span>,<br>  `address_list` text COMMENT <span class="hljs-string">&#x27;执行器地址列表，多地址逗号分隔&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_user` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;账号&#x27;</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  `role` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色：0-普通用户、1-管理员&#x27;</span>,<br>  `permission` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;权限：执行器ID列表，多个逗号分割&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_username` (`username`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_lock` (<br>  `lock_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;锁名称&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`lock_name`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;xxl-job-executor-sample&#x27;</span>, <span class="hljs-string">&#x27;示例执行器&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;测试任务1&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;XXL&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;CRON&#x27;</span>, <span class="hljs-string">&#x27;0 0 0 * * ? *&#x27;</span>, <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span>, <span class="hljs-string">&#x27;FIRST&#x27;</span>, <span class="hljs-string">&#x27;demoJobHandler&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;SERIAL_EXECUTION&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;BEAN&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;GLUE代码初始化&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_lock` ( `lock_name`) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">&#x27;schedule_lock&#x27;</span>);<br> <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>五、执行docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  -p 18080:8080 -d --name=xxl-job-admin --restart=always -v /mydata/xxl-job/application.properties:/application.properties  -e PARAMS=<span class="hljs-string">&#x27;--spring.config.location=/application.properties&#x27;</span> xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>0、每次挂起再启动，ssh可以正常连接，mysql这些就连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>1、虚拟机没有网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br><span class="hljs-comment"># 显示未知的名称或服务</span><br></code></pre></td></tr></table></figure><p>解决：配置dns(在网卡的配置文件添加如下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">DNS1=8.8.8.8                <span class="hljs-comment">#手动添加DNS1</span><br>DNS2=114.114.114.114        <span class="hljs-comment">#手动添加DNS2</span><br><br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>2、如果安装镜像报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error response from daemon: Get <span class="hljs-string">&quot;https://registry-1.docker.io/v2/&quot;</span>: dial tcp: lookup registry-1.dock<br></code></pre></td></tr></table></figure><p>解决：可能是没网络，参考1，如果没问题，检查镜像加速是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker info<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker.service<br></code></pre></td></tr></table></figure><p>3、连接不上虚拟机</p><p>shell连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>service network restart<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>mysql等容器连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;名称&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;</summary>
      
    
    
    
    <category term="Docker" scheme="http://conquers.github.io/categories/Docker/"/>
    
    
    <category term="Portainer" scheme="http://conquers.github.io/tags/Portainer/"/>
    
    <category term="Elasitc" scheme="http://conquers.github.io/tags/Elasitc/"/>
    
    <category term="Mysql" scheme="http://conquers.github.io/tags/Mysql/"/>
    
    <category term="Redis" scheme="http://conquers.github.io/tags/Redis/"/>
    
    <category term="Nginx" scheme="http://conquers.github.io/tags/Nginx/"/>
    
    <category term="RabbitMQ" scheme="http://conquers.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Shiro实战教程</title>
    <link href="http://conquers.github.io/posts/9cde3973.html"/>
    <id>http://conquers.github.io/posts/9cde3973.html</id>
    <published>2022-06-19T06:07:08.000Z</published>
    <updated>2023-07-18T07:11:59.244Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://shiro.apache.org/">Apache Shiro | Simple. Java. Security.</a></p><h2 id="一-权限的管理"><a href="#一-权限的管理" class="headerlink" title="一. 权限的管理"></a>一. 权限的管理</h2><h3 id="1-1-什么是权限管理"><a href="#1-1-什么是权限管理" class="headerlink" title="1.1 什么是权限管理"></a>1.1 什么是权限管理</h3><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现 &#x3D;&#x3D;对用户访问系统的控制&#x3D;&#x3D; ，按照安全规则或者安全策略控制用户可以访问而且只能访问自己被授权的资源。</p><p>权限管理包括用户 &#x3D;&#x3D;身份认证&#x3D;&#x3D; 和&#x3D;&#x3D;授权&#x3D;&#x3D; 两部分，简称<code>认证授权</code>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-2-什么是身份认证"><a href="#1-2-什么是身份认证" class="headerlink" title="1.2 什么是身份认证"></a>1.2 什么是身份认证</h3><p>&#x3D;&#x3D;身份认证&#x3D;&#x3D;，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用指纹等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p>&#x3D;&#x3D;授权，即访问控制&#x3D;&#x3D; ，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><h2 id="二、什么是shiro"><a href="#二、什么是shiro" class="headerlink" title="二、什么是shiro"></a>二、什么是shiro</h2><p><img src="/Resources/Pasted%20image%2020220619141355.png" alt="Pasted image 20220619141355"></p><blockquote><p>Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p><p>Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><p>&#x3D;&#x3D;Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。&#x3D;&#x3D;</p><h2 id="三、shiro的核心架构"><a href="#三、shiro的核心架构" class="headerlink" title="三、shiro的核心架构"></a>三、shiro的核心架构</h2><p><a href="https://shiro.apache.org/architecture.html">Apache Shiro Architecture | Apache Shiro</a></p><p><img src="/Resources/Pasted%20image%2020220619142030.png" alt="Pasted image 20220619142030"></p><h3 id="3-1-Subject-org-apache-shiro-subject-Subject"><a href="#3-1-Subject-org-apache-shiro-subject-Subject" class="headerlink" title="3.1 Subject (org.apache.shiro.subject.Subject)"></a>3.1 <strong>Subject</strong> (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/subject/Subject.html"><code>org.apache.shiro.subject.Subject</code></a>)</h3><p>&#x3D;&#x3D;Subject&#x3D;&#x3D;即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。</p><p>Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="3-2-SecurityManager-org-apache-shiro-mgt-SecurityManager"><a href="#3-2-SecurityManager-org-apache-shiro-mgt-SecurityManager" class="headerlink" title="3.2 SecurityManager (org.apache.shiro.mgt.SecurityManager)"></a>3.2 <strong>SecurityManager</strong> (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/mgt/SecurityManager.html"><code>org.apache.shiro.mgt.SecurityManager</code></a>)</h3><p>&#x3D;&#x3D;SecurityManager&#x3D;&#x3D;即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</p><h3 id="3-3-Authenticator-org-apache-shiro-authc-Authenticator"><a href="#3-3-Authenticator-org-apache-shiro-authc-Authenticator" class="headerlink" title="3.3 Authenticator(org.apache.shiro.authc.Authenticator)"></a>3.3 Authenticator(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/Authenticator.html"><code>org.apache.shiro.authc.Authenticator</code></a>)</h3><p>&#x3D;&#x3D;uthenticator即认证器&#x3D;&#x3D;，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p><h3 id="3-4-Authorizer-org-apache-shiro-authz-Authorizer"><a href="#3-4-Authorizer-org-apache-shiro-authz-Authorizer" class="headerlink" title="3.4 Authorizer (org.apache.shiro.authz.Authorizer)"></a>3.4 Authorizer (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/Authorizer.html"><code>org.apache.shiro.authz.Authorizer</code></a>)</h3><p>&#x3D;&#x3D;Authorizer即授权器&#x3D;&#x3D;，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="3-5-Realm-org-apache-shiro-realm-Realm"><a href="#3-5-Realm-org-apache-shiro-realm-Realm" class="headerlink" title="3.5 Realm (org.apache.shiro.realm.Realm)"></a>3.5 Realm (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html"><code>org.apache.shiro.realm.Realm</code></a>)</h3><p>Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><p>&#x3D;&#x3D;注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。&#x3D;&#x3D;</p><h3 id="3-6-SessionManager-org-apache-shiro-session-mgt-SessionManager"><a href="#3-6-SessionManager-org-apache-shiro-session-mgt-SessionManager" class="headerlink" title="3.6 SessionManager(org.apache.shiro.session.mgt.SessionManager)"></a>3.6 SessionManager(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/session/mgt/SessionManager.html"><code>org.apache.shiro.session.mgt.SessionManager</code></a>)</h3><p>&#x3D;&#x3D;SessionManager即会话管理&#x3D;&#x3D;，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p><h3 id="3-7-SessionDAO-org-apache-shiro-session-mgt-eis-SessionDAO"><a href="#3-7-SessionDAO-org-apache-shiro-session-mgt-eis-SessionDAO" class="headerlink" title="3.7 SessionDAO (org.apache.shiro.session.mgt.eis.SessionDAO)"></a>3.7 SessionDAO (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/session/mgt/eis/SessionDAO.html"><code>org.apache.shiro.session.mgt.eis.SessionDAO</code></a>)</h3><p>&#x3D;&#x3D;SessionDAO即会话dao&#x3D;&#x3D;，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p><h3 id="3-8-CacheManager-org-apache-shiro-cache-CacheManager"><a href="#3-8-CacheManager-org-apache-shiro-cache-CacheManager" class="headerlink" title="3.8 CacheManager (org.apache.shiro.cache.CacheManager)"></a>3.8 CacheManager (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/cache/CacheManager.html"><code>org.apache.shiro.cache.CacheManager</code></a>)</h3><p>&#x3D;&#x3D;CacheManager即缓存管理&#x3D;&#x3D;，将用户权限数据存储在缓存，这样可以提高性能。</p><h3 id="3-9-Cryptography-org-apache-shiro-crypto"><a href="#3-9-Cryptography-org-apache-shiro-crypto" class="headerlink" title="3.9 Cryptography(org.apache.shiro.crypto.*)"></a>3.9 Cryptography(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/crypto/package-summary.html"><code>org.apache.shiro.crypto.*</code></a>)</h3><p>&#x3D;&#x3D;Cryptography即密码管理&#x3D;&#x3D;，shiro提供了一套加密&#x2F;解密的组件，方便开发。比如提供常用的散列、加&#x2F;解密等功能。</p><h2 id="四、shiro中的认证"><a href="#四、shiro中的认证" class="headerlink" title="四、shiro中的认证"></a>四、shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p><h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul><li><p>Subject：主体<br>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体；</p></li><li><p>Principal：身份信息<br>是主体（subject）进行身份认证的标识，标识必须具有 &#x3D;&#x3D;唯一性&#x3D;&#x3D;，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p></li><li><p>Credential：凭证信息<br>是只有主体自己知道的安全信息，如密码、证书等。</p></li></ul><h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="/Resources/Pasted%20image%2020220619144311.png" alt="Pasted image 20220619144311"></p><h3 id="4-4-认证的开发"><a href="#4-4-认证的开发" class="headerlink" title="4.4 认证的开发"></a>4.4 认证的开发</h3><h4 id="1-创建项目并引入依赖"><a href="#1-创建项目并引入依赖" class="headerlink" title="1. 创建项目并引入依赖"></a>1. 创建项目并引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-引入shiro配置文件"><a href="#2-引入shiro配置文件" class="headerlink" title="2. 引入shiro配置文件"></a>2. 引入shiro配置文件</h4><p>配置文件：名称随意，以 .ini 结尾，放在 resources 目录下</p><blockquote><p>注意：在实际的项目开发中并不会使用这种方式，这种方法可以用来初学时练手</p></blockquote><p><code>shiro.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-attr">wtt</span>=<span class="hljs-number">123</span><br><span class="hljs-attr">ttw</span>=<span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><h4 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h4><p><code>TestAuthenticator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestAuthenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 14:53&lt;br/&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAuthenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 给安全管理器设置realm</span><br>        securityManager.setRealm(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IniRealm</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>));<br>        <span class="hljs-comment">//3. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//4. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//5. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wt&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>);<br>        <span class="hljs-comment">// 用户认证</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>output:<br>认证之前:<span class="hljs-literal">false</span><br>认证之后:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-常见的异常类型"><a href="#4-常见的异常类型" class="headerlink" title="4.常见的异常类型"></a>4.常见的异常类型</h4><h5 id="IncorrectCredentialsException（密码错误）"><a href="#IncorrectCredentialsException（密码错误）" class="headerlink" title="IncorrectCredentialsException（密码错误）"></a>IncorrectCredentialsException（密码错误）</h5><p>![[Pasted image 20220619151535.png|400]]</p><h5 id="UnknownAccountException（用户不存在）"><a href="#UnknownAccountException（用户不存在）" class="headerlink" title="UnknownAccountException（用户不存在）"></a>UnknownAccountException（用户不存在）</h5><p>![[Pasted image 20220619151629.png|400]]</p><h5 id="DisabledAccountException（帐号被禁用）"><a href="#DisabledAccountException（帐号被禁用）" class="headerlink" title="DisabledAccountException（帐号被禁用）"></a>DisabledAccountException（帐号被禁用）</h5><h5 id="LockedAccountException（帐号被锁定）"><a href="#LockedAccountException（帐号被锁定）" class="headerlink" title="LockedAccountException（帐号被锁定）"></a>LockedAccountException（帐号被锁定）</h5><h5 id="ExcessiveAttemptsException（登录失败次数过多）"><a href="#ExcessiveAttemptsException（登录失败次数过多）" class="headerlink" title="ExcessiveAttemptsException（登录失败次数过多）"></a>ExcessiveAttemptsException（登录失败次数过多）</h5><h5 id="ExpiredCredentialsException（凭证过期）"><a href="#ExpiredCredentialsException（凭证过期）" class="headerlink" title="ExpiredCredentialsException（凭证过期）"></a>ExpiredCredentialsException（凭证过期）</h5><h5 id="等"><a href="#等" class="headerlink" title="等"></a>等</h5><h4 id="5-自定义Realm"><a href="#5-自定义Realm" class="headerlink" title="5.  自定义Realm"></a>5.  自定义Realm</h4><blockquote><p>通过分析源码可得：<br>认证：<br>1.最终执行用户名比较 是在<code>SimpleAccountRealm</code>类的<code>doGetAuthenticationInfo</code> 方法中完成用户名校验<br>2.最终密码校验是在 <code>AuthenticatingRealm</code>类 的 <code>assertCredentialsMatch</code>方法 中<br>总结：<br><code>AuthenticatingRealm</code> （认证realm） <code>doGetAuthenticationInfo</code><br><code>AuthorizingRealm</code> （授权realm） <code>doGetAuthorizationInfo</code></p></blockquote><p>自定义Realm的作用：放弃使用.ini文件，使用数据库查询</p><p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p><h5 id="5-1-shiro提供的Realm"><a href="#5-1-shiro提供的Realm" class="headerlink" title="5.1 shiro提供的Realm"></a>5.1 shiro提供的Realm</h5><p><img src="/Resources/Pasted%20image%2020220619154953.png" alt="Pasted image 20220619154953"><br>右键<br><img src="/Resources/Pasted%20image%2020220619155013.png" alt="Pasted image 20220619155013"><br><img src="/Resources/Pasted%20image%2020220619160248.png" alt="Pasted image 20220619160248"></p><h5 id="5-2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#5-2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="5.2 根据认证源码认证使用的是SimpleAccountRealm"></a>5.2 根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="/Resources/Pasted%20image%2020220619160233.png" alt="Pasted image 20220619160233"></p><blockquote><p>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权,</p></blockquote><p>源码部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleAccountRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br><span class="hljs-comment">//.......省略</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) token;<br>        <span class="hljs-type">SimpleAccount</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> getUser(upToken.getUsername());<br><br>        <span class="hljs-keyword">if</span> (account != <span class="hljs-literal">null</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (account.isLocked()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockedAccountException</span>(<span class="hljs-string">&quot;Account [&quot;</span> + account + <span class="hljs-string">&quot;] is locked.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (account.isCredentialsExpired()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;The credentials for account [&quot;</span> + account + <span class="hljs-string">&quot;] are expired&quot;</span>;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpiredCredentialsException</span>(msg);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsername(principals);<br>        USERS_LOCK.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.users.get(username);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            USERS_LOCK.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-3-自定义realm"><a href="#5-3-自定义realm" class="headerlink" title="5.3 自定义realm"></a>5.3 自定义realm</h5><p>![[Pasted image 20220619161700.png|400]]<br>通过上一部分可知，我们需要自己实现抽象类<code>AuthorizingRealm</code>的<code>doGetAuthorizationInfo</code>和<code>AuthenticatingRealm</code>中的<code>doGetAuthenticationInf</code><br>但是通过上图可知，我们只需要实现一个类继承<code>AuthorizingRealm</code>即可（因为<code>AuthorizingRealm</code>继承了<code>AuthenticatingRealm</code>）</p><hr><p>在编写自定义realm的类中的doGetAuthenticationInfo方法时，该方法返回的对象是AuthenticationInfo，通过查看下图，可以发现可以用两个实现类返回。<br><img src="/Resources/Pasted%20image%2020220619162838.png" alt="Pasted image 20220619162838"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerRealm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 自定义realm实现,将认证/授权数据的来源转为数据库的实现</span><br><span class="hljs-comment"> * date: 2022/6/19 16:12&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 密码是在父类校验的</span><br>        <span class="hljs-comment">// 在token中获取用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br>        System.out.println(principal);<br>        <span class="hljs-comment">// 实际开发中应当 根据身份信息使用jdbc mybatis查询相关数据库</span><br>        <span class="hljs-comment">// 在这里只做简单的演示</span><br>        <span class="hljs-comment">// 假设username,password是从数据库获得的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">// 参数1:返回数据库中正确的用户名</span><br>            <span class="hljs-comment">// 参数2:返回数据库中正确密码</span><br>            <span class="hljs-comment">// 参数3:提供当前realm的名字 this.getName();</span><br>            <span class="hljs-type">SimpleAuthenticationInfo</span> <span class="hljs-variable">simpleAuthenticationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal, password, <span class="hljs-built_in">this</span>.getName());<br>            <span class="hljs-keyword">return</span> simpleAuthenticationInfo;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-4-使用自定义Realm认证"><a href="#5-4-使用自定义Realm认证" class="headerlink" title="5.4 使用自定义Realm认证"></a>5.4 使用自定义Realm认证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerRealm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerAuthenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义Realm</span><br><span class="hljs-comment"> * date: 2022/6/19 16:19&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerAuthenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 给安全管理器设置realm</span><br>        securityManager.setRealm(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRealm</span>());<br>        <span class="hljs-comment">//3. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//4. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//5. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-使用MD5-Salt-Hash"><a href="#6-使用MD5-Salt-Hash" class="headerlink" title="6 使用MD5+Salt+Hash"></a>6 使用MD5+Salt+Hash</h4><p>实际应用是将盐和散列后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p><blockquote><p>补充：MD5算法</p><p>作用：一般用来加密或者签名（校验和）。<br>生成结果：始终是一个16进制32位长度字符串。</p><h2 id="特点：1-MD5算法不可逆。2-如果内容相同无论执行多少次md5生成结果始终是一致。"><a href="#特点：1-MD5算法不可逆。2-如果内容相同无论执行多少次md5生成结果始终是一致。" class="headerlink" title="特点：1. MD5算法不可逆。2. 如果内容相同无论执行多少次md5生成结果始终是一致。"></a>特点：<br>1. MD5算法不可逆。<br>2. 如果内容相同无论执行多少次md5生成结果始终是一致。</h2><p>网络上提供的MD5在线解密一般是用穷举的方法。<br>盐（Salt）：如密码是123456，加盐之后，变成了123456a*qz。</p></blockquote><h6 id="Shiro中的MD5-Salt-Hash"><a href="#Shiro中的MD5-Salt-Hash" class="headerlink" title="Shiro中的MD5,Salt,Hash"></a>Shiro中的MD5,Salt,Hash</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestShiroMD5 &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 17:18&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestShiroMD5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个md5算法</span><br><span class="hljs-comment">//        Md5Hash md5Hash = new Md5Hash();</span><br><span class="hljs-comment">//        md5Hash.setBytes(&quot;1234&quot;.getBytes());</span><br><span class="hljs-comment">//        System.out.println(md5Hash.toHex());</span><br><br>        <span class="hljs-comment">//使用md5，构造函数</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;X0*7ps123&quot;</span>);<br>        System.out.println(md5Hash.toHex());<br><br>        <span class="hljs-comment">//使用MD5 + salt处理</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;X0*7ps&quot;</span>);<br>        System.out.println(md5Hash1.toHex());<br><br>        <span class="hljs-comment">// 由第一种和第一种的结果可知，Salt默认加在前面的</span><br><br>        <span class="hljs-comment">//使用md5 + salt + hash散列（参数代表要散列多少次，一般是 1024或2048）</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;X0*7ps&quot;</span>, <span class="hljs-number">1024</span>);<br>        System.out.println(md5Hash2.toHex());<br>    &#125;<br>&#125;<br><br><br>output:<br>8a83592a02263bfe6752b2b5b03a4799<br>8a83592a02263bfe6752b2b5b03a4799<br>e4f9bf3e0c58f045e62c23c533fcf633<br></code></pre></td></tr></table></figure><h6 id="自定义md5-salt的realm"><a href="#自定义md5-salt的realm" class="headerlink" title="自定义md5+salt的realm"></a>自定义md5+salt的realm</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerMd5Realm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义realm 加入 md5 十 salt + hash</span><br><span class="hljs-comment"> * date: 2022/6/19 18:00&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">//获取 token中的 用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br><br>        <span class="hljs-comment">//假设这是从数据库查询到的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e4f9bf3e0c58f045e62c23c533fcf633&quot;</span>;<span class="hljs-comment">//加密后</span><br><br>        <span class="hljs-comment">//根据用户名查询数据库</span><br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">//参数1:数据库用户名</span><br>            <span class="hljs-comment">//参数2:数据库md5+salt之后的密码</span><br>            <span class="hljs-comment">//参数3:注册时的随机盐</span><br>            <span class="hljs-comment">//参数4:realm的名字</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal,<br>                    password,<br>                    ByteSource.Util.bytes(<span class="hljs-string">&quot;X0*7ps&quot;</span>),<br>                    <span class="hljs-built_in">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="使用md5-salt认证"><a href="#使用md5-salt认证" class="headerlink" title="使用md5+salt认证"></a>使用md5+salt认证</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerMd5Realm;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerRealm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerMd5Authenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 18:01&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerMd5Authenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 创建md5Realm对象</span><br>        <span class="hljs-type">CustomerMd5Realm</span> <span class="hljs-variable">md5Realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerMd5Realm</span>();<br><br>        <span class="hljs-comment">//------------------------------------------------------</span><br>        <span class="hljs-comment">//新增步骤</span><br>        <span class="hljs-comment">//3. 创建hash凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">//4. 设置hash算法的名字</span><br>        credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>        <span class="hljs-comment">//5. 给当前的realm设定新的凭证匹配器</span><br>        md5Realm.setCredentialsMatcher(credentialsMatcher);<br>        <span class="hljs-comment">//------------------------------------------------------</span><br><br>        <span class="hljs-comment">//6. 给安全管理器设置realm</span><br>        securityManager.setRealm(md5Realm);<br>        <span class="hljs-comment">//7. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//8. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//9. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="如果有散列，则需要在上述代码中给凭证匹配器setHashIterations"><a href="#如果有散列，则需要在上述代码中给凭证匹配器setHashIterations" class="headerlink" title="如果有散列，则需要在上述代码中给凭证匹配器setHashIterations"></a>如果有散列，则需要在上述代码中给凭证匹配器<code>setHashIterations</code></h6><p><code>credentialsMatcher.setHashIterations(&#39;散列的次数&#39;);</code></p><blockquote><p>加密算法和散列次数均是使用<code>credentialsMatcher</code>的<code>setxxxxx</code>方法</p></blockquote><p>认证逻辑：<br>![[Pasted image 20220619183827.png]]</p><h2 id="五、shiro中的授权"><a href="#五、shiro中的授权" class="headerlink" title="五、shiro中的授权"></a>五、shiro中的授权</h2><h3 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h3><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><h3 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h3><p>&#x3D;&#x3D;授权可简单理解为who对what(which)进行How操作：&#x3D;&#x3D;</p><p>&#x3D;&#x3D;Who，即主体（Subject）&#x3D;&#x3D;，主体需要访问系统中的资源。</p><p>&#x3D;&#x3D;What，即资源（Resource)&#x3D;&#x3D;，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括&#x3D;&#x3D;资源类型&#x3D;&#x3D;和&#x3D;&#x3D;资源实例&#x3D;&#x3D;，比如商品信息为资源类型，类型为t01的商品为资源实例，编号为001的商品信息也属于资源实例。</p><p>&#x3D;&#x3D;How，权限&#x2F;许可（Permission)&#x3D;&#x3D;，规定了主体对资源的操作许可，&#x3D;&#x3D;权限离开资源没有意义&#x3D;&#x3D;，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h3 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h3><p><img src="/Resources/Pasted%20image%2020220619185305.png" alt="Pasted image 20220619185305"></p><h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><ul><li><p>基于角色的访问控制&#x3D;&#x3D;<br>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<br> <span class="hljs-comment">//操作什么资源</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;基于资源的访问控制&#x3D;&#x3D;<br>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.isPermission(<span class="hljs-string">&quot;user:update:01&quot;</span>))&#123;<br><span class="hljs-comment">//主体 对 资源（01）具有修改的权限</span><br>&#125;<br><span class="hljs-keyword">if</span>(subject.isPermission(<span class="hljs-string">&quot;user:update:*&quot;</span>))&#123;<br><span class="hljs-comment">//主体 对 所有的资源 具有更新的权限</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h3><p>权限字符串的规则是：资源标识符 : 操作 : 资源实例标识符&#x3D;&#x3D;，意思是对哪个资源的哪个实例具有什么操作，”:”是资源&#x2F;操作&#x2F;实例的分割符，权限字符串也可以使<code>*</code>通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user : * : 001</li></ul><h3 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h3><p>编程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br><span class="hljs-keyword">if</span>(subject.hasRole(“admin”)) &#123;<br><span class="hljs-comment">//有权限</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//无权限</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注解式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//有权限</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>标签式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;admin&quot;</span>&gt;<br>&lt;!— 有权限—&gt;<br>&lt;/shiro:hasRole&gt;<br>注意: Thymeleaf 中使用shiro需要额外集成!<br><br></code></pre></td></tr></table></figure><h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h4 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h4><p>主要是看上面的<code>doGetAuthorizationInfo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerMd5Realm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义realm 加入 md5 十 salt + hash</span><br><span class="hljs-comment"> * date: 2022/6/19 18:00&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-comment">//System.out.println(&quot;----&quot;);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">primaryPrincipal</span> <span class="hljs-operator">=</span> (String) principals.getPrimaryPrincipal();<br>        System.out.println(<span class="hljs-string">&quot;身份信息:&quot;</span> + primaryPrincipal);<br>        <span class="hljs-comment">//根据身份信息 用户名，获取当前用户的角色信息和权限信息</span><br>        <span class="hljs-comment">//假设现在只有admin和user</span><br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">simpleAuthorizationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        <span class="hljs-comment">//将数据库中的角色信息赋值给权限对象</span><br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;admin&quot;</span>);<br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//将数据库中的权限信息赋值给权限对象</span><br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:*:*&quot;</span>);<br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;product:create&quot;</span>);<br>        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">//获取 token中的 用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br><br>        <span class="hljs-comment">//假设这是从数据库查询到的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e4f9bf3e0c58f045e62c23c533fcf633&quot;</span>;<span class="hljs-comment">//加密后</span><br><br>        <span class="hljs-comment">//根据用户名查询数据库</span><br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">//参数1:数据库用户名</span><br>            <span class="hljs-comment">//参数2:数据库md5+salt之后的密码</span><br>            <span class="hljs-comment">//参数3:注册时的随机盐</span><br>            <span class="hljs-comment">//参数4:realm的名字</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal,<br>                    password,<br>                    ByteSource.Util.bytes(<span class="hljs-string">&quot;X0*7ps&quot;</span>),<br>                    <span class="hljs-built_in">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h4><p>主要是看<code>-------------------------------------------</code>下面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerMd5Realm;<br><br><span class="hljs-keyword">import</span> javax.sound.midi.Soundbank;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerMd5Authenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 18:01&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerMd5Authenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 创建md5Realm对象</span><br>        <span class="hljs-type">CustomerMd5Realm</span> <span class="hljs-variable">md5Realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerMd5Realm</span>();<br><br>        <span class="hljs-comment">//------------------------------------------------------</span><br>        <span class="hljs-comment">//新增步骤</span><br>        <span class="hljs-comment">//3. 创建hash凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">//4. 设置hash算法的名字</span><br>        credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>        <span class="hljs-comment">//5. 给当前的realm设定新的凭证匹配器</span><br>        md5Realm.setCredentialsMatcher(credentialsMatcher);<br>        <span class="hljs-comment">// 散列:</span><br>        credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">//------------------------------------------------------</span><br><br>        <span class="hljs-comment">//6. 给安全管理器设置realm</span><br>        securityManager.setRealm(md5Realm);<br>        <span class="hljs-comment">//7. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//8. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//9. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//-------------------------------------------</span><br>        <span class="hljs-comment">//对认证的用户进行授权</span><br>        <span class="hljs-keyword">if</span> (subject.isAuthenticated()) &#123;<br>            <span class="hljs-comment">//1.基于角色的权限控制 调用doGetAuthorizationInfo方法</span><br>            System.out.println(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>));<br>            <span class="hljs-comment">//2.基于多角色的权限控制 有几个角色，调用几次doGetAuthorizationInfo方法</span><br>            System.out.println(subject.hasAllRoles(Arrays.asList(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;super&quot;</span>)));<br>            System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);<br>            <span class="hljs-comment">//3.是否具有其中一个角色</span><br>            <span class="hljs-type">boolean</span>[] hasRoles = subject.hasRoles(Arrays.asList(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;super&quot;</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> is : hasRoles) &#123;<br>                System.out.println(is);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;==============================&quot;</span>);<br>            <span class="hljs-comment">//4.基于单个权限字符串的访问控制    资源标识符：操作：资源类型</span><br>            System.out.println(subject.isPermitted(<span class="hljs-string">&quot;user:update:*&quot;</span>));<br>            System.out.println(subject.isPermitted(<span class="hljs-string">&quot;product:create:02&quot;</span>));<br>            <span class="hljs-comment">//5.基于多个权限字符串的访问控制    资源标识符：操作：资源类型</span><br>            <span class="hljs-type">boolean</span>[] permitted = subject.isPermitted(<span class="hljs-string">&quot;user:*:01&quot;</span>, <span class="hljs-string">&quot;order:*:10&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : permitted) &#123;<br>                System.out.println(b);<br>            &#125;<br>            <span class="hljs-comment">//6.同时具有哪些权限</span><br>            System.out.println(subject.isPermittedAll(<span class="hljs-string">&quot;user:*:01&quot;</span>,<span class="hljs-string">&quot;product:create:02&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="六、整合SpringBoot项目实战"><a href="#六、整合SpringBoot项目实战" class="headerlink" title="六、整合SpringBoot项目实战"></a>六、整合SpringBoot项目实战</h2><h3 id="6-1-整合思路"><a href="#6-1-整合思路" class="headerlink" title="6.1 整合思路"></a>6.1 整合思路</h3><p><img src="/Resources/Pasted%20image%2020220620085152.png" alt="Pasted image 20220620085152"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;Apache Shiro | Simple. Java. Security.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-权限的管理&quot;&gt;&lt;a href=&quot;#一-权限的管理&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="Shiro" scheme="http://conquers.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://conquers.github.io/posts/bae4ff13.html"/>
    <id>http://conquers.github.io/posts/bae4ff13.html</id>
    <published>2022-06-18T08:30:15.000Z</published>
    <updated>2023-06-06T00:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p><a href="https://redis.io/">Redis - 英文官网</a><br><a href="http://www.redis.cn/">Redis - 中文网</a><br><a href="https://github.com/redis/redis">GitHub - redis&#x2F;redis</a></p><blockquote><p>参考资料<br>视频地址：<a href="https://www.bilibili.com/video/BV1jD4y1Q7tU">【编程不良人】适合后端编程人员的Redis实战教程、redis应用场景、分布式缓存、Session管理、面试相关等已完结!哔哩哔哩_bilibili</a><br>视频地址：<a href="https://www.bilibili.com/video/BV1cr4y1671t">黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目_哔哩哔哩_bilibili</a><br>参考笔记：<a href="https://blog.csdn.net/unique_perfect/article/details/105515137">从前慢-Redis_unique_perfect的博客-CSDN博客</a></p><p>代码参考：redis-study</p></blockquote><h2 id="1、Nosql的引言"><a href="#1、Nosql的引言" class="headerlink" title="1、Nosql的引言"></a>1、Nosql的引言</h2><p>NoSQL（Not Only SQL），意即不仅仅是SQL，泛指非关系型的数据库。Nosql这个技术门类，早期就有人提出，发展至2009年趋势越发高涨。</p><blockquote><p>RDBMS：关系型数据库<br>NOSQL：（泛指）非关系型数据库<br>RDBMS和NOSQL相辅相成</p></blockquote><h2 id="2、为什么是NoSQL"><a href="#2、为什么是NoSQL" class="headerlink" title="2、为什么是NoSQL"></a>2、为什么是NoSQL</h2><p>随着互联网网站的兴起，传统的关系数据库在应付动态网站，特别是超大规模和高并发的纯动态网站已经显得力不从暴露了很多难以克服的问题。如<strong>商城网站中对商品数据频繁查询</strong>、<strong>对热搜商品的排行统计</strong>、<strong>订单超时问题</strong>、以及<strong>微信朋友圈（音频，视频〉存储</strong>等相关使用传统的关系型数据库实现就显得非常复杂，虽然能实现相应功能但是在性能上却不是那么乐观。nosql这个技术门类的出现，更好的解决了这些问题，它告诉了世界不仅仅是sql。</p><h2 id="3、NoSQL的四大分类"><a href="#3、NoSQL的四大分类" class="headerlink" title="3、NoSQL的四大分类"></a>3、NoSQL的四大分类</h2><h4 id="3-1-键值-Key-Value-存储数据库"><a href="#3-1-键值-Key-Value-存储数据库" class="headerlink" title="3.1 键值(Key-Value)存储数据库"></a>3.1 键值(Key-Value)存储数据库</h4><ul><li><p>说明:<br>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。<br><code>Map&lt;key,value&gt;</code></p></li><li><p>特点<br>优点：Key&#x2F;value模型对于IT系统来说的优势在于简单、易部署。<br>缺点：如果DBA（数据库管理员）只对部分值进行查询或更新的时候，Key&#x2F;value就显得效率低下了。</p></li><li><p>相关产品</p><ul><li>Tokyo Cabinet&#x2F;Tyrant</li><li><strong>Redis</strong>  内存</li><li><strong>SSDB</strong>  硬盘</li><li>Voldemort </li><li>Oracle BDB</li></ul></li></ul><h4 id="3-2-列存储数据库"><a href="#3-2-列存储数据库" class="headerlink" title="3.2 列存储数据库"></a>3.2 列存储数据库</h4><ul><li><p>说明<br>这部分数据库通常是用来应对分布式存储的<strong>海量数据</strong>。</p></li><li><p>特点<br>键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。</p></li><li><p>相关产品<br>Cassandra、<strong>HBase</strong>、Riak。</p></li></ul><h4 id="3-3-文档型数据库（Document）"><a href="#3-3-文档型数据库（Document）" class="headerlink" title="3.3 文档型数据库（Document）"></a>3.3 文档型数据库（Document）</h4><ul><li><p>说明<br>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似，该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如<strong>JSON</strong>。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高<br><code>&#123;&quot;name&quot;:&quot;wtt&quot;,&quot;age&quot;:&quot;23&quot;&#125; -----&gt; document</code></p></li><li><p>特点<br>以文档（json）形式存储</p></li><li><p>相关产品<br><strong>MongoDB（最新版为6.x，截至2022.9.14）</strong>、CouchDB，国内也有文档型数据库SequoiaDB，已经开源。</p></li></ul><h4 id="3-4-图形-Graph-数据库"><a href="#3-4-图形-Graph-数据库" class="headerlink" title="3.4 图形(Graph)数据库"></a>3.4 图形(Graph)数据库</h4><ul><li><p>说明<br>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。</p></li><li><p>特点<br>NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。</p></li><li><p>相关产品<br>Neo4J、InfoGrid、 Infinite Graph、</p></li></ul><h2 id="4、NoSQL应用场景"><a href="#4、NoSQL应用场景" class="headerlink" title="4、NoSQL应用场景"></a>4、NoSQL应用场景</h2><ul><li><p><strong>数据模型比较简单</strong></p></li><li><p><strong>需要灵活性更强的IT系统（系统设计灵活，性能要求高）</strong></p></li><li><p><strong>对数据库性能要求较高</strong></p></li><li><p><strong>不需要高度的数据一致性 (NoSQL产品对于事务支持不是很好)</strong></p></li></ul><h2 id="5、什么是Redis"><a href="#5、什么是Redis" class="headerlink" title="5、什么是Redis"></a>5、什么是Redis</h2><p><img src="/Resources/Pasted%20image%2020220914160123.png"></p><p>Redis （<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver），远程字典服务</p><blockquote><p>The open source, in-memory data store used by millions of developers as a database, cache, streaming engine, and message broker.<br>数百万开发人员使用的开源内存数据存储作为<strong>数据库、缓存、流引擎和消息中间件</strong>。</p></blockquote><p>Q：<u>Redis使用内存作为数据库，但是为什么断电数据不会消失呢？</u><br>A：<u>持久化机制，定期将内存数据写入到磁盘中。</u></p><h2 id="6、Redis特点"><a href="#6、Redis特点" class="headerlink" title="6、Redis特点"></a>6、Redis特点</h2><ul><li><strong>Redis是一个高性能key&#x2F;value内存型数据库</strong></li><li><strong>Redis支持丰富的数据类型</strong></li><li><strong>Redis支持持久化</strong></li><li><strong>Redis单线程，单进程</strong>：6.0之前：命令单线程，网络单线程，6.0之后命令单线程，网络多线程，<a href="https://blog.csdn.net/CSDN2497242041/article/details/122659705">Redis 6.0多线程模型总结</a><ul><li>命令基于内存操作，已经很快了，不需要多线程，如果使用多线程，反而会引起一些问题。</li><li>网络多线程：因为读写网络的read&#x2F;write系统调用占用了Redis执行期间大部分CPU时间，瓶颈主要在于网络的 IO 消耗</li><li>网络多线程的实现方式：IO多路复用+多个事件处理器</li><li><img src="/Resources/Pasted%20image%2020230606160933.png"></li></ul></li></ul><h2 id="7、安装Redis"><a href="#7、安装Redis" class="headerlink" title="7、安装Redis"></a>7、安装Redis</h2><blockquote><p>参考地址：<a href="https://redis.io/docs/getting-started/installation/">Installing Redis | Redis</a><br>在CentOs中使用Docker安装Redis参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#Redis">CentOs中使用Docker安装Redis</a><br>以下仅演示在MacOS中安装Redis</p></blockquote><h2 id="8、Redis数据库相关指令"><a href="#8、Redis数据库相关指令" class="headerlink" title="8、Redis数据库相关指令"></a>8、Redis数据库相关指令</h2><blockquote><p>Redis全部命令参考<br>英文官网：<a href="https://redis.io/commands/">Commands | Redis</a><br>中文网：<a href="http://www.redis.cn/commands.html">Redis命令中心（Redis commands）</a></p></blockquote><h3 id="数据库相关指令"><a href="#数据库相关指令" class="headerlink" title="数据库相关指令"></a>数据库相关指令</h3><h4 id="Select-切换数据库"><a href="#Select-切换数据库" class="headerlink" title="Select 切换数据库"></a>Select 切换数据库</h4><p>Redis默认有16个数据库，默认使用的是第0个数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; <span class="hljs-keyword">select</span> 0<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-comment">#默认数据库后面没有&#x27;[编号]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-keyword">select</span> 3 <span class="hljs-comment">#切换数据库</span><br>OK<br></code></pre></td></tr></table></figure><h4 id="Flushdb-请空当前库"><a href="#Flushdb-请空当前库" class="headerlink" title="Flushdb 请空当前库"></a>Flushdb 请空当前库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; flushdb<br>OK<br>127.0.0.1:6379[3]&gt; keys *<br>(empty array)<br></code></pre></td></tr></table></figure><h4 id="Flushall-请空所有库"><a href="#Flushall-请空所有库" class="headerlink" title="Flushall 请空所有库"></a>Flushall 请空所有库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;wtt&quot;</span> <span class="hljs-comment">#在数据库3中新增数据</span><br>OK<br>127.0.0.1:6379[3]&gt; get name<br><span class="hljs-string">&quot;wtt&quot;</span><br>127.0.0.1:6379[3]&gt; <span class="hljs-keyword">select</span> 7 <span class="hljs-comment">#切换到数据库7</span><br>OK<br>127.0.0.1:6379[7]&gt; flushall <span class="hljs-comment">#在数据库7清空所有库</span><br>OK<br>127.0.0.1:6379[7]&gt; <span class="hljs-keyword">select</span> 3<br>OK<br>127.0.0.1:6379[3]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h3 id="key相关指令"><a href="#key相关指令" class="headerlink" title="key相关指令"></a>key相关指令</h3><h4 id="Del-删除key"><a href="#Del-删除key" class="headerlink" title="Del 删除key"></a>Del 删除key</h4><blockquote><p>同时删除多个key：DEL key1 key2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get a<br><span class="hljs-string">&quot;v&quot;</span><br>127.0.0.1:6379&gt; del a<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get a<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Exists-判断键值是否存在"><a href="#Exists-判断键值是否存在" class="headerlink" title="Exists 判断键值是否存在"></a>Exists 判断键值是否存在</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; exists name<br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 1 = 存在 ，0 = 不存在</span><br></code></pre></td></tr></table></figure><h4 id="Ttl-返回当前key的过期时间-过期时间为秒"><a href="#Ttl-返回当前key的过期时间-过期时间为秒" class="headerlink" title="Ttl 返回当前key的过期时间 过期时间为秒"></a>Ttl 返回当前key的过期时间 <em>过期时间为秒</em></h4><blockquote><p>当key不存在时，返回-2。<br>当key存在但没有设置剩余生存时间时，返回-1。<br>否则，以秒为单位，返回key的剩余生存时间。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; expire name 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; ttl name <span class="hljs-comment">#ttl 查看剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Pttl-返回当前key的过期时间-过期时间为毫秒"><a href="#Pttl-返回当前key的过期时间-过期时间为毫秒" class="headerlink" title="Pttl 返回当前key的过期时间 过期时间为毫秒"></a>Pttl 返回当前key的过期时间 <em>过期时间为毫秒</em></h4><h4 id="Expire-设置当前key的过期时间-过期时间为秒"><a href="#Expire-设置当前key的过期时间-过期时间为秒" class="headerlink" title="Expire 设置当前key的过期时间 过期时间为秒"></a>Expire 设置当前key的过期时间 <em>过期时间为秒</em></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; expire name 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; ttl name <span class="hljs-comment">#ttl 查看剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Pexpire-设置当前key的过期时间-过期时间为毫秒"><a href="#Pexpire-设置当前key的过期时间-过期时间为毫秒" class="headerlink" title="Pexpire 设置当前key的过期时间 过期时间为毫秒"></a>Pexpire 设置当前key的过期时间 <em>过期时间为毫秒</em></h4><h4 id="Keys-查找所有符合给定模式的key"><a href="#Keys-查找所有符合给定模式的key" class="headerlink" title="Keys 查找所有符合给定模式的key"></a>Keys 查找所有符合给定模式的key</h4><blockquote><p>*多个，?单个，[abc]其一，类似于正则表达式</p></blockquote><ul><li>keys* 查找所有key</li><li>keys h?llo 查找hello,hallo,hxllo等</li><li>keys h*llo 查找hllo,heeeello等</li><li>Keys h[ae]llo匹配hello和hallo ,但不匹配hillo。特殊符号用”\“隔开<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>[<span class="hljs-number">3</span>]&gt; keys *<br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Move-移动键值到另外一个数据库"><a href="#Move-移动键值到另外一个数据库" class="headerlink" title="Move 移动键值到另外一个数据库"></a>Move 移动键值到另外一个数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get name<br><span class="hljs-string">&quot;xr&quot;</span><br>127.0.0.1:6379&gt; move name 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <span class="hljs-keyword">select</span> 1<br>OK<br>127.0.0.1:6379[1]&gt; get name<br><span class="hljs-string">&quot;xr&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Rename-修改当前key的名字"><a href="#Rename-修改当前key的名字" class="headerlink" title="Rename 修改当前key的名字"></a>Rename 修改当前key的名字</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> a b<br>OK<br>127.0.0.1:6379&gt; rename a aa<br>OK<br>127.0.0.1:6379&gt; get aa<br><span class="hljs-string">&quot;b&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Type-查看当前key的类型"><a href="#Type-查看当前key的类型" class="headerlink" title="Type 查看当前key的类型"></a>Type 查看当前key的类型</h4><ul><li>none (key不存在)</li><li>string (字符串)</li><li>list (列表)</li><li>set (集合)</li><li>Zset (有序集)</li><li>hash (哈希表)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; <span class="hljs-built_in">type</span> name<br>string<br></code></pre></td></tr></table></figure><h4 id="Dbsize-查看键总数"><a href="#Dbsize-查看键总数" class="headerlink" title="Dbsize 查看键总数"></a>Dbsize 查看键总数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; dbsize <span class="hljs-comment">#查看数据库大小</span><br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><p><strong>数据类型</strong>：指的是存储的数据的类型，也就是 value 部分的类型， key 部分永远都是字符串。</p><p><strong>Redis 数据存储格式</strong>：Redis自身是一个 Map，其中所有的数据都是采用 key : value的形式存储。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>Map&lt;String,String&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915104123.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>set</td><td>设置一个key&#x2F;value</td><td><code>set k1 v1</code></td></tr><tr><td>get</td><td>根据key获得对应的value</td><td><code>get k1</code></td></tr><tr><td>mset</td><td>一次设置多个key&#x2F;value</td><td><code>mset k1 v1 k2 v2</code></td></tr><tr><td>mget</td><td>一次获取多个key&#x2F;value</td><td><code>mget k1 k2</code></td></tr><tr><td>strlen</td><td>获取对应key的value的长度</td><td><code>strlen k1</code></td></tr><tr><td>append</td><td>为对应的key的value追加内容（如果不存在key，那么就自动创建key）</td><td><code>append key1 &quot;this is append value&quot;</code></td></tr><tr><td>getrange（索引从0开始）</td><td>截取value的内容（0到-1代表所有内容）</td><td><code>getrange key1 0 -1</code></td></tr><tr><td>setex</td><td>设置一个key存活的有效期 <strong>秒</strong></td><td><code>setex key1 30 &quot;hello&quot;</code></td></tr><tr><td>psetex</td><td>设置一个key存活的有效期 <strong>毫秒</strong></td><td><code>psetex key1 30 &quot;hello&quot;</code></td></tr><tr><td>setnx</td><td>存在不做任何操作，不存在则添加</td><td><code> setnx key1 wtt</code></td></tr><tr><td>msetnx原子操作（只要有一个存在就不做任何操作）</td><td>同时设置多个key，只有都不存在时才保存</td><td></td></tr><tr><td>decr</td><td>进行数值类型的-1操作</td><td><code>decr key1</code></td></tr><tr><td>decrby</td><td>根据提供的数据进行减法操作</td><td><code>decrby key1 5</code></td></tr><tr><td>incr</td><td>进行数值类型的+1操作</td><td><code>incr key1</code></td></tr><tr><td>incrby</td><td>根据提供的数据进行加法操作</td><td><code>incrby key1 5</code></td></tr><tr><td>incrbyfloat</td><td>根据提供的数据加浮点数</td><td><code>incrbyfloat key1 1.5</code></td></tr></tbody></table><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><code>Map&lt;String,List&gt; map</code></p><blockquote><p>区别于Java中的List，Redis中的List可以通过lpush从左向列表放入元素，也可以通过rpush从右向列表放入元素（本质是一个双向链表）！</p></blockquote><p><img src="/Resources/Pasted%20image%2020220915104344.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>lpush</td><td>将某个值或多个值加入到一个key列表头部</td><td><code>lpush list value1 value2</code></td></tr><tr><td>lpushx</td><td>同lpush,但是必须要保证这个key存在</td><td><code>xpushx list value3 value4</code></td></tr><tr><td>rpush</td><td>将某个值或多个值加入到一个key列表末尾</td><td><code>rpush list value5</code></td></tr><tr><td>rpushx</td><td>同rpush,但是必须要保证这个key存在</td><td><code>rpush list value5</code></td></tr><tr><td>lpop</td><td>返回和移除列表的第一个元素</td><td><code>lpop list</code> (移除多个元素使用<code>lpop list n</code> n代表移除几个)</td></tr><tr><td>rpop</td><td>返回和移除列表的第一个元素</td><td><code>lpop list</code> (移除多个元素使用<code>lpop list n</code> n代表移除几个</td></tr><tr><td>lrange 0 -1</td><td>获取某一个下标区间内的元素</td><td><code>lrange list 0 -1</code></td></tr><tr><td>llen</td><td>获取列表元素个数</td><td><code>llen list</code></td></tr><tr><td>lset</td><td>设置某一个指定索引的值(索引必须存在)</td><td><code>lset list 0 value</code></td></tr><tr><td>lindex</td><td>获取某一个指定索引位置的元素</td><td><code>lindex list 0</code></td></tr><tr><td>lrem</td><td>删除重复元素</td><td><code>lrem list 2 value</code> (数字代表移除几个重复的值)</td></tr><tr><td>ltrim</td><td>保留列表中特定区间内的元素</td><td><code>ltrim list 1 2</code></td></tr><tr><td>linsert</td><td>在某一个元素之前(before)或者之后(after)插入新元素</td><td><code>linsert list before value3 value</code></td></tr></tbody></table><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Map&lt;String,Set&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915150230.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>sadd</td><td>为集合添加元素</td><td></td></tr><tr><td>smembers</td><td>显示集合中所有元素无序</td><td></td></tr><tr><td>scard</td><td>返回集合中元素的个数</td><td></td></tr><tr><td>spop</td><td>随机返回一个元素并将元素在集合中删除</td><td></td></tr><tr><td>smove</td><td>从一个集合中向另一个集合移动元素</td><td></td></tr><tr><td>srem</td><td>从集合中删除一个元素</td><td></td></tr><tr><td>sismember</td><td>判断一个集合中是否含有这个元素</td><td></td></tr><tr><td>srandmember</td><td>随机返回元素</td><td></td></tr><tr><td>sdiff</td><td>去掉第一个集合中其它集合含有的相同元素</td><td></td></tr><tr><td>sinter</td><td>求交集</td><td></td></tr><tr><td>sunion</td><td>求和集</td><td></td></tr></tbody></table><h4 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h4><p><code>Map&lt;String,ZSet&gt; map</code></p><blockquote><p>区别于Set，Zset是有序的。</p></blockquote><p><img src="/Resources/Pasted%20image%2020220915150705.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>zadd</td><td>添加一个有序集合元素</td><td></td></tr><tr><td>zcard</td><td>返回集合的元素个数</td><td></td></tr><tr><td>zrange升序 zrevrange降序</td><td>返回一个范围内的元素</td><td></td></tr><tr><td>zrangebyscore</td><td>按照分数查找一个范围内的元素</td><td></td></tr><tr><td>zrank</td><td>返回排名</td><td></td></tr><tr><td>zrevrank</td><td>倒序排名</td><td></td></tr><tr><td>zscore</td><td>显示某一个元素的分数</td><td></td></tr><tr><td>zrem</td><td>移除某一个元素</td><td></td></tr><tr><td>zincrby*</td><td>给某个特定元素加分</td><td></td></tr></tbody></table><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p><code>Map&lt;String,Map&lt;String,value&gt;&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915151206.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>hset</td><td>设置一个key&#x2F;value对</td><td></td></tr><tr><td>hget</td><td>获得一个key对应的value</td><td></td></tr><tr><td>hgetall</td><td>获得所有的key&#x2F;value对</td><td></td></tr><tr><td>hdel</td><td>删除某一个key&#x2F;value对</td><td></td></tr><tr><td>hexists</td><td>判断一个key是否存在</td><td></td></tr><tr><td>hkeys</td><td>获得所有的key</td><td></td></tr><tr><td>hvals</td><td>获得所有的value</td><td></td></tr><tr><td>hmset设置多个key&#x2F;value</td><td></td><td></td></tr><tr><td>hmget</td><td>获得多个key的value</td><td></td></tr><tr><td>hsetnx设置一个不存在的key的值</td><td></td><td></td></tr><tr><td>hincrby为value进行加法运算</td><td></td><td></td></tr><tr><td>hincrbyfloat</td><td>为value加入浮点值</td><td></td></tr></tbody></table><h2 id="9、Redis的持久化机制"><a href="#9、Redis的持久化机制" class="headerlink" title="9、Redis的持久化机制"></a>9、Redis的持久化机制</h2><blockquote><p>参考文档：<a href="https://redis.io/docs/manual/persistence/">Redis persistence | Redis</a></p></blockquote><p>Redis官方提供了两种不同的持久化方法来将数据存储到硬盘，既可以同时使用(aof)，又可以单独使用，在某种情况下也可以都不使用，具体使用那种持久化方案取决于用户的数据和应用决定。</p><blockquote><p>无论使用AOF还是快照机制持久化，将数据持久化到硬盘都是有必要的，除了持久化外，用户还应该对持久化的文件进行备份(最好备份在多个不同地方)。</p></blockquote><ul><li>ROB(Redis Database Backup file)：保存这一时刻的数据状态，也被叫做Redis数据备份文件</li><li>AOF(<strong>Append Only File</strong>)：将所有redis写命令记录到日志文件中</li><li><img src="/Resources/Pasted%20image%2020230531170507.png"></li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>这种方式可以将某一时刻的所有数据都写入硬盘中，当然这也是redis的<strong>默认持久化方式</strong>，保存的文件是以.rdb形式结尾的文件，因此这种方式也称之为RDB方式。<br><img src="/Resources/Pasted%20image%2020220915155813.png"><br><img src="/Resources/Pasted%20image%2020220915160528.png"></p><h4 id="快照生成方式"><a href="#快照生成方式" class="headerlink" title="快照生成方式"></a>快照生成方式</h4><ul><li>客户端方式：BGSAVE和SAVE指令</li><li>服务器配置自动触发</li></ul><h5 id="客户端方式"><a href="#客户端方式" class="headerlink" title="客户端方式"></a>客户端方式</h5><p><strong>BGSAVE</strong><br>客户端可以使用BGSAVE命令来创建一个快照，当接收到客户端的BGSAVE命令时，redis会调用fork来创建一个子进程，然后子进程负责将快照写入磁盘中，而父进程则继续处理命令请求。<br>疑问：当执行fork操作时，进行了redis写操作，这个时候数据拷贝了一份，对数据副本B进行了写操作，那么之后是怎么处理的<br><img src="/Resources/Pasted%20image%2020230531164423.png"></p><p><strong>SAVE</strong><br>客户端还可以使用SAVE命令来创建一个快照，接收到SAVE命令的redis服务器在快照创建完毕之前将不再响应任何其他的命令<br><img src="/Resources/Pasted%20image%2020220915162455.png"></p><p>🔔<strong>注意：SAVE命令并不常用，使用SAVE命令在快照创建完毕之前，redis处于阻塞状态,无法对外服务。</strong></p><h5 id="服务器配置自动触发"><a href="#服务器配置自动触发" class="headerlink" title="服务器配置自动触发"></a>服务器配置自动触发</h5><p>如果用户在redis.conf中设置了save配置选项，redis会在save选项条件满足之后自动触发一次BGSAVE命令，如果设置多个save配置选项，当任意一个save配置选项条件满足，redis也会触发一次BGSAVE命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 注该配置文件是redis7的<br>################################ SNAPSHOTTING  ################################<br><br># Save the DB to disk. 将数据库保存到磁盘.<br>#<br># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]<br>#<br># Redis will save the DB if the given number of seconds elapsed and it<br># surpassed the given number of write operations against the DB.<br># 如果经过了给定的秒数，并且超过了针对DB的给定写入操作数，Redis将数据库保存到磁盘.<br>#<br># Snapshotting can be completely disabled with a single empty string argument<br># as in following example:<br># 使用 save &quot;&quot; 即可禁用redis中的Snapshotting<br>#<br># save &quot;&quot;<br>#<br># Unless specified otherwise, by default Redis will save the DB:<br>#   * After 3600 seconds (an hour) if at least 1 change was performed<br>#   * After 300 seconds (5 minutes) if at least 100 changes were performed<br>#   * After 60 seconds if at least 10000 changes were performed<br># 除非另有说明，否则默认情况下Redis会保存数据库：<br>#   这里的翻译主要出自于 https://redis.io/docs/management/persistence/#snapshotting 中关于rdb的解释<br>#   You can configure Redis to have it save the dataset <br>#   every N seconds if there are at least M changes in the dataset  如果每n秒发生了m次<br>#   , or you can manually call the SAVE or BGSAVE commands.<br>#   每3600秒，1次更改<br>#   每300秒，100次更改<br>#   每60秒后，10000次更改<br># <br># You can set these explicitly by uncommenting the following line.<br># 您可以通过取消对以下行的注释来显式设置这些值。<br>#<br># save 3600 1 300 100 60 10000<br><br><br># 注该配置文件是redis6.2的，基本上跟7差不多，就不再翻译了<br>################################ SNAPSHOTTING  ################################<br><br># Save the DB to disk.<br>#<br># save &lt;seconds&gt; &lt;changes&gt;<br>#<br># Redis will save the DB if both the given number of seconds and the given<br># number of write operations against the DB occurred.<br>#<br># Snapshotting can be completely disabled with a single empty string argument<br># as in following example:<br>#<br># save &quot;&quot;<br>#<br># Unless specified otherwise, by default Redis will save the DB:<br>#   * After 3600 seconds (an hour) if at least 1 key changed<br>#   * After 300 seconds (5 minutes) if at least 100 keys changed<br>#   * After 60 seconds if at least 10000 keys changed<br>#<br># You can set these explicitly by uncommenting the three following lines.<br>#<br># save 3600 1<br># save 300 100<br># save 60 10000<br></code></pre></td></tr></table></figure><h5 id="服务器接收客户端shutdown指令"><a href="#服务器接收客户端shutdown指令" class="headerlink" title="服务器接收客户端shutdown指令"></a>服务器接收客户端shutdown指令</h5><p>当redis通过shutdown指令接收到关闭服务器的请求时，会执行一个save命令，阻塞所有的客户端，不再执行客户端执行发送的任何命令，并且在save命令执行完毕之后关闭服务器。</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>这种方式可以将所有客户端执行的写命令记录到日志文件中，AOF持久化会将被执行的写命令写到AOF的文件末尾，以此来记录数据发生的变，因此只要redis从头到尾执行一次AOF文件所包含的所有写命令，就可以恢复AOF文件的记录的数据集。</p><blockquote><p>开启AOF持久化参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#Redis%E6%8C%81%E4%B9%85%E5%8C%96">Redis持久化</a><br>开启后，多了一个<code>appendonly.aof</code>文件<br><img src="/Resources/Pasted%20image%2020220916164124.png"></p></blockquote><h4 id="日志追加频率"><a href="#日志追加频率" class="headerlink" title="日志追加频率"></a>日志追加频率</h4><p><strong>always【谨慎使用】</strong></p><ul><li>说明：每个redis写命令都要同步写入硬盘，严重降低redis速度</li><li>解释：如果用户使用了always选项，那么每个redis写命令都会被写入硬盘，从而将发生系统崩溃时出现的数据丢失减到最少；遗憾的是，因为这种同步策略需要对硬盘进行大量的写入操作，所以redis处理命令的速度会受到硬盘性能的限制；</li><li>注意：转盘式硬盘在这种频率下200左右个命令&#x2F;s；固态硬盘(SSD)几百万个命令&#x2F;s；</li><li>警告：使用SSD用户请谨慎使用always选项，这种模式不断写入少量数据的做法有可能会引发严重的<strong>写入放大</strong>（不断往磁盘写入小文件）问题，导致将固态硬盘的寿命从原来的几年降低为几个月。</li></ul><p><strong>everysec【推荐】（默认）</strong></p><ul><li>说明：每秒执行一次同步显式的将多个写命令同步到磁盘</li><li>解释：为了兼顾数据安全和写入性能，用户可以考虑使用everysec选项，让redis每秒一次的频率对AOF文件进行同步；redis每秒同步一次AOF文件时性能和不使用任何持久化特性时的性能相差无几，而通过每秒同步一次AOF文件，redis可以保证，即使系统崩溃，用户最多丢失一秒之内产生的数据。</li></ul><p><strong>no【不推荐】</strong></p><ul><li>说明：由操作系统决定何时同步</li><li>解释：最后使用no选项，将完全由操作系统决定什么时候同步AOF日志文件，这个选项不会对redis性能带来影响。但是系统崩溃时，会丢失不定数量的数据，另外如果用户硬盘处理写入操作不够快的话，当缓冲区被等待写入硬盘数据填满时，redis会处于阻塞状态，并导致redis的处理命令请求的速度变慢。</li></ul><h4 id="AOF文件的重写"><a href="#AOF文件的重写" class="headerlink" title="AOF文件的重写"></a>AOF文件的重写</h4><h5 id="AOF带来的问题"><a href="#AOF带来的问题" class="headerlink" title="AOF带来的问题"></a>AOF带来的问题</h5><p>AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100就够了。为了压缩aof的持久化文件，Redis提供了<strong>AOF重写（ReWriter）机制</strong>。</p><h5 id="AOF重写机制"><a href="#AOF重写机制" class="headerlink" title="AOF重写机制"></a>AOF重写机制</h5><p><strong>客户端方式触发重写</strong></p><ul><li>执行 <code>BGREWRITEAOF</code> 命令（该命令不会阻塞redis的服务）</li></ul><p><strong>服务器配置方式自动触发</strong></p><ul><li>配置<code>redis.conf</code>中的<code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>选项</li><li>如果设置<code>auto-aof-rewrite-percentage 100</code>和<code>auto-aof-rewrite-min-size 64mb</code>，并且启用的AOF持久化时，那么当AOF文件体积大于64M，并且AOF文件的体积比上一次重写之后体积大了至少一倍(100%)时，会自动触发。如果重写过于频繁，用户可以考虑将<code>auto-aof-rewrite-percentage</code>设置为更大。</li></ul><blockquote><p><code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>可能解释不太对，翻看官方文档后需要查看配置文件说明<br><img src="/Resources/Pasted%20image%2020220919094207.png"></p><p>查看配置文件说明<br><img src="/Resources/Pasted%20image%2020220919094655.png"></p></blockquote><h5 id="重写原理"><a href="#重写原理" class="headerlink" title="重写原理"></a>重写原理</h5><p>注意：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，替换原有的文件。这点和快照有点类似。</p><p><strong>重写流程</strong>：</p><ul><li><ol><li>redis调用fork ，现在有父子两个进程，子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令。</li></ol></li><li><ol start="2"><li>父进程继续处理client请求，除了把写命令写入到原来的aof文件中。同时把收到的写命令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。</li></ol></li><li><ol start="3"><li>当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然后父进程把缓存的写命令也写入到临时文件。</li></ol></li><li><ol start="4"><li>现在父进程可以使用临时文件替换老的aof文件，并重命名，后面收到的写命令也开始往新的aof文件中追加。</li></ol></li></ul><p><img src="/Resources/Pasted%20image%2020220919101504.png"></p><h2 id="10、Java操作Redis"><a href="#10、Java操作Redis" class="headerlink" title="10、Java操作Redis"></a>10、Java操作Redis</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore</a><br>搜索<code>jedis</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编码测试"><a href="#编码测试" class="headerlink" title="编码测试"></a>编码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPing</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-comment">// 1. new Jedis 对象即可  </span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);  <br>        <span class="hljs-comment">// jedis 所有的命今就是我们之前学习的所有指令!  </span><br>        System.out.println(jedis.ping());  <br>    &#125;<br>&#125; <br>output:<br>PONG<br></code></pre></td></tr></table></figure><h3 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h3><h2 id="11-Springboot整合Redis"><a href="#11-Springboot整合Redis" class="headerlink" title="11. Springboot整合Redis"></a>11. Springboot整合Redis</h2><p>Spring Boot Data Redis 中提供了 RedisTemplate和StringRedisTemplate。<br>其中StringRedisTemplate是RedisTemplate的子类</p><ul><li><strong>RedisTemplate</strong><br>两个泛型都是Object，意味着存储的key和value 都可以是一个对象</li><li><strong>StringRedisTemplate</strong><br>两个泛型都是String,意味着StringRedisTemplate的key和value都只能是字符串</li></ul><blockquote><p>注意：使用RedisTemplate默认是将对象序列化到Redis中，所以放入的对象必须实现对象序列化接口</p></blockquote><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        Spring date redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-配置applicaiton-yml"><a href="#1-配置applicaiton-yml" class="headerlink" title="1. 配置applicaiton.yml"></a>1. 配置applicaiton.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># redis  </span><br><span class="hljs-attr">redis:</span>  <br>  <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <br>  <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-测试使用StringRedisTemplate"><a href="#2-测试使用StringRedisTemplate" class="headerlink" title="2. 测试使用StringRedisTemplate"></a>2. 测试使用StringRedisTemplate</h3><p><code>opsForValue()</code>就是<code>redis</code>中的<code>String</code><br><code>opsForList()</code>就是<code>redis</code>中的<code>list</code><br><code>....</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStringRedisTemplate</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入SpringRedisTemplate</span><br><span class="hljs-comment">     * SpringRedisTemplate的key和value都是String类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作redis中key相关的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKey</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 判断某个key是否存在</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> stringRedisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(hasKey);<br><br>        <span class="hljs-comment">// 删除一个key</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">aBoolean</span> <span class="hljs-operator">=</span> stringRedisTemplate.delete(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(aBoolean);<br><br>        <span class="hljs-comment">// 判断某个key是否存在</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">hasKeys</span> <span class="hljs-operator">=</span> stringRedisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(hasKeys);<br><br>        <span class="hljs-comment">// 判断key对应值的类型</span><br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> stringRedisTemplate.type(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(type);<br><br>        <span class="hljs-comment">// 判断redis中所有的key</span><br>        Set&lt;String&gt; keys = stringRedisTemplate.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-comment">// 获取key值的过期事件</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> stringRedisTemplate.getExpire(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(expire);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>        stringRedisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>        stringRedisTemplate.opsForList().leftPushAll(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;wttt&quot;</span>, <span class="hljs-string">&quot;wtttt&quot;</span>);<br>        <span class="hljs-comment">// 在redis-cli中查看list 使用LRANGE name 0 -1</span><br>        List&lt;String&gt; list = stringRedisTemplate.opsForList().range(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">assert</span> list != <span class="hljs-literal">null</span>;<br>        list.forEach(value -&gt; System.out.println(value));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建Set</span><br>        stringRedisTemplate.opsForSet().add(<span class="hljs-string">&quot;nameSet&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>,<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;wt&quot;</span>);<br>        <span class="hljs-comment">// 查看Set</span><br>        Set&lt;String&gt; set = stringRedisTemplate.opsForSet().members(<span class="hljs-string">&quot;nameSet&quot;</span>);<br>        <span class="hljs-keyword">assert</span> set != <span class="hljs-literal">null</span>;<br>        set.forEach(string-&gt; System.out.println(string));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建ZSet</span><br>        stringRedisTemplate.opsForZSet().add(<span class="hljs-string">&quot;zsets&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>,<span class="hljs-number">13</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建一个hash类型并放入key value</span><br>        stringRedisTemplate.opsForHash().put(<span class="hljs-string">&quot;maps&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;wtt&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作redis中字符串 opsForValue实际操作就是redis中的String类 型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置一个 key value</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>        <span class="hljs-comment">// 获取key 对应的value</span><br>        stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 设置一个 key value expireTime</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-number">120</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 追加value</span><br>        stringRedisTemplate.opsForValue().append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;lihai&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-测试使用RedisTemplate"><a href="#3-测试使用RedisTemplate" class="headerlink" title="3. 测试使用RedisTemplate"></a>3. 测试使用RedisTemplate</h3><p>![[redistemplate 2.png]]<br><code>RedisTemplate</code>存进<code>redis</code>中的数据都是经过序列化的，所以放入的对象必须实现对象序列化接口。因此使用<code>RedisTemplate</code>拿不到通过<code>StringRedisTemplate</code>存进去的数据</p><hr><p>但是我们常常用<code>String</code>表示<code>key</code>，对象表示<code>value</code>，因此可以修改序列化的方式。<br>默认的序列化方式是<code>JdkSerializationRedisSerializer</code><br>![[Pasted image 20220705194854.png]]</p><hr><p>修改默认序列化方案<br><code>redisTemplate.setKeySerializer(new StringRedisSerializer());</code></p><blockquote><p>但是对于hashmap来说，![[Pasted image 20220705201037.png]]有两个key值，使用上述方案，只会修改第一个key的默认序列化方案，因此如果想修改第二个的默认序列化方案，还需要修改hashkey的序列化<code>redisTemplate.setHashKeySerializer(new StringRedisSerializer());</code></p></blockquote><h3 id="4-RedisTemplate和StringRedisTemplate的bound-api"><a href="#4-RedisTemplate和StringRedisTemplate的bound-api" class="headerlink" title="4. RedisTemplate和StringRedisTemplate的bound api"></a>4. RedisTemplate和StringRedisTemplate的bound api</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBound</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//spring data 为了方便我们对redis进行更友好的操作 因此提供了bound api 简化操作</span><br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    stringredisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>    stringredisTemplate.opsForValue().append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;lihai!&quot;</span>);<br>    stringredisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br><br>    <span class="hljs-comment">//对字符串类型key进行绑定后续所有操作都是基于这个key的操作</span><br>    BoundValueOperations&lt;String, String&gt; name = stringredisTemplate.boundValueOps(<span class="hljs-string">&quot;name&quot;</span>);<br>    name.set(<span class="hljs-string">&quot;wtt&quot;</span>);<br>    name.append(<span class="hljs-string">&quot;lihailiahi!&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>针对于日后处理的key value 都是 String 使用 StringRedisTemplate </li><li>针对于日后处理的key value 都是对象使用 RedisTemplate </li><li>针对于同一个key多次操作可以使用boundxxxOps () Value List Set Iset Hash的api 简化书写</li></ol></blockquote><h2 id="12、Redis应用场景"><a href="#12、Redis应用场景" class="headerlink" title="12、Redis应用场景"></a>12、Redis应用场景</h2><ol><li>利用redis中字符串类型完成项目中手机<strong>验证码存储</strong>的实现</li><li>利用redis中字符串类型完成具有<strong>时效性业务</strong>功能，如订单超时，用户信息token<ul><li>12306</li><li>淘宝</li></ul></li><li>利用redis中分布式集群系统<strong>session共享</strong></li><li>利用redis中的zset类型，实现如<strong>排行榜</strong>之类功能 <ul><li>dangdang销量排行sales(zset)[商品id,商品销量]</li></ul></li><li>利用redis实现<strong>分布式缓存</strong></li><li>利用redis解决分布式集群系统中<strong>分布式锁问题</strong></li></ol><h3 id="分布式缓存（一）"><a href="#分布式缓存（一）" class="headerlink" title="分布式缓存（一）"></a>分布式缓存（一）</h3><ul><li><ol><li>缓存（Cache）：计算机内存中的一段数据</li></ol></li><li><ol start="2"><li>特点</li></ol><ul><li>读写快</li><li>断电立即丢失</li></ul></li><li><ol start="3"><li>解决问题</li></ol><ul><li>提高网站吞吐量提高网站运行效率</li><li><strong>核心解决问题</strong>：缓存的存在是用来减轻数据库访问压力</li><li>注意：使用缓存时一定是数据库中数据<strong>极少发生修改</strong>，更多用于查询这种情况（有点类似mysql中的索引）</li></ul></li><li><ol start="4"><li>本地缓存与分布式缓存</li></ol><ul><li>本地缓存（local cache）<ul><li>存在应用服务器内存中数据称之为本地缓存</li><li>本地缓存会随着应用的关闭丢失</li></ul></li><li>分布式缓存（distribute cache）<ul><li>存储在当前应用服务器内存之外数据称之为分布式缓存</li></ul></li><li>集群<ul><li>将<strong>同一种服务的多个节点</strong>放在一起共同对系统提供服务过程，称之为集群</li></ul></li><li>分布式<ul><li><strong>有多个不同服务集群</strong>功能对系统提供服务，这个系统称之为分布式系统</li></ul></li></ul></li><li><ol start="5"><li>利用mybatis自身本地缓存结合redis实现分布式缓存</li></ol><ul><li>mybatis中应用级缓存（二级缓存）  <ul><li>sqlsessionFactory级别缓存  所有会话共享</li></ul></li><li>如何开启应用级缓存（二级缓存）<ul><li>在mapper.xml中加入标签<code>&lt;cache/&gt;</code></li></ul></li></ul></li></ul><h4 id="搭建Mybatis本地缓存环境"><a href="#搭建Mybatis本地缓存环境" class="headerlink" title="搭建Mybatis本地缓存环境"></a>搭建Mybatis本地缓存环境</h4><blockquote><p>基本环境搭建参考：<a href="../../Spring/SpringBoot/SpringBoot.md#%E5%9C%A8SpringBoot%E4%B8%AD%E9%9B%86%E6%88%90Mybatis">在SpringBoot中集成Mybatis</a><br>注意：如果要使用mybatis自身本地缓存，entity对象必须实现对象序列化<code>implements Serializable</code>；</p></blockquote><ul><li><p>开启mybatis自身本地缓存前<br><img src="/Resources/Pasted%20image%2020220919161137.png"></p></li><li><p>开启mybatis自身本地缓存后（开启方式如下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mybatis二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--第一种和第二种效果相同--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220919161033.png"></p></li></ul><h4 id="搭建Redis分布式缓存环境"><a href="#搭建Redis分布式缓存环境" class="headerlink" title="搭建Redis分布式缓存环境"></a>搭建Redis分布式缓存环境</h4><p><img src="/Resources/Pasted%20image%2020220919164355.png"><br>通过查看源码发现，mybatis中的<code>PerpetualCache</code>，将缓存put到内存中，下次取得时候再get，底层使用的数据结构是<code>HashMap</code>，因此<strong>使用Redis分布式缓存只需要自定义一个Cache类实现Cache接口，并对其中的方法换成redis中的方式实现即可</strong>。</p><p>最后再把type中的类名换成自定义的Cache类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;xxxx&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="实现get-put"><a href="#实现get-put" class="headerlink" title="实现get put"></a>实现get put</h5><p>新建一个<code>RedisCache</code>实现<code>Cache</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object o, Object o1)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将type中的类名换成自定义的Cache类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cqupt.cache.RedisCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>运行报错<br><img src="/Resources/Pasted%20image%2020220919170356.png"></p><p>报错信息：需要定义一个ID和构造器（仿照mybatis的PerpetualCache的代码添加id和构造器后并运行）<br><img src="/Resources/Pasted%20image%2020220919171051.png"></p><blockquote><p>通过控制台的信息可以发现：id是mapper中的namespace</p></blockquote><p>运行报错<br><img src="/Resources/Pasted%20image%2020220919170356.png"></p><p>报错信息：name值不能为空，那么值就是id就是mapper中的namespace，所以只需要将<code>return null</code>改为<code>return this.id</code>即可。<br><img src="/Resources/Pasted%20image%2020220919172257.png"></p><p>以下不再一一举例，见代码中注释说明；<br><img src="/Resources/Pasted%20image%2020220919173357.png"></p><p><code>RedisCache</code> 自定义Cache类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前放入缓存的mapper的namespace</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 必须存在构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 当前放入缓存的mapper的namespace</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisCache</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;id======================&gt;&quot;</span> + id);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回cache唯一标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过RedisTemplate或者StringRedisTemplate把值放入redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">         * 这里不能直接使用</span><br><span class="hljs-comment">         * @autowired</span><br><span class="hljs-comment">         * private RedisTemplate redisTemplate</span><br><span class="hljs-comment">         * 是因为RedisCache这个类是由mybatis实例化的，而不是spring工厂，因此不能使用注入方式</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 使用redis hash类型作为缓存存储模型&lt;key, &lt;hashKey,value&gt;&gt;</span><br><span class="hljs-comment">         * 其中key是mapper的namespace</span><br><span class="hljs-comment">         * hashKey是具体的mapper中的某个方法</span><br><span class="hljs-comment">         * value则是某个方法的返回值</span><br><span class="hljs-comment">         */</span><br><br>        redisTemplate.opsForHash().put(id.toString(),key.toString(),value);<br><br>        System.out.println(<span class="hljs-string">&quot;key======================&gt;&quot;</span>+key.toString());<br>        System.out.println(<span class="hljs-string">&quot;value======================&gt;&quot;</span>+value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 根据key从redis获取数据</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash().get(id.toString(), key.toString());<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ApplicationContextUtils</code></p><blockquote><p>对ApplicationContextAware不够了解！且<code>因为RedisCache这个类是由mybatis实例化的，而不是spring工厂，因此不能使用注入方式</code>这句话也不太理解！Redis学完后，复习Spring5!</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Springboot创建好的工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 保留下来的工厂</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将创建好的工厂以参数的形式传递给这个类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> applicationContext 工厂</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供再工厂中获取对象的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserServiceTest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        userService.findAll().forEach(System.out::println);<br><br>        userService.findAll().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现结果<br><img src="/Resources/Pasted%20image%2020220919193626.png"></p><h5 id="实现remove-clear"><a href="#实现remove-clear" class="headerlink" title="实现remove clear"></a>实现remove clear</h5><p>Q：<u>如果在查询的时候Redis中正好有数据，但是前一秒被修改了，那么从Redis拿出来的数据就是旧数据。类似于以下</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">find<br>modify<br>find<br></code></pre></td></tr></table></figure><p>A：<u>每当进行修改的时候，就把缓存清除，即触发下面的clear方法(不是removeObject，mybatis版本为2.1.3)</u><br><strong>特别注意的是：clear清除的是key为id（namespace）的hash，即清除这一个mapper的所有缓存</strong></p><p>完善之前没有写完的<code>removeObject</code>和<code>clear</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据指定的key删除缓存（mybatis现在还没有实现该方法，以后可能会实现）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 清空缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 清空namespace</span><br><span class="hljs-comment">     */</span><br>    redisTemplate.delete(id.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>Q：<u>为什么使用clear，不根据指定的key删除对应的value</u><br>A：<img src="/Resources/Pasted%20image%2020220919204625.png"><br><u>经过测试，不同参数对应的Key是不同的，因此应该是可以通过只删除对应的value的，也就是使用removeObject方法，但是mybatis默认却没有实现</u></p><h5 id="实现getSize"><a href="#实现getSize" class="headerlink" title="实现getSize"></a>实现getSize</h5><p>该方法用于计算缓存数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().size(id.toString()).intValue();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="最后一点：优化获取redisTemplate"><a href="#最后一点：优化获取redisTemplate" class="headerlink" title="最后一点：优化获取redisTemplate"></a>最后一点：优化获取redisTemplate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RedisTemplate <span class="hljs-title function_">getRedisTemplate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    <span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分布式缓存（二）"><a href="#分布式缓存（二）" class="headerlink" title="分布式缓存（二）"></a>分布式缓存（二）</h3><p>如果项目中表查询之间没有任何关联查询，使用分布式缓存（一）中的缓存方式没有任何问题。</p><p><strong>但是如果在表连接查询过程中就会存在一定的问题！</strong></p><p>解决方式：将<code>&lt;cache&gt;</code>标签换成&#96;<cache-ref namespace="xxxx"/><br>效果如图所示：<strong>UserDao和EmpDao共享UserDao的缓存</strong>，即EmpDao使用了UserDao的id（namespace）进行存储。<br><img src="/Resources/Pasted%20image%2020220920200751.png"></p><p>测试<br><img src="/Resources/Pasted%20image%2020220920203940.png"></p><h3 id="分布式缓存（三）"><a href="#分布式缓存（三）" class="headerlink" title="分布式缓存（三）"></a>分布式缓存（三）</h3><ol><li>缓存优化策略<br>对放入redis中的key（这里的key指的是hashkey，真正的key是namespace）的长度进行优化：尽可能的将key设计简洁<br><img src="/Resources/Pasted%20image%2020220920202718.png"><br><strong>使用MD5对key进行处理</strong><br>MD5相关参考：<a href="../../Shiro/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B.md#6%20%E4%BD%BF%E7%94%A8MD5%20Salt%20Hash">使用MD5 Salt Hash</a></li></ol><p>修改<code>RedisCache</code>中的代码<br><img src="/Resources/Pasted%20image%2020220920205128.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将冗长的key转为md5</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> md5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getKeyToMd5</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-keyword">return</span> DigestUtils.md5DigestAsHex(key.getBytes());<br>&#125;<br></code></pre></td></tr></table></figure><p>修改之后如下所示</p><ul><li>放<br><img src="/Resources/Pasted%20image%2020220920205226.png"></li><li>取<br><img src="/Resources/Pasted%20image%2020220920205506.png"></li></ul><h3 id="缓存穿透、缓存雪崩、缓存击穿"><a href="#缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿"></a>缓存穿透、缓存雪崩、缓存击穿</h3><blockquote><p>参考资料：<a href="https://blog.csdn.net/qq_45637260/article/details/125866738">详解缓存穿透、缓存雪崩、缓存击穿</a></p></blockquote><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>大多数情况，缓存可以减少数据库的查询，提升系统性能。</p><p>通常流程是：一个请求过来，先查询是否在缓存当中，如果缓存中存在，则直接返回。如果缓存中不存在对应的数据，则检索数据库，如果数据库中存在对应的数据，则更新缓存并返回结果。如果数据库中也不存在对应的数据，则返回空或错误。</p><p>缓存穿透（cache penetration）是用户访问的<strong>数据既不在缓存当中，也不在数据库中</strong>。出于容错的考虑，如果从底层数据库查询不到数据，则不写入缓存。这就导致<strong>每次请求都会到底层数据库进行查询，缓存也失去了意义</strong>。当高并发或有人利用不存在的Key频繁攻击时，<strong>数据库的压力骤增</strong>，甚至崩溃，这就是<strong>缓存穿透</strong>问题。<br><img src="/Resources/Pasted%20image%2020230531111802.png"></p><ul><li><p>解决方案1：缓存空数据，查询返回的数据为空，仍把这个空结果进行缓存，此时如果往数据库插入了数据，需要把redis中的数据进行更新</p><ul><li>返回值：<code>&#123;key : 1, value : null&#125;</code></li><li>更新值：<code>&#123;key : 1, value : 1&#125;</code></li><li>缺点：可能存在数据不一致问题，没有及时更新，导致数据库已经有结果了，但是redis中还是null</li></ul></li><li><p>解决方案2：<strong>布隆过滤器</strong></p><ul><li><img src="/Resources/Pasted%20image%2020230531111852.png"></li><li>实现方案<ul><li>Redisson：它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</li><li><a href="https://github.com/redisson/redisson#quick-start">Java实现方法如下</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>config.useSingleServer().setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//构造Redisson</span><br><span class="hljs-type">RedissonClient</span> <span class="hljs-variable">redisson</span> <span class="hljs-operator">=</span> Redisson.create(config);<br> <br>RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class="hljs-string">&quot;phoneList&quot;</span>);<br><span class="hljs-comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span><br>bloomFilter.tryInit(<span class="hljs-number">100000000L</span>,<span class="hljs-number">0.03</span>);<br><span class="hljs-comment">//将号码10086插入到布隆过滤器中</span><br>bloomFilter.add(<span class="hljs-string">&quot;10086&quot;</span>);<br> <br><span class="hljs-comment">//判断下面号码是否在布隆过滤器中</span><br>System.out.println(bloomFilter.contains(<span class="hljs-string">&quot;123456&quot;</span>));<span class="hljs-comment">//false</span><br>System.out.println(bloomFilter.contains(<span class="hljs-string">&quot;10086&quot;</span>));<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Guava</li></ul></li><li>缺点：布隆过滤器是通过查询hash后的值是否为1，当id1和id2将1、3、7、9、12、14的值更改为1后，id3对应的3、9、12恰好也为1，但实际上id3是不存在的<ul><li><img src="/Resources/Pasted%20image%2020230531113240.png"></li><li>存在误判</li></ul></li></ul></li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>在使用缓存时，通常会对缓存设置过期时间，一方面目的是保持缓存与数据库数据的一致性，另一方面是减少冷缓存占用过多的内存空间。</p><p>但当缓存中大量热点缓存采用了相同的实效时间，就会导致<strong>大量缓存在某一个时刻同时实效</strong>，请求全部转发到数据库，从而导致<strong>数据库压力骤增</strong>，甚至宕机。从而形成一系列的连锁反应，造成系统崩溃等情况，这就是<strong>缓存雪崩</strong>（Cache Avalanche）。</p><p><img src="/Resources/Pasted%20image%2020230531145859.png"></p><ul><li>解决方案：<ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性：哨兵模式、集群模式</li><li>给缓存业务添加降级限流策略<ul><li>ngxin、spring cloud gateway</li><li>降级可做为系统的保底策略，适用于穿透、击穿、雪崩</li></ul></li><li>给业务添加多级缓存：Guava、Caffeine</li></ul></li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存雪崩是指大量热点key同时失效的情况，如果是<strong>单个热点key</strong>，在不停的扛着大并发，在这个key失效的瞬间，持续的大并发请求就会击破缓存，直接请求到数据库，好像蛮力击穿一样。这种情况就是<strong>缓存击穿</strong>（Cache Breakdown）。</p><p><img src="/Resources/Pasted%20image%2020230531143625.png"></p><ul><li>解决方案1：互斥锁(<strong>强一致</strong>)</li><li>解决方案2：逻辑过期(<strong>高可用</strong>)</li><li><img src="/Resources/Pasted%20image%2020230531144701.png"></li></ul><p>从定义上可以看出，缓存击穿和缓存雪崩很类似，只不过是缓存击穿是一个热点key失效，而缓存雪崩是大量热点key失效。因此，可以将缓存击穿看作是缓存雪崩的一个子集。</p><h2 id="13、Redis主从"><a href="#13、Redis主从" class="headerlink" title="13、Redis主从"></a>13、Redis主从</h2><h3 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h3><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。因为根据经验，对Redis的操作大部分都是读，写操作占少数，所以在集群中采用读写分离，同时以少量主节点和大量从节点搭配，大大提升Redis的读取性能。<strong>主节点需要注意的就是数据同步如何同步给从节点。</strong></p><h3 id="主从架构图"><a href="#主从架构图" class="headerlink" title="主从架构图"></a>主从架构图</h3><p><img src="/Resources/Pasted%20image%2020230601142227.png"></p><h3 id="搭建主从架构"><a href="#搭建主从架构" class="headerlink" title="搭建主从架构"></a>搭建主从架构</h3><p>使用docker搭建redis主从架构<br>参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#1%20Master%20Slave">docker 搭建redis主从架构</a></p><p><strong>主从复制同步原理</strong></p><ul><li>主从全量同步<ul><li>Replication Id：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li>offset：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li><li><img src="/Resources/Pasted%20image%2020230601143233.png"></li></ul></li><li>主从增量同步<ul><li><img src="/Resources/Pasted%20image%2020230601143341.png"></li><li><img src="/Resources/Pasted%20image%2020230601143359.png"></li></ul></li></ul><h2 id="14、Redis哨兵机制"><a href="#14、Redis哨兵机制" class="headerlink" title="14、Redis哨兵机制"></a>14、Redis哨兵机制</h2><h3 id="哨兵Sentinel机制"><a href="#哨兵Sentinel机制" class="headerlink" title="哨兵Sentinel机制"></a>哨兵Sentinel机制</h3><p>Sentinel（哨兵）是Redis的高可用性解决方案：由一个或多个Sentinel实例组成的Sentinel系统，它可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。简单的说<strong>哨兵就是带有自动故障转移功能的主从架构</strong>。<br><img src="/Resources/Pasted%20image%2020230605095101.png"></p><p><strong>哨兵架构原理</strong><br><img src="/Resources/Pasted%20image%2020220921164320.png"></p><blockquote><p>如果最后的master被修复了之后，将成为新的slave节点继续加入redis集群（Sentinel系统）中。</p></blockquote><p><strong>哨兵监控机制</strong><br><img src="/Resources/Pasted%20image%2020220921195400.png"></p><h3 id="哨兵脑裂"><a href="#哨兵脑裂" class="headerlink" title="哨兵脑裂"></a>哨兵脑裂</h3><p>集群脑裂是由于主节点和从节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到主节点，所以通过选举的方式提升了一个从节点为主，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在老的主节点那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将老的主节点降为从节点，这时再从新master同步数据，就会导致数据丢失</p><p><img src="/Resources/Pasted%20image%2020230605100402.png"></p><p><img src="/Resources/Pasted%20image%2020230605100349.png"><br>解决办法：我们可以修改redis的配置，可以设置最少的从节点数量以及缩短主从数据同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p><p>redis中有两个配置参数：</p><p>min-replicas-to-write 1   表示最少的salve节点为1个</p><p>min-replicas-max-lag 5  表示数据复制和同步的延迟不能超过5秒</p><h3 id="搭建哨兵架构"><a href="#搭建哨兵架构" class="headerlink" title="搭建哨兵架构"></a>搭建哨兵架构</h3><p>参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#2%20Redis%20Sentinel">2 Redis Sentinel</a></p><h3 id="Springboot操作哨兵机制下的Redis"><a href="#Springboot操作哨兵机制下的Redis" class="headerlink" title="Springboot操作哨兵机制下的Redis"></a>Springboot操作哨兵机制下的Redis</h3><blockquote><p>主从复制模式下的只需要加一个密码就可以了，其他都不需要更改！</p></blockquote><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment">#  单节点</span><br>  <span class="hljs-comment">#  redis:</span><br>  <span class="hljs-comment">#    host: 192.168.153.135</span><br>  <span class="hljs-comment">#    password: redispwd</span><br>  <span class="hljs-comment">#  redis sentinel配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">redispwd</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-comment"># master是使用哨兵监听的那个名称</span><br>      <span class="hljs-attr">master:</span> <span class="hljs-string">mymaster</span><br>      <span class="hljs-comment"># 连接的不再是一个具体redis主机,写的是多个哨兵节点</span><br>      <span class="hljs-attr">nodes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26379</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26380</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26381</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">redispwd</span><br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>执行查询的命令：从数据库拿数据并缓存到redis<br><img src="/Resources/Pasted%20image%2020220922201818.png"></p></li><li><p>此时停掉master服务器</p></li><li><p>再次执行查询的命令：<br>报错连不上redis（此时连接的是新的master找不到）<br><img src="/Resources/Pasted%20image%2020220923091850.png"><br>暂时不知道怎么解决，可视化工具是可以实现主节点宕机，从节点变成主节点，并能够实现主从复制，这里可能是配置文件写错了，导致出问题，之后再解决</p></li></ol><h2 id="15、Redis集群"><a href="#15、Redis集群" class="headerlink" title="15、Redis集群"></a>15、Redis集群</h2><p>Redis在3.0后开始支持Cluster（模式）模式，目前redis的集群支持节点的自动发现，支持slave-master选举和容错，支持在线分片(sharding shard )等特性。</p><h2 id="16、双写一致"><a href="#16、双写一致" class="headerlink" title="16、双写一致"></a>16、双写一致</h2><p>双写一致性：当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致</p><h3 id="一致性要求高"><a href="#一致性要求高" class="headerlink" title="一致性要求高"></a>一致性要求高</h3><p>Redisson提供的读写锁</p><h3 id="允许延迟一致"><a href="#允许延迟一致" class="headerlink" title="允许延迟一致"></a>允许延迟一致</h3><p>异步通知保证数据的最终一致性</p><p>基于MQ的异步通知：<br><img src="/Resources/Pasted%20image%2020230531153915.png"><br>基于Canal的异步通知：<br><img src="/Resources/Pasted%20image%2020230531153939.png"></p><h2 id="17、数据过期策略"><a href="#17、数据过期策略" class="headerlink" title="17、数据过期策略"></a>17、数据过期策略</h2><p>Redis对数据设置数据的有效时间，数据过期以后，就需要将数据从内存中删除掉。可以按照不同的规则进行删除，这种删除规则就被称之为数据的删除策略（数据过期策略）。</p><p>Redis的过期删除策略：惰性删除 + 定期删除两种策略进行配合使用</p><ul><li>惰性删除<ul><li>设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key</li><li>优点 ：对CPU友好，只会在使用该key时才会进行过期检查，对于很多用不到的key不用浪费时间进行过期检查</li><li>缺点 ：对内存不友好，如果一个key已经过期，但是一直没有使用，那么该key就会一直存在内存中，内存永远不会释放</li></ul></li><li>定期删除<ul><li>每隔一段时间，我们就对一些key进行检查，删除里面过期的key(从一定数量的数据库中取出一定数量的随机key进行检查，并删除其中的过期key)。</li><li>两种模式：<ul><li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件 <code>redis.conf</code> 的 hz 选项来调整这个次数<br><img src="/Resources/Pasted%20image%2020230531172213.png"></li><li>lFAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</li></ul></li><li>优点：可以通过限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响。另外定期删除，也能有效释放过期键占用的内存。</li><li>缺点：难以确定删除操作执行的时长和频率。</li></ul></li></ul><h2 id="18、数据淘汰策略"><a href="#18、数据淘汰策略" class="headerlink" title="18、数据淘汰策略"></a>18、数据淘汰策略</h2><p>数据的淘汰策略：当Redis中的内存不够用时，此时在向Redis中添加新的key，那么Redis就会按照某一种规则将内存中的数据删除掉，这种数据的删除规则被称之为内存的淘汰策略。</p><p><img src="/Resources/Pasted%20image%2020230531173256.png"></p><p>Redis支持8种不同策略来选择要删除的key：</p><ul><li>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，<strong>默认就是这种策略</strong>。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random：对全体key ，随机进行淘汰。</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。</li><li>allkeys-lru： 对全体key，基于LRU算法进行淘汰</li><li>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</li></ul><p>LRU（Least <strong>Recently</strong> Used）最近最少使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p><p>LFU（Least <strong>Frequently</strong> Used）最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</p><p>使用建议：<br>1.优先使用 allkeys-lru 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。</p><p>2.如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 allkeys-random，随机选择淘汰。</p><p>3.如果业务中有置顶的需求，可以使用 volatile-lru 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。</p><p>4.如果业务中有短时高频访问的数据，可以使用 allkeys-lfu 或 volatile-lfu 策略。</p><h2 id="19、分布式锁"><a href="#19、分布式锁" class="headerlink" title="19、分布式锁"></a>19、分布式锁</h2><p>分布式锁使用的场景：集群情况下的定时任务、抢单、幂等性场景</p><p>抢券场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抢购优惠券</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rushToPurchase</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//获取优惠券数量</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br><span class="hljs-comment">// 判断是否抢完</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == num || num &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;优惠券已抢完&quot;</span>);<br>&#125;<br><span class="hljs-comment">//优惠券数量减一，说明抢到了优惠券</span><br>num = num - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 重新设置优惠券的数量</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, num);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码，会导致超卖现象，如库存为1的优惠券，经过两个线程的执行后，库存就会变成-1<br><img src="/Resources/Pasted%20image%2020230601095723.png"></p><p>加锁：使用synchronized可以解决上述问题，但这种锁（本地锁）只适用于单体应用，只能在单个jvm中生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抢购优惠券</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rushToPurchase</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-comment">//获取优惠券数量</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br><span class="hljs-comment">// 判断是否抢完</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == num || num &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;优惠券已抢完&quot;</span>);<br>&#125;<br><span class="hljs-comment">//优惠券数量减一，说明抢到了优惠券</span><br>num = num - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 重新设置优惠券的数量</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用synchronized，多个tomcat任然会出现超卖问题</p><p><img src="/Resources/Pasted%20image%2020230601100459.png"></p><p>分布式锁<br><img src="/Resources/Pasted%20image%2020230601101303.png"></p><p>实现：<br>Redis实现分布式锁主要利用Redis的setnx命令。setnx是SET if not exists(如果不存在，则 SET)的简写。<br><img src="/Resources/Pasted%20image%2020230601102342.png"><br>注意：<br>Q:如果不设置时间，可能会因为业务超时或者服务宕机出现死锁，因为无法释放锁<br>Q:如果设置时间过短，业务没有结束就被自动删除了</p><p>A1:设置过期时间，但具体数值需要根据具体业务设置<br>A2:给锁续期：使用redisson实现的分布式锁</p><p>redisson实现的分布式锁:加锁和设置过期时间是基于lua脚本（Lua脚本是redis已经内置的一种轻量小巧语言，其执行是通过redis的<strong>eval</strong> &#x2F; <strong>evalsha</strong> 命令来运行，把操作封装成一个Lua脚本，<del>如论如何都是一次执行的原子操作</del>，不过，如果 Lua 脚本运行时出错并中途结束，出错之后的命令是不会被执行的。并且，出错之前执行的命令是无法被撤销的，无法实现类似关系型数据库执行失败可以回滚的那种原子性效果。即，可以看作是原子操作，<strong>但严格来说的话，不完全满足原子性。</strong>）实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisLock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 获取锁（重入锁），执行锁的名称</span><br><span class="hljs-type">RLock</span> <span class="hljs-variable">rLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(lockName);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 尝试获取锁，参数分别是:获取锁的最大等待时间（期间会重试)，锁自动释放时间，时间单位</span><br><span class="hljs-comment">// boolean isLock = lock.tryLock(10，30，TimeUnit.SECONDS) ;</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> rLock.tryLock(expireTime, TimeUnit.MILLISECONDS);<br><span class="hljs-keyword">if</span> (isLocked) &#123;<br><span class="hljs-comment">// TODO</span><br>&#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放锁</span><br>rLock.unlock();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230601103935.png"></p><p>redisson实现的分布式锁-可重入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;heimalock&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br><span class="hljs-comment">//执行业务</span><br>add2();<br><span class="hljs-comment">//释放锁</span><br>lock.unlock();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;heimalock&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br><span class="hljs-comment">//执行业务</span><br><span class="hljs-comment">//释放锁</span><br>lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里add1创建的锁，add2也可以拿到继续用（因为是同一个线程），因为redisson实现的分布式锁是可重入的，底层维护了hash结构，当执行add1的时候，重入次数为1<br><img src="/Resources/Pasted%20image%2020230601110132.png"><br>当执行add2的时候，重入次数为2<br>当执行完成add2的时候，重入次数为1<br>当执行完成add1的时候，重入次数为0；<br>Q：为什么add1里面加锁，add2还要加锁呢？<br>A：因为add2不是只会在add1里面调用</p><p>redisson实现的分布式锁-主从一致性<br>当java应用获取锁时，master节点宕机了<br><img src="/Resources/Pasted%20image%2020230601112840.png"></p><p>此时redis会选举一个从节点作为主节点，由于之前的master宕机了，还没来得及数据同步，此时另外一个java应用获取了锁，那么现在就会有两个线程同时持有一把锁<br><img src="/Resources/Pasted%20image%2020230601112932.png"></p><p>解决：<br><img src="/Resources/Pasted%20image%2020230601113203.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis - 英文官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="Redis" scheme="http://conquers.github.io/categories/Database/Redis/"/>
    
    
    <category term="Redis" scheme="http://conquers.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
