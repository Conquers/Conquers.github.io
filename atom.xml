<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wtt&#39;s Blog</title>
  
  
  <link href="http://conquers.github.io/atom.xml" rel="self"/>
  
  <link href="http://conquers.github.io/"/>
  <updated>2023-09-18T07:40:41.525Z</updated>
  <id>http://conquers.github.io/</id>
  
  <author>
    <name>wtt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Volatile</title>
    <link href="http://conquers.github.io/posts/73afee0.html"/>
    <id>http://conquers.github.io/posts/73afee0.html</id>
    <published>2023-09-13T10:47:24.000Z</published>
    <updated>2023-09-18T07:40:41.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><h2 id="volatile-有什么用"><a href="#volatile-有什么用" class="headerlink" title="volatile 有什么用"></a>volatile 有什么用</h2><ol><li>保证有序性：防止指令重排序（本文主要说明内容）</li><li>保证可见性：保证共享变量的可见性</li></ol><h2 id="为什么要重排序"><a href="#为什么要重排序" class="headerlink" title="为什么要重排序"></a>为什么要重排序</h2><p><img src="/./Resources/image-20230913185055524.png" alt="image-20230913185055524"></p><ul><li>图中左侧是 3 行 Java 代码，右侧是这 3 行代码可能被转化成的指令。</li><li>可以看出 a &#x3D; 100 对应的是 Load a、Set to 100、Store a，意味着从主存中读取 a 的值，然后把值设置为 100，并存储回去，同理， b &#x3D; 5 对应的是下面三行 Load b、Set to 5、Store b，最后的 a &#x3D; a + 10，对应的是 Load a、Set to 110、Store a。</li><li>如果你仔细观察，会发现这里有两次“Load a”和两次“Store a”（图中黑线），说明存在一定的重排序的优化空间。</li></ul><p><strong>优化：</strong></p><p><img src="/./Resources/image-20230913185125737.png" alt="image-20230913185125737"></p><ul><li>重排序后， a 的两次操作被放到一起，指令执行情况变为 Load a、Set to 100、Set to 110、 Store a。</li><li>下面和 b 相关的指令不变，仍对应 Load b、 Set to 5、Store b。</li><li>可以看出，重排序后 a 的相关指令发生了变化，节省了一次 Load a 和一次 Store a。</li><li>重排序通过减少执行指令，从而提高整体的运行速度，这就是重排序带来的优化和好处。</li></ul><h2 id="重排序带来的问题"><a href="#重排序带来的问题" class="headerlink" title="重排序带来的问题"></a>重排序带来的问题</h2><p>单线程下，重排序时是没有问题的，但是多线程下就会出现问题</p><p><strong>例如</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResortSeqDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method01</span><span class="hljs-params">()</span> &#123;<br>        a = <span class="hljs-number">1</span>;<br>        flag = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(flag) &#123;<br>            a = a + <span class="hljs-number">5</span>;<br>            System.out.println(<span class="hljs-string">&quot;reValue:&quot;</span> + a);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们按照正常的顺序，分别调用 method01() 和 method02() 那么，最终输出就是 a &#x3D; 6，但是如果在多线程环境下，因为方法1 和方法2，他们之间不能存在数据依赖的问题，因此原先的顺序可能是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">a = <span class="hljs-number">1</span>;<br>flag = <span class="hljs-literal">true</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>System.out.println(<span class="hljs-string">&quot;reValue:&quot;</span> + a) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">flag = <span class="hljs-literal">true</span>;<br><br>a = a + <span class="hljs-number">5</span>;<br>System.out.println(<span class="hljs-string">&quot;reValue:&quot;</span> + a);<span class="hljs-comment">// 5</span><br><br>a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>也就是先执行 flag &#x3D; true 后，另外一个线程马上调用方法2，满足 flag 的判断，最终让 a + 5，结果为 5，这样就会出现数据不一致的问题</p><h2 id="为什么-volatile-可以解决重排序"><a href="#为什么-volatile-可以解决重排序" class="headerlink" title="为什么 volatile 可以解决重排序"></a>为什么 volatile 可以解决重排序</h2><p>通过编译器在编译生产字节码文件时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能。为此，JMM采取保守策略。下面是基于保守策略的JMM内存屏障插入策略。</p><h3 id="volatile-写的内存屏障"><a href="#volatile-写的内存屏障" class="headerlink" title="volatile 写的内存屏障"></a>volatile 写的内存屏障</h3><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。<ul><li>volatile写操作之前插入的StoreStore屏障，保证了volatile之前的普通变量&#x2F;volatile变量的写操作，禁止重排序到volatile写操作之后。即普通写–volatile写禁止重排序，volatile写–volatile写禁止重排序。</li></ul></li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。<ul><li>volatile写操作之后的StoreLoad屏障，保证volatile写操作之后的普通变量&#x2F;volatile变量的读操作，禁止重排序到volatile写操作之前。这个内存屏障也可以加载volatile读操作之前，但是一般对于volatile的用法都是多线程读，单线程写，所以相比于加载读之前，加在读之后的性能会更好。即volatile写–普通写禁止重排序，volatile写–volatile写禁止重排序。</li></ul></li></ul><p><img src="/./Resources/image-20230918151548102.png" alt="image-20230918151548102"></p><h3 id="volatile-读的内存屏障"><a href="#volatile-读的内存屏障" class="headerlink" title="volatile 读的内存屏障"></a>volatile 读的内存屏障</h3><ul><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。<ul><li>volatile读操作之后的LoadLoad屏障，保证了volatile读操作之后的所有普通变量&#x2F;volatile变量的读操作，禁止重排序到volatile写（好像原文写错了？应该是读？）操作之前。即volatile读–普通读禁止重排序，volatile读–volatile读禁止重排序。</li></ul></li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障<ul><li>volatile读操作之后的LoadStore屏障，保证了volatile读操作之后的所有普通变量&#x2F;volatile变量的写操作，禁止重排序到volatile写（好像原文写错了？应该是读？）操作之前。即volatile读–普通写禁止重排序，volatile读–volatile读禁止重排序。</li></ul></li></ul><p><img src="/./Resources/image-20230918151545558.png" alt="image-20230918151545558"></p><h3 id="内存屏障相关含义"><a href="#内存屏障相关含义" class="headerlink" title="内存屏障相关含义"></a>内存屏障相关含义</h3><table><thead><tr><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad</td><td>Load1;LoadLoad;Load2</td><td>保证Load1的读取操作在Load2及后续读取操作之前执行</td></tr><tr><td>StoreStore</td><td>Store1;StoreStore;Store2</td><td>在Store2及其后的写操作执行前，保证Store1的写操作已刷新到主内存</td></tr><tr><td>LoadStore</td><td>Load1;LoadStore;Store2</td><td>在Store2及其后的写操作执行前，保证Load1的读操作已读取结束</td></tr><tr><td>StoreLoad</td><td>Store1;StoreLoad;Load2</td><td>保证load1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td></tr></tbody></table><h2 id="为什么不能解决原子性"><a href="#为什么不能解决原子性" class="headerlink" title="为什么不能解决原子性"></a>为什么不能解决原子性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>i++;<br></code></pre></td></tr></table></figure><p>i ++，实际上是 3 步操作，首先读取 i 的值，然后将 i + 1 赋值给中间变量，最后将中间变量的值赋给 i；</p><p>因此即使是使用 volatile 修饰，也只能保证第一步强制从主存获取 i 的值，假设两个线程（A和B）都已经获取到了 i 的值，也将 i + 1 的值赋给了中间变量，即使线程 A 修改完成后，并通知其他线程 i 的值已经失效，需要重新从主存中获取，但是线程 B 已经走到了第二步，i 的值更改成什么，都已经晚了，换句话说，volatile 确实是保证了可见性，但这个可见性来的太晚了一些；</p><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h2><p>ava 内存模型具备一些先天的“有序性”，即不需要通过任何同步手段（volatile、synchronized 等）就能够得到保证的安全，这个通常也称为 <code>happens-before</code> 原则，它是可见性与有序性的一套规则总结</p><p>不符合 <code>happens-before</code> 规则，<code>JMM</code> 并不能保证一个线程的可见性和有序性</p><ol><li><p>程序次序规则 (<code>Program Order Rule</code>)：一个线程内，逻辑上书写在前面的操作先行发生于书写在后面的操作 ，因为<strong>多个操作之间有先后依赖关系</strong>，则不允许对这些操作进行重排序</p></li><li><p>锁定规则 (<code>Monitor Lock Rule</code>)：一个 unlock 操作先行发生于后面（时间的先后）对同一个锁的 lock 操作，所以线程解锁 m 之前对变量的写（解锁前会刷新到主内存中），对于接下来对 m 加锁的其它线程对该变量的读可见</p></li><li><p><strong>volatile 变量规则</strong>  (<code>Volatile Variable Rule</code>)：对 volatile 变量的写操作先行发生于后面对这个变量的读</p></li><li><p>传递规则 (<code>Transitivity</code>)：具有传递性，如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C</p></li><li><p>线程启动规则 (<code>Thread Start Rule</code>)：Thread 对象的 <code>start()</code> 方法先行发生于此线程中的每一个操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//线程 start 前对变量的写，对该线程开始后对该变量的读可见</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;System.out.println(x);&#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br></code></pre></td></tr></table></figure></li><li><p>线程中断规则 (<code>Thread Interruption Rule</code>)：对线程 <code>interrupt()</code> 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</p></li><li><p>线程终止规则 (<code>Thread Termination Rule</code>)：线程中所有的操作都先行发生于线程的终止检测，可以通过 <code>Thread.join()</code> 方法结束、<code>Thread.isAlive()</code> 的返回值手段检测到线程已经终止执行</p></li><li><p>对象终结规则（<code>Finaizer Rule</code>）：一个对象的初始化完成（构造函数执行结束）先行发生于它的 <code>finalize()</code> 方法的开始</p></li></ol><h2 id="对比于-synchronized"><a href="#对比于-synchronized" class="headerlink" title="对比于 synchronized"></a>对比于 synchronized</h2><p>volatile 只能解决可见性和有序性；</p><p>synchronized 可以解决原子性、可见性和有序性；</p><ul><li>原子性：指的是一个或多个操作执行过程中不被打断的特性。被 synchronized 修饰的代码是具有原子性的，要么全部都能执行成功，要么都不成功。</li><li>可见性：指的是一个线程改变了共享变量之后，其他线程能够立即知道这个变量被修改。我们知道在 Java 内存模型中，不同线程拥有自己的本地内存，而本地内存是主内存的副本。如果线程修改了本地内存而没有去更新主内存，那么就无法保证可见性。synchronized在修改了本地内存中的变量后，解锁前会将本地内存修改的内容刷新到主内存中，确保了共享变量的值是最新的，也就保证了可见性。</li><li>有序性：指的是程序按照代码先后顺序执行。synchronized是能够保证有序性的。根据 as-if-serial 语义，无论编译器和处理器怎么优化或指令重排，单线程下的运行结果一定是正确的。而synchronized保证了单线程独占CPU，也就保证了有序性。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://gee.cs.oswego.edu/dl/jmm/cookbook.html">The JSR-133 Cookbook (oswego.edu)</a></li><li><a href="https://blog.csdn.net/weixin_37841366/article/details/113086438">什么是指令重排序？为什么要重排序？_HCH996的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/bbgs-xc/p/12731769.html">Volatile禁止指令重排序（三） - MXC肖某某 - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1986090">Java指令重排序在多线程环境下的应对策略-腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://blog.csdn.net/qq_32273417/article/details/109148693">字节面试官：synchronized能保证可见性吗_sychorinized 能保证可见性吗_SKY技术修炼指南的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/pang5356/article/details/109226307">volatile禁止重排序的原理-内存屏障_volitile禁止指令重排的原理_bingaPang的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/ly262173911/article/details/106063924">java并发编程(二)-volatile写操作前为什么不加LoadStore屏障_大臭太臭的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/simpleDi/p/11517150.html">为什么volatile能保证有序性不能保证原子性 - simpleDi - 博客园 (cnblogs.com)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Volatile&quot;&gt;&lt;a href=&quot;#Volatile&quot; class=&quot;headerlink&quot; title=&quot;Volatile&quot;&gt;&lt;/a&gt;Volatile&lt;/h1&gt;&lt;h2 id=&quot;volatile-有什么用&quot;&gt;&lt;a href=&quot;#volatile-有什么用&quot; c</summary>
      
    
    
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/"/>
    
    <category term="JUC" scheme="http://conquers.github.io/categories/Java/JUC/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 代理模式详解</title>
    <link href="http://conquers.github.io/posts/55890944.html"/>
    <id>http://conquers.github.io/posts/55890944.html</id>
    <published>2023-07-31T07:31:13.000Z</published>
    <updated>2023-08-16T07:32:57.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="一、代理模式"><a href="#一、代理模式" class="headerlink" title="一、代理模式"></a>一、代理模式</h2><p>代理设计模式的原理</p><p>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p><h2 id="二、静态代理"><a href="#二、静态代理" class="headerlink" title="二、静态代理"></a>二、静态代理</h2><p>之前编写过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。参考：<a href="Java-1-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.md#6.3%E3%80%81%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F(Proxy)">接口的应用：代理模式(Proxy)</a>。</p><p>静态代理实现步骤:</p><ol><li>定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口</li><li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol><p>举例1：<a href="Java-1-%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B.md#6.3%E3%80%81%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F(Proxy)">接口的应用：代理模式(Proxy)</a></p><p>举例2：</p><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message:&quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.创建代理类并同样实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SmsService smsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmsProxy</span><span class="hljs-params">(SmsService smsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.smsService = smsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method send()&quot;</span>);<br>        smsService.send(message);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method send()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>        <span class="hljs-type">SmsProxy</span> <span class="hljs-variable">smsProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsProxy</span>(smsService);<br>        smsProxy.send(<span class="hljs-string">&quot;java&quot;</span>);<br>        <span class="hljs-comment">// smsService.send(&quot;java&quot;) 直接调用也是可以的，但代理模式可以在前后做一些其他的操作，即不仅可以控制对原有对象的访问，还可以在原有对象的访问的基础上做一些额外的能力</span><br>        <span class="hljs-comment">// 输出结果：send message:java</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">before method send()<br>send message:java<br>after method send()<br></code></pre></td></tr></table></figure><p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code>方法。</p><h2 id="三、动态代理"><a href="#三、动态代理" class="headerlink" title="三、动态代理"></a>三、动态代理</h2><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( <em>CGLIB 动态代理机制</em>)。</p><p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong></p><p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><p><strong>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</strong></p><p>就 Java 来说，动态代理的实现方式有很多种，比如 <strong>JDK 动态代理</strong>、<strong>CGLIB 动态代理</strong>等等。</p><h3 id="3-1-JDK-动态代理机制"><a href="#3-1-JDK-动态代理机制" class="headerlink" title="3.1. JDK 动态代理机制"></a>3.1. JDK 动态代理机制</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1. 介绍"></a>3.1.1. 介绍</h4><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p><p><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span><br>    <span class="hljs-keyword">throws</span> IllegalArgumentException<br>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法一共有 3 个参数：</p><ol><li><code>ClassLoader loaderr</code> :类加载器，用于加载代理对象。</li><li><code>Class&lt;?&gt;[] interfaces</code>: 被代理类实现的一些接口；</li><li><code>InvocationHandler h</code>: 实现了 <code>InvocationHandler</code> 接口的对象；</li></ol><p>要实现动态代理的话，还必须需要实现 <code>InvocationHandler</code>  来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现 <code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br>        <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-2-JDK-动态代理类使用步骤"><a href="#3-1-2-JDK-动态代理类使用步骤" class="headerlink" title="3.1.2. JDK 动态代理类使用步骤"></a>3.1.2. JDK 动态代理类使用步骤</h4><ol><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol><h4 id="3-1-3-代码示例"><a href="#3-1-3-代码示例" class="headerlink" title="3.1.3. 代码示例"></a>3.1.3. 代码示例</h4><ol><li><p>接口与实现类与上面一致；</p></li><li><p>自定义<code>InvocationHandler</code> 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理类中的真实对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<span class="hljs-comment">// 见后面的补充部分</span><br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invoke()</code> 方法：当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 <code>invoke()</code> 方法，然后 <code>invoke()</code> 方法代替我们去调用了被代理对象的原生方法。</p><p>本质上是通过反射调用原对象的方法，参考反射部分：<a href="%E7%AC%AC17%E7%AB%A0%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.md#4.3.2%20%E8%B0%83%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E6%96%B9%E6%B3%95">通过反射调用指定的方法</a></p></li><li><p>获取代理对象的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(), <span class="hljs-comment">// 目标类的类加载器</span><br>                target.getClass().getInterfaces(),  <span class="hljs-comment">// 代理需要实现的接口，可指定多个</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugInvocationHandler</span>(target)  <span class="hljs-comment">// 代理对象对应的自定义 InvocationHandler</span><br>        );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>getProxy()</code>：主要通过<code>Proxy.newProxyInstance（）</code>方法获取某个类的代理对象</p></li><li><p>实际使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> (SmsService) ProxyFactory.getProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>());<br>smsService.send(<span class="hljs-string">&quot;java&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><p>运行上述代码之后，控制台打印出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">before method send<br>send message:java<br>after method send<br></code></pre></td></tr></table></figure><blockquote><p>🔔补充：第三步的工厂类可以省略，直接使用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><span class="hljs-type">SmsServiceImpl</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>      <span class="hljs-type">SmsService</span> <span class="hljs-variable">sms</span> <span class="hljs-operator">=</span> (SmsService) Proxy.newProxyInstance(smsService.getClass().getClassLoader(),<br>              smsService.getClass().getInterfaces(),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>(smsService));<br>      sms.send(<span class="hljs-string">&quot;java&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="3-2-CGLIB-动态代理机制"><a href="#3-2-CGLIB-动态代理机制" class="headerlink" title="3.2. CGLIB 动态代理机制"></a>3.2. CGLIB 动态代理机制</h3><h4 id="3-2-1-介绍"><a href="#3-2-1-介绍" class="headerlink" title="3.2.1. 介绍"></a>3.2.1. 介绍</h4><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p><p><strong>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</strong></p><p><a href="https://github.com/cglib/cglib">CGLIB</a>(<em>Code Generation Library</em>)是一个基于<a href="http://www.baeldung.com/java-asm">ASM</a>的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了<a href="https://github.com/cglib/cglib">CGLIB</a>， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p><p><strong>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</strong></p><p>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MethodInterceptor</span><br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">Callback</span>&#123;<br>    <span class="hljs-comment">// 拦截被代理类中的方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>obj</strong> : 被代理的对象（需要增强的对象）</li><li><strong>method</strong> : 被拦截的方法（需要增强的方法）</li><li><strong>args</strong> : 方法入参</li><li><strong>proxy</strong> : 用于调用原始方法</li></ol><p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><h4 id="3-2-2-CGLIB-动态代理类使用步骤"><a href="#3-2-2-CGLIB-动态代理类使用步骤" class="headerlink" title="3.2.2. CGLIB 动态代理类使用步骤"></a>3.2.2. CGLIB 动态代理类使用步骤</h4><ol><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><h4 id="3-2-3-代码示例"><a href="#3-2-3-代码示例" class="headerlink" title="3.2.3. 代码示例"></a>3.2.3. 代码示例</h4><p>不同于 JDK 动态代理不需要额外的依赖。<a href="https://github.com/cglib/cglib">CGLIB</a>(<em>Code Generation Library</em>) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1.实现一个使用阿里云发送短信的类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.javaguide.dynamicProxy.cglibDynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliSmsService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message:&quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.自定义 <code>MethodInterceptor</code>（方法拦截器）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义MethodInterceptor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugMethodInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o           被代理的对象（需要增强的对象）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method      被拦截的方法（需要增强的方法）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args        方法入参</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodProxy 用于调用原始方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> methodProxy.invokeSuper(o, args);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.获取代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxyFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">// 创建动态代理增强类</span><br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">// 设置类加载器</span><br>        enhancer.setClassLoader(clazz.getClassLoader());<br>        <span class="hljs-comment">// 设置被代理类</span><br>        enhancer.setSuperclass(clazz);<br>        <span class="hljs-comment">// 设置方法拦截器</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugMethodInterceptor</span>());<br>        <span class="hljs-comment">// 创建代理类</span><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AliSmsService</span> <span class="hljs-variable">aliSmsService</span> <span class="hljs-operator">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);<br>aliSmsService.send(<span class="hljs-string">&quot;java&quot;</span>);<br></code></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">before method send<br>send message:java<br>after method send<br></code></pre></td></tr></table></figure><h3 id="3-3-JDK-动态代理和-CGLIB-动态代理对比"><a href="#3-3-JDK-动态代理和-CGLIB-动态代理对比" class="headerlink" title="3.3. JDK 动态代理和 CGLIB 动态代理对比"></a>3.3. JDK 动态代理和 CGLIB 动态代理对比</h3><ol><li><strong>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。</strong> 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li><li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li></ol><h2 id="四、动态代理原理分析"><a href="#四、动态代理原理分析" class="headerlink" title="四、动态代理原理分析"></a>四、动态代理原理分析</h2><p>上面我们利用 Proxy 类的 newProxyInstance 方法创建了一个<strong>动态代理对象</strong>，查看该方法的源码，发现它只是封装了创建动态代理类的步骤(<font color= 'red'>红色标注部分</font>)：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs diff">@CallerSensitive<br>public static Object newProxyInstance(ClassLoader loader,<br>                                      Class&lt;?&gt;[] interfaces,<br>                                      InvocationHandler h)<br>    throws IllegalArgumentException<br>&#123;<br>    Objects.requireNonNull(h);<br><br>    final Class&lt;?&gt;[] intfs = interfaces.clone();<br>    final SecurityManager sm = System.getSecurityManager();<br>    if (sm != null) &#123;<br>        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);<br>    &#125;<br><br>    /*<br>     * Look up or generate the designated proxy class.<br>     */<br><span class="hljs-deletion">-    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><br>    /*<br>     * Invoke its constructor with the designated invocation handler.<br>     */<br>    try &#123;<br>        if (sm != null) &#123;<br>            checkNewProxyPermission(Reflection.getCallerClass(), cl);<br>        &#125;<br><br><span class="hljs-deletion">-        final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br>        final InvocationHandler ih = h;<br>        if (!Modifier.isPublic(cl.getModifiers())) &#123;<br>            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;<br>                public Void run() &#123;<br>                    cons.setAccessible(true);<br>                    return null;<br>                &#125;<br>            &#125;);<br>        &#125;<br><span class="hljs-deletion">-        return cons.newInstance(new Object[]&#123;h&#125;);</span><br>    &#125; catch (IllegalAccessException|InstantiationException e) &#123;<br>        throw new InternalError(e.toString(), e);<br>    &#125; catch (InvocationTargetException e) &#123;<br>        Throwable t = e.getCause();<br>        if (t instanceof RuntimeException) &#123;<br>            throw (RuntimeException) t;<br>        &#125; else &#123;<br>            throw new InternalError(t.toString(), t);<br>        &#125;<br>    &#125; catch (NoSuchMethodException e) &#123;<br>        throw new InternalError(e.toString(), e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实，我们最应该关注的是 <code>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</code> 这句，这里产生了代理类，后面代码中的构造器也是通过这里产生的类来获得，可以看出，这个类的产生就是整个动态代理的关键，由于是动态生成的类文件，<del>我这里不具体进入分析如何产生的这个类文件</del>，这个文件的产生见后面补充部分代理类如何被生成的，只需要知道这个类文件时缓存在 Java 虚拟机中的，我们可以通过下面的方法将其打印到文件里面，一睹真容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-type">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class="hljs-string">&quot;$Proxy0&quot;</span>, SmsServiceImpl.class.getInterfaces());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\Project\\proxy\\src\\main\\java\\org\\example\\proxy\\SmsProxyClassFile.class&quot;</span>;<br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(path)) &#123;<br>        fos.write(classFile);<br>        fos.flush();<br>        System.out.println(<span class="hljs-string">&quot;代理类class文件写入成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;写文件错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对这个 class文件进行<a href="http://java-decompiler.github.io/">反编译</a>，我们看看 jdk 为我们生成了什么样的内容：</p><blockquote><p>用这个软件不能直接反编译，需要压缩成压缩包才能打开</p><p><img src="/./Resources/image-20230731185717146.png" alt="image-20230731185717146"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.lang.reflect.UndeclaredThrowableException;<br><span class="hljs-keyword">import</span> org.example.proxy.SmsService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy0</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m1;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m2;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m3;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Method m0;<br>  <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *注意这里是生成代理类的构造方法，方法参数为InvocationHandler类型，看到这，是不是就有点明白</span><br><span class="hljs-comment">     *为何代理对象调用方法都是执行InvocationHandler中的invoke方法，而InvocationHandler又持有一个</span><br><span class="hljs-comment">     *被代理对象的实例，不禁会想难道是....？ 没错，就是你想的那样。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *super(paramInvocationHandler)，是调用父类Proxy的构造方法。</span><br><span class="hljs-comment">     *父类持有：protected InvocationHandler h;</span><br><span class="hljs-comment">     *Proxy构造方法：</span><br><span class="hljs-comment">     *    protected Proxy(InvocationHandler h) &#123;</span><br><span class="hljs-comment">     *         Objects.requireNonNull(h);</span><br><span class="hljs-comment">     *         this.h = h;</span><br><span class="hljs-comment">     *     &#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy0</span><span class="hljs-params">(InvocationHandler paramInvocationHandler)</span> &#123;<br>    <span class="hljs-built_in">super</span>(paramInvocationHandler);<br>  &#125;<br>  <br>     <span class="hljs-comment">//这个静态块本来是在最后的，我把它拿到前面来，方便描述</span><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//看看这儿静态块儿里面有什么，是不是找到了 send 方法。请记住 send 通过反射得到的名字m3，其他的先不管</span><br>      m1 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;equals&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>) &#125;);<br>      m2 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]);<br>      m3 = Class.forName(<span class="hljs-string">&quot;org.example.proxy.SmsService&quot;</span>).getMethod(<span class="hljs-string">&quot;send&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>) &#125;);<br>      m0 = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="hljs-string">&quot;hashCode&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());<br>    &#125; <br>  &#125;<br>    <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object paramObject)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> ((Boolean)<span class="hljs-built_in">this</span>.h.invoke(<span class="hljs-built_in">this</span>, m1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; paramObject &#125;)).booleanValue();<br>    &#125; <span class="hljs-keyword">catch</span> (Error|RuntimeException error) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndeclaredThrowableException</span>(throwable);<br>    &#125; <br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> (String)<span class="hljs-built_in">this</span>.h.invoke(<span class="hljs-built_in">this</span>, m2, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Error|RuntimeException error) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndeclaredThrowableException</span>(throwable);<br>    &#125; <br>  &#125;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * </span><br><span class="hljs-comment">  *这里调用代理对象的 send 方法，直接就调用了InvocationHandler中的invoke方法，并把m3传了进去。</span><br><span class="hljs-comment">  *this.h.invoke(this, m3, null);这里简单，明了。</span><br><span class="hljs-comment">  *来，再想想，代理对象持有一个InvocationHandler对象，InvocationHandler对象持有一个被代理的对象，</span><br><span class="hljs-comment">  *再联系到InvacationHandler中的invoke方法。嗯，就是这样。</span><br><span class="hljs-comment">  */</span><br>    <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String paramString)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> (String)<span class="hljs-built_in">this</span>.h.invoke(<span class="hljs-built_in">this</span>, m3, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; paramString &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Error|RuntimeException error) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndeclaredThrowableException</span>(throwable);<br>    &#125; <br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> ((Integer)<span class="hljs-built_in">this</span>.h.invoke(<span class="hljs-built_in">this</span>, m0, <span class="hljs-literal">null</span>)).intValue();<br>    &#125; <span class="hljs-keyword">catch</span> (Error|RuntimeException error) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndeclaredThrowableException</span>(throwable);<br>    &#125; <br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Jdk 为我们的生成了一个叫 <code>$Proxy0</code>（这个名字后面的0是编号，有多个代理类会一次递增）的代理类，这个类文件时放在内存中的，我们在创建代理对象时，就是通过反射获得这个类的构造方法，然后创建的代理实例。通过对这个生成的代理类源码的查看，我们很容易能看出，动态代理实现的具体过程。</p><p>我们可以对 InvocationHandler 看做一个中介类，中介类持有一个被代理对象，在 invoke 方法中调用了被代理对象的相应方法。通过聚合方式持有被代理对象的引用，把外部对 invoke 的调用最终都转为对被代理对象的调用。</p><p>代理类调用自己方法时，通过自身持有的中介类对象来调用中介类对象的invoke方法，从而达到代理执行被代理对象的方法。也就是说，动态代理通过中介类实现了具体的代理功能。</p><blockquote><ul><li><p>小结</p><ul><li><p>代理类生成流程：</p><ol><li>在 <code>Proxy.newProxyInstance</code> 中的 719 行 <code>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</code></li><li>在该方法的 419 行处 <code>return proxyClassCache.get(loader, interfaces);</code> 上面注释为 <code>If the proxy class defined by the given loader implementing,the given interfaces exists, this will simply return the cached copy;otherwise, it will create the proxy class via the ProxyClassFactory</code>: 如果由给定的加载器定义的代理类实现，则给定的接口存在，这将简单地返回缓存的副本；否则，它将通过 <code>ProxyClassFactory</code> 创建代理类</li><li>在<code>ProxyClassFactory</code>的  639 行处，<code>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(...</code>，上面注释为 <code>Generate the specified proxy class</code></li></ol></li><li><p>即代理类是通过 <code>ProxyGenerator.generateProxyClass()</code> 来生成的。</p></li></ul></li></ul></blockquote><h2 id="五、静态代理和动态代理的对比"><a href="#五、静态代理和动态代理的对比" class="headerlink" title="五、静态代理和动态代理的对比"></a>五、静态代理和动态代理的对比</h2><ol><li><strong>灵活性</strong>：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li><strong>JVM 层面</strong>：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ol><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>这篇文章中主要介绍了代理模式的两种实现：静态代理以及动态代理。涵盖了静态代理和动态代理实战、静态代理和动态代理的区别、JDK 动态代理和 Cglib 动态代理区别等内容。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><blockquote><p>文章参考：</p><p><a href="https://javaguide.cn/java/basis/proxy.html">Java 代理模式详解 | JavaGuide(Java面试 + 学习指南)</a></p><p><a href="https://www.bilibili.com/video/BV1cz41187Dk">https://www.bilibili.com/video/BV1cz41187Dk</a></p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">java动态代理实现与原理详细分析 - Gonjian - 博客园 (cnblogs.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;h2 id=&quot;一、代理模式&quot;&gt;&lt;a href=&quot;#一、代理模式&quot; class=&quot;headerlink&quot; title=&quot;一、代理模</summary>
      
    
    
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/"/>
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/Java/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Es功能实现案例</title>
    <link href="http://conquers.github.io/posts/98542065.html"/>
    <id>http://conquers.github.io/posts/98542065.html</id>
    <published>2023-07-18T02:28:41.000Z</published>
    <updated>2023-07-20T02:36:58.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Es功能实现案例"><a href="#Es功能实现案例" class="headerlink" title="Es功能实现案例"></a>Es功能实现案例</h2><ul><li>需求：<ul><li>设置一张优惠券满足A出版社，B类别，排除id为1的商品，额外添加id为2的商品，在结果中可以继续搜索，筛选，排序等</li></ul></li><li>实现<ul><li>sql</li><li>Es</li></ul></li></ul><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">结果<span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> publisher_name <span class="hljs-operator">=</span> A <span class="hljs-keyword">and</span> class_name <span class="hljs-operator">=</span> B<br>结果<span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>结果 <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">from</span> (结果<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> 结果<span class="hljs-number">2</span>) <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">!=</span> <span class="hljs-number">2</span><br><br>实现排序：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (排序条件)<br>实现使用名字再次搜索：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> title <span class="hljs-keyword">like</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%title%&#x27;</span><br>实现筛选：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> (筛选条件)<br><br></code></pre></td></tr></table></figure><h3 id="Es-Java"><a href="#Es-Java" class="headerlink" title="Es(Java)"></a>Es(Java)</h3><p>在 <code>sql</code>  中可以使用 <code>union</code> 和子查询，在 <code>Es</code> 中，像这类问题，需要使用多个 <code>boolQuery</code> ，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><span class="hljs-comment">// 排除商品</span><br>boolQueryBuilder.mustNot(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, notUseGoodsIdByCouponId));<br><br><span class="hljs-comment">// 满足A出版社，B类别，额外添加id为2的商品</span><br>boolQueryBuilder.must(QueryBuilders.boolQuery()<br>        .should(QueryBuilders.boolQuery()<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>        .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>实现排序：省略<br>实现使用名字再次搜索：boolQueryBuilder.must(QueryBuilders.wildcardQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;*&quot;</span> + title + <span class="hljs-string">&quot;*&quot;</span>));<br>实现筛选：boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;筛选字段&quot;</span>, 筛选条件));<br></code></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出版社为空，类别为空，会出现没有结果的问题<br>问题分析：查看 <code>DSL</code> 语句发现参数为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;className&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br>或者<br><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;publisherName&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>问题解决：暴力的办法，应该有更好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(classTypeByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(publisherByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Es功能实现案例&quot;&gt;&lt;a href=&quot;#Es功能实现案例&quot; class=&quot;headerlink&quot; title=&quot;Es功能实现案例&quot;&gt;&lt;/a&gt;Es功能实现案例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需求：&lt;ul&gt;
&lt;li&gt;设置一张优惠券满足A出版社，B类别，排除id为1的商品，</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>MySQL OverView</title>
    <link href="http://conquers.github.io/posts/359ea42e.html"/>
    <id>http://conquers.github.io/posts/359ea42e.html</id>
    <published>2023-06-26T06:54:45.000Z</published>
    <updated>2023-07-18T02:51:12.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文使用的环境为 阿里云云服务器、<code>MySQL 5.7</code> 和 <code>MySQL 8</code>，均使用 <code>Docker</code> 安装，除非特别说明，默认使用<code>MySQL 5.7</code>。</p><p>如果出现结果不一致，使用命令行即可，因为可视化软件会自动请求一些其他内容。</p></blockquote><ul><li>基础篇<ul><li><a href="http://conquers.github.io/posts/e967e26.html">Mysql 基础篇</a></li></ul></li><li>高级篇<ul><li>架构篇<ul><li><a href="http://conquers.github.io/posts/2237bb15.html">第04章 逻辑架构</a></li><li><a href="http://conquers.github.io/posts/8d469f79.html">第05章 存储引擎</a></li></ul></li><li>索引及调优篇<ul><li>6-12</li><li><a href="http://conquers.github.io/posts/98817d56.html">第06章 索引的数据结构</a></li><li><a href="http://conquers.github.io/posts/69ea2410.html">第08章 索引的创建与设计原则</a></li><li><a href="http://conquers.github.io/posts/43d93e27.html">第09章 性能分析工具的使用</a></li><li><a href="http://conquers.github.io/posts/ada7f77e.html">第10章 索引优化与查询优化</a></li></ul></li><li>事务篇<ul><li><a href="http://conquers.github.io/posts/dfe5e713.html">第13章 事务基础知识</a></li><li><a href="http://conquers.github.io/posts/fa7ec77e.html">第14章 MySQL 日志</a></li><li><a href="http://conquers.github.io/posts/b7d439cb.html">第15章 锁</a></li><li><a href="http://conquers.github.io/posts/99914452.html">第16章 多版本并发控制</a></li></ul></li><li>日志与备份篇<ul><li><a href="http://conquers.github.io/posts/1c2dcbdd.html">第17章 其他数据库日志</a></li><li><a href="http://conquers.github.io/posts/f71f2862.html">第18章 主从复制</a></li><li><a href="http://conquers.github.io/posts/be31b856.html">第19章 数据库备份与恢复</a></li></ul></li><li>架构篇</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文使用的环境为 阿里云云服务器、&lt;code&gt;MySQL 5.7&lt;/code&gt; 和 &lt;code&gt;MySQL 8&lt;/code&gt;，均使用 &lt;code&gt;Docker&lt;/code&gt; 安装，除非特别说明，默认使用&lt;code&gt;MySQL 5.7&lt;/code&gt;。</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="MySQL" scheme="http://conquers.github.io/categories/Database/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://conquers.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://conquers.github.io/posts/7273cdc.html"/>
    <id>http://conquers.github.io/posts/7273cdc.html</id>
    <published>2023-04-18T11:44:51.000Z</published>
    <updated>2023-07-18T07:07:00.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、目录概述"><a href="#0、目录概述" class="headerlink" title="0、目录概述"></a>0、目录概述</h2><p><img src="/Resources/Pasted%20image%2020230418194747.png"></p><h2 id="1、Maven概述"><a href="#1、Maven概述" class="headerlink" title="1、Maven概述"></a>1、Maven概述</h2><h3 id="1-1、Maven是什么"><a href="#1-1、Maven是什么" class="headerlink" title="1.1、Maven是什么"></a>1.1、Maven是什么</h3><ul><li><p><strong>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）</strong></p></li><li><p>Maven是用<strong>Java语言</strong>编写的。他管理的东西统统以面向对象的形式进行设计，最终它把一个项目看成一个对象，而这个对象叫做 **POM(project object model)**，即项目对象模型。</p></li></ul><h3 id="1-2、Maven的作用"><a href="#1-2、Maven的作用" class="headerlink" title="1.2、Maven的作用"></a>1.2、Maven的作用</h3><p>（1）项目构建：提供标准的，跨平台的自动化构建项目的方式。</p><p>（2）依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突等问题。（最直观的感受就是不需要去各大网站去手动下载jar包，只需要去中央仓库获得坐标，即可引入）</p><p>（3）统一开发结构：提供标准的，统一的项目开发结构。</p><h2 id="2、下载安装Maven"><a href="#2、下载安装Maven" class="headerlink" title="2、下载安装Maven"></a>2、下载安装Maven</h2><p><a href="https://maven.apache.org/">Maven – Welcome to Apache Maven</a></p><h2 id="2-1-最新版下载"><a href="#2-1-最新版下载" class="headerlink" title="2.1 最新版下载"></a>2.1 最新版下载</h2><p><img src="/Resources/Pasted%20image%2020230418200656.png"></p><h3 id="2-2、旧版下载"><a href="#2-2、旧版下载" class="headerlink" title="2.2、旧版下载"></a>2.2、旧版下载</h3><p>旧版本下载步骤：我们以3.6.1版本为例<br><img src="/Resources/Pasted%20image%2020230418200518.png"></p><p>点击 sources<br><img src="/Resources/Pasted%20image%2020230418200525.png"></p><h3 id="2-3、安装"><a href="#2-3、安装" class="headerlink" title="2.3、安装"></a>2.3、安装</h3><p>maven是一个绿色软件，解压即安装，非常容易，我们将下载好的<code>apache-maven-3.6.1-bin.zip</code>直接解压到目录下即可</p><p>各目录结构说明：</p><ul><li><p>bin：可执行程序目录，</p></li><li><p>boot：maven自身的启动加载器</p></li><li><p>conf：maven配置文件的存放目录</p></li><li><p>lib：maven运行所需库的存放目录</p></li></ul><h3 id="2-4、配置"><a href="#2-4、配置" class="headerlink" title="2.4、配置"></a>2.4、配置</h3><p>省略，下次需要重新配置的时候，再写<br><strong>Maven 需要使用Java才能运行，所以也需要配置JAVA_HOME给它使用</strong></p><h2 id="3、Maven基础概念"><a href="#3、Maven基础概念" class="headerlink" title="3、Maven基础概念"></a>3、Maven基础概念</h2><h3 id="3-1、仓库"><a href="#3-1、仓库" class="headerlink" title="3.1、仓库"></a>3.1、仓库</h3><p>仓库：用于存储资源，主要是各种jar包<br><img src="/Resources/Pasted%20image%2020230418201332.png"></p><ul><li><p><strong>中央仓库</strong>：maven团队自身维护的仓库，属于开源的（<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore</a>）</p></li><li><p><strong>私服</strong>：各公司&#x2F;部门等小范围内存储资源的仓库，私服也可以从中央仓库获取资源（狭义理解：相当于现在使用的aliyun镜像仓库）</p></li><li><p><strong>本地仓库</strong>：开发者自己电脑上存储资源的仓库，也可从远程仓库获取资源</p></li><li><p>私服的作用：</p><ul><li>（1）保存具有版权的资源，包含购买或自主研发的jar</li><li>（2）一定范围内共享资源，能做到仅对内不对外开放</li></ul></li></ul><h3 id="3-2、坐标"><a href="#3-2、坐标" class="headerlink" title="3.2、坐标"></a>3.2、坐标</h3><p><strong>坐标</strong>：maven中的坐标用于描述仓库中资源的位置</p><p>maven坐标的主要组成如下：</p><ul><li><p>groupId：定义当前资源<strong>隶属组织</strong>名称（通常是域名反写，如：org.mybatis）</p></li><li><p>artifactId：定义当前资源的名称（通常是<strong>项目或模块名称</strong>，如：crm，sms）</p></li><li><p>version：定义当前资源的<strong>版本号</strong></p></li><li><p>packaging：定义资源的打包方式，取值一般有如下三种</p><ul><li>jar：该资源打成jar包，默认是jar，java工程打包为jar</li><li>war：该资源打成war包，web工程打包为war</li><li>pom：该资源是一个父资源（表明使用maven分模块管理），打包时只生成一个pom.xml不生成jar或其他包结构</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定pom的模型版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--打包方式 web工程打包为war java工程打包为jar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--组织id--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>web01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--版本id  release代表完成版,SNAPSHOT代表快照（开发）版--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--设置当前工程的所有依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--具体的依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="4、创建一个MavenWeb项目"><a href="#4、创建一个MavenWeb项目" class="headerlink" title="4、创建一个MavenWeb项目"></a>4、创建一个MavenWeb项目</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="5、创建一个普通的Maven项目"><a href="#5、创建一个普通的Maven项目" class="headerlink" title="5、创建一个普通的Maven项目"></a>5、创建一个普通的Maven项目</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="6、Maven依赖管理"><a href="#6、Maven依赖管理" class="headerlink" title="6、Maven依赖管理"></a>6、Maven依赖管理</h2><h3 id="6-1、依赖配置与依赖传递"><a href="#6-1、依赖配置与依赖传递" class="headerlink" title="6.1、依赖配置与依赖传递"></a>6.1、依赖配置与依赖传递</h3><p><strong>依赖配置</strong><br>依赖是指在当前项目中运行所需的jar，依赖配置的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置当前项目所依赖的所有jar--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置具体的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖所属群组id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖所属项目id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--依赖版本号--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>依赖传递：</strong><br>依赖具有传递性，分两种</p><p>（1）直接依赖：在当前项目中通过依赖配置建立的依赖关系</p><p>（2）间接依赖：被依赖的资源如果依赖其他资源，则表明当前项目间接依赖其他资源</p><h4 id="6-1-1、依赖传递冲突"><a href="#6-1-1、依赖传递冲突" class="headerlink" title="6.1.1、依赖传递冲突"></a>6.1.1、依赖传递冲突</h4><p><strong>依赖传递的冲突问题：</strong></p><p><img src="/Resources/Pasted%20image%2020230419154239.png"></p><p>以一个项目为根，直接依赖称为1度资源，直接依赖的直接依赖称为2度资源，直接依赖的直接依赖的直接依赖称为3度资源。</p><p>在依赖传递过程中产生了冲突，我们有三种优先法则</p><ul><li><p>（1）<strong>路径优先</strong>：当依赖中出现相同资源时，层级越深，优先级越低，反之则越高<br><img src="/Resources/Pasted%20image%2020230419154959.png"></p></li><li><p>（2）<strong>声明优先</strong>：当资源在相同层级被依赖时，配置顺序靠前的覆盖靠后的<br><img src="/Resources/Pasted%20image%2020230419155139.png"></p></li><li><p>（3）<strong>特殊优先</strong>：当同级配置了相同资源的不同版本时，后配置的覆盖先配置的<br><img src="/Resources/Pasted%20image%2020230419155238.png"></p></li></ul><h4 id="6-1-2、可选依赖"><a href="#6-1-2、可选依赖" class="headerlink" title="6.1.2、可选依赖"></a>6.1.2、可选依赖</h4><p>可选依赖指的是对外隐藏当前所依赖的资源➡不透明</p><ul><li>加一个<code>&lt;optional&gt;</code> 标签<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="6-1-3、排除依赖"><a href="#6-1-3、排除依赖" class="headerlink" title="6.1.3、排除依赖"></a>6.1.3、排除依赖</h4><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2、依赖范围"><a href="#6-2、依赖范围" class="headerlink" title="6.2、依赖范围"></a>6.2、依赖范围</h3><p>依赖的jar默认情况可以在任何地方可用，可以通过<code>scope</code>标签设定其作用范围</p><p>这里的范围主要是指以下三种范围</p><ul><li><p>（1）主程序范围有效（src&#x2F;main目录范围内）</p></li><li><p>（2）测试程序范围内有效（src&#x2F;test目录范围内）</p></li><li><p>（3）是否参与打包（package指令范围内）</p></li></ul><p>此外：<code>scope</code>标签的取值有四种：<code>compile,test,provided,runtime</code></p><p>这四种取值与范围的对应情况如下：<br><img src="/Resources/Pasted%20image%2020230419155846.png"></p><h2 id="7、Maven生命周期与插件"><a href="#7、Maven生命周期与插件" class="headerlink" title="7、Maven生命周期与插件"></a>7、Maven生命周期与插件</h2><p>参考：<a href="https://blog.csdn.net/Augenstern_QXL/article/details/118443858">Maven技术快速入门</a></p><h2 id="8、分模块开发与设计"><a href="#8、分模块开发与设计" class="headerlink" title="8、分模块开发与设计"></a>8、分模块开发与设计</h2><p><img src="/Resources/Pasted%20image%2020230419161942.png"></p><h2 id="9、聚合"><a href="#9、聚合" class="headerlink" title="9、聚合"></a>9、聚合</h2><p>聚合的目的是为了：一次构件多个项目。<br>多模块构建维护：基于第8部分的思想，将不同模块划分成不同的模块（服务）。</p><p>项目结构：</p><ul><li>MavenAggregation：总的项目（也可以不用建这个，直接建Parent也可以,，但是这样看起来清晰一些）</li><li>Parent 父项目<ul><li>Child1 模块1</li><li>Child2 模块2</li></ul></li></ul><p>创建项目 <code>MavenTest (emtpy project)</code><br><img src="/Resources/Pasted%20image%2020230419171949.png"></p><p><code>new Module -&gt; Parent (Spring Initializr)</code> 后，删除无用内容，只保留 <code>pom.xml</code><br><img src="/Resources/Pasted%20image%2020230419163310.png"></p><p>修改 <code>pom.xml</code> 文件，与自动创建的文件相比，只多了<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Parent<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 手动添加这句话，代表该项目只用作构建管理，只提供pom文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>引入为 <code>maven</code> 项目<br><img src="/Resources/Pasted%20image%2020230419172117.png"></p><p>创建子项目 <code>new Module -&gt; Child1 (Spring Initializr)</code> ，<code>new Module -&gt; Child2 (Spring Initializr)</code> </p><p>项目结构：<br><img src="/Resources/Pasted%20image%2020230419172847.png"></p><p>定义父项管理的子项目：在 <code>pom.xml</code> 文件添加以下语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 管理的工程列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体的工程名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../Child1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../Child2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时 <code>Maven</code> 项目结构就会变成父与子的关系<br><img src="/Resources/Pasted%20image%2020230419193203.png"></p><p>此时，就可以通过对父项目的操作，统一对所有的子项目进行操作，即同时执行生命周期指令：如 <code>compile</code><br><img src="/Resources/Pasted%20image%2020230419193451.png"></p><p>所有日志信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INFO] Scanning <span class="hljs-keyword">for</span> projects...<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Reactor Build Order:<br>[INFO] <br>[INFO] Child1                                                             [jar]<br>[INFO] Child2                                                             [jar]<br>[INFO] Parent                                                             [pom]<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Child1 &gt;-------------------------<br>[INFO] Building Child1 0.0.1-SNAPSHOT                                     [1/3]<br>[INFO] --------------------------------[ jar ]---------------------------------<br>[INFO] <br>[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ Child1 ---<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered resources.<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered properties files.<br>[INFO] Copying 1 resource<br>[INFO] Copying 0 resource<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ Child1 ---<br>[INFO] Changes detected - recompiling the module!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to E:\Projects\MavenAggregation\Child1\target\classes<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Child2 &gt;-------------------------<br>[INFO] Building Child2 0.0.1-SNAPSHOT                                     [2/3]<br>[INFO] --------------------------------[ jar ]---------------------------------<br>[INFO] <br>[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ Child2 ---<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered resources.<br>[INFO] Using <span class="hljs-string">&#x27;UTF-8&#x27;</span> encoding to copy filtered properties files.<br>[INFO] Copying 1 resource<br>[INFO] Copying 0 resource<br>[INFO] <br>[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ Child2 ---<br>[INFO] Changes detected - recompiling the module!<br>[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to E:\Projects\MavenAggregation\Child2\target\classes<br>[INFO] <br>[INFO] -------------------------&lt; com.example:Parent &gt;-------------------------<br>[INFO] Building Parent 0.0.1-SNAPSHOT                                     [3/3]<br>[INFO] --------------------------------[ pom ]---------------------------------<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Reactor Summary <span class="hljs-keyword">for</span> Parent 0.0.1-SNAPSHOT:<br>[INFO] <br>[INFO] Child1 ............................................. SUCCESS [  2.427 s]<br>[INFO] Child2 ............................................. SUCCESS [  0.076 s]<br>[INFO] Parent ............................................. SUCCESS [  0.001 s]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total time:  2.726 s<br>[INFO] Finished at: 2023-04-19T19:33:27+08:00<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><h2 id="10、继承"><a href="#10、继承" class="headerlink" title="10、继承"></a>10、继承</h2><p>继承的目的是为了：消除重复的配置。<br>在 <code>Java</code> 中可以通过 <code>extends</code> 继承，得到父类的属性和方法，在 <code>Maven</code> 中可以通过在 <code>pom.xml</code> 中使用<code>&lt;parent&gt;xxxxx&lt;/parent&gt;</code> 继承父项目，具体地：</p><p>创建项目 <code>MavenTest (emtpy project)</code>，<code>new Module -&gt; MavenParent (Spring Initializr)</code> </p><p>查看 <code>MavenParent</code> 的 <code>pom.xml</code> 文件可以发现，已经继承了 <code>spring-boot-starter-parent</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 手动添加这句话，代表该项目只用作构建管理，只提供pom文件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时不再需要指定依赖的版本，因为已经在<code>spring-boot-starter-parent</code>中定义过。在<code>dependencies</code>里的部分配置可以不用填写<code>version</code>信息，这些version信息会从<code>spring-boot-dependencies</code>里得到继承。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>MavenParent</code> 同级目录下，<code>new Module -&gt; MavenChild1 (Spring Initializr)，MavenChild2 (Spring Initializr)</code></p><p>将子项目 <code>MavenChild2</code> 和 <code>MavenChild1</code> 的 <code>pom.xml</code> 文件中 <code>parent</code> 标签内的内容更换为如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenParent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 见下面标签解释 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目结构如下；<strong>其中已有的两个依赖是自动引入的</strong><br><img src="/Resources/Pasted%20image%2020230418164047.png"></p><p>在父项目中引入新的依赖后，子项目就成功引入了 parent 中引入的依赖<br><img src="/Resources/Pasted%20image%2020230418164219.png"></p><p>有些时候，不是所有的子项目都想要依赖 parent 中的依赖，maven 还支持在 parent 中定义依赖，子项目可以有选择性的引入 parent 的依赖，将修改 web 包放到 dependencyManagement 下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 必须加上版本号，不然会因为找不到版本报错--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和原始版本相比，这里唯一的变化是将 <code>dependencies</code> 元素移到了 <code>dependencyManagement</code> 元素内部。修改 <code>MavenChild1</code> 项目如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230418193357.png"><br>这时 <code>MavenParent</code> 和 <code>MavenChild2</code> 中的依赖都已经不见了，只有我们显式在 <code>MavenChild1</code> 中定义的依赖还在。</p><p>除了 dependencies 依赖与 dependencyManagement 依赖版本的继承，还有很多其他可以继承的元素：<br><img src="/Resources/Pasted%20image%2020230419204107.png"></p><p>详细内容可参考：<a href="https://blog.csdn.net/zzuhkp/article/details/123518287">Spring Boot 第三篇：理解 spring-boot-starter-parent_大鹏cool的博客-CSDN博客</a></p><h2 id="11、聚合与继承的关系"><a href="#11、聚合与继承的关系" class="headerlink" title="11、聚合与继承的关系"></a>11、聚合与继承的关系</h2><p>作用</p><ul><li>聚合用于快速构建项目</li><li>继承用于快速配置</li></ul><p>相同点</p><ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul><p>不同点</p><ul><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li><li>聚合是聚合模块通过module引用被聚合模块，而继承是子模块通过parent引用父模块。</li></ul><p><strong>实际项目中通常把聚合和继承结合起来一起使用。parent项目既是聚合模块，也是父模块。</strong></p><h2 id="12、属性"><a href="#12、属性" class="headerlink" title="12、属性"></a>12、属性</h2><p>等同于定义变量，方便统一维护。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">定义：一般用 `技术名` + `.version`<br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xxxxx.version</span>&gt;</span>版本号<span class="hljs-tag">&lt;/<span class="hljs-name">xxxx.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>使用：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;xxxxx.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13、工程版本"><a href="#13、工程版本" class="headerlink" title="13、工程版本"></a>13、工程版本</h2><p><img src="/Resources/Pasted%20image%2020230419205408.png"><br><img src="/Resources/Pasted%20image%2020230419205601.png"></p><h2 id="14、标签：用到了，不懂再继续添加"><a href="#14、标签：用到了，不懂再继续添加" class="headerlink" title="14、标签：用到了，不懂再继续添加"></a>14、标签：用到了，不懂再继续添加</h2><blockquote><p><code>&lt;relativePath&gt; &lt;/relativePath&gt;</code></p></blockquote><p>作用指定parent的pom文件的路径，Maven构建jar包时候查找顺序：relativePath元素中的地址&gt;本地仓库&gt;远程仓库</p><p><strong>写文档的时候，1和2的结果好像是一致的，在使用2的时候，只要改变父项目中定义的版本号，子项目就会跟着改，最好是使用第3种</strong></p><p>1、<code>默认值</code><br>默认我们不用写<code>&lt;relativePath&gt;</code>，那默认值就是 ..&#x2F;pom.xml，会从本地路径中获取parent的pom，我们建多模块的项目就是这个情况。</p><p>2、<code>&lt;relativePath/&gt;设定空值</code><br>也就是说我指定了relativePath，但值是空的，设定一个空值将始终从仓库中获取，不从本地路径获取。很常见的场景就是使用 springboot 的时候</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、<code>&lt;relativePath&gt;某个pom的路径&lt;relativePath/&gt;</code><br>指定本地的路径，从本地路径获取parent的pom。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>***<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>***<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p></blockquote><ul><li>pom：专门用于聚合工程用</li><li>jar：</li><li>war：web工程</li></ul><blockquote><p><code>&lt;type&gt;pom&lt;/type&gt;</code></p></blockquote><p>dependency中type默认为jar即引入一个特定的jar包。那么为什么还会有type为pom呢?当我们需要引入很多jar包的时候会导致pom.xml过大，我们可以想到的一种解决方案是定义一个父项目，但是父项目只有一个，也有可能导致父项目的pom.xml文件过大。这个时候我们引进来一个type为pom，意味着我们可以将所有的jar包打包成一个pom，然后我们依赖了pom，即可以下载下来所有依赖的jar包</p><blockquote><p><code>&lt;scope&gt;import&lt;/scope&gt;</code></p></blockquote><p>与上面的标签一起使用。<br>将SpringCloud的依赖拷贝引用过来了这样就解决了单继承的问题。要注意的是  <scope>import</scope>必须在<code>&lt;dependencyManagement&gt;</code>下使用并且必须声明<code>&lt;type&gt;pom&lt;/type&gt;</code>，那么<code>&lt;scope&gt;import&lt;/scope&gt;</code>的作用我就可以理解为当前依赖是引用拷贝来的不受单继承影响。<br>参考说明：<a href="https://blog.csdn.net/HD243608836/article/details/129321636">maven中＜scope＞import＜&#x2F;scope＞标签＜type＞pom＜&#x2F;type＞标签的含义_pom文件type标签_HD243608836的博客-CSDN博客</a></p><blockquote><p><code>&lt;exclusion&gt;</code></p></blockquote><p>防止依赖会造成冲突<br><img src="/Resources/Pasted%20image%2020230418153201.png"></p><h2 id="99、导入依赖时出现的错误"><a href="#99、导入依赖时出现的错误" class="headerlink" title="99、导入依赖时出现的错误"></a>99、导入依赖时出现的错误</h2><blockquote><p>Failure to transfer …..</p></blockquote><p>出现这种内含<code>Failure to transfer......</code>错误的原因是我们通过坐标依赖导入的<br>jar包没有完全下载，也就是下载了一半就停了，是个下载类型的文件而不是真正的jar包，出现这种错误的原因典型的就比如我这种情况正在下载的时候断网了，然后这个网络链接突然中断，此时文件就是一个损坏的半成品，<code>Maven</code>中的代码似乎不能像迅雷那样继续下载，但是又能检测到它的存在，因此我们再次点击这个加载，还是报错。</p><p>解决办法为找到本地Maven仓库，一般我们都知道在哪，如果忘了可以进入我们的Maven中的settings.xml中看一下，打开之后我们用windows的搜索功能查找<code>*.lastUpdated</code>，这就是那种损坏的半成品文件的后缀，然后将这些文件全部删除，删除之后再重新导入依赖就好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0、目录概述&quot;&gt;&lt;a href=&quot;#0、目录概述&quot; class=&quot;headerlink&quot; title=&quot;0、目录概述&quot;&gt;&lt;/a&gt;0、目录概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/Resources/Pasted%20image%2020230418194747.p</summary>
      
    
    
    
    
    <category term="Maven" scheme="http://conquers.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA</title>
    <link href="http://conquers.github.io/posts/3c1e27f1.html"/>
    <id>http://conquers.github.io/posts/3c1e27f1.html</id>
    <published>2022-08-22T11:46:16.000Z</published>
    <updated>2023-07-20T11:51:39.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="使用IDEA连接数据库"><a href="#使用IDEA连接数据库" class="headerlink" title="使用IDEA连接数据库"></a>使用IDEA连接数据库</h2><p><img src="/./Resources/image-20230720194819644.png" alt="image-20230720194819644"><br><img src="/./Resources/image-20230720194826538.png" alt="image-20230720194826538"></p><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><p>连接好后点击右键<br><img src="/./Resources/image-20230720194838338.png" alt="image-20230720194838338"><br><img src="/./Resources/image-20230720194845126.png" alt="image-20230720194845126"></p><h2 id="使用IDEA创建SPRINGBOOT项目"><a href="#使用IDEA创建SPRINGBOOT项目" class="headerlink" title="使用IDEA创建SPRINGBOOT项目"></a>使用IDEA创建SPRINGBOOT项目</h2><blockquote><p>新建项目</p></blockquote><p>第一种是新建项目，第二种是从本地文件导入，第三种是从远程仓库拉取<br><img src="/./Resources/image-20230720194851925.png" alt="image-20230720194851925"></p><blockquote><p>填写相关信息</p></blockquote><p><img src="/./Resources/image-20230720194913026.png" alt="image-20230720194913026"></p><blockquote><p>选择一些依赖，创建自动添加对应的maven依赖，这里不选，注意版本使用2.X.X（3.X.X以上需要JDK17以上）<br><img src="/./Resources/image-20230720194918320.png" alt="image-20230720194918320"></p></blockquote><blockquote><p><strong><code>pom.xml</code></strong></p></blockquote><p>在第一个白框中，可以修改springboot的版本号！<br><img src="/./Resources/image-20230720194923683.png" alt="image-20230720194923683"></p><h2 id="使用IDEA打包SPRINGBOOT项目"><a href="#使用IDEA打包SPRINGBOOT项目" class="headerlink" title="使用IDEA打包SPRINGBOOT项目"></a>使用IDEA打包SPRINGBOOT项目</h2><p><img src="/./Resources/image-20230720194929170.png" alt="image-20230720194929170"></p><p><strong>打包后的文件分为两种</strong></p><ul><li><code>.war</code> <code>.jar</code></li><li><code>.war.original</code> <code>.jar.original</code><blockquote><p>以jar包举例<br>.jar.original 是普通jar包，<strong>不包含依赖</strong><br>.jar 是可执行jar包，<strong>包含了pom中的所有依赖</strong>，可以直接用java -jar 命令执行</p></blockquote></li></ul><hr><h2 id="使用IDEA连接虚拟机"><a href="#使用IDEA连接虚拟机" class="headerlink" title="使用IDEA连接虚拟机"></a>使用IDEA连接虚拟机</h2><ol><li><p>启动虚拟机并打开IDEA | tools | Deployment | Browse Remote Host<br><img src="/./Resources/image-20230720194935896.png" alt="image-20230720194935896"></p></li><li><p>点击省略号并填写相关参数<br><img src="/./Resources/image-20230720194940770.png" alt="image-20230720194940770"></p></li><li><p>再次点击省略号填写ip，用户名，密码</p></li><li><p><img src="/./Resources/image-20230720194949112.png" alt="image-20230720194949112"></p></li><li><p><img src="/./Resources/image-20230720194955313.png" alt="image-20230720194955313"></p><blockquote><p>如果出现 cannot be established，直接点yes</p></blockquote></li><li><p>完成后侧边栏显示远程服务器<br><img src="/./Resources/image-20230720195007856.png" alt="image-20230720195007856"></p><blockquote><p>将文件拖到这里即可</p></blockquote></li><li><p>使用ssh连接远程服务器 tools | start SSH Session<br><img src="/./Resources/image-20230720195012695.png" alt="image-20230720195012695"></p></li></ol><hr><h2 id="使用IDEA开启自动编译"><a href="#使用IDEA开启自动编译" class="headerlink" title="使用IDEA开启自动编译"></a>使用IDEA开启自动编译</h2><p>开启自动编译<br><img src="/./Resources/image-20230720195017475.png" alt="image-20230720195017475"></p><p><img src="/./Resources/image-20230720195021791.png" alt="image-20230720195021791"></p><p>开启允许在运行过程中修改文件</p><blockquote><p>很多文章介绍IntelliJ IDEA开启热部署功能都会写到在IntelliJ IDEA中的注册表（ctrl + alt + shift + &#x2F;）中开启compiler.automake.allow.when.app.running选项，此选项在IntelliJ IDEA 2021.2之后的版本迁移到高级设置中。如下图所示：<br><img src="/./Resources/image-20230720195027169.png" alt="image-20230720195027169"></p></blockquote><h2 id="使用IDEA自动导包"><a href="#使用IDEA自动导包" class="headerlink" title="使用IDEA自动导包"></a>使用IDEA自动导包</h2><blockquote><p>一次性导入多个包 <a href="https://blog.csdn.net/Azure_xw/article/details/120297747">idea 批量导入包_Azure.yao的博客-CSDN博客_idea一次性导入多个包</a></p></blockquote><p><img src="/./Resources/image-20230720195032353.png" alt="image-20230720195032353"></p><h2 id="IDEA打开侧边栏和底部控制台"><a href="#IDEA打开侧边栏和底部控制台" class="headerlink" title="IDEA打开侧边栏和底部控制台"></a>IDEA打开侧边栏和底部控制台</h2><p>View | Appearance | Tool Window Bars<br><img src="/./Resources/image-20230720195039386.png" alt="image-20230720195039386"><br><img src="/./Resources/image-20230720195044165.png" alt="image-20230720195044165"></p><p><img src="/./Resources/image-20230720195052478.png" alt="image-20230720195052478"></p><h2 id="IDEA以不同端口启动相同Springboot项目"><a href="#IDEA以不同端口启动相同Springboot项目" class="headerlink" title="IDEA以不同端口启动相同Springboot项目"></a>IDEA以不同端口启动相同Springboot项目</h2><p>复制一份改端口麻烦！<br>启动后修改参数麻烦！<br>edit Configurations<br><img src="/./Resources/image-20230720195102638.png" alt="image-20230720195102638"><br>选择想要启动的项目复制一份<br><img src="/./Resources/image-20230720195107805.png" alt="image-20230720195107805"><br>修改端口号</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dserver</span>.<span class="hljs-keyword">port</span>=8789<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230720195112659.png" alt="image-20230720195112659"><br>启动：<br><img src="/./Resources/image-20230720195118201.png" alt="image-20230720195118201"></p><h2 id="IDEA以指定端口启动npm"><a href="#IDEA以指定端口启动npm" class="headerlink" title="IDEA以指定端口启动npm"></a>IDEA以指定端口启动npm</h2><p><img src="/./Resources/image-20230720195123114.png" alt="image-20230720195123114"></p><h2 id="使用IDEA启动时默认不打开项目"><a href="#使用IDEA启动时默认不打开项目" class="headerlink" title="使用IDEA启动时默认不打开项目"></a>使用IDEA启动时默认不打开项目</h2><p><img src="/./Resources/image-20230720195127333.png" alt="image-20230720195127333"></p><h2 id="IDEA-DEBUG中Step-into与Force-Step-into"><a href="#IDEA-DEBUG中Step-into与Force-Step-into" class="headerlink" title="IDEA DEBUG中Step into与Force Step into"></a>IDEA DEBUG中Step into与Force Step into</h2><blockquote><p><a href="https://blog.csdn.net/qq_39123467/article/details/125732158">idea调试中Step into与Force Step into区别</a></p></blockquote><ul><li>step into会进入你自己写的方法。  </li><li>Force step into能够进入所有的方法，比如jdk的方法。</li></ul><h2 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h2><ul><li>ctrl + shift + f 全局搜索（如果不起作用，可能是输入法简繁的切换快捷键占用了）</li></ul><h2 id="IDEA-文件夹目录合并为一行解决方法"><a href="#IDEA-文件夹目录合并为一行解决方法" class="headerlink" title="IDEA 文件夹目录合并为一行解决方法"></a>IDEA 文件夹目录合并为一行解决方法</h2><p>取消勾选：不合并为一行<br>勾选：合并为一行<br><img src="/./Resources/image-20230720195132440.png" alt="image-20230720195132440"></p><h2 id="IDEA-服务老是消失"><a href="#IDEA-服务老是消失" class="headerlink" title="IDEA 服务老是消失"></a>IDEA 服务老是消失</h2><p><a href="https://blog.csdn.net/weixin_42661168/article/details/115365200">https://blog.csdn.net/weixin_42661168/article/details/115365200</a></p><h2 id="IDEA-Commit时自动格式化和删除无效引用"><a href="#IDEA-Commit时自动格式化和删除无效引用" class="headerlink" title="IDEA Commit时自动格式化和删除无效引用"></a>IDEA Commit时自动格式化和删除无效引用</h2><p><img src="/./Resources/image-20230720195138944.png" alt="image-20230720195138944"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA&quot;&gt;&lt;a href=&quot;#IDEA&quot; class=&quot;headerlink&quot; title=&quot;IDEA&quot;&gt;&lt;/a&gt;IDEA&lt;/h1&gt;&lt;h2 id=&quot;使用IDEA连接数据库&quot;&gt;&lt;a href=&quot;#使用IDEA连接数据库&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="IDEA" scheme="http://conquers.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://conquers.github.io/posts/6f2612a2.html"/>
    <id>http://conquers.github.io/posts/6f2612a2.html</id>
    <published>2022-08-17T10:54:29.000Z</published>
    <updated>2023-07-25T02:35:31.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>官方网站：<a href="https://spring.io/projects/spring-boot/">Spring Boot</a></p><h2 id="SpringBoot的引言"><a href="#SpringBoot的引言" class="headerlink" title="SpringBoot的引言"></a>SpringBoot的引言</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来<strong>简化Spring应用的初始搭建以及开发过程</strong>。该框架使用了<strong>特定的方式来进行配置</strong>，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><p><strong>springboot</strong>(微框架) &#x3D; <strong>springmvc</strong>(控制器) + <strong>spring core</strong>(项目管理)</p><h2 id="SpringBoot的优势"><a href="#SpringBoot的优势" class="headerlink" title="SpringBoot的优势"></a>SpringBoot的优势</h2><ol><li>创建完整的独立的 <code>Spring</code> 应用程序<ul><li><code>springmvc</code> + <code>spring</code></li></ul></li><li>嵌入的 <code>Tomcat</code> ，无需部署 <code>WAR</code> 文件<ul><li>内嵌 <code>Tomcat</code></li></ul></li><li>简化 <code>Maven</code> 配置，自动配置 <code>Spring</code> ，没有 <code>XM</code> L配置</li></ol><h2 id="SpringBoot约定"><a href="#SpringBoot约定" class="headerlink" title="SpringBoot约定"></a>SpringBoot约定</h2><p><strong>项目结构图</strong><br><img src="/Resources/Pasted%20image%2020220817195034.png"></p><ol><li><p>springboot约定springboot项目中有且只能存在一个入口类(Class)<br>类名：推荐<strong>xxx(项目名)Application.java</strong></p><ul><li>a. 入口类必须在所有子包之上</li><li>b. 入口类中必须存在一个启动项目项目main函数</li></ul></li><li><p>springboot项目约定必须在项目根目录中存在一个名字为<code>application.yml</code> l <code>application.properties</code> 配置文件</p></li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>环境要求</strong></p><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>JDK</td><td>1.8+</td></tr><tr><td>MAVEN</td><td>3.2+</td></tr><tr><td>SpringBoot</td><td>2.7.2</td></tr></tbody></table><blockquote><p>2022-8-17 SpringBoot最新版</p></blockquote><p><strong>新建项目中引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--继承springboot的父项目 便于维护版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        springboot-boot-starter-web--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;parent&gt;</code>继承父项目不导入任何依赖，只是对下面的依赖进行一个版本控制<br>原因：各个依赖有着严格的版本限制，并且方便维护。</p><p><code>&lt;version&gt;</code> SpringBoot 版本号在 2.4.x 以前结尾有一个RELEASE，从 2.4.x 以后只以数字命名。</p></blockquote><p><strong>在resources目录中创建<code>application.yml</code></strong></p><blockquote><p>这里也可以不用写✍，默认8080端口。<del>建都建了，不写点东西，不合适</del></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br></code></pre></td></tr></table></figure><p><strong>创建springboot入口类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 启动springboot应用</span><br><span class="hljs-comment">         * 参数1:指定入口类的类对象.class(类的对象是new xxx)</span><br><span class="hljs-comment">         * 参数2:main函数参数</span><br><span class="hljs-comment">         */</span><br>        SpringApplication.run(Application.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><p>⭐<code>@SpringBootApplication</code><br>修饰范围：用在类上只能用在入口类上只能出现一次<br>作用：标识这个类是一个 <code>springboot</code> 入口类（启动整个 <code>springboot</code> 项目的总入口）</p><p><code>@SpringBootApplication</code> 由多个注解构成，4个元注解，由 <code>Java</code> 提供，</p><table><thead><tr><th>注解名</th><th>含义</th></tr></thead><tbody><tr><td><code>@Target(&#123;ElementType.TYPE&#125;)</code></td><td>指定注解作用范围</td></tr><tr><td><code>@Retention(RetentionPolicy.RUNTIME) </code></td><td>指定注解什么时候生效，这里指的是运行时</td></tr><tr><td><code>@Documented</code></td><td></td></tr><tr><td><code>@Inherited</code></td><td></td></tr><tr><td>⭐<code>@SpringBootConfiguration</code></td><td>用来自动配置 <code>spring springmvc</code> 相关环境<br>组合了 <code>@Configuration</code> 注解，也就是 <code>@SpringBootConfiguration</code> 修饰的类就是 <code>Java</code> 配置类</td></tr><tr><td>⭐<code>@EnableAutoConfiguration</code></td><td>开启自动配置 <br><code>META-INF/spring.factories</code>文件中加载需要自动注入的 <code>Java</code> 类<br><strong>自动配置核心注解</strong><br><strong>自动配置spring相关环境</strong><br><strong>自动与项目中引入的第三方技术自动配置其环境</strong></td></tr><tr><td>⭐<code>@ComponentScan</code></td><td>组件扫描，默认扫描 <code>@SpringBootApplication</code> 注解的类的当前包及其子包下面所有被 <code>@Compoent</code> 注解修饰的 <code>Java</code> 类</td></tr></tbody></table><p><strong>运行</strong><br><img src="/Resources/Pasted%20image%2020220817201942.png"><br><img src="/Resources/Pasted%20image%2020220817202007.png"></p><blockquote><p><code>SpringApplication.run(Application.class,args);</code><br>启动springboot应用时候需要传递main函数参数作为启动的第二个参数：<br>怎么传参：通过idea里面的vm options可以覆盖掉某些配置，例如下图，可以覆盖端口<br><img src="/Resources/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.drawio.png"></p></blockquote><h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p><strong>建包并创建控制器(controller)</strong><br><img src="/Resources/Pasted%20image%2020220817202555.png"></p><blockquote><p>之前在写代码的时候一直疑惑的点：RequestMapping前面的斜线需不需要加<br>参考资料：<a href="https://blog.csdn.net/hehuihh/article/details/117371593">注解RequestMapping中的URI路径最前面到底需不需要加斜线？</a><br><img src="/Resources/Pasted%20image%2020220817202819.png"></p></blockquote><p>测试地址：<code>http://localhost:端口号/请求路径</code>      <a href="http://localhost:8989/hello">http://localhost:8989/hello</a></p><blockquote><p>修改端口号见上面创建<code>application.yml</code>的时候<br><img src="/Resources/Pasted%20image%2020220817202616.png"></p></blockquote><p><strong>修改项目名</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span> <span class="hljs-comment"># 修改内嵌服务器端口号</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span> <span class="hljs-comment">#修改项目名注意:项目名必须&quot;/&quot;开头</span><br></code></pre></td></tr></table></figure><p>测试地址：<a href="http://localhost:8989/springboot/hello">http://localhost:8989/springboot/hello</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件的拆分"><a href="#配置文件的拆分" class="headerlink" title="配置文件的拆分"></a>配置文件的拆分</h3><p>说明：在实际开发过程中生产环境和开发环境有可能是不一样的，因此将生产中的配置和开发中的配置拆分开，是非常必要的。在springboot中也提供了配置文件拆分的方式，这里以生产中项名名称与开发项目名称不一致为例：<br>开发的时候项目名为springboot，生产的时候项目名为springboot_prod，</p><p>主配置文件<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 公共配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 需要使用哪套环境就用谁，注意是 环境-后面的xxx</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><blockquote><p>区别于主配置文件，文件命令的要求为<code>application-xxx.yml</code></p></blockquote><p>开发环境配置文件<code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220818183340.png"></p><p>生产环境配置文件<code>application-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot_prod</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220818183418.png"></p><h3 id="加载外部配置文件"><a href="#加载外部配置文件" class="headerlink" title="加载外部配置文件"></a>加载外部配置文件</h3><p>在项目外创建<code>application-local-prod.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/spring</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/%E5%8A%A0%E8%BD%BD%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.drawio.png"></p><blockquote><p>等同于命令行<code>java -jar --spring.config.location=我是绝对路径 xxxx.jar</code></p></blockquote><p>可以发现外部配置文件已经生效<br><img src="/Resources/Pasted%20image%2020220818184446.png"></p><h2 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h2><blockquote><p>区别于之前的2.7.2 这里的spring boot版本变为了2.7.3，突然更新了。</p></blockquote><p>除了以上最开始的创建项目的方式，还可以使用 <code>Springboot init</code> 快速初始化<br><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E5%88%9B%E5%BB%BASPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA创建SPRINGBOOT项目</a></p><h2 id="工厂创建对象"><a href="#工厂创建对象" class="headerlink" title="工厂创建对象"></a>工厂创建对象</h2><h3 id="创建单个对象"><a href="#创建单个对象" class="headerlink" title="创建单个对象"></a>创建单个对象</h3><p>在springboot中可以管理单个对象可以直接使用 <code>spring</code> 框架中注解形式创建。</p><ul><li><code>@Component</code>：创建<strong>通用对象</strong><ul><li><code>@Controller</code>：创建<strong>控制层对象</strong></li><li><code>@Service</code>：      创建<strong>业务层对象</strong></li><li><code>@Repository</code>：创建<strong>DAO层对象</strong><ul><li>在工厂中创建对象，默认工厂中的名称为类名首字母小写</li><li>以上注解都有value属性， value属性用来指明被标注的类在工厂中的名称。即如果不加，工厂中的名称为类名首字母小写。加了，工厂中的名称为指明的名称。<br>  图示</li></ul></li></ul></li></ul><blockquote><p>在<code>DemoServiceImpl</code>添加<code>@Service</code>注解后，spring工厂就会有这个对象，通过<code>@Autowired</code> 自动注入（向工厂拿<code>DemoService</code>对象），以使用<code>DemoService</code><br><img src="/Resources/Pasted%20image%2020220818194412.png"></p></blockquote><h3 id="创建多个对象"><a href="#创建多个对象" class="headerlink" title="创建多个对象"></a>创建多个对象</h3><p>在SpringBoot中也提供了如<code>@configuration</code> + <code>@Bean</code>注解进行创建</p><ul><li><code>@Configuration</code> 修饰范围：用在类上（相当于<code>spring.xml</code>），作用：代表这个类是一个 <code>springboot</code> 中配置类。<ul><li><code>@Bean</code> 创建对象，相当于<code>spring.xml</code>中的bean标签<ul><li>默认使用 <code>@Bean</code> 创建对象在工厂中唯一标识为方法名称</li><li>修改在工厂中对象标识可以在使用 <code>@Bean(&quot;工厂中名字&quot;)</code> 指定一个名字</li></ul></li></ul></li></ul><p><img src="/Resources/Pasted%20image%2020220818200142.png"></p><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h3 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h3><h4 id="Value-⭐"><a href="#Value-⭐" class="headerlink" title="@Value ⭐"></a>@Value ⭐</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;wtt&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;inject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">inject</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject ok&quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220819111052.png"></p><blockquote><p>但是这样的方式，并不利于解耦，且作用等同于赋值。<br>注：端口号修改为了8989</p></blockquote><p><strong>优化方式：在配置文件中定义注入值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;bir&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Date bir;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;price&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double price;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;sex&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-comment">/* --------------------------------------------------------------------------------------------------------------*/</span><br><br><span class="hljs-comment">// 注入数组</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;qqs&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String[] qqs;<br><br><span class="hljs-comment">// 注入list</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;lists&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; lists;<br><br><span class="hljs-comment">// 注入map</span><br>    <span class="hljs-meta">@Value(&quot;#&#123;$&#123;maps&#125;&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; maps;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;inject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">inject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject ok:&quot;</span> + name + age + bir + price + sex + <span class="hljs-string">&quot;----&quot;</span> + Arrays.toString(qqs);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>  <br>  <br><span class="hljs-comment"># 声明注入的值  </span><br><span class="hljs-attr">name:</span> <span class="hljs-string">wtt</span>  <br><span class="hljs-attr">age:</span> <span class="hljs-number">23</span>  <br><span class="hljs-attr">price:</span> <span class="hljs-number">23.23</span>  <br><span class="hljs-comment"># 日期默认格式为YYYY/mm/dd HH/MM/ss  </span><br><span class="hljs-attr">bir:</span> <span class="hljs-number">2022</span><span class="hljs-string">/12/12</span> <span class="hljs-number">12</span><span class="hljs-string">:12:12</span><br><span class="hljs-attr">sex:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 注入数组，多个元素用&quot;,&quot;隔开</span><br><span class="hljs-attr">qqs:</span> <span class="hljs-number">6099</span><span class="hljs-string">,7088,8009</span><br><span class="hljs-comment"># 注入list，多个元素用&quot;,&quot;隔开（与注入数组一致）</span><br><span class="hljs-attr">lists:</span> <span class="hljs-number">6099</span><span class="hljs-string">,7088,8009</span><br><span class="hljs-comment"># 注入map，使用json格式，注入的时候必须使用&quot;#&#123;$&#123;属性&#125;&#125;&quot;进行注入</span><br><span class="hljs-string">maps:&quot;&#123;&#x27;aa&#x27;:&#x27;bb&#x27;,&#x27;cc&#x27;:&#x27;dd&#x27;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220819111907.png"></p><h3 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h3><h4 id="ConfigurationProperties-⭐"><a href="#ConfigurationProperties-⭐" class="headerlink" title="@ConfigurationProperties ⭐"></a>@ConfigurationProperties ⭐</h4><p><strong>再次优化方式：以对象的方式一次性注入</strong></p><blockquote><p>这里的代码会出现问题，正确代码见下，主要是为了引入<strong>注意点</strong>。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 声明对象方式的注入</span><br><span class="hljs-attr">users:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">wtt</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">23</span><br>  <span class="hljs-attr">sex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;users&quot;)</span><span class="hljs-comment">//修饰范围:用在类上﹐作用:用来将指定前缀的属性注入到当前对象中属性名一致属性的属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionObjectController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;injectObject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">injectObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject Object OK...&quot;</span> + name + age + sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>💡补充：<br><img src="/Resources/Pasted%20image%2020220822160459.png"><br>不论是value还是prefix 都是一样的，因为在源码中，两者是等同的概念。<br><img src="/Resources/Pasted%20image%2020220822160530.png"></p></blockquote><p>测试：<br>❗<strong>这里并没有拿到对应的属性值</strong>，是由于没有设置set方法。<img src="/Resources/Pasted%20image%2020220822160841.png"></p><ul><li><strong>按照以下代码编写set代码即可</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;users&quot;)</span><span class="hljs-comment">//修饰范围:用在类上﹐作用:用来将指定前缀的属性注入到当前对象中属性名一致属性的属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InjectionObjectController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(Boolean sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;injectObject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">injectObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inject Object OK...&quot;</span> + name + age + sex;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>❗<strong>上面的白框里面的内容</strong>，<a href="https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/configuration-metadata.html#appendix.configuration-metadata.annotation-processor">Open documentation…</a><br>简而言之：引入<code>spring-boot-configuration-processor</code> 这个jar包，重启项目后即可（但是我重启了没用），此时我们加上注解之后，再编写yml文件的时候会有提示对应的属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>、<br>    <span class="hljs-comment">&lt;!--代表整个依赖不会被传递，即不会传给子项目--&gt;</span><br>    <span class="hljs-comment">&lt;!--假设A导入了B，B引入了一个包，其中optional属性不加或者为false，那么A就引入该包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>在service的某个类上，ctrl + shift + T<br><img src="/Resources/Pasted%20image%2020220822200810.png"></p><p><img src="/Resources/Pasted%20image%2020220822200823.png"><br>测试代码即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        userDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>每次测试一个新的测试类都要加上<code>@SpringBootTest</code>注解，很麻烦，所以可以通过继承的方式进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTests</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasicTests</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        userDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="热部署工具"><a href="#热部署工具" class="headerlink" title="热部署工具"></a>热部署工具</h2><p>为了进一步提高开发效率，springboot为我们提供了<strong>全局项目热部署</strong>，以后在开发过程中修改了部分代码以及相关配置文件后，<strong>不需要每次重启使修改生效</strong>，在项目中开启了springboot全局热部署之后只需要在修改之后<strong>等待几秒即可使修改生效</strong>。</p><p>前置：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91">使用IDEA开启自动编译</a></p><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;demo&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>🎨信息从Main变成了restartedMain<br><img src="/Resources/Pasted%20image%2020220822202451.png"></p><p>发送请求<br><img src="/Resources/Pasted%20image%2020220822202651.png"></p><p>此时我们修改测试代码内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;demo&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo123&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220822205010.png"></p><p>查看日志信息<br><img src="/Resources/Pasted%20image%2020220822205002.png"></p><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><p>springboot框架集成日志 <strong>logback</strong> 日志。</p><p>Logback是由log4j创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进!</p><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p><code>All &lt; Trace &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; Fatal &lt; OFF</code></p><ul><li>OFF<br>关闭：最高级别，<strong>不打印日志</strong>。</li><li>FATAL<br>致命：<strong>指明非常严重的</strong>可能会导致应用终止执行错误<strong>事件</strong>。</li><li>ERROR<br>错误：<strong>指明错误事件</strong>，但应用可能还能继续运行。</li><li>WARN<br>警告：指明可能<strong>潜在的危险</strong>状况。</li><li>INFO<br>信息：指明描述信息，从粗粒度上<strong>描述</strong>了应用<strong>运行过程</strong>。</li><li>DEBUG<br>调试：指明<strong>细致的事件信息</strong>，对调试应用最有用。</li><li>TRACE<br>跟踪：指明<strong>程序运行轨迹</strong>，比DEBUG级别的粒度更细。</li><li>ALL<br>所有：<strong>所有日志</strong>级别，包括定制级别。<blockquote><p>日志级别由低到高:<code>日志级别越高输出的日志信息越少</code></p></blockquote></li></ul><h3 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a>日志分类</h3><ul><li>rootLogger：用来监听项目中所有的运行日志包括引入依赖jar中的日志</li><li>logger：用来监听项目中指定包中的日志信息</li></ul><h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><blockquote><p>注意:SpringBoot框架中默认根日志为INFO<br><img src="/Resources/Pasted%20image%2020220823091739.png"></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment"># 指定根日志级别(一般不推荐修改根日志,输出信息太多,推荐使用子日志)</span><br>    <span class="hljs-comment"># root: debug</span><br>    <span class="hljs-comment"># 指定某个包中日志</span><br>    <span class="hljs-attr">com.cqupt.dao:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-comment"># 日志名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">log.log</span><br>    <span class="hljs-comment"># 日志文件路径</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">./</span><br></code></pre></td></tr></table></figure><h3 id="使用日志"><a href="#使用日志" class="headerlink" title="使用日志"></a>使用日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明一个日志对象</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(UserService.class);<br><br><br><span class="hljs-comment">//打印某些日志信息</span><br>log.debug(<span class="hljs-string">&quot;&quot;</span>);<br>log.error(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>简化操作：优化需要每次手动声明日志对象<br><img src="/Resources/Pasted%20image%2020220823092741.png"><br><img src="/Resources/Pasted%20image%2020220823092801.png"><br><img src="/Resources/Pasted%20image%2020220823093036.png"><br>🔖使用的时候如果想debug，就logd，如果想info，就logi，以此类推。</p></blockquote><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h2><p>springboot是对原有项目中spring框架和springmvc的进一步封装，因此在springboot中同样支持spring框架中AOP切面编程，不过在springboot中为了快速开发仅仅提供了注解方式的切面编程。<br><a href="../Spring5/Spring5.md#%E4%B8%89%E3%80%81Aop">Spring中的Aop</a></p><p>Aspect（切面）&#x3D; <strong>Advice</strong>（通知）+ <strong>Pointcut</strong>（切入点）<br>Advice（通知）：业务逻辑中一些<strong>附加操作</strong>称之为通知<br>Pointcut（切入点）：<strong>配置通知</strong>应用于项目中那些业务操作</p><h3 id="为什么需要切面编程"><a href="#为什么需要切面编程" class="headerlink" title="为什么需要切面编程"></a>为什么需要切面编程</h3><p>在某个模块业务逻辑中有三种方法</p><blockquote><p>仅作演示，不符合业务逻辑</p></blockquote><p><code>service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>其中对应的实现类中<br><code>serviceImpl</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span>&#123;<br>dao.save();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>&#123;<br>dao.delete();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span>()</span>&#123;<br>dao.queryById();<br>&#125;<br></code></pre></td></tr></table></figure><p>需求：调用<code>dao.save();</code> <code>dao.delete();</code> <code>dao.queryById();</code>之前，先做某些操作（一致的操作或者是封装起来的某些方法）<br>那么，对应的实现类中<br><code>serviceImpl</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span>&#123;<br>xxxxx;<br>dao.save();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>&#123;<br>xxxxx;<br>dao.delete();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryById</span>()</span>&#123;<br>xxxxx;<br>dao.queryById();<br>&#125;<br></code></pre></td></tr></table></figure><p>可见：这样的话，代码会有<strong>冗余</strong>并且当业务足够多时，每个都需要去手动添加，比较<strong>麻烦</strong>，不利于后期项目维护！</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>编写业务代码</strong><br><code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.save()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.delete()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.queryById()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在UserService上ctrl + shift + T 新建测试类<br><img src="/Resources/Pasted%20image%2020220823141237.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        userService.save();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        userService.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryById</span><span class="hljs-params">()</span> &#123;<br>        userService.queryById();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在springboot项目中新建config(配置)包</strong><br><img src="/Resources/Pasted%20image%2020220823140646.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Aspect</span> 修饰范围:只能用在类上.作用:代表这个类是一个切面类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> 配置类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspectConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Before</span>():代表这个方法是一个前置附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;操作1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@After</span>():代表这个方法是一个后置附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;操作2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试Before和After"><a href="#测试Before和After" class="headerlink" title="测试Before和After"></a>测试Before和After</h3><p>测试<code>@Before</code>和<code>@After</code><br><img src="/Resources/Pasted%20image%2020220823142122.png"></p><p>📌注意：使用<code>@Before</code>和 <code>@After</code>注解声明方法上可以定义一个参数<code>JoinPoint</code>来获取一些内容信息。前置通知和后置通知都<strong>没有返回值</strong>。<br><img src="/Resources/Pasted%20image%2020220823152935.png"></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span>+joinPoint.getTarget());<br>    System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span>+joinPoint.getSignature().getName());<br>    System.out.println(<span class="hljs-string">&quot;操作1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823143151.png"></p><h3 id="测试Around"><a href="#测试Around" class="headerlink" title="测试Around"></a>测试Around</h3><p>Around类似方法拦截器，当方法调用时，先经过Around，Around通过后，再进去核心业务逻辑，结束后，再经过Around；<br><img src="/Resources/Pasted%20image%2020220823144110.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Around</span>():代表这个方法是一个环绕附加操作,括号内填切入点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">()</span> &#123;<br>   System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823144445.png"></p><blockquote><p>这里不会触发核心业务逻辑，原因是因为没有走第3步，第4步流程，第3步，第4步见下。</p></blockquote><p>📌注意：使用 <code>Around</code> 注解声明方法上可以定义一个参数<code>ProceedingJoinPoint</code>来获取一些内容信息和<strong>放行及执行核心业务逻辑</strong>。环绕通知<strong>存在返回值</strong>，参数为ProceedingJoinPoint，如果执行放行，才会执行目标方法，一旦放行必须将目标方法的返回值返回，否则调用者无法接受返回数据</p><p>流程<br><img src="/Resources/Pasted%20image%2020220823150600.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span>  <br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>    System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);  <br>    System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span> + proceedingJoinPoint.getTarget());  <br>    System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span> + proceedingJoinPoint.getSignature().getName());  <br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();  <br>    System.out.println(<span class="hljs-string">&quot;环绕的后置操作&quot;</span>);  <br>    <span class="hljs-keyword">return</span> proceed;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ol><li>execution方法级别切入点表达式：控制越细运行效率越低<br><code>(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</code></li><li>within类级别切入点表达式：控制越粗运行效率越高<br><code>(&quot;within(com.cqupt.service.*.*)&quot;)</code></li><li>基于注解的切入点表达式<br><code>@annotation(com.cqupt.annotations.xxx)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Retention</span>(RetentionPolicy.RUNTIME) 运行时生效  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Target</span>(ElementType.METHOD) 作用在方法类型  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <br><span class="hljs-meta">@Target(ElementType.METHOD)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAdvice &#123;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Aspect 修饰范围:只能用在类上</span><br><span class="hljs-comment"> * 作用:代表这个类是一个切面类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspectConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Around</span>():代表这个方法是一个环绕附加操作,括号内填切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//@Around(&quot;execution(* com.cqupt.service.*.*(..))&quot;)</span><br>    <span class="hljs-comment">//@Around(&quot;within(com.cqupt.service.*.*)&quot;)</span><br>    <span class="hljs-meta">@Around(&quot;@annotation(com.cqupt.annotations.MyAdvice)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕的前置操作&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;当前执行的类:&quot;</span> + proceedingJoinPoint.getTarget());<br>        System.out.println(<span class="hljs-string">&quot;当前执行的类的方法:&quot;</span> + proceedingJoinPoint.getSignature().getName());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;环绕的后置操作&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Test</span><br>   <span class="hljs-meta">@MyAdvice</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> userService.findById();<br>       System.out.println(name);<br>   &#125;<br>   <br>   <span class="hljs-meta">@MyAdvice</span> 地方写错了<br>------------------修正------------------<br>   <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@MyAdvice</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;核心业务逻辑,调用dao.findById()&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;findById&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>但是这里没有起作用，是由于位置写错了！</p></blockquote><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h3 id="文件上传（已经不适用了）"><a href="#文件上传（已经不适用了）" class="headerlink" title="文件上传（已经不适用了）"></a>文件上传（已经不适用了）</h3><p>用户访问当前系统，将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</p><h4 id="准备上传页面"><a href="#准备上传页面" class="headerlink" title="准备上传页面"></a>准备上传页面</h4><blockquote><p>jsp的位置位于main下<br><img src="/Resources/Pasted%20image%2020220823165618.png"></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;  <br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  <br>&lt;head&gt;  <br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;  <br>    &lt;title&gt;Title&lt;/title&gt;  <br>&lt;/head&gt;  <br>&lt;body&gt;  <br>&lt;h1&gt;测试文件上传&lt;/h1&gt;  <br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/file/upload&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;  <br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;  <br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;上传文件&quot;</span>&gt;  <br>&lt;/form&gt;  <br>&lt;/body&gt;  <br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="编写后端代码"><a href="#编写后端代码" class="headerlink" title="编写后端代码"></a>编写后端代码</h4><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        解析jsp的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>更改idea中工作目录以加载web-app文件夹下的内容</strong><br><img src="/Resources/Pasted%20image%2020220823161934.png"></p><p>编写业务代码</p><blockquote><p>📢 使用@Controller，不要使用@RestController！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 测试文件上传  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file    文件  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//定义:接收文件对象multipartFile file变量名要与form中input type=&quot;file&quot;标签name属性名一致  </span><br>        System.out.println(<span class="hljs-string">&quot;上传的文件名字:&quot;</span> + file.getOriginalFilename());  <br>        System.out.println(<span class="hljs-string">&quot;上传的文件大小:&quot;</span> + file.getSize());  <br>  <br>        <span class="hljs-comment">// 1.获取绝对路径(真实路径)  </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);  <br>        System.out.println(realPath);  <br>        <span class="hljs-comment">// 2. 上传文件   参数1:将文件写入到那个目录  </span><br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath, file.getOriginalFilename()));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/upload.jsp&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>测试上传图片成功！但是上传大文件不可以！</p><blockquote><p>图片的文件大小比较小，所以不会发生错误！<br>错误信息为：当前文件的大小是xxx，但是服务器允许的大小为10M</p></blockquote><p><img src="/Resources/Pasted%20image%2020220823171344.png"></p><p>解决办法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span>  <span class="hljs-comment">#运行请求传递文件大小最大为10M</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">100MB</span>     <span class="hljs-comment">#运行服务器可以处理的最大文件大小</span><br></code></pre></td></tr></table></figure><h4 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h4><p>现在的打包方式已经从war变成了jar，因此上述的文件上传的方式已经不再适用了。因此现在是通过注入目录的方式，把目录写到服务器的一个文件夹中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\&quot;</span>, file.getOriginalFilename()));<br><br><span class="hljs-comment">//或者使用属性注入的方式</span><br><span class="hljs-meta">@Value(&quot;$&#123;realPath&#125;&quot;)</span>  <br><span class="hljs-keyword">private</span> String realPath;<br>file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath, file.getOriginalFilename()));<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220823192504.png"></p><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><h4 id="准备下载页面"><a href="#准备下载页面" class="headerlink" title="准备下载页面"></a>准备下载页面</h4><blockquote><p><img src="/Resources/Pasted%20image%2020220823195227.png"></p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;测试文件下载&lt;/h1&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/file/download?filename=HELP.MD&quot;</span>&gt; HELP.MD&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="编写后端代码-1"><a href="#编写后端代码-1" class="headerlink" title="编写后端代码"></a>编写后端代码</h4><p><strong>导入依赖</strong></p><p><strong>更改idea中工作目录以加载web-app文件夹下的内容</strong></p><p>编写业务代码</p><blockquote><p>📢 使用@Controller，不要使用@RestController！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试文件下载</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename 文件名字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String filename, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前下载文件的名字:&quot;</span> + filename);<br>        <span class="hljs-comment">// 1.去指定目录中读取文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\Projects\\springboot_study\\springboot_day05\\src\\main\\webapp\\download&quot;</span>, filename);<br>        <span class="hljs-comment">// 2.将文件读取为文件输入流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// 2.5获取响应流之前一定要设置以附件形式下载</span><br>        response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + filename);<br>        <span class="hljs-comment">// 3.获取响应输出流</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-comment">// 4.输入流复制给输出流</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            len = fileInputStream.read(b);<br>            <span class="hljs-keyword">if</span> (len == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            outputStream.write(b, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        <span class="hljs-comment">// 5.释放资源</span><br>        fileInputStream.close();<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li><p><code>filter</code>（过滤器）：过滤器可以拦截<code>javaweb</code>中请求，放行，中断</p></li><li><p><code>interceptor</code>（拦截器）：类似于javaweb中<code>filter</code>功能</p></li></ul><p><strong>拦截器：只能拦截器controller相关的请求！</strong></p><blockquote><p>🔔 拦截器的底层实现就是AOP！ 在<a href="SpringBoot.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">AOP</a>中，说明了为什么需要切面编程。<strong>拦截器也是一样的作用</strong>。</p><ol><li>将controller中共有代码放入到拦截器中执行，减少controller中代码冗余。</li><li>拦截器可以中断请求轨迹。</li><li>请求之前如果该请求配置了拦截器，请求会先经过拦截器，拦截器放行之后执行请求的controller，controller执行完成之后会回到拦截器继续执行拦截器中的代码（💫<strong>环绕通知</strong>！）</li></ol></blockquote><h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><blockquote><p>在Springboot中，HandlerInterceptor已经做了默认实现，按需使用下面三个方法即可。<br>这里之前已经做过一部分，因此没有实践代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义拦截器1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kioo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最先执行的方法</span><br><span class="hljs-comment">     * 返回值为true时,放行 - &gt; 执行controller中的业务代码</span><br><span class="hljs-comment">     * 返回值为false时,中断</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================1=====================================&quot;</span>);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当controller执行完毕后,会执行该方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================2=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最后完成:当响应结束之后会执行拦截器中这个方法内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================3=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义拦截器2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kioo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最先执行的方法</span><br><span class="hljs-comment">     * 返回值为true时,放行 - &gt; 执行controller中的业务代码</span><br><span class="hljs-comment">     * 返回值为false时,中断</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================4=====================================&quot;</span>);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当controller执行完毕后,会执行该方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================5=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最后完成:当响应结束之后会执行拦截器中这个方法内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================================6=====================================&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()) <span class="hljs-comment">// 拦截器</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)              <span class="hljs-comment">// 拦截路径</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)     <span class="hljs-comment">// 排除路径</span><br>                .order(<span class="hljs-number">1</span>);                           <span class="hljs-comment">// 执行顺序</span><br><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor2</span>()) <span class="hljs-comment">// 拦截器</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)              <span class="hljs-comment">// 拦截路径</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)     <span class="hljs-comment">// 排除路径</span><br>                .order(<span class="hljs-number">2</span>);                           <span class="hljs-comment">// 执行顺序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：order用来执行多个栏截器的执行顺序, order里面写自然数，按照自然数顺序执行<br><img src="/Resources/interceptor.drawio%202.png"></p></blockquote><h3 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;  <br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abc&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试验证拦截器及拦截器的顺序"><a href="#测试验证拦截器及拦截器的顺序" class="headerlink" title="测试验证拦截器及拦截器的顺序"></a>测试验证拦截器及拦截器的顺序</h3><p><img src="/Resources/Pasted%20image%2020220824205701.png"></p><h2 id="Springboot部署方式"><a href="#Springboot部署方式" class="headerlink" title="Springboot部署方式"></a>Springboot部署方式</h2><h3 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p><strong>一开始就指定WAR打包</strong><br>指定项目打包的方式为WAR</p><blockquote><p>最后一个packaging 换成War！<br><img src="/./Resources/image-20230718113952695.png" alt="image-20230718113952695"></p></blockquote><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p><strong>之后将JAR打包方式修改成WAR</strong><br>在<code>pom.xml</code>中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>去除内嵌的TOMCAT依赖</strong><br><img src="/Resources/Pasted%20image%2020220825091550.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!--provided当前idea环境可用，不参与打包--&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在插件中指定入口类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span>-Dfile.encoding-UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.cqupt.SpringbootDay06Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置入口类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootDay06Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringBootServletInitializer</span> &#123;<br>    <span class="hljs-comment">// SpringBootServletInitializer: 不再使用内嵌容器启动，使用外部web容器(tomcat)启动</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootDay06Application.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置入口类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.sources(SpringbootDay06Application.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h4><p><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a><br><img src="/Resources/Pasted%20image%2020220825090335.png"></p><blockquote><p>带 <code>.original</code> 的是不含依赖包的<br>参考：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a></p></blockquote><p>一旦使用war包部署注意：</p><ul><li><ol><li><code>application.yml</code>中配置<code>port, context-path</code>失效</li></ol></li><li><ol start="2"><li>访问时使用打成war包的名字和外部tomcat端口号进行访问项目<blockquote><p><strong>部署</strong>：省略</p></blockquote></li></ol></li></ul><h3 id="JAR"><a href="#JAR" class="headerlink" title="JAR"></a>JAR</h3><h4 id="第一种-1"><a href="#第一种-1" class="headerlink" title="第一种"></a>第一种</h4><p><strong>一开始就指定JAR打包</strong></p><blockquote><p>最后一个packaging 点Jar！<br><img src="/Resources/Pasted%20image%2020220822194842.png"></p></blockquote><h4 id="第二种-1"><a href="#第二种-1" class="headerlink" title="第二种"></a>第二种</h4><p><strong>之后将JAR打包方式修改成WAR</strong><br>在<code>pom.xml</code>中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="打包测试-1"><a href="#打包测试-1" class="headerlink" title="打包测试"></a>打包测试</h4><p><a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a><br><img src="/Resources/Pasted%20image%2020220825093115.png"></p><blockquote><p>带 <code>.original</code> 的是不含依赖包的<br>参考：<a href="../../%E8%BD%AF%E4%BB%B6/IDEA.md#%E4%BD%BF%E7%94%A8IDEA%E6%89%93%E5%8C%85SPRINGBOOT%E9%A1%B9%E7%9B%AE">使用IDEA打包SPRINGBOOT项目</a></p></blockquote><p><strong>启动项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar xxxx.jar<br></code></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>springboot项目在使用jsp模板时，jar包部署默认无法找到jsp页面</p><p><strong>解决</strong><br>修改插件版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>指定jap打包配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-comment">&lt;!--打包时将jsp文件拷贝到META-INF目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定resources插件处理哪个目录下的资源文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定必须要放在此目录下才能被访问到--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h2><p><strong>REST</strong>：<strong>表现层状态转化</strong>(Representational State Transfer)，如果一个架构符合REST原则，就称它为 RestFul 架构风格。</p><p><strong>资源</strong>：所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</p><p><strong>表现层</strong>：我们把”资源”具体呈现出来的形式，叫做它的”表现层”(Representation)。</p><p>状态转化(State Transfer)：如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”(State Transfer)。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><ul><li><em>传统url</em>：<code>http://localhost:8080/项目名/user/findById?id=21</code></li><li><em>Resturl</em>：<code>http://localhost:8080/项目名/user/findById/21</code></li></ul><blockquote><p>REST原则就是指一个URL代表一个唯一资源，并且通过HTTP协议里面四个动词：<strong>GET</strong>、<strong>POST</strong>、<strong>PUT</strong>、<strong>DELETE</strong>对应四种服务器端的基本操作：GET用来获取资源，POST用来添加资源(也可以用于更新资源)，PUT用来更新资源，DELETE用来删除资源。</p></blockquote><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-comment">// 1.标识当前服务是基于restful的架构风格</span><br><span class="hljs-comment">// 2.@responseBody + @controller组合</span><br><span class="hljs-comment">// 用了@responseBody就表示只接受json数据</span><br><span class="hljs-meta">@RequestMapping(&quot;/rest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestFulController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Rest使用原则：</span><br><span class="hljs-comment">     * 1. 使用RestURL 替换 传统URL参数作为 URL整体</span><br><span class="hljs-comment">     * 2. 使用四种http动词 get post put delete</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@GetMapping</span> <span class="hljs-doctag">@PostMapping</span> <span class="hljs-doctag">@PutMapping</span> <span class="hljs-doctag">@DeleteMapping</span></span><br><span class="hljs-comment">     * 3. 通常服务返回的数据都是json格式或者xml格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;findOne/&#123;id&#125;/&#123;name&#125;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span> + id;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PutMapping(&quot;saveOne&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;updateOne&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;delOne/&#123;id&#125;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一旦遵循Rest原则，那么必须发<strong>对应的请求</strong>！并且路径也必须<strong>匹配规则</strong>！<br>浏览器只会发送get请求，因此会报错！<br><img src="/Pasted%20image%2020220720111001.png" alt="Pasted image 20220720111001.png"><br><strong>少一个斜杠</strong>都不行！<br><img src="/Pasted%20image%2020220720111024.png" alt="Pasted image 20220720111024.png"></p></blockquote><blockquote><p>补充：这里的笔记出自ES中的部分，没有按照视频中的走，基本上跳过了视频的部分。视频地址：<a href="https://www.bilibili.com/video/BV1Cv411p7cQ?p=47">RESTFUL的使用</a>，以后如果需要用到RESTFUL开发，再深入了解RESTFUL。</p></blockquote><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><p><strong>仅看了前后端分离的异常处理</strong>，传统方法开发的异常处理仅复制了笔记，用作参考。具体的使用方法见：<a href="https://www.bilibili.com/video/BV1Cv411p7cQ?p=49">异常处理&amp;传统方式异常处理</a>。</p></blockquote><h4 id="传统开发的异常处理"><a href="#传统开发的异常处理" class="headerlink" title="传统开发的异常处理"></a>传统开发的异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局异常处理之传统web开发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerExceptionResolver</span> &#123;<br>    <span class="hljs-comment">//参数1:当前请求对象</span><br>    <span class="hljs-comment">//参数2:当前请求的响应对象</span><br>    <span class="hljs-comment">//参数3:当前出现异常的控割器对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;<br>        <span class="hljs-comment">//异常处理...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;500&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RestFul的异常处理"><a href="#RestFul的异常处理" class="headerlink" title="RestFul的异常处理"></a>RestFul的异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局异常处理之RestFul</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandlerRest</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h2><p><strong>CORS</strong></p><ul><li>CORS是一个W3C标准，全称是”<strong>跨域资源共享</strong>“（Cross-origin resource sharing）。</li><li>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</li></ul><h2 id="同源策略-同源策略-same-origin-policy-是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。"><a href="#同源策略-同源策略-same-origin-policy-是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。" class="headerlink" title="同源策略- 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。"></a><strong>同源策略</strong><br>- 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。同源策略是浏览器安全的基石。</h2><p><strong>源</strong></p><ul><li>源[origin]就是协议、域名和端口号。例如：<code>http://www.baidu.com:80</code>这个URL。</li></ul><p><strong>同源</strong></p><ul><li>若地址里面的协议、域名和端口号均相同则属于同源。</li></ul><p><img src="/Resources/Pasted%20image%2020220825102617.png"></p><h2 id="哪些操作不受同源限制-页面中的链接，重定向以及表单提交是不会受到同源策略限制的；-跨域资源的引入是可以的。如嵌入到页面中的-lt-script-src-quot-quot-gt-lt-script-gt-lt-img-gt-lt-link-gt-lt-iframe-gt-等。"><a href="#哪些操作不受同源限制-页面中的链接，重定向以及表单提交是不会受到同源策略限制的；-跨域资源的引入是可以的。如嵌入到页面中的-lt-script-src-quot-quot-gt-lt-script-gt-lt-img-gt-lt-link-gt-lt-iframe-gt-等。" class="headerlink" title="哪些操作不受同源限制- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的；- 跨域资源的引入是可以的。如嵌入到页面中的&lt;script src=&quot; ...&quot;&gt;&lt;/script&gt;, &lt;img&gt;, &lt;link&gt;, &lt;iframe&gt;等。"></a><strong>哪些操作不受同源限制</strong><br>- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的；<br>- 跨域资源的引入是可以的。如嵌入到页面中的<code>&lt;script src=&quot; ...&quot;&gt;&lt;/script&gt;, &lt;img&gt;, &lt;link&gt;, &lt;iframe&gt;</code>等。</h2><p><strong>哪些操作受到同源限制</strong></p><ul><li>在浏览器中发起一个AJAX请求，会受到同源策略限制。</li><li>出现错误:Access-Control-Allow-0rigin<br>![[Pasted image 20220621095746.png]]</li></ul><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>第一种<br>在controller上面添加@CrossOrigin注解</p><p>第二种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//下面的两种感觉都可以，有时候第一种可以，有时候第二种可以，有时候都可以</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigurerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowCredentials(<span class="hljs-literal">false</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>        ;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title function_">corsWebFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br><br><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">corsConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>corsConfiguration.setAllowCredentials(<span class="hljs-literal">true</span>);<br>source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsConfiguration);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsWebFilter</span>(source);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Jasypt-加密"><a href="#Jasypt-加密" class="headerlink" title="Jasypt 加密"></a>Jasypt 加密</h2><p>…</p><h2 id="在SpringBoot中集成Mybatis"><a href="#在SpringBoot中集成Mybatis" class="headerlink" title="在SpringBoot中集成Mybatis"></a>在SpringBoot中集成Mybatis</h2><p>单独使用参考：[[MyBatis]]</p><p>初始化一个Springboot应用，依赖选spring-web，不再赘述。</p><h3 id="导入依赖-2"><a href="#导入依赖-2" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><code>pom.xml</code></p><blockquote><p>依赖参考，如果初始化的时候，没有选择spring-web，可以全部复制导入<br>💡：如果是mysql版本用的是8的话，需要导8的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot_day04</span><br><br><span class="hljs-comment"># 整合mybatis相关配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.153.135:3306/yingxue?characterEncoding=UTF-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment">#mapper配置文件的位置</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:com/cqupt/mapper/*.xml</span><br>  <span class="hljs-comment">#别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.cqupt.entity</span><br></code></pre></td></tr></table></figure><blockquote><p>💡：如果是mysql依赖版本用的是8的话，<code>driver-class-name: com.mysql.jdbc.Driver</code>换成<code>driver-class-name: com.mysql.cj.jdbc.Driver</code></p><p>❗：创建mapper📂时，注意需要使用 <code>/</code> 的方式，不要使用 <code>.</code> 的方式，否则认为一层目录。最后导致找不到mapper文件。<br><img src="/Resources/Pasted%20image%2020220822191755.png"></p></blockquote><h3 id="编写业务层代码"><a href="#编写业务层代码" class="headerlink" title="编写业务层代码"></a>编写业务层代码</h3><blockquote><p>可以根据数据库字段自己编写，但是现在可以使用其他工具来编写简化操作</p></blockquote><h4 id="使用MyBatis-Generator（不建议）"><a href="#使用MyBatis-Generator（不建议）" class="headerlink" title="使用MyBatis Generator（不建议）"></a>使用MyBatis Generator（不建议）</h4><p>根据数据库中的表，自动的生成JavaBean文件、对应的mapper接口、以及对应的mapper配置文件中大部分查询语句。</p><h5 id="导入依赖-3"><a href="#导入依赖-3" class="headerlink" title="导入依赖"></a>导入依赖</h5><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;last.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis的代码生成器的配置策略文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>mybatis-generator-config.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置代码生成相关的策略文件-mybatis-generator-config-xml"><a href="#配置代码生成相关的策略文件-mybatis-generator-config-xml" class="headerlink" title="配置代码生成相关的策略文件 mybatis-generator-config.xml"></a>配置代码生成相关的策略文件 mybatis-generator-config.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jdbc连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- schema为数据库名，tableName为对应的数据库表名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注释 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 类型转换 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成实体类配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成Mapper.xml文件配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成Mapper.java 接口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点</p><ol><li>每次代码生成需要配置对应的 mybatis-generator-config 通过 XML 的形式配置相关生成属性和规则</li><li>无法生成通用的 Controller、Service 类，无法自定义模板等<br>综上两点： mybatis-generator 使用非常不方便。</li></ol><h4 id="使用EasyCode（推荐）"><a href="#使用EasyCode（推荐）" class="headerlink" title="使用EasyCode（推荐）"></a>使用EasyCode（推荐）</h4><blockquote><p>下面的截图来自微服务的实战</p></blockquote><p><a href="IDEA#%E4%BD%BF%E7%94%A8IDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93">使用IDEA连接数据库</a></p><p>使用EasyCode（IDEA中的插件）快速生成代码<br><img src="/./Resources/image-20230718114042119.png" alt="image-20230718114042119"></p><p><img src="/./Resources/image-20230718114048107.png" alt="image-20230718114048107"></p><p>这里的mapper不知道为什么去了admin的src目录下，手动修改一下路径<br>并将mapper文件夹的名字改为<code>com.cqupt.mapper</code></p><p>调整完后项目结构图如下<br><img src="/./Resources/image-20230718114056565.png" alt="image-20230718114056565"></p><p>扫描Mapper</p><ul><li>在入口类上加入<code>@MapperScan(&quot;com.cqupt.dao&quot;)</code><br>修饰范围：用在类上，用来扫描dao接口所在包，同时将所有dao接口在工厂中创建对象</li><li>在Mapper类上加入<code>@Mapper</code><blockquote><p>以上选择任意一个皆可</p></blockquote></li></ul><h2 id="在Springboot中集成Mybatis-Plus"><a href="#在Springboot中集成Mybatis-Plus" class="headerlink" title="在Springboot中集成Mybatis-Plus"></a>在Springboot中集成Mybatis-Plus</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><blockquote><p>为了方便测试，准备一张测试表</p></blockquote><p>对应的表结构![[Pasted image 20220620200304.png]]</p><p>对应的sql脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MySQL dump 10.13  Distrib 5.7.38, for osx10.17 (x86_64)</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Host: 127.0.0.1    Database: ms</span><br><span class="hljs-comment">-- ------------------------------------------------------</span><br><span class="hljs-comment">-- Server version5.7.38</span><br><br><span class="hljs-comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;<br><span class="hljs-comment">/*!40101 SET NAMES utf8 */</span>;<br><span class="hljs-comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;<br><span class="hljs-comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;<br><span class="hljs-comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Table structure for table `sys_user`</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `sys_user`;<br><span class="hljs-comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;<br><span class="hljs-comment">/*!40101 SET character_set_client = utf8 */</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sys_user` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `nickname` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `user_id_uindex` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;<br><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Dumping data for table `sys_user`</span><br><span class="hljs-comment">--</span><br><br>LOCK TABLES `sys_user` WRITE;<br><span class="hljs-comment">/*!40000 ALTER TABLE `sys_user` DISABLE KEYS */</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `sys_user` (`id`, `username`, `password`, `nickname`, `email`, `phone`, `address`, `create_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;管理员&#x27;</span>,<span class="hljs-string">&#x27;admin@mail.com&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span>,<span class="hljs-string">&#x27;2022-06-20 09:04:56&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;wt&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>);<br><span class="hljs-comment">/*!40000 ALTER TABLE `sys_user` ENABLE KEYS */</span>;<br>UNLOCK TABLES;<br><span class="hljs-comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;<br><span class="hljs-comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;<br><span class="hljs-comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;<br><span class="hljs-comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;<br><span class="hljs-comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;<br><span class="hljs-comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;<br><span class="hljs-comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;<br><br><span class="hljs-comment">-- Dump completed on 2022-06-20 20:03:25</span><br><br></code></pre></td></tr></table></figure><h3 id="导入依赖-4"><a href="#导入依赖-4" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MybatisPlus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p><code>application.yml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"># DataSource Config<br>spring:<br>  datasource:<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>    url: jdbc:mysql://localhost:3306/ms?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai<br>    username: root<br>    password: root<br>server:<br>  port: 8081<br>mybatis-plus:<br>  mapper-locations: classpath*:/mapper/**Mapper.xml<br></code></pre></td></tr></table></figure><p><code>MybatisPlusConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;scan.cqupt.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用MybatisPlus-generator-自动生成"><a href="#使用MybatisPlus-generator-自动生成" class="headerlink" title="使用MybatisPlus-generator 自动生成"></a>使用MybatisPlus-generator 自动生成</h3><p>官方开发文档：<br>示例：<a href="https://baomidou.com/pages/779a6e/#%E4%BD%BF%E7%94%A8">代码生成器（新） | MyBatis-Plus</a></p><h4 id="导入依赖-5"><a href="#导入依赖-5" class="headerlink" title="导入依赖"></a>导入依赖</h4><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        MybatisPlus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        mp代码生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        模板引擎--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写MybatisPlusCodeAutoGeneration"><a href="#编写MybatisPlusCodeAutoGeneration" class="headerlink" title="编写MybatisPlusCodeAutoGeneration"></a>编写MybatisPlusCodeAutoGeneration</h4><p>配置说明：<a href="https://baomidou.com/pages/981406/#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE-datasourceconfig">代码生成器配置新 | MyBatis-Plus</a><br>使用的时候，需要用户名，密码，数据库地址，表名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusCodeAutoGeneration</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/vueblog&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自动生成代码输出目录，这里默认类路径下的src/main/java/com.cqupt/</span><br><span class="hljs-comment">     * System.getProperty(&quot;user.dir&quot;) - &gt; 项目目录</span><br><span class="hljs-comment">     * File.separator - &gt; /</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">OUTPUT_DIR</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + File.separator + <span class="hljs-string">&quot;src/main/java&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FastAutoGenerator.create(URL, USERNAME, PASSWORD)<br>                .globalConfig(builder -&gt; builder<br>                        .author(<span class="hljs-string">&quot;wangtaotao&quot;</span>)<span class="hljs-comment">// 设置作者</span><br>                        .fileOverride()<span class="hljs-comment">// 覆盖已生成文件</span><br>                        .disableOpenDir()<span class="hljs-comment">//禁用代码生成后打开输出目录对话框</span><br>                        .outputDir(OUTPUT_DIR))<br>                .packageConfig(builder -&gt; builder<br>                        .parent(<span class="hljs-string">&quot;com.cqupt&quot;</span>)<span class="hljs-comment">// 设置父包名</span><br>                        .entity(<span class="hljs-string">&quot;entity&quot;</span>))<span class="hljs-comment">//可以指定实体(DO)所在的包名</span><br>                .strategyConfig(builder -&gt; builder<br>                        <span class="hljs-comment">//addInclude指定包含的表名，不调用该方法默认为所有表生成代码</span><br>                        <span class="hljs-comment">//addTablePrefix可以过滤表前缀，即t_user变成user</span><br>                        .addInclude(<span class="hljs-string">&quot;m_user&quot;</span>).addTablePrefix(<span class="hljs-string">&quot;m_&quot;</span>)<br>                        .addInclude(<span class="hljs-string">&quot;m_blog&quot;</span>).addTablePrefix(<span class="hljs-string">&quot;m_&quot;</span>)<br>                        <span class="hljs-comment">// 禁用为实体类生成序列化ID；formatFileName格式化生成的实体类名称，即t_user -&gt; UserDO</span><br>                        <span class="hljs-comment">//.entityBuilder().disableSerialVersionUID().formatFileName(&quot;%sDO&quot;)</span><br>                        <span class="hljs-comment">// formatMapperFileName格式化Mapper接口名称，即t_user -&gt; UserMapper</span><br>                        <span class="hljs-comment">// formatXmlFileName格式化Mapper.xml文件名称，即t_user -&gt; UserMapper.xml</span><br>                        .mapperBuilder()<br>                        .formatMapperFileName(<span class="hljs-string">&quot;%sMapper&quot;</span>)<br>                        .formatXmlFileName(<span class="hljs-string">&quot;%sMapper&quot;</span>)<br>                        .serviceBuilder()<br>                        .formatServiceFileName(<span class="hljs-string">&quot;%sService&quot;</span>)<br>                        .build()<br>                )<br>                <span class="hljs-comment">// MyBatis-Plus代码生成器是通过模板引擎来渲染文件的，默认模板引擎是Velocity，根据依赖我们使用Freemarker</span><br>                .templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>())<br>                .execute();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>生成结果：<br>![[Pasted image 20220620183018.png|250]]</p><h5 id="MybatisPlus-generator-相关问题"><a href="#MybatisPlus-generator-相关问题" class="headerlink" title="MybatisPlus-generator 相关问题"></a>MybatisPlus-generator 相关问题</h5><ol><li><p><code>Cannot resolve symbol ‘FastAutoGenerator’</code><br>参考：<a href="https://blog.csdn.net/weixin_45203988/article/details/123756905">新版本代码自动生成(MybatisPlus-generator) 代码示例+问题解决_建桥之魂的博客-CSDN博客</a><br>原因：mybatis-plus-generator版本太低，换新的</p></li><li><p>如果需要显示json回显到浏览器，则需要在Controller把<code>@Controller</code>改成<code>@RestController</code></p></li></ol><h3 id="实现增删改查"><a href="#实现增删改查" class="headerlink" title="实现增删改查"></a>实现增删改查</h3><p>MybatisPlus已经实现了大部分CRUD操作，因此，只需要直接使用即可。</p><blockquote><p>controller -&gt; service -&gt; serviceImpl -&gt; mapper</p><p>controller是为前端提供的访问入口，不用关心具体的业务逻辑。具体的业务逻辑放在了serviceImpl里，controller只需调用它封装好的方法即可。</p><p>service提供业务逻辑要用到的方法，serviceImpl提供方法的具体实现。说人话，ServiceImpl负责了主要的功能编写，Controller提供了使用的入口。</p><p>mapper为serviceImpl提供操作数据的方法，但方法的具体实现(也就是SQL语句)放在了mapper下的xml文件里。</p></blockquote><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-06-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getById(id);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20220620190924.png]]</p><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> userService.save(user);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@RequestBody：通过获取post请求中的请求体</p></blockquote><p>![[Pasted image 20220620195105.png]]</p><h5 id="增删查改全部代码"><a href="#增删查改全部代码" class="headerlink" title="增删查改全部代码"></a>增删查改全部代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2022-06-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getById(id);<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;deleteById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.removeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/update&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.updateById(user);<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;getAll&quot;)</span>  <br> <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>&#123;  <br>     <span class="hljs-keyword">return</span> userService.list();  <br>&#125;<br><br><span class="hljs-comment">// 分页查询</span><br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-keyword">public</span> IPage&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer pageNum,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam</span> Integer pageSize)</span> &#123;<br>        IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum, pageSize);<br>        <span class="hljs-keyword">return</span> userService.page(page);<br>    &#125;<br><br> <span class="hljs-comment">//分页查询 匹配用户名使用QueryWrapper</span><br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-keyword">public</span> IPage&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer pageNum,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam</span> Integer pageSize,</span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestParam(defaultValue = &quot;&quot;)</span> String username)</span> &#123;<br>        IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNum, pageSize);<br>        QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.like(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> userService.page(page, queryWrapper);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="在SpringBoot中集成Swagger"><a href="#在SpringBoot中集成Swagger" class="headerlink" title="在SpringBoot中集成Swagger"></a>在SpringBoot中集成Swagger</h2><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><ul><li>后端：后端控制层，服务层，数据访问层</li><li>前端：前端控制层，视图层</li></ul><p>前端测试后端工具Postman</p><p>后端提供接口，需要时时更新消息和改动</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><ul><li>Api框架</li><li>RestFul Api 文档在线自动生成工具 &#x3D;&gt; <strong>Api文档与Api定义同步更新</strong></li><li>在线测试Api接口</li><li>支持多种语言</li></ul><h3 id="在项目中使用Swagger需要springfox"><a href="#在项目中使用Swagger需要springfox" class="headerlink" title="在项目中使用Swagger需要springfox"></a>在项目中使用Swagger需要springfox</h3><ul><li>swagger2</li><li>ui</li></ul><h3 id="SpringBoot集成Swagger3（新版）"><a href="#SpringBoot集成Swagger3（新版）" class="headerlink" title="SpringBoot集成Swagger3（新版）"></a>SpringBoot集成Swagger3（新版）</h3><blockquote><p>注意：不要同时导入2和3，会报错</p></blockquote><h4 id="导依赖"><a href="#导依赖" class="headerlink" title="导依赖"></a>导依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写配置文件-1"><a href="#编写配置文件-1" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><blockquote><p>跟2一样，只是注解换了一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Swagger3Config &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/20 21:20&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     配置Swagger的Docket的Bean实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                <span class="hljs-comment">//为当前包下controller生成API文档</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cqupt.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-comment">//添加登录认证</span><br><span class="hljs-comment">//                .securitySchemes(securitySchemes())</span><br><span class="hljs-comment">//                .securityContexts(securityContexts());</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     配置Swagger信息 = apiInfo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                作者信息</span><br><span class="hljs-comment">                 */</span><br>                .title(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br><br><span class="hljs-comment">//    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class="hljs-comment">//        //设置请求头信息</span><br><span class="hljs-comment">//        List&lt;ApiKey&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        ApiKey apiKey = new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;, &quot;header&quot;);</span><br><span class="hljs-comment">//        result.add(apiKey);</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class="hljs-comment">//        //设置需要登录认证的路径</span><br><span class="hljs-comment">//        List&lt;SecurityContext&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        result.add(getContextByPath(&quot;/brand/.*&quot;));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private SecurityContext getContextByPath(String pathRegex)&#123;</span><br><span class="hljs-comment">//        return SecurityContext.builder()</span><br><span class="hljs-comment">//                .securityReferences(defaultAuth())</span><br><span class="hljs-comment">//                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="hljs-comment">//                .build();</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class="hljs-comment">//        List&lt;SecurityReference&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        AuthorizationScope authorizationScope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);</span><br><span class="hljs-comment">//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];</span><br><span class="hljs-comment">//        authorizationScopes[0] = authorizationScope;</span><br><span class="hljs-comment">//        result.add(new SecurityReference(&quot;Authorization&quot;, authorizationScopes));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><p><code>http://localhost:端口号/swagger-ui/index.html#/</code></p><h3 id="SpringBoot集成Swagger2"><a href="#SpringBoot集成Swagger2" class="headerlink" title="SpringBoot集成Swagger2"></a>SpringBoot集成Swagger2</h3><h4 id="导入依赖-6"><a href="#导入依赖-6" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Swagger-UI API文档生产工具--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写配置文件-2"><a href="#编写配置文件-2" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p><code>SwaggerConfig.java</code></p><blockquote><p>这里注释掉了登录认证</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SwaggerConfig &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/20 20:32&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 配置Swagger的Docket的Bean实例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>.apiInfo(apiInfo())<br>.select()<br><span class="hljs-comment">//为当前包下controller生成API文档</span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.cqupt.controller&quot;</span>))<br>.paths(PathSelectors.any())<br>.build();<br><span class="hljs-comment">//添加登录认证</span><br><span class="hljs-comment">//                .securitySchemes(securitySchemes())</span><br><span class="hljs-comment">//                .securityContexts(securityContexts());</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 配置Swagger信息 = apiInfo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">作者信息</span><br><span class="hljs-comment"> */</span><br>.title(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>.description(<span class="hljs-string">&quot;Api文档&quot;</span>)<br>.contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>))<br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>.build();<br>&#125;<br><br><span class="hljs-comment">//    private List&lt;ApiKey&gt; securitySchemes() &#123;</span><br><span class="hljs-comment">//        //设置请求头信息</span><br><span class="hljs-comment">//        List&lt;ApiKey&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        ApiKey apiKey = new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;, &quot;header&quot;);</span><br><span class="hljs-comment">//        result.add(apiKey);</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityContext&gt; securityContexts() &#123;</span><br><span class="hljs-comment">//        //设置需要登录认证的路径</span><br><span class="hljs-comment">//        List&lt;SecurityContext&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        result.add(getContextByPath(&quot;/brand/.*&quot;));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private SecurityContext getContextByPath(String pathRegex)&#123;</span><br><span class="hljs-comment">//        return SecurityContext.builder()</span><br><span class="hljs-comment">//                .securityReferences(defaultAuth())</span><br><span class="hljs-comment">//                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="hljs-comment">//                .build();</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    private List&lt;SecurityReference&gt; defaultAuth() &#123;</span><br><span class="hljs-comment">//        List&lt;SecurityReference&gt; result = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//        AuthorizationScope authorizationScope = new AuthorizationScope(&quot;global&quot;, &quot;accessEverything&quot;);</span><br><span class="hljs-comment">//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];</span><br><span class="hljs-comment">//        authorizationScopes[0] = authorizationScope;</span><br><span class="hljs-comment">//        result.add(new SecurityReference(&quot;Authorization&quot;, authorizationScopes));</span><br><span class="hljs-comment">//        return result;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h4><p><code>http://localhost:端口号/swagger-ui.html</code>访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;p&gt;官方网站：&lt;a href=&quot;https://spring.io/projec</summary>
      
    
    
    
    <category term="Java" scheme="http://conquers.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="http://conquers.github.io/categories/Java/Spring/"/>
    
    <category term="Spring Boot" scheme="http://conquers.github.io/categories/Java/Spring/Spring-Boot/"/>
    
    
    <category term="SpringBoot" scheme="http://conquers.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot支付宝沙箱支付</title>
    <link href="http://conquers.github.io/posts/a53e2688.html"/>
    <id>http://conquers.github.io/posts/a53e2688.html</id>
    <published>2022-08-08T08:45:02.000Z</published>
    <updated>2023-07-18T06:59:50.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot支付宝沙箱支付"><a href="#Springboot支付宝沙箱支付" class="headerlink" title="Springboot支付宝沙箱支付"></a>Springboot支付宝沙箱支付</h1><h2 id="使用沙箱环境"><a href="#使用沙箱环境" class="headerlink" title="使用沙箱环境"></a>使用沙箱环境</h2><h3 id="进入支付宝开发平台—沙箱环境"><a href="#进入支付宝开发平台—沙箱环境" class="headerlink" title="进入支付宝开发平台—沙箱环境"></a>进入支付宝开发平台—沙箱环境</h3><ul><li>沙箱环境配置：<a href="https://opendocs.alipay.com/common/02kkv7">https://opendocs.alipay.com/common/02kkv7</a></li></ul><p>开发者使用支付宝账号登录 <a href="https://openhome.alipay.com/develop/manage">开放平台控制台</a>（需实名认证的支付宝账号）。<br><img src="/Resources/Pasted%20image%2020220808162913.png"></p><h3 id="生成应用私钥和应用公钥"><a href="#生成应用私钥和应用公钥" class="headerlink" title="生成应用私钥和应用公钥"></a>生成应用私钥和应用公钥</h3><blockquote><p>获取<a href="https://opendocs.alipay.com/common/02kipl">生成密钥</a>的工具<br>下载安装-&gt;生成密钥<br><img src="/Resources/Pasted%20image%2020220809105134.png"></p></blockquote><h3 id="获取支付宝公钥、APPID和PID"><a href="#获取支付宝公钥、APPID和PID" class="headerlink" title="获取支付宝公钥、APPID和PID"></a>获取支付宝公钥、APPID和PID</h3><p><img src="/Resources/Pasted%20image%2020220809105646.png"></p><p>将上一步的应用公钥复制进来<br><img src="/Resources/Pasted%20image%2020220809105301.png"></p><p><img src="/Resources/Pasted%20image%2020220809105351.png"></p><h2 id="配置SpringBoot"><a href="#配置SpringBoot" class="headerlink" title="配置SpringBoot"></a>配置SpringBoot</h2><blockquote><p>配置一个提交表单的页面<br><img src="/Resources/Pasted%20image%2020220809150035.png"></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/alipay/pay&quot;</span>&gt;</span><br>    订单号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tradeNo&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    订单名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    付款金额：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;下单&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口说明：<a href="https://opendocs.alipay.com/open/02e7gq?scene=20">app支付接口2.0</a></p><blockquote><p>新建一个Springboot 项目<br>导入Springweb和alipay-sdk的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.16.57.ALL<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="定义配置类"><a href="#定义配置类" class="headerlink" title="定义配置类"></a>定义配置类</h3><blockquote><p>将以上获取到的支付宝公钥、应用私钥、APPID填写到如下配置类中<br>变量名的含义已在注释给出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请在这里配置您的基本信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">app_id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用私钥，您的PKCS8格式RSA2私钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">merchant_private_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.html 对应APPID下的支付宝公钥。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">alipay_public_key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝异步通知路径,付款完毕后会异步调用本项目的方法,必须为公网地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">notify_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/alipay/failure&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝同步通知路径,也就是当付款完毕后跳转本项目的页面,可以不是公网地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">return_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8080/alipay/success&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 签名方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">sign_type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;RSA2&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 字符编码格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf-8&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付宝网关，这是沙箱的网关</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">gatewayUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">log_path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\logs\\&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写日志，方便测试（看网站需求，也可以改成把记录存入数据库）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sWord 要写入日志里的文本内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logResult</span><span class="hljs-params">(String sWord)</span> &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(log_path + <span class="hljs-string">&quot;alipay_log_&quot;</span> + System.currentTimeMillis() + <span class="hljs-string">&quot;.txt&quot;</span>);<br>            <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 这里的getParentFile()获取的是最后一级文件前的所有目录名</span><br><span class="hljs-comment">                 * 即如果是E:\logs\logs\logs\log.txt,则getParentFile()的结果是E:\logs\logs\logs\</span><br><span class="hljs-comment">                 */</span><br>                file.getParentFile().mkdirs();<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 追加</span><br><span class="hljs-comment">             * fileWriter = new FileWriter(file,true);</span><br><span class="hljs-comment">             * 覆盖(默认)</span><br><span class="hljs-comment">             * fileWriter = new FileWriter(file,false);</span><br><span class="hljs-comment">             */</span><br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file,<span class="hljs-literal">false</span>);<br>            fileWriter.write(sWord);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileWriter.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建支付的Controller类"><a href="#创建支付的Controller类" class="headerlink" title="创建支付的Controller类"></a>创建支付的Controller类</h3><p>在Controller类中创建点击支付跳转支付宝页面的方法：支付方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/alipay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayService alipayService;<br><br>    <span class="hljs-comment">// 支付失败</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/failure&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付失败&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 支付成功</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 支付</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/pay&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toPay</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;tradeNo&quot;)</span> String orderNumber, <span class="hljs-meta">@RequestParam(&quot;totalAmount&quot;)</span> String totalAmount, <span class="hljs-meta">@RequestParam(&quot;subject&quot;)</span> String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pays</span> <span class="hljs-operator">=</span> alipayService.pay(orderNumber, totalAmount, subject, response, request);<br>    <span class="hljs-comment">// 支付成功添加日志</span><br>        AlipayConfig.logResult(pays);<br>        <span class="hljs-keyword">return</span> pays;<br>    &#125;<br><br>    <span class="hljs-comment">// 退款</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/refund&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toRefund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> alipayService.refund(response, session);<br>    <span class="hljs-comment">// 退款成功添加日志</span><br>        AlipayConfig.logResult(pay);<br>        <span class="hljs-keyword">return</span> pay;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建支付的Service类"><a href="#创建支付的Service类" class="headerlink" title="创建支付的Service类"></a>创建支付的Service类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlipayService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付接口</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNumber 订单编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalAmount 总计金额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response    响应</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request     请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AlipayApiException</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">pay</span><span class="hljs-params">(String orderNumber, String totalAmount, String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 退款查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> （唯一）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ，同一笔交易多次退款需要保证唯一，如需部分退款，则此参数必传</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="创建支付的ServiceImpl类"><a href="#创建支付的ServiceImpl类" class="headerlink" title="创建支付的ServiceImpl类"></a>创建支付的ServiceImpl类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AlipayService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调取支付宝接口 web端支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">DefaultAlipayClient</span> <span class="hljs-variable">alipayClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(<br>            AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, <span class="hljs-string">&quot;json&quot;</span>, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调取支付宝接口 app端支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">AlipayClient</span> <span class="hljs-variable">alipayClients</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(<br>            AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, <span class="hljs-string">&quot;json&quot;</span>, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">pay</span><span class="hljs-params">(String orderNumber, String totalAmount, String subject, HttpServletResponse response, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-type">AlipayTradePagePayRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayRequest</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 同步通知，支付完成后，支付成功页面</span><br><span class="hljs-comment">         */</span><br>        alipayRequest.setReturnUrl(AlipayConfig.return_url);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 异步通知，支付完成后，需要进行的异步处理</span><br><span class="hljs-comment">         */</span><br>        alipayRequest.setNotifyUrl(AlipayConfig.notify_url);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        //商户订单号，后端可以写一个工具类生成一个订单号，必填</span><br><span class="hljs-comment">        String order_number = new String(&quot;orderNumber&quot;);</span><br><span class="hljs-comment">        //付款金额，从前台获取，必填</span><br><span class="hljs-comment">        String total_amount = new String(&quot;totalAmount&quot;);</span><br><span class="hljs-comment">        //订单名称/标题，可自定义</span><br><span class="hljs-comment">        String subject = new String(&quot;支付宝沙箱测试&quot;);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 除了需要提供之前设置好的私有属性（URL，公钥，私钥，网关等等）外，还需要提供的参数</span><br>        <span class="hljs-comment">// outTradeNo，订单号，必须为String64位，不能为空且不能重复</span><br>        <span class="hljs-comment">// totalAmount，支付金额，不能为空</span><br>        <span class="hljs-comment">// subject，订单名称，不能为空</span><br>        <span class="hljs-comment">// body，商品描述，可以为空</span><br>        <span class="hljs-comment">// 上面三个必填参数很重要且必须遵守支付宝的规定，在扫码支付的时候能看到且有用</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">bizContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        bizContent.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderNumber);<br>        bizContent.put(<span class="hljs-string">&quot;total_amount&quot;</span>,totalAmount);<br>        bizContent.put(<span class="hljs-string">&quot;subject&quot;</span>,subject);<br>        bizContent.put(<span class="hljs-string">&quot;product_code&quot;</span>,<span class="hljs-string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);<br>        alipayRequest.setBizContent(bizContent.toString());<br><span class="hljs-comment">//        String result = alipayClient.pageExecute(alipayRequest).getBody().replace(&#x27;\&quot;&#x27;, &#x27;\&#x27;&#x27;).replace(&#x27;\n&#x27;, &#x27; &#x27;);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> alipayClient.pageExecute(alipayRequest).getBody();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refund</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>        <span class="hljs-comment">//设置请求参数</span><br>        <span class="hljs-type">AlipayTradeRefundRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradeRefundRequest</span>();<br>        <span class="hljs-comment">//商户订单号，必填</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_trade_no</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;20200523&quot;</span>);<br>        <span class="hljs-comment">//需要退款的金额，该金额不能大于订单金额，必填</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund_amount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;198&quot;</span>);<br>        <span class="hljs-comment">//标识一次退款请求，同一笔交易多次退款需要保证唯一。如需部分退款，则此参数必传；不传该参数则代表全额退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out_request_no</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(UUID.randomUUID().toString());<br>        <span class="hljs-comment">// 字符转义很重要</span><br>        alipayRequest.setBizContent(<span class="hljs-string">&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;</span> + out_trade_no + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;refund_amount\&quot;:\&quot;&quot;</span> + refund_amount + <span class="hljs-string">&quot;\&quot;,&quot;</span><br>                + <span class="hljs-string">&quot;\&quot;out_request_no\&quot;:\&quot;&quot;</span> + out_request_no + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        <span class="hljs-comment">// 请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> alipayClient.execute(alipayRequest).getBody();<br>        <span class="hljs-comment">// 输出</span><br>        System.out.println(result);<span class="hljs-comment">//以下写自己的订单退款代码</span><br>        <span class="hljs-comment">// logger.info(&quot;返回结果=&#123;&#125;&quot;,result);</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="/Resources/Pasted%20image%2020220809150109.png"><br><img src="/Resources/Pasted%20image%2020220809150118.png"><br>输入沙箱中提供的买家账户密码即可完成付款，至此沙箱支付完成。</p><h3 id="一些补充-关于returnUrl和notifyUrl"><a href="#一些补充-关于returnUrl和notifyUrl" class="headerlink" title="一些补充 关于returnUrl和notifyUrl"></a>一些补充 关于returnUrl和notifyUrl</h3><blockquote><p>returnUrl 异步<br>notifyUrl 同步</p></blockquote><h4 id="returnUrl"><a href="#returnUrl" class="headerlink" title="returnUrl"></a>returnUrl</h4><p>前面付完款之后的同步回调直接返回一个”success”</p><blockquote><p>这里的success是notifyUrl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，付完款后，支付宝会反馈一些信息，补充代码如下</p><blockquote><p>对数据库进行操作的代码可以在该方法中进行，也可以在异步回调方法中进行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/success&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">topay2</span><span class="hljs-params">(HttpServletResponse response, HttpServletRequest request)</span> &#123;<br>    Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Map&lt;String, String[]&gt; requestParams = request.getParameterMap();<br>    requestParams.forEach((key,value)-&gt;&#123;<br>        System.out.println(key);<br>        System.out.println(Arrays.toString(value));<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;支付成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220809151035.png"></p><h4 id="notifyUrl"><a href="#notifyUrl" class="headerlink" title="notifyUrl"></a>notifyUrl</h4><ul><li><p>上面为支付宝同步调用处理,但是官方建议应在异步调用方法中处理付款成功后的操作，但因异步调用的路径必须为公网地址，支付宝才可以发送请求给我们,故这里不写异步调用的方法了,需要注意的是，异步调用为post请求，且传递来的参数会多一些，但基本与同步调用的操作一致。</p></li><li><p>异步回调方法必须为公网IP，因为这个URL地址是支付宝官方来调用我们本机的，是我们完成支付操作后，支付宝需要进行一些金额的处理（与银行对接）所以需要几秒的时间，当支付宝处理完成后异步的调用我们的notify方法（一般在这个方法中进行数据库的操作），这个过程异步进行，所以用户一般感觉不到（用户感觉到的是同步调用的方法）。</p></li><li><p>设置公网IP有两种方案，1、内网穿透，2、将项目部署到服务器</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot支付宝沙箱支付&quot;&gt;&lt;a href=&quot;#Springboot支付宝沙箱支付&quot; class=&quot;headerlink&quot; title=&quot;Springboot支付宝沙箱支付&quot;&gt;&lt;/a&gt;Springboot支付宝沙箱支付&lt;/h1&gt;&lt;h2 id=&quot;使用沙箱环</summary>
      
    
    
    
    <category term="支付SDK" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
    <category term="支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
  </entry>
  
  <entry>
    <title>支付宝支付</title>
    <link href="http://conquers.github.io/posts/3338cec1.html"/>
    <id>http://conquers.github.io/posts/3338cec1.html</id>
    <published>2022-08-08T06:21:14.000Z</published>
    <updated>2023-07-18T07:00:37.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>官方网站：<a href="https://open.alipay.com/">支付宝开放平台</a><br>开发文档：<a href="https://opendocs.alipay.com/open/01bxlm">网页&#x2F;移动应用文档指引</a></p><blockquote><p>开发测试可以直接跳转到沙箱环境</p></blockquote><h2 id="正式环境（常规接入流程）"><a href="#正式环境（常规接入流程）" class="headerlink" title="正式环境（常规接入流程）"></a>正式环境（常规接入流程）</h2><p>详细的开发文档：<a href="https://opendocs.alipay.com/open/03k9zr">指南</a><br><img src="/Resources/Pasted%20image%2020220808143344.png"><br><strong>指南含有详细的操作文档，以下仅为实践记录内容（按照操作指南开发支付应用）。</strong></p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>开发者使用支付宝账号登录 <a href="https://openhome.alipay.com/develop/manage">开放平台控制台</a>（需实名认证的支付宝账号）。</p><h4 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h4><p>本文主要介绍 <strong>网页&#x2F;移动应用</strong> 创建流程，小程序、生活号和第三方应用请查看 <a href="https://opendocs.alipay.com/mini/introduce/create">创建小程序</a>、<a href="https://opendocs.alipay.com/fw/guide">创建生活号</a>、<a href="https://opendocs.alipay.com/isv/03kvcj">创建第三方应用</a>。</p><p><img src="/Resources/Pasted%20image%2020220808143820.png"></p><h4 id="填写应用基础信息"><a href="#填写应用基础信息" class="headerlink" title="填写应用基础信息"></a>填写应用基础信息</h4><p><img src="/Resources/Pasted%20image%2020220808144650.png"></p><h4 id="产品绑定"><a href="#产品绑定" class="headerlink" title="产品绑定"></a>产品绑定</h4><p><img src="/Resources/Pasted%20image%2020220808144812.png"></p><h3 id="绑定应用"><a href="#绑定应用" class="headerlink" title="绑定应用"></a>绑定应用</h3><p>以下需要登录登录 <a href="https://b.alipay.com/index2.htm">商家服务平台</a> 开通支付服务<br><img src="/Resources/Pasted%20image%2020220808151057.png"></p><p>查看pid<br><img src="/Resources/Pasted%20image%2020220808151139.png"></p><h4 id="官方文档的步骤（目前来看不需要了）"><a href="#官方文档的步骤（目前来看不需要了）" class="headerlink" title="官方文档的步骤（目前来看不需要了）"></a><del>官方文档的步骤</del>（目前来看不需要了）</h4><p>第一步：进入发起绑定入口<br>登录 <a href="https://b.alipay.com/page/home">商家平台</a> &gt; <strong>账号中心</strong> &gt; <strong>绑定</strong> &gt; <strong>APPID绑定</strong>，点击 <strong>添加绑定</strong>。</p><p>第二步：提交绑定申请<br>填写应用 APPID，点击 <strong>下一步</strong> 即可完成绑定。<br><strong>注意：</strong>同一主体账号绑定应用不会通知商家，且不同主体账号不支持绑定应用。</p><blockquote><p>官方文档是需要添加绑定的，但是我登录进来就自动绑定了</p></blockquote><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>进行开发设置<br><img src="/Resources/Pasted%20image%2020220808144921.png"></p><p>先下载安装好密钥生成器<br><img src="/Resources/Pasted%20image%2020220808145634.png"></p><p>打开后生成私钥和公钥<br><img src="/Resources/Pasted%20image%2020220808145836.png"></p><p>复制公钥<br><img src="/Resources/Pasted%20image%2020220808150104.png"></p><h4 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h4><p><img src="/Resources/Pasted%20image%2020220808150533.png"><br><img src="/Resources/Pasted%20image%2020220808150541.png"><br><img src="/Resources/Pasted%20image%2020220808150556.png"></p><h3 id="上线应用"><a href="#上线应用" class="headerlink" title="上线应用"></a>上线应用</h3><p>暂时省略</p><h3 id="开通产品"><a href="#开通产品" class="headerlink" title="开通产品"></a>开通产品</h3><p>暂时省略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;支付宝&quot;&gt;&lt;a href=&quot;#支付宝&quot; class=&quot;headerlink&quot; title=&quot;支付宝&quot;&gt;&lt;/a&gt;支付宝&lt;/h1&gt;&lt;p&gt;官方网站：&lt;a href=&quot;https://open.alipay.com/&quot;&gt;支付宝开放平台&lt;/a&gt;&lt;br&gt;开发文档：&lt;a hre</summary>
      
    
    
    
    <category term="支付SDK" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/"/>
    
    <category term="支付宝" scheme="http://conquers.github.io/categories/%E6%94%AF%E4%BB%98SDK/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
    <category term="支付宝支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付" scheme="http://conquers.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 7.8实战</title>
    <link href="http://conquers.github.io/posts/7b1830e5.html"/>
    <id>http://conquers.github.io/posts/7b1830e5.html</id>
    <published>2022-08-04T03:09:05.000Z</published>
    <updated>2023-07-18T12:20:29.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于在项目中使用的是ElasticSearch7.8，之前学的是6.8的视频，大部分概念性内容在ElasticSearch6.8已经写过（基本上大差不差），不再赘述，但是7的接口相较于6发生了很大的变化，因此本文主要是实践部分！</p><ul><li><p>最新的参考文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/">Spring Data Elasticsearch - Reference Documentation</a></p></li><li><p>版本对应关系：<br><img src="/Resources/Pasted%20image%2020220804165455.png"></p></li></ul><h2 id="0、环境准备"><a href="#0、环境准备" class="headerlink" title="0、环境准备"></a>0、环境准备</h2><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Java</td><td>1.8</td></tr><tr><td>SpringData-ElasticSearch</td><td>4.3.3</td></tr><tr><td>ElasticSearch</td><td>7.8（没有使用对应的7.15.2是因为7.15.2太占内存）</td></tr><tr><td>Sringboot</td><td>2.6.6</td></tr></tbody></table><hr><h2 id="1、SpringBoot集成ElasticSearch"><a href="#1、SpringBoot集成ElasticSearch" class="headerlink" title="1、SpringBoot集成ElasticSearch"></a>1、SpringBoot集成ElasticSearch</h2><blockquote><p>以热词词频统计模块为基础实践</p></blockquote><p>思路一：通过前端传输的搜索内容分词，存到redis或者其他地方进行词频统计</p><p>思路二：通过前端传输的搜索内容存到Es，根据Es的分词结果（词频和词）存到redis</p><blockquote><p>以下使用思路二为主要思路</p></blockquote><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">repositories:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">uris:</span> <span class="hljs-string">http://localhost:9200</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">elastic</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">elastic</span><br></code></pre></td></tr></table></figure><p><code>RestClientConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAndPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9200&quot;</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(hostAndPort)<br>                .withBasicAuth(<span class="hljs-string">&quot;elastic&quot;</span>, <span class="hljs-string">&quot;elastic&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ElasticsearchRestTemplate <span class="hljs-title function_">elasticsearchRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//自定义ElasticsearchRestTemplate</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchRestTemplate</span>(elasticsearchClient());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建映射对象"><a href="#2、创建映射对象" class="headerlink" title="2、创建映射对象"></a>2、创建映射对象</h4><p>和访问数据库一样，统统以对象的形式访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;searchcontent&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContent</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Text, analyzer = &quot;ik_pinyin_analyzer&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Date, format = DateFormat.date_hour_minute_second)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、创建索引即映射"><a href="#3、创建索引即映射" class="headerlink" title="3、创建索引即映射"></a>3、创建索引即映射</h4><p><del>第一种：使用<code>ElasticsearchRestTemplate</code>创建索引</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br>    <span class="hljs-comment">// 如果索引已存在,删除索引</span><br>    <span class="hljs-keyword">if</span> (exists) &#123;<br>        <span class="hljs-comment">// 删除索引</span><br>        elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    &#125;<br>    <span class="hljs-comment">// 创建索引</span><br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br>    <span class="hljs-comment">// 创建映射</span><br>    <span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>    System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充：这里不使用这种方式，因为需要使用pinyin分词器，日常使用<code>@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</code>这种没有问题，但是涉及到自定义分词器就麻烦了</p></blockquote><p>第二种：使用<code>Kibana</code>创建索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT searchcontent<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;pinyin_filter&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;pinyin_filter&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>,<br>                    <span class="hljs-string">&quot;keep_first_letter&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_full_pinyin&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>:<span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_original&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;limit_first_letter_length&quot;</span> : 16,<br>                    <span class="hljs-string">&quot;lowercase&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese_in_first_letter&quot;</span> : <span class="hljs-literal">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>  &#125;,<br><span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;content&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>,<br><span class="hljs-string">&quot;fielddata&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br>  <span class="hljs-string">&quot;createTime&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、创建接口类"><a href="#4、创建接口类" class="headerlink" title="4、创建接口类"></a>4、创建接口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span>;<br><br>    List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实现类"><a href="#5、创建实现类" class="headerlink" title="5、创建实现类"></a>5、创建实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ElasticsearchRestTemplate elasticsearchRestTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EsSearchContentServiceImpl</span><span class="hljs-params">(ElasticsearchRestTemplate elasticsearchRestTemplate, RestHighLevelClient restHighLevelClient)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elasticsearchRestTemplate = elasticsearchRestTemplate;<br>        <span class="hljs-built_in">this</span>.restHighLevelClient = restHighLevelClient;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br>        <span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>        esSearchContent.setContent(message);<br>        esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        indexQuery.setObject(esSearchContent);<br>        elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;String&gt; hotWords = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//创建search请求</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>();<br>        searchRequest.indices(<span class="hljs-string">&quot;searchcontent&quot;</span>);<br>        <span class="hljs-comment">//生成DSL查询语句</span><br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>        <span class="hljs-comment">//构建查询条件</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoolQueryBuilder</span>();<br><br>        <span class="hljs-comment">//时间范围的设定</span><br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">rangequerybuilder</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;createTime&quot;</span>);<br>        rangequerybuilder.gte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        rangequerybuilder.lte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        boolQueryBuilder.filter(rangequerybuilder);<br><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        <span class="hljs-type">AggregationBuilder</span> <span class="hljs-variable">aggregation</span> <span class="hljs-operator">=</span> AggregationBuilders.terms(<span class="hljs-string">&quot;count&quot;</span>)<br>                .field(<span class="hljs-string">&quot;content&quot;</span>)<br>                .includeExclude(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IncludeExclude</span>(<span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span>, <span class="hljs-literal">null</span>))<br>                .minDocCount(<span class="hljs-number">3</span>);<br>        searchSourceBuilder.aggregation(aggregation);<br><br>        searchRequest.source(searchSourceBuilder);<br><br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>            <span class="hljs-type">Terms</span> <span class="hljs-variable">terms</span> <span class="hljs-operator">=</span> searchResponse.getAggregations().get(<span class="hljs-string">&quot;count&quot;</span>);<br>            List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; elasticBucket = terms.getBuckets();<br>            elasticBucket.forEach(hotWord -&gt; &#123;<br>                System.out.println(hotWord.getKeyAsString());<br>                hotWords.add(hotWord.getKeyAsString());<br><br>                System.out.println(hotWord.getDocCount());<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> hotWords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、插入数据"><a href="#6、插入数据" class="headerlink" title="6、插入数据"></a>6、插入数据</h4><p>这里的插入数据，即使用搜索服务（也可以使用kibana或者Springboot往里面直接插入数据）<br>分别发起三次搜索（因为上面进行分词的时候最少也要出现3次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;原装书籍&quot;</span>,...&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230718145331.png"></p><p>查询结果<br><img src="/Resources/Pasted%20image%2020230718145351.png"></p><p>在Kibana中查看存入的数据<br><img src="/Resources/Pasted%20image%2020230718145419.png"></p><hr><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><h4 id="1、使用Kibana进行词频统计"><a href="#1、使用Kibana进行词频统计" class="headerlink" title="1、使用Kibana进行词频统计"></a>1、使用Kibana进行词频统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /productindexwtt/_search<br>&#123;<br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [],<br>      <span class="hljs-string">&quot;should&quot;</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;messages&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;size&quot;</span>: 100,<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;content&quot;</span>,<br>        <span class="hljs-string">&quot;min_doc_count&quot;</span>: 3,<br>        <span class="hljs-string">&quot;include&quot;</span>: <span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试词频统计<br><img src="/Resources/Pasted%20image%2020230718145452.png"></p><h4 id="2、在Springboot中测试功能"><a href="#2、在Springboot中测试功能" class="headerlink" title="2、在Springboot中测试功能"></a>2、在Springboot中测试功能</h4><p>效果：<br><img src="/Resources/Pasted%20image%2020220804164859.png"></p><hr><h4 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h4><p>使用聚合搜索时，使用getAggregations()拿取数据时报错，排查分析后是版本问题：将Springboot版本降至2.3.3.RELEASE即可解决。</p><blockquote><p>由于项目版本不能动，因此这里不使用ElasticsearchTemplate进行聚合搜索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> searchHits.getAggregations();<br></code></pre></td></tr></table></figure><p>最后折中选择使用了RestHighLevelClient，代码见上。</p><h2 id="2、ElasticsearchTemplate的用法"><a href="#2、ElasticsearchTemplate的用法" class="headerlink" title="2、ElasticsearchTemplate的用法"></a>2、ElasticsearchTemplate的用法</h2><blockquote><p>在6.8中有<code>ElasticsearchRepository</code>和<code>RestHighLevelClient</code>的用法</p></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br><span class="hljs-comment">// 如果索引已存在,删除索引</span><br><span class="hljs-keyword">if</span> (exists) &#123;<br><span class="hljs-comment">// 删除索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>&#125;<br><span class="hljs-comment">// 创建索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br><span class="hljs-comment">// 创建映射</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除索引</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    System.out.println(<span class="hljs-string">&quot;是否删除成功 : &quot;</span> + deleted);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增文档数据"><a href="#新增文档数据" class="headerlink" title="新增文档数据"></a>新增文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增文档数据</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br><span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>esSearchContent.setContent(<span class="hljs-string">&quot;message&quot;</span>);<br>esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>indexQuery.setObject(esSearchContent);<br>elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br><span class="hljs-comment">//这里也可以使用下面的save</span><br>elasticsearchRestTemplate.save(esSearchContent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除文档数据"><a href="#删除文档数据" class="headerlink" title="删除文档数据"></a>删除文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除文档数据</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDoc</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 返回被删除的数据id</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.delete(<span class="hljs-string">&quot;IYzHaIIBQknQYDuAgCU-&quot;</span>, EsSearchContent.class);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询文档数据"><a href="#查询文档数据" class="headerlink" title="查询文档数据"></a>查询文档数据</h3><p>查询设计到很多方法，下面列举其中比较复杂的高亮查询，其他的皆可类比</p><blockquote><p>以下没有的方法可以去官网查看或者通过搜索引擎搜索得到</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> List&lt;EsProduct&gt; <span class="hljs-title function_">testSearch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 需要查询的字段</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()<br>                .must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;我是标题&quot;</span>));<br>        <br>        <span class="hljs-comment">// 分页 从第0页开始，每页10条数据</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br> <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">        构建高亮查询</span><br><span class="hljs-comment">        NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">                .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">                .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">                .withHighlightFields(</span><br><span class="hljs-comment">                        new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">                .withPageable(pageable)</span><br><span class="hljs-comment">                .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">                .build();</span><br><span class="hljs-comment">        */</span><br>        <br>    <span class="hljs-comment">//构建高亮查询</span><br>        <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>        searchQueryBuilder.withQuery(boolQueryBuilder);<br>        searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>        searchQueryBuilder.withPageable(pageable);<br>        searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 排序</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(rangeInDefined(searchSortType,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))&#123;<br>            sortByCondition(searchQueryBuilder,searchSortType);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 查询</span><br>        SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(searchQuery, EsProduct.class);<br>        <span class="hljs-comment">// 得到查询返回的内容</span><br>        List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>        <span class="hljs-comment">// 设置一个最后需要返回的实体类集合</span><br>        List&lt;EsProduct&gt; esProducts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 遍历返回的内容进行处理</span><br>        <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>            <span class="hljs-comment">// 高亮的内容</span><br>            Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>            <span class="hljs-comment">// 将高亮的内容填充到content中</span><br>            searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>            searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 放到实体类中</span><br>            esProducts.add(searchHit.getContent());<br>        &#125;<br>        <span class="hljs-keyword">return</span> esProducts;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><h5 id="问题1：should和must连用不起作用"><a href="#问题1：should和must连用不起作用" class="headerlink" title="问题1：should和must连用不起作用"></a>问题1：should和must连用不起作用</h5><p>参考文档：<a href="https://blog.csdn.net/qq_39818325/article/details/118578063">elasticsearch中的对象QueryBuilder同时使用should和must查询不成功</a><br>BoolQueryBuilder中的should和must一起用会出现问题：<br>解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码承接上述错误代码，新增下面一行 </span><br>boolQueryBuilder.minimumShouldMatch(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题2：rangeQuery不起作用"><a href="#问题2：rangeQuery不起作用" class="headerlink" title="问题2：rangeQuery不起作用"></a>问题2：rangeQuery不起作用</h5><p>解决问题：<br><strong>查看排序的字段是否是Integer或者其他数据类型</strong><br>创建索引的时候使用的是Keyword，修改为Integer好了</p><h5 id="问题3：有时候需要排序，有时候不需要排序"><a href="#问题3：有时候需要排序，有时候不需要排序" class="headerlink" title="问题3：有时候需要排序，有时候不需要排序"></a>问题3：有时候需要排序，有时候不需要排序</h5><p>代码替换成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">   构建高亮查询</span><br><span class="hljs-comment">   NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">           .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">           .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">           .withHighlightFields(</span><br><span class="hljs-comment">                   new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">           .withPageable(pageable)</span><br><span class="hljs-comment">           .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">           .build();</span><br><span class="hljs-comment">   */</span><br>   <br><span class="hljs-comment">//构建高亮查询</span><br>   <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>   searchQueryBuilder.withQuery(boolQueryBuilder);<br>   searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>   searchQueryBuilder.withPageable(pageable);<br>   searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="问题4：有些关键词不需要分词"><a href="#问题4：有些关键词不需要分词" class="headerlink" title="问题4：有些关键词不需要分词"></a>问题4：有些关键词不需要分词</h5><p>使用termQuery<br><code>.must(QueryBuilders.termQuery(&quot;title&quot;, &quot;我是标题&quot;));</code><br>如果一定要使用matchQuery，加上<code>.operator(Operator.AND</code><br><code>.must(QueryBuilders.matchQuery(&quot;title&quot;, &quot;我是标题&quot;).operator(Operator.AND));</code></p><h5 id="问题5：过滤分数太低的结果"><a href="#问题5：过滤分数太低的结果" class="headerlink" title="问题5：过滤分数太低的结果"></a>问题5：过滤分数太低的结果</h5><blockquote><p><strong>不要使用for循环遍历</strong><br>使用<code>withMinScore(1)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>searchQueryBuilder.withMinScore(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题6：-Test不能直接运行"><a href="#问题6：-Test不能直接运行" class="headerlink" title="问题6：@Test不能直接运行"></a>问题6：@Test不能直接运行</h5><p>类上面加了<code>@SpringBootTest</code><br>方法上面加了<code>@Test</code><br>但是不能运行，注意导包的路径应该为<code>import org.junit.jupiter.api.Test;</code><br><strong>否则不起作用</strong></p><h5 id="问题7：时间排序没数据"><a href="#问题7：时间排序没数据" class="headerlink" title="问题7：时间排序没数据"></a>问题7：时间排序没数据</h5><p>过滤最小分数的问题不知道为什么，去掉了<code>.withMinScore(1);</code>解决，但是又需要过滤最小分数。<br><img src="/Resources/Pasted%20image%2020220819164536.png"><br>但是为什么按照价格排序，却有数据返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> List&lt;SearchDto&gt; <span class="hljs-title function_">searchByKeyTitle</span><span class="hljs-params">(String title, String price, List&lt;String&gt; classType, List&lt;String&gt; publisherList, Integer typeInSearch,</span><br><span class="hljs-params">                                         String storeId, List&lt;String&gt; jointStoreList, <span class="hljs-type">int</span> searchSortType, <span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> packageType, String stockOfStore)</span> &#123;<br><br>     <span class="hljs-comment">// 构建搜索</span><br>     <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>     <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br><br>     <span class="hljs-comment">// 过滤</span><br>     conditionFilter(boolQueryBuilder, price, classType, publisherList, typeInSearch, storeId, jointStoreList, searchSortType, packageType, stockOfStore);<br>     searchQueryBuilder.withFilter(boolQueryBuilder);<br><br>     <span class="hljs-comment">// 分页</span><br>     <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(pageNo, pageSize);<br>     searchQueryBuilder.withPageable(pageable);<br><br>     <span class="hljs-comment">// 搜索</span><br>     List&lt;FunctionScoreQueryBuilder.FilterFunctionBuilder&gt; filterFunctionBuilders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">5</span>)));<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;author&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">10</span>)));<br>     FunctionScoreQueryBuilder.FilterFunctionBuilder[] builders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[filterFunctionBuilders.size()];<br>     filterFunctionBuilders.toArray(builders);<br>     <span class="hljs-type">FunctionScoreQueryBuilder</span> <span class="hljs-variable">functionScoreQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.functionScoreQuery(builders)<br>             .scoreMode(FunctionScoreQuery.ScoreMode.SUM)<br>             .setMinScore(<span class="hljs-number">2</span>);<br><br>     <span class="hljs-comment">// 排序</span><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 排序类型必须是在1-7的范围内，否则是参数错误</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-keyword">if</span> (rangeInDefined(searchSortType, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>)) &#123;<br>         sortByCondition(searchQueryBuilder, searchSortType);<br>     &#125;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 不管是什么排序类型，最后都要按照相关度二次排序</span><br><span class="hljs-comment">      */</span><br>     searchQueryBuilder.withSorts(SortBuilders.scoreSort().order(SortOrder.DESC));<br><br>     searchQueryBuilder.withQuery(functionScoreQueryBuilder);<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;author&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;publisherName&quot;</span>));<br>     searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>     <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> searchQueryBuilder.build();<br><br>     <span class="hljs-comment">//查询</span><br>     SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(build, EsProduct.class);<br>     <span class="hljs-comment">//得到查询返回的内容</span><br>     List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>     <span class="hljs-comment">//设置一个最后需要返回的实体类集合</span><br>     List&lt;SearchDto&gt; accurateSearch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-comment">//遍历返回的内容进行处理</span><br>     <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>         <span class="hljs-comment">//高亮的内容</span><br>         Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>         <span class="hljs-comment">//将高亮的内容填充到content中</span><br>         searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setPublisherName(highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getPublisherName() : highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>).get(<span class="hljs-number">0</span>));<br>         <span class="hljs-comment">// 封面图片拼接</span><br>         searchHit.getContent().setCoverPage(StringUtil.urlConnect(searchHit.getContent().getCoverPage(), StringUtil.PICTURE_TYPE_200));<br>         <span class="hljs-comment">//放到实体类中</span><br>         accurateSearch.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchDto</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Search</span>(searchHit.getContent())));<br>     &#125;<br>     System.out.println(accurateSearch);<br>     <span class="hljs-keyword">return</span> accurateSearch;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于在项目中使用的是ElasticSearch7.8，之前学的是6.8的视频，大部分概念性内容在ElasticSearch6.8已经写过（基</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
    <category term="SpringData" scheme="http://conquers.github.io/tags/SpringData/"/>
    
    <category term="SpringBoot" scheme="http://conquers.github.io/tags/SpringBoot/"/>
    
    <category term="Java" scheme="http://conquers.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>安装开发虚拟机</title>
    <link href="http://conquers.github.io/posts/cb06e7aa.html"/>
    <id>http://conquers.github.io/posts/cb06e7aa.html</id>
    <published>2022-07-20T08:09:50.000Z</published>
    <updated>2023-07-18T06:50:56.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装虚拟机"><a href="#1、安装虚拟机" class="headerlink" title="1、安装虚拟机"></a>1、安装虚拟机</h3><ul><li>安装VMware Workstation Pro：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation Pro | CN</a></li><li>安装其他虚拟机软件</li></ul><h3 id="2、虚拟机安装操作系统"><a href="#2、虚拟机安装操作系统" class="headerlink" title="2、虚拟机安装操作系统"></a>2、虚拟机安装操作系统</h3><h4 id="2-1-CentOs"><a href="#2-1-CentOs" class="headerlink" title="2.1 CentOs"></a>2.1 CentOs</h4><h5 id="1-下载CentOs"><a href="#1-下载CentOs" class="headerlink" title="1.下载CentOs"></a>1.下载CentOs</h5><ul><li>CentOs官网：<a href="https://www.centos.org/download/">https://www.centos.org</a></li><li>镜像下载地址：<a href="http://mirrors.ustc.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso">iso.mirrors.ustc.edu.cn&#x2F;centos&#x2F;7.9.2009&#x2F;isos&#x2F;x86_64&#x2F;CentOS-7-x86_64-DVD-2009.iso</a></li></ul><h5 id="2-打开VMware，点击新建虚拟机"><a href="#2-打开VMware，点击新建虚拟机" class="headerlink" title="2.打开VMware，点击新建虚拟机"></a>2.打开VMware，点击新建虚拟机</h5><p><img src="/Resources/Pasted%20image%2020220720160950.png" alt="Resources/Pasted image 20220720160950.png"></p><h5 id="3-选择典型安装"><a href="#3-选择典型安装" class="headerlink" title="3.选择典型安装"></a>3.选择典型安装</h5><p><img src="/Resources/Pasted%20image%2020220720160957.png" alt="Resources/Pasted image 20220720160957.png"></p><h5 id="4-选择稍后安装操作系统"><a href="#4-选择稍后安装操作系统" class="headerlink" title="4.选择稍后安装操作系统"></a>4.选择稍后安装操作系统</h5><p>也可以选择第二个，只需要找到下载好的镜像文件就行。<br><img src="/Resources/Pasted%20image%2020220720161003.png" alt="Resources/Pasted image 20220720161003.png"></p><h5 id="5-选择操作系统"><a href="#5-选择操作系统" class="headerlink" title="5.选择操作系统"></a>5.选择操作系统</h5><p>这里选择Linux，版本根据镜像自行决定，因为这里安装的是CentOS 7 ，所以选择CentOS 7 64位<br><img src="/Resources/Pasted%20image%2020220720161010.png" alt="Resources/Pasted image 20220720161010.png"></p><h5 id="6-虚拟机命名"><a href="#6-虚拟机命名" class="headerlink" title="6.虚拟机命名"></a>6.虚拟机命名</h5><p><img src="/Resources/Pasted%20image%2020220720161020.png" alt="Resources/Pasted image 20220720161020.png"></p><h5 id="7-指定磁盘容量"><a href="#7-指定磁盘容量" class="headerlink" title="7.指定磁盘容量"></a>7.指定磁盘容量</h5><p><img src="/Resources/Pasted%20image%2020220720161028.png" alt="Resources/Pasted image 20220720161028.png"></p><h5 id="8-自定义硬件"><a href="#8-自定义硬件" class="headerlink" title="8.自定义硬件"></a>8.自定义硬件</h5><p><img src="/Resources/Pasted%20image%2020220720161036.png" alt="Resources/Pasted image 20220720161036.png"><br><img src="/Resources/Pasted%20image%2020220720161103.png" alt="Resources/Pasted image 20220720161103.png"></p><p><img src="/Resources/Pasted%20image%2020220720161111.png" alt="Resources/Pasted image 20220720161111.png"></p><h5 id="9-开启虚拟机"><a href="#9-开启虚拟机" class="headerlink" title="9.开启虚拟机"></a>9.开启虚拟机</h5><p><img src="/Resources/Pasted%20image%2020220720161346.png" alt="Resources/Pasted image 20220720161346.png"></p><h5 id="10-系统安装"><a href="#10-系统安装" class="headerlink" title="10.系统安装"></a>10.系统安装</h5><p>将鼠标点击虚拟机中的CentOS 7 系统后，使用键盘的上下键选择执行任务，按回车确定。</p><p><strong>（注：安装虚拟机的时候，如果鼠标在虚拟机内，是无法移到虚拟机外面的，即无法使用鼠标与物理机进行操作的，我们需要同时按住ctrl+alt健释放鼠标，这时，就可以在物理机进行操作了）</strong><br><img src="/Resources/Pasted%20image%2020220720161435.png" alt="Resources/Pasted image 20220720161435.png"></p><h5 id="11-选择语言"><a href="#11-选择语言" class="headerlink" title="11.选择语言"></a>11.选择语言</h5><p><img src="/Resources/Pasted%20image%2020220720161614.png" alt="Resources/Pasted image 20220720161614.png"></p><p><strong>11.软件选择</strong></p><p>默认为最小安装，最小安装的系统是dos界面（只有命令行的界面，和cmd一样）</p><p><strong>12.安装位置</strong><br><img src="/Resources/Pasted%20image%2020220720161755.png" alt="Resources/Pasted image 20220720161755.png"><br><img src="/Resources/Pasted%20image%2020220720161845.png" alt="Resources/Pasted image 20220720161845.png"></p><h5 id="12-root密码和创建普通用户"><a href="#12-root密码和创建普通用户" class="headerlink" title="12.root密码和创建普通用户"></a>12.root密码和创建普通用户</h5><p><img src="/Resources/Pasted%20image%2020220720162004.png" alt="Resources/Pasted image 20220720162004.png"><br><img src="/Resources/Pasted%20image%2020220720161943.png" alt="Resources/Pasted image 20220720161943.png"></p><p>完成后等待<br><img src="/Resources/Pasted%20image%2020220720162027.png" alt="Resources/Pasted image 20220720162027.png"><br><img src="/Resources/Pasted%20image%2020220720162323.png" alt="Resources/Pasted image 20220720162323.png"></p><h5 id="13-使用刚刚设置的密码即可登录"><a href="#13-使用刚刚设置的密码即可登录" class="headerlink" title="13.使用刚刚设置的密码即可登录"></a>13.使用刚刚设置的密码即可登录</h5><p><img src="/Resources/Pasted%20image%2020220720162500.png" alt="Resources/Pasted image 20220720162500.png"></p><h3 id="3、SSH连接虚拟机"><a href="#3、SSH连接虚拟机" class="headerlink" title="3、SSH连接虚拟机"></a>3、SSH连接虚拟机</h3><h4 id="虚拟机开启网卡"><a href="#虚拟机开启网卡" class="headerlink" title="虚拟机开启网卡"></a>虚拟机开启网卡</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163319.png" alt="Resources/Pasted image 20220720163319.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163216.png" alt="Resources/Pasted image 20220720163216.png"><br><img src="/Resources/Pasted%20image%2020220720163235.png" alt="Resources/Pasted image 20220720163235.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service network restart<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720163357.png" alt="Resources/Pasted image 20220720163357.png"></p><h4 id="查看虚拟机的ip"><a href="#查看虚拟机的ip" class="headerlink" title="查看虚拟机的ip"></a>查看虚拟机的ip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220720164333.png" alt="Resources/Pasted image 20220720164333.png"></p><h4 id="使用Xshell连接虚拟机"><a href="#使用Xshell连接虚拟机" class="headerlink" title="使用Xshell连接虚拟机"></a>使用Xshell连接虚拟机</h4><p>官网：<a href="https://www.xshell.com/zh/free-for-home-school/">家庭&#x2F;学校免费 - NetSarang Website (xshell.com)</a></p><p><img src="/Resources/Pasted%20image%2020220720164345.png" alt="Resources/Pasted image 20220720164345.png"></p><h4 id="使用Final-Shell连接虚拟机"><a href="#使用Final-Shell连接虚拟机" class="headerlink" title="使用Final Shell连接虚拟机"></a>使用Final Shell连接虚拟机</h4><p>官网：<a href="http://www.hostbuf.com/t/988.html">FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS,Linux,版本3.9.8,更新时间2023.1.30 - SSH工具 SSH客户端 (hostbuf.com)</a></p><p><strong>连接成功</strong></p><p><img src="/Resources/image-20230415205209311.png" alt="image-20230415205209311"></p><h4 id="固定虚拟机的ip"><a href="#固定虚拟机的ip" class="headerlink" title="固定虚拟机的ip"></a>固定虚拟机的ip</h4><h5 id="一、搭建VMnet8虚拟局域网"><a href="#一、搭建VMnet8虚拟局域网" class="headerlink" title="一、搭建VMnet8虚拟局域网"></a>一、搭建VMnet8虚拟局域网</h5><p>打开VMware软件，点击编辑，点击列表中的虚拟网络编辑器<br>进入虚拟网络编辑器页面<br>点击右下角更改设置，选择VMnet8。<br><img src="/Resources/Pasted%20image%2020220729152928.png" alt="Resources/Pasted image 20220729152928.png"><br><img src="/Resources/Pasted%20image%2020220729152957.png" alt="Resources/Pasted image 20220729152957.png"><br><img src="/Resources/Pasted%20image%2020220729153059.png"></p><ul><li>选择NAT模式</li><li>勾选将主机虚拟适配器连接到此网络</li><li>取消DHCP服务</li></ul><p>点击NAT模式后面的<strong>NAT设置</strong>。</p><p><img src="/Resources/Pasted%20image%2020220729153453.png"><br>设置<strong>默认网关</strong>（后面会用到），该网关需要占用你划分的子网里面的一个IP地址，并且网关占用之后，不能再划分给该网络内其他主机。包括宿主机和虚拟机。记住该网关地址，在配置宿主机的VMnet8网卡时需要指定，添加一台新的虚拟机到该网络时同样需要指定。</p><h5 id="二、使用配置VMnet8虚拟网卡"><a href="#二、使用配置VMnet8虚拟网卡" class="headerlink" title="二、使用配置VMnet8虚拟网卡"></a>二、使用配置VMnet8虚拟网卡</h5><p>安装VMware软件之后，就会有VMnet8这个虚拟网卡。进入我们自己电脑的<strong>网络和Internet设置</strong>(右击网络图标)，进入更多网络适配器页面<br><img src="/Resources/Pasted%20image%2020220729153219.png"></p><p>就可以看到VMnet8这个虚拟网卡，我们首先配置一下网卡参数。右击VMnet8网卡，选择属性，双击IPv4协议进入编辑页面。</p><p><strong>默认网关选择刚刚在VM中填写的网关。</strong></p><blockquote><p>:下面不太清楚ip地址随便设了一个2，不知道为什么<br><del>IP地址：这个地方设置的IP地址，是宿主机访问VMnet8局域网内虚拟机时，宿主机使用的IP地址，代表宿主机在VMnet8虚拟网络中的地址，需要注意的是他并不是网关，并且不能使用已经分配给网关的地址。它需要单独占用一个VMnet8局域网内的主机地址，供宿主机使用。让VMnet8网络中的虚拟机可以看到宿主机，宿主机也可以看到虚拟机。</del></p></blockquote><p><img src="/Resources/Pasted%20image%2020220729160532.png"></p><p><img src="/Resources/Pasted%20image%2020230414094919.png"></p><h5 id="三、配置虚拟机网卡"><a href="#三、配置虚拟机网卡" class="headerlink" title="三、配置虚拟机网卡"></a>三、配置虚拟机网卡</h5><p>IP addr查看网卡名称<br><img src="/Resources/Pasted%20image%2020220729161206.png"></p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220729155603.png"></p><blockquote><p>需要加上DNS1&#x3D;114.114.114.114, DNS2&#x3D;8.8.8.8，不然会出现某些问题<strong>（使用docker，必须要做这一步，docker拉取镜像失败）</strong></p></blockquote><p>重启网络</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart network</span><br></code></pre></td></tr></table></figure><p>宿主机虚拟机相互ping<br>windows：查看ip：<code>ipconfig</code><br>centOs：查看ip：<code>ip addr</code></p><h4 id="ip失效"><a href="#ip失效" class="headerlink" title="ip失效"></a>ip失效</h4><p>尝试重启网络报错<br><img src="/Resources/Pasted%20image%2020220817162203.png"></p><blockquote><p>参考连接：<a href="https://blog.csdn.net/VariatioZbw/article/details/107482739">解决 Linux 网络 “Job for network.service failed because the control process exite”问题_zhangbw~的博客-CSDN博客</a><br><code>service NetworkManager stop</code> 解决</p></blockquote><blockquote><p>VMware 主机ping不通虚拟机的解决方法 （但是虚拟机可以ping主机）</p></blockquote><p>重启一下vm net8网卡<br><img src="/Resources/Pasted%20image%2020230413232524.png"></p><h3 id="4、虚拟机安装Java"><a href="#4、虚拟机安装Java" class="headerlink" title="4、虚拟机安装Java"></a>4、虚拟机安装Java</h3><h4 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h4><p>CentOS系统默认安装了openjdk的(如果操作系统不是最小安装)，需要卸载。<br><a href="https://www.cnblogs.com/insomina/p/15701444.html">CentOS安装Java JDK - 子非鱼灬亦非我 - 博客园</a></p><h4 id="使用rpm安装"><a href="#使用rpm安装" class="headerlink" title="使用rpm安装"></a>使用rpm安装</h4><p><a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a><br><img src="/Resources/Pasted%20image%2020220720154430.png" alt="Resources/Pasted image 20220720154430.png"></p><h5 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h5><h5 id="2、创建目录"><a href="#2、创建目录" class="headerlink" title="2、创建目录"></a>2、创建目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br><span class="hljs-built_in">mkdir</span> java<br><span class="hljs-built_in">cd</span> java<br></code></pre></td></tr></table></figure><h5 id="3、传输镜像至虚拟机"><a href="#3、传输镜像至虚拟机" class="headerlink" title="3、传输镜像至虚拟机"></a>3、传输镜像至虚拟机</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># windows向linux虚拟机传输文件</span><br>yum install lrzsz -y<br><br>rz<br></code></pre></td></tr></table></figure><h5 id="4、使用RPM安装镜像"><a href="#4、使用RPM安装镜像" class="headerlink" title="4、使用RPM安装镜像"></a>4、使用RPM安装镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ivh jdk-8u341-linux-x64.rpm<br><span class="hljs-comment"># 安装后的路径为: /usr/java/jdk1.8.0_341-amd64</span><br><span class="hljs-comment"># -i = install</span><br><span class="hljs-comment"># vh = 显示安装进度</span><br></code></pre></td></tr></table></figure><h5 id="5、配置环境变量"><a href="#5、配置环境变量" class="headerlink" title="5、配置环境变量"></a>5、配置环境变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br><br>JAVA_HOME=/usr/local/java//usr/java/jdk1.8.0_341-amd64<br>CLASSPATH=.:%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JAVA_HOME</span>/jre/bin<br><span class="hljs-built_in">export</span> PATH CLASSPATH JAVA_HOME<br></code></pre></td></tr></table></figure><h5 id="6、source让新增环境生效"><a href="#6、source让新增环境生效" class="headerlink" title="6、source让新增环境生效"></a>6、source让新增环境生效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h5 id="7、测试java-version"><a href="#7、测试java-version" class="headerlink" title="7、测试java -version"></a>7、测试java -version</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java version <span class="hljs-string">&quot;1.8.0_341&quot;</span><br>Java(TM) SE Runtime Environment (build 1.8.0_341-b10)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.341-b10, mixed mode)<br></code></pre></td></tr></table></figure><hr><p>以下是废弃方案</p><p><del>使用yum安装</del><br>安装jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel<br></code></pre></td></tr></table></figure><blockquote><p>java-1.8.0-openjdk：只有运行环境，java安装目录下只有jre文件夹<br>java-1.8.0-openjdk-devel：开发环境<br>参考：<a href="https://blog.csdn.net/woshimeihuo/article/details/90608081">Fetching Title#ytt6</a></p></blockquote><p>配置环境变量</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs profile"># java_home的路径可能不同，需要到你电脑里的位置，java_home的路径一般在/usr/lib/jvm/，文件的名字可能不同，改成你里面的名字就好，如下图所示<br>export JAVA_HOME=/usr/lib/jvm/java<span class="hljs-number">-1.8</span><span class="hljs-number">.0</span>-openjdk<span class="hljs-number">-1.8</span><span class="hljs-number">.0</span><span class="hljs-number">.121</span><span class="hljs-number">-0.</span>b13.el7_3.x86_64<br><br>export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br> <br>export PATH=$PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>保存关闭后，执行命令让设置立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="5、虚拟机安装git"><a href="#5、虚拟机安装git" class="headerlink" title="5、虚拟机安装git"></a>5、虚拟机安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装git</span><br>yum -y install git<br></code></pre></td></tr></table></figure><h3 id="6、虚拟机安装Docker"><a href="#6、虚拟机安装Docker" class="headerlink" title="6、虚拟机安装Docker"></a>6、虚拟机安装Docker</h3><h4 id="在CentOs上安装Docker"><a href="#在CentOs上安装Docker" class="headerlink" title="在CentOs上安装Docker"></a>在CentOs上安装Docker</h4><ul><li><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></li><li><p>卸载原始docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils<br></code></pre></td></tr></table></figure><p> 鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。执行下面的命令添加 <code>yum</code> 软件源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 官方源</span><br><span class="hljs-comment"># $ sudo yum-config-manager \</span><br><span class="hljs-comment">#     --add-repo \</span><br><span class="hljs-comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span><br></code></pre></td></tr></table></figure></li><li><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>启动 Docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker<br>systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>测试 Docker 是否安装正确</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> hello-world<br><br>Unable to find image <span class="hljs-string">&#x27;hello-world:latest&#x27;</span> locally<br>latest: Pulling from library/hello-world<br>b8dfde127a29: Pull complete<br>Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latest<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash<br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><blockquote><p>执行docker run命令带<code>--rm</code>命令选项，等价于在容器退出后，执行<code>docker rm -v</code><br>  若能正常输出以上信息，则说明安装成功。</p></blockquote></li></ul><h4 id="配置docker镜像加速服务"><a href="#配置docker镜像加速服务" class="headerlink" title="配置docker镜像加速服务"></a>配置docker镜像加速服务</h4><p> 阿里云 - 控制台 - 容器镜像服务</p><p><img src="/Resources/image-20230601151355484.png" alt="image-20230601151355484"></p><p>依次执行下面的命令<br><img src="/Resources/image-20230601151421570.png" alt="image-20230601151421570"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://地址.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>使用 <code>docker info</code> 确认是否成功</p><h4 id="docker-安装容器"><a href="#docker-安装容器" class="headerlink" title="docker 安装容器"></a>docker 安装容器</h4><p><a href="https://conquers.github.io/posts/dcb3f659.html">Docker 安装容器合集</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、安装虚拟机&quot;&gt;&lt;a href=&quot;#1、安装虚拟机&quot; class=&quot;headerlink&quot; title=&quot;1、安装虚拟机&quot;&gt;&lt;/a&gt;1、安装虚拟机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装VMware Workstation Pro：&lt;a href=&quot;https://ww</summary>
      
    
    
    
    
    <category term="虚拟机" scheme="http://conquers.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 6.x使用教程</title>
    <link href="http://conquers.github.io/posts/d5bb74c6.html"/>
    <id>http://conquers.github.io/posts/d5bb74c6.html</id>
    <published>2022-07-19T03:31:39.000Z</published>
    <updated>2023-07-18T02:37:49.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p><img src="/Resources/elastic.png"></p><h2 id="🛬全文检索"><a href="#🛬全文检索" class="headerlink" title="🛬全文检索"></a>🛬全文检索</h2><p><strong>全文检索</strong>是计算机程序通过<strong>扫描</strong>文章中的每一个词，对每一个词<strong>建立</strong>一个索引，指明该词在文章中出现的<strong>次数</strong>和<strong>位置</strong>。当用户查询时根据建立的索引查找，类似于通过字典的检索字表查字的过程。</p><p>检索：</p><ul><li>索：(<em>建立</em> 索引) </li><li>检：(<em>检索</em> 索引)</li></ul><p>全文检索（Full-Text Retrieval(检索））以文本作为检索对象，找出含有指定词汇的文本。<strong>全面、准确和快速是衡量全文检索系统的关键指标。</strong></p><p>关于全文检索，我们要知道：</p><ol><li><p>只处理<em>文本</em>。</p></li><li><p>不处理<em>语义</em>。</p></li><li><p>搜索时英文<em>不区分大小写</em>。</p></li><li><p>结果列表有<em>相关度排序</em>。</p></li></ol><hr><h2 id="🚁Elastic-Search"><a href="#🚁Elastic-Search" class="headerlink" title="🚁Elastic Search"></a>🚁Elastic Search</h2><p><img src="/Resources/Pasted%20image%2020220720115306.png" alt="Resources/Pasted image 20220720115306.png"><br>官方网站：<a href="https://www.elastic.co/cn/">免费且开放的搜索：Elasticsearch、ELK 和 Kibana 的开发者 | Elastic</a><br>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html">Elasticsearch Guide | Elastic</a></p><p><strong>ElasticSearch</strong> 简称 <em>ES</em> ，是<strong>基于Apache Lucene构建的开源搜索引擎，是当前流行的企业级搜索引擎。</strong>Lucene本身就可以被认为迄今为止性能最好的一款开源搜索引擎工具包，但是Lucene的API相对复杂，需要深厚的搜索理论。很难集成到实际的应用中去。<strong>但是ES是采用java语言编写，提供了简单易用的RestFul API，开发者可以使用其简单的RestFul API，开发相关的搜索功能，从而避免Lucene的复杂性。</strong></p><h3 id="ES的应用场景"><a href="#ES的应用场景" class="headerlink" title="ES的应用场景"></a>ES的应用场景</h3><p><strong>ES主要以轻量级JSON作为数据存储格式，这点与MongoDB有点类似，但它在读写性能上优于 MongoDB 。同时也支持地理位置查询，还方便地理位置和文本混合查询 。 以及在统计、日志类数据存储和分析、可视化这方面是引领者。</strong></p><ul><li><p>国外:<br><em>Wikipedia</em>(维基百科)使用ES提供全文搜索并高亮关键字、<em>StackOverflow</em>(IT问答网站)结合全文搜索与地理位置查询、<em>Github</em>使用Elasticsearch检索1300亿行的代码。</p></li><li><p>国内:<br>百度(在云分析、网盟、预测、文库、钱包、风控等业务上都应用了ES，单集群每天导入30TB+数据， 总共每天60TB+)、新浪 、阿里巴巴、腾讯等公司均有对ES的使用。</p></li></ul><p>&#x3D;&#x3D;使用比较广泛的平台ELK(ElasticSearch, Logstash, Kibana)。&#x3D;&#x3D;</p><hr><h2 id="🪐安装ElasticSearch"><a href="#🪐安装ElasticSearch" class="headerlink" title="🪐安装ElasticSearch"></a>🪐安装ElasticSearch</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="http://localhost:4000/posts/dcb3f659.html#elasticsearch">Docker 安装 Elasticsearch</a></p><hr><h2 id="🌌ElasticSearch-基本概念"><a href="#🌌ElasticSearch-基本概念" class="headerlink" title="🌌ElasticSearch 基本概念"></a>🌌ElasticSearch 基本概念</h2><ul><li><p><strong>1、接近实时(NRT Near Real Time)</strong><br>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟(通常是 <em>1秒内</em> )</p></li><li><p><strong>2、索引(index)</strong><br><em>一个索引就是一个拥有几分相似特征的文档的集合</em>。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。<em>索引类似于关系型数据库中 Database 的概念</em>。在一个集群中，如果你想，可以定义任意多的索引。</p></li><li><p><strong>3、类型(type)</strong><br><em>在一个索引中，你可以定义一种或多种类型</em>。一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。<em>类型类似于关系型数据库中Table的概念</em>。</p><blockquote><p>NOTE: 在5.x版本以前可以在一个索引中定义多个类型,6.x之后版本也可以使用,但是不推荐,在7~8.x版本中彻底移除一个索引中创建多个类型</p></blockquote></li><li><p><strong>4、映射(Mapping)</strong><br><em>Mapping</em>是ES中的一个很重要的内容，<em>它类似于传统关系型数据中table的schema，用于定义一个索引(index)中的类型(type)的数据的结构</em>。 在ES中，我们可以手动创建type(相当于table)和mapping(相关与schema),也可以采用默认创建方式。在默认配置下，ES可以根据插入的数据自动地创建type及其mapping。 <em>mapping中主要包括字段名、字段数据类型和字段索引类型</em></p></li></ul><p><strong>5、文档(document)</strong><br>一个文档是一个可被索引的<em>基础信息单元</em>，<em>类似于表中的一条记录</em>。比如，你可以拥有某一个员工的文档，也可以拥有某个商品的一个文档。文档以采用了轻量级的数据交换格式JSON(JavaScript Object Notation)来表示。</p><p><img src="/Resources/Pasted%20image%2020220721085020.png" alt="Resources/Pasted image 20220721085020.png"></p><h3 id="索引库底层原理分析"><a href="#索引库底层原理分析" class="headerlink" title="索引库底层原理分析"></a>索引库底层原理分析</h3><p>ElasticSearch 对于不同的服务建立了不同的索引，每个索引又创建了类型（6以后只能创建一个），同时对类型进行了约束，现在我们往ES中索引文档，它内部是怎样工作的呢？<br><img src="/Resources/Pasted%20image%2020220725114905.png"></p><ul><li><p>现在我们添加按照其类型的约束添加“张三”这条数据，ES拿到这条数据</p></li><li><p>首先把整个文档进行储存在元数据区，同时会生成对应的”_id”，比如这里为0，到时候我们拿0去查询，就可以得到这个文档；</p></li><li><p>然后按照分词器（所谓分词器就是对你输入的数据，按照一定的规则进行划分，这里以标准分词器为例）进行划分，因为name属性是”text”类型，所以需要分词，按照规则，进行单字划分，先分“张”，然后记录这个字在右边哪个文档中出现，同时出现了几次（当然这里只是简单列举一下，实际情况可能更复杂），再分“三”，一样的操作；接下来是”age”属性，因为age是”Integer”类型，所以不需要分词，直接存储，记录。一直如此操作，直到对输入的数据完成…</p></li><li><p>现在我们要插入第二条数据，同样是现在元数据区进行储存，为其分配”_id”，然后是索引区操作，现在”张”这个字不仅在0文档出现，也出现在1文档。</p></li><li><p>需求： 现在用户想要查找address为”北京”的文档，ES会进行两次搜索，先是在索引区（分词后存放的数据）找到相匹配的文档的”id”，再是按照”id”去找到元数据区对应的文档，最后按照：比如在0文档出现的次数多，就把0文档排在前面，展示给用户。</p></li><li><p><strong>总结： 索引库储存数据，分为索引区和元数据区，元数据区储存完整文档，索引区存放分词过后的数据</strong></p></li></ul><hr><h2 id="🌈Kibana"><a href="#🌈Kibana" class="headerlink" title="🌈Kibana"></a>🌈Kibana</h2><p>Kibana是一个针对Elasticsearch的开源分析及<strong>可视化平台</strong>，使用Kibana可以查询、查看并与存储在ES索引的数据进行交互操作，使用Kibana能执行高级的数据分析，并能以图表、表格和地图的形式查看数据。</p><blockquote><p>Kibana版本和ElasticSearch版本必须一致！</p></blockquote><p><a href="http://localhost:4000/posts/dcb3f659.html#Kibana">Docker 安装 Kibana</a></p><h3 id="Kibana基本操作"><a href="#Kibana基本操作" class="headerlink" title="Kibana基本操作"></a>Kibana基本操作</h3><h4 id="整体界面"><a href="#整体界面" class="headerlink" title="整体界面"></a>整体界面</h4><p><img src="/Resources/Pasted%20image%2020220721112115.png" alt="Resources/Pasted image 20220721112115.png"></p><p><strong>PUT 创建索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721112724.png" alt="Resources/Pasted image 20220721112724.png"></p><blockquote><p>弃用：在7.0.0中，默认备份数将从[5]更改为[1]；如果希望继续使用默认的[5]个备份，则必须在创建索引请求或使用索引模板进行管理</p></blockquote><p>使用下面的命令，则不会报警告🟥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: 1,<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：索引的名字必须是小写！<br><img src="/Resources/Pasted%20image%2020220721113056.png" alt="Resources/Pasted image 20220721113056.png"></p></blockquote><p><strong>DELETE 删除索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除单个索引</span><br>DELETE /ems<br><br><span class="hljs-comment">#删除所有索引</span><br>DELETE /*<br></code></pre></td></tr></table></figure><p><strong>GET 查看索引信息</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /_cat/indices?v<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721114628.png" alt="Resources/Pasted image 20220721114628.png"></p><blockquote><p>red -&gt; 索引不可用<br>yellow -&gt;索引不健壮<br>green -&gt;索引健壮</p></blockquote><hr><h4 id="类型Type-和-映射Mapping"><a href="#类型Type-和-映射Mapping" class="headerlink" title="类型Type 和 映射Mapping"></a>类型Type 和 映射Mapping</h4><p><strong>创建索引时并创建类型</strong><br>其中emp是类型，id，name，age，bir是emp类型的四个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems <br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;id&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125; <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721141543.png" alt="Resources/Pasted image 20220721141543.png"></p><blockquote><p>Mapping Type：<strong>text, keyword, date, integer, long, double, boolean or ip</strong></p></blockquote><p><strong>查看创建索引以及索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142029.png" alt="Resources/Pasted image 20220721142029.png"></p><p><strong>只查看索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/_mapping<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142144.png" alt="Resources/Pasted image 20220721142144.png"></p><hr><h4 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h4><p><strong>插入一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档操作：</span><br><span class="hljs-comment"># 插入一条文档 PUT /索引/类型/1</span><br>PUT /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>:23,<br>  <span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142647.png" alt="Resources/Pasted image 20220721142647.png"></p><p><strong>查询一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142717.png" alt="Resources/Pasted image 20220721142717.png"></p><p><strong>删除一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>DELETE /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721143532.png" alt="Resources/Pasted image 20220721143532.png"></p><p><strong>更新一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721152834.png" alt="Resources/Pasted image 20220721152834.png"><br><img src="/Resources/Pasted%20image%2020220721152918.png" alt="Resources/Pasted image 20220721152918.png"></p><blockquote><p>如果像这样更新的话，不会保留原始数据（<strong>先删除，再插入</strong>）<br>可以使用下面的方式，保留原始数据！而且还可以新添加新的字段！（缺点是会自动匹配字段类型，不太准确）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>  &#125;<br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721153237.png" alt="Resources/Pasted image 20220721153237.png"><br><img src="/Resources/Pasted%20image%2020220721153251.png" alt="Resources/Pasted image 20220721153251.png"></p><p><strong>使用脚本更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每次给age+5</span><br>POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;ctx._source.age+=5&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><blockquote><p>批量时不会因为一个失败而全部失败,而是继续执行后续操作,批量在返回时按照执行的状态开始返回</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档批量操作 _bulk</span><br><span class="hljs-comment"># 添加(index) 删除(delete) 更新(update)</span><br>PUT /ems/emp/_bulk<br>&#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhang&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2011-11-11&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;delete&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;update&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;doc&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:18,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-11-12&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721154934.png" alt="Resources/Pasted image 20220721154934.png"></p><hr><h2 id="🌋ES高级检索Query"><a href="#🌋ES高级检索Query" class="headerlink" title="🌋ES高级检索Query"></a>🌋ES高级检索Query</h2><p>ES官方提供了两中检索方式：</p><ul><li><ol><li>通过 URL 参数进行搜索<br><code>GET /索引/类型/_search ?参数</code></li></ol></li><li><ol start="2"><li>通过 DSL(Domain Specified Language) 进行搜索<br><code>GET /索引/类型/_search &#123;&#125;</code></li></ol></li></ul><p>官方更推荐使用<strong>第二种方式</strong>，第二种方式是基于传递JSON作为请求体(request body)格式与ES进行交互，这种方式更强大，更简洁。<br><img src="/Resources/Pasted%20image%2020220725095720.png"></p><p>以下只展示大部分的命令，更多请查看官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl.html">Query DSL | Elasticsearch Guide [6.8] | Elastic</a></p><h4 id="构建测试数据"><a href="#构建测试数据" class="headerlink" title="构建测试数据"></a>构建测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.删除索引</span><br>DELETE /ems<br><br><span class="hljs-comment"># 2.创建索引并指定类型</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 3.插入测试数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="URL检索"><a href="#URL检索" class="headerlink" title="URL检索"></a>URL检索</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /ems/emp/_search?<span class="hljs-attribute">q</span>=*&amp;sort=age:desc&amp;size=5&amp;from=0&amp;_source=name,age,bir<br><br>_search：搜索的API<br><br><span class="hljs-attribute">q</span>=* ：匹配所有文档<br><br><span class="hljs-attribute">sort</span>=age：按照指定字段进行排序，默认为升序，:desc 降序排列<br><br>size：展示多少条数据<br><br><span class="hljs-keyword">from</span>：展示第几页<br><br>_source：只匹配哪些字段<br></code></pre></td></tr></table></figure><h4 id="DSL检索"><a href="#DSL检索" class="headerlink" title="DSL检索"></a>DSL检索</h4><h5 id="1-查询所有-match-all"><a href="#1-查询所有-match-all" class="headerlink" title="1. 查询所有(match_all)"></a>1. 查询所有(match_all)</h5><p><strong>match_all关键字</strong>：返回索引中的全部文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-对查询结果进行排序-sort"><a href="#2-对查询结果进行排序-sort" class="headerlink" title="2. 对查询结果进行排序(sort)"></a>2. 对查询结果进行排序(sort)</h5><blockquote><p>keyword类型不能作为排序依据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果以keyword类型的进行排序则会出现错误</span><br>GET /ems/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-查询结果中返回指定条数-size"><a href="#3-查询结果中返回指定条数-size" class="headerlink" title="3. 查询结果中返回指定条数(size)"></a>3. 查询结果中返回指定条数(size)</h5><p><strong>size 关键字</strong>：指定查询结果中返回指定条数。 <strong>默认返回值10条</strong><br>是对查询的结果进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-分页查询-from"><a href="#4-分页查询-from" class="headerlink" title="4. 分页查询(from)"></a>4. 分页查询(from)</h5><p><strong>from 关键字</strong>：用来指定起始返回位置，和size关键字连用可实现分页效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5,<br>  <span class="hljs-string">&quot;from&quot;</span>: 0<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-查询结果中返回指定字段-source"><a href="#5-查询结果中返回指定字段-source" class="headerlink" title="5. 查询结果中返回指定字段(_source)"></a>5. 查询结果中返回指定字段(_source)</h5><p><strong>_source 关键字</strong>：是一个数组,在数组中用来指定展示那些字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 展示单个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-string">&quot;name&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 展示多个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-关键词查询-term"><a href="#6-关键词查询-term" class="headerlink" title="6. 关键词查询(term)"></a>6. 关键词查询(term)</h5><p><strong>term 关键字</strong>：用来使用关键词查询</p><blockquote><p> 还有一个terms，多关键词查询</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># name 是text类型，会进行分词，所以name包含“张”的文档都行</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># bir 是date类型，不会进行分词，所以只能输入全部进行查询</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;2012-12&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：<br><strong>NOTE1</strong>：通过使用term查询得知ES中默认使用分词器为标准分词器(Standard Analyzer),标准分词器对于<strong>英文单词分词</strong>，对于<strong>中文单字分词</strong>。<br>（标准分词器不适合中文）</p><p><strong>NOTE2</strong>：通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词，只有<strong>text类型分词</strong>。<br>（查看分词的效果逻辑使用 <code>GET /_analyze &#123;&quot;text&quot;:&quot;redis is open source db&quot;&#125;</code><br><code>GET /_analyze &#123;&quot;text&quot;:&quot;Java 是一个跨平台的产品&quot;&#125;</code>)</p></blockquote><h5 id="7-范围查询-range"><a href="#7-范围查询-range" class="headerlink" title="7. 范围查询(range)"></a>7. 范围查询(range)</h5><p><strong>range 关键字</strong>：用来指定查询指定范围内的文档</p><blockquote><p>只是针对一些特殊的字段比如age等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询age&gt;=5,&lt;=10的文档</span><br><span class="hljs-comment"># gte &gt;=</span><br><span class="hljs-comment"># lte &lt;=</span><br><span class="hljs-comment"># gt &gt;</span><br><span class="hljs-comment"># le &lt;</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>        <span class="hljs-string">&quot;lte&quot;</span>: 10<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-前缀查询-prefix"><a href="#8-前缀查询-prefix" class="headerlink" title="8. 前缀查询(prefix)"></a>8. 前缀查询(prefix)</h5><p><strong>prefix 关键字</strong>：用来检索含有指定前缀的关键词的相关文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 指定的前缀并不是说元数据文档中name属性以”张”为前缀的，而是匹配的经过分词器分词后索引区的数据，这里”张无忌”经过分词后为：“张”,“无”,“忌”，无论匹配到哪个都会指向那份文档</p></blockquote><h5 id="9-通配符查询-wildcard"><a href="#9-通配符查询-wildcard" class="headerlink" title="9. 通配符查询(wildcard)"></a>9. 通配符查询(wildcard)</h5><p><strong>wildcard 关键字</strong>：通配符查询 ? 用来匹配一个任意字符 * 用来匹配多个任意字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;wildcard&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的匹配也是针对索引区里面的数据</p></blockquote><h5 id="10-多id查询-ids"><a href="#10-多id查询-ids" class="headerlink" title="10. 多id查询(ids)"></a>10. 多id查询(ids)</h5><p><strong>ids 关键字</strong>：值为数组类型,用来根据一组id获取多个对应的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;values&quot;</span>: [<span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<span class="hljs-string">&quot;BVSspHYBh-o7eO8i7bUf&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="11-模糊查询-fuzzy"><a href="#11-模糊查询-fuzzy" class="headerlink" title="11. 模糊查询(fuzzy)"></a>11. 模糊查询(fuzzy)</h5><p><strong>fuzzy 关键字</strong>: 用来模糊查询含有指定关键字的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;fuzzy&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;sprin&quot;</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment"># 这里搜索的关键词长度为5，允许一次模糊，索引区的数据为spring能相应匹配，刚好差1</span><br></code></pre></td></tr></table></figure><blockquote><p>模糊查询的规则： fuzzy 模糊查询 <strong>最大模糊错误 必须在0-2之间</strong><br>搜索关键词长度 <strong>小于2</strong> 不允许存在模糊（必须精确匹配，不允许错误）<br>搜索关键词长度为<strong>3-5</strong> 允许一次模糊（最多一次错误）<br>搜索关键词长度 <strong>大于5</strong> 允许两次模糊（最多两次错误））</p></blockquote><h5 id="12-布尔查询-bool"><a href="#12-布尔查询-bool" class="headerlink" title="12. 布尔查询(bool)"></a>12. 布尔查询(bool)</h5><p><strong>bool 关键字</strong>：用来组合多个条件实现复杂查询</p><ul><li><p>must: 相当于&amp;&amp;同时成立（and）</p></li><li><p>should: 相当于|| 成立一个就行（or）</p></li><li><p>must_not: 相当于! 不能满足任何一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>              <span class="hljs-string">&quot;lte&quot;</span>: 10<br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;南&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="13-高亮查询-highlight"><a href="#13-高亮查询-highlight" class="headerlink" title="13. 高亮查询(highlight)"></a>13. 高亮查询(highlight)</h5><p><strong>highlight 关键字</strong>：可以让符合条件的文档中的关键词高亮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果中：<br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;oGsdM4IBp8eFhO_IzLHc&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;em&gt;五&lt;/em&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br><br><span class="hljs-comment"># &quot;*&quot;:&#123;&#125;    代表所有地方只要包含查询的词都高亮</span><br><span class="hljs-comment"># &quot;name&quot;:&#123;&#125; 只有name包含查询的词高亮</span><br></code></pre></td></tr></table></figure><blockquote><p>highlight 是对查询后的结果进行高亮，所以要放在”query”之后进行，同时，并不是在原数据上进行操作，而是新增了一段highlight，并为需要高亮的地方增加标签。（默认是<code>&lt;em&gt;斜体&lt;/em&gt;</code>）</p></blockquote><blockquote><p>自定义高亮html标签: 可以在highlight中使用pre_tags和post_tags</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;span style=&#x27;color:red&#x27;&gt;五&lt;/span&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h5 id="14-多字段查询-multi-match"><a href="#14-多字段查询-multi-match" class="headerlink" title="14. 多字段查询(multi_match)"></a>14. 多字段查询(multi_match)</h5><p>有时候光进行一项字段匹配体验效果并不是很好，所以可以同时多字段匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国&quot;</span>,              <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>]  <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h5 id="15-多字段分词查询-query-string"><a href="#15-多字段分词查询-query-string" class="headerlink" title="15. 多字段分词查询(query_string)"></a>15. 多字段分词查询(query_string)</h5><p>该关键词可以增加分词器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /dangdang/book/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;query_string&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国声音&quot;</span>,          <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,   <span class="hljs-comment"># 分词器</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>] <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h2 id="🌄IK分词器"><a href="#🌄IK分词器" class="headerlink" title="🌄IK分词器"></a>🌄IK分词器</h2><p>默认ES中采用标准分词器进行分词，这种方式并不适用于中文网站，因此需要修改ES对中文友好分词,从而达到更佳的搜索的效果。<br>官方网站：<a href="https://github.com/medcl/elasticsearch-analysis-ik">GitHub - medcl&#x2F;elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary.</a></p><h3 id="在线安装IK"><a href="#在线安装IK" class="headerlink" title="在线安装IK"></a>在线安装IK</h3><p>v5.5.1版本后开始支持在线安装 </p><h4 id="0、进入elasticsearch目录"><a href="#0、进入elasticsearch目录" class="headerlink" title="0、进入elasticsearch目录"></a>0、进入elasticsearch目录</h4><p><code>docker exec -it elasticsearch bash</code></p><h4 id="1、删除ES原始数据"><a href="#1、删除ES原始数据" class="headerlink" title="1、删除ES原始数据"></a>1、删除ES原始数据</h4><p>因为之前可能使用的标准分词器，如果存在数据，现在又使用IK分词器会出现冲突<br>进入es安装目录中将data目录数据删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf data<br></code></pre></td></tr></table></figure><h4 id="2、安装IK"><a href="#2、安装IK" class="headerlink" title="2、安装IK"></a>2、安装IK</h4><p>在es安装的bin目录中执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.23/elasticsearch-analysis-ik-6.8.23.zip<br><br></code></pre></td></tr></table></figure><blockquote><p>NOTE: 要求版本严格与当前使用版本一致,如需使用其他版本替换 6.8.0 为使用的版本号</p></blockquote><h4 id="3、查看IK"><a href="#3、查看IK" class="headerlink" title="3、查看IK"></a>3、查看IK</h4><p>安装完成后会在plugins目录下，生成IK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@linux elasticsearch-6.8.0]$ <span class="hljs-built_in">ls</span> plugins/<br>analysis-ik<br></code></pre></td></tr></table></figure><h4 id="4、重启es"><a href="#4、重启es" class="headerlink" title="4、重启es"></a>4、重启es</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h4 id="5、测试分词安装成功"><a href="#5、测试分词安装成功" class="headerlink" title="5、测试分词安装成功"></a>5、测试分词安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.153.132:5601/ -&gt; devtools<br><br>GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;中华人民共和国国歌&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 结果</span><br>&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;中华人民共和国&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;国歌&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 9,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>IK分词器提供了两种mapping类型用来做文档的分词分别是 ik_max_word 和 ik_smart<br>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</p><p>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</p></blockquote><h3 id="本地安装IK"><a href="#本地安装IK" class="headerlink" title="本地安装IK"></a>本地安装IK</h3><h4 id="1、下载IK安装包"><a href="#1、下载IK安装包" class="headerlink" title="1、下载IK安装包"></a>1、下载IK安装包</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2">https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2</a></p><h4 id="2、安装unzip"><a href="#2、安装unzip" class="headerlink" title="2、安装unzip"></a>2、安装unzip</h4><p>由于安装包是zip格式的，所以需要unzip方式解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y unzip<br></code></pre></td></tr></table></figure><h4 id="3、创建IK目录"><a href="#3、创建IK目录" class="headerlink" title="3、创建IK目录"></a>3、创建IK目录</h4><p>本地方式不像在线安装方式会自己生成一个目录，所以我们需要自己创建一个目录，把ik解压在里面<br>这里我们就在plugins下新建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> IK<br></code></pre></td></tr></table></figure><h4 id="4、移动到es安装目录的plugins目录中"><a href="#4、移动到es安装目录的plugins目录中" class="headerlink" title="4、移动到es安装目录的plugins目录中"></a>4、移动到es安装目录的plugins目录中</h4><p><code>mv elasticsearch-analysis-ik-6.8.0.zip elasticsearch-6.8.0/plugins/IK</code></p><h4 id="5、解压IK"><a href="#5、解压IK" class="headerlink" title="5、解压IK"></a>5、解压IK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip elasticsearch-analysis-ik-6.8.0.zip<br></code></pre></td></tr></table></figure><h4 id="6、重启ES"><a href="#6、重启ES" class="headerlink" title="6、重启ES"></a>6、重启ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h3 id="卸载IK"><a href="#卸载IK" class="headerlink" title="卸载IK"></a>卸载IK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> plugins <br><span class="hljs-built_in">rm</span> -rf analysis-ik/<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除原有的ems索引数据</span><br>DELETE /ems<br><br><span class="hljs-comment"># 新建索引/类型/约束</span><br><span class="hljs-comment"># 同时针对属性增加了使用IK分词器</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>           <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>           <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>     <span class="hljs-comment">#可写可不写</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 添加数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br><br><br><span class="hljs-comment"># 测试</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;term&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;框架&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置扩展词"><a href="#配置扩展词" class="headerlink" title="配置扩展词"></a>配置扩展词</h3><p><strong>扩展词典：</strong> 就是有些词并不是关键词,但是也希望被ES用来作为检索的关键词,可以将这些词加入扩展词典。</p><p><strong>停用词典：</strong> 就是有些词是关键词,但是出于业务场景不想使用这些关键词被检索到，可以将这些词放入停用词典。</p><h4 id="配置本地词典"><a href="#配置本地词典" class="headerlink" title="配置本地词典"></a>配置本地词典</h4><p>查看配置文件的位置：</p><blockquote><p>在线安装的配置文件和本地安装的配置文件地址不同分别在以下目录：<br> <code>&#123;conf&#125;/analysis-ik/config/IKAnalyzer.cfg.xml</code> <code>&#123;plugins&#125;/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml</code></p></blockquote><p>在配置文件同目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入配置文件同目录（此次配置文件目录是第一种）</span><br><span class="hljs-built_in">cd</span> config/analysis-ik/<br><span class="hljs-built_in">cp</span> main.dic ext_dic<br>vim ext_dic<br><span class="hljs-comment"># 输入ggdG删除所有内容</span><br>insert -&gt; 碰瓷 -&gt; <span class="hljs-built_in">shift</span> ZZ<br>保存<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> config/analysis-ik/<br>vim IKAnalyzer.cfg.xml<br><span class="hljs-comment"># 如果打开中文是乱码的话</span><br>vim ~/.vimrc<br>加入以下配置即可<br><span class="hljs-built_in">set</span> encoding=utf-8set fileencoding=utf-8<br><br>再配置刚刚配置好的拓展词典<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726095647.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><p>配置完成后：<br><img src="/Resources/Pasted%20image%2020220726100547.png"></p><blockquote><p>新增的拓展词只能对之后的词构建索引，对于之前已经构建过索引的文档，则没有效果。如果需要对所有的文档适配所有的拓展词，必须重建所有文档的索引。</p></blockquote><h4 id="配置远程词典"><a href="#配置远程词典" class="headerlink" title="配置远程词典"></a>配置远程词典</h4><p>本地词典写入的词一旦写入，后面再想去填入或者停用，比较麻烦</p><p>比如，我这个博客网站我想根据用户输入的词的搜索达到多少后将其认定为热词添加到词典中，并且一段时间后进行一定的更新。</p><p><img src="/Resources/Pasted%20image%2020220726110610.png"><br>EMS这个应用就相当于我们的博客，在这个下面我们创建了一个文件ext.txt，专门用于存放热词，而这个热词具体怎么来，我们可以结合redis，当用户搜索词的次数达到多少，我们通过IO写入这个文件中，然后ES通过监听url这个地址上的数据发生了变化，就进行相应的更新。</p><h5 id="新建一个Springboot应用"><a href="#新建一个Springboot应用" class="headerlink" title="新建一个Springboot应用"></a>新建一个Springboot应用</h5><p>项目结构及相关内容如下</p><p><img src="/Resources/Pasted%20image%2020220726111721.png"></p><h5 id="配置访问静态资源"><a href="#配置访问静态资源" class="headerlink" title="配置访问静态资源"></a>配置访问静态资源</h5><p><img src="/Resources/Pasted%20image%2020220726112240.png"></p><h5 id="测试访问项目"><a href="#测试访问项目" class="headerlink" title="测试访问项目"></a>测试访问项目</h5><p><img src="/Resources/Pasted%20image%2020220726111748.png"></p><blockquote><p>如果遇到中文乱码，可以下载一个chrome拓展Charset更换编码格式即可<br>不改也是可以的，只要文本时utf-8即可。</p></blockquote><h5 id="改ES配置文件"><a href="#改ES配置文件" class="headerlink" title="改ES配置文件"></a>改ES配置文件</h5><p>查看自己的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726112411.png"></p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim IKAnalyzer.cfg.xml<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726113032.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><h5 id="重启ES"><a href="#重启ES" class="headerlink" title="重启ES"></a>重启ES</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>bug：kibana崩掉了，把远程词典注释了还是不行<br>重启后查看日志显示<code>index_closed_exception</code><br><img src="/Resources/Pasted%20image%2020220726143113.png"><br>排错ing<br>使用postman 发送post请求解决了，<del>不知道为啥</del><code>http://localhost:9200/.kibana/_open</code><br><strong>因为kibana的索引被关闭了（莫名其妙被关闭？不知道什么原因被关闭了，但是就是这个原因！）</strong></p></blockquote><blockquote><p>错误复现：使用postman 发送post请求<code>http://192.168.153.132:9200/.kibana/_close</code><br>关闭索引再次出现错误400，然后重启了之后就再启动自动退出报exit(1)。<br><img src="/Resources/Pasted%20image%2020220726154820.png"><br>重新发送打开索引的请求即可解决</p></blockquote><p><em>测试使用的时候如果新加了拓展词，那么测试的时候需要新增文档以测试，不然旧文档会以之前的分词模型来建立索引，就会出现查不到的情况。</em></p><blockquote><p><strong>即新加了拓展词只对之后加入的文档有效！</strong></p></blockquote><hr><h2 id="🧷ES过滤-Filter"><a href="#🧷ES过滤-Filter" class="headerlink" title="🧷ES过滤 Filter"></a>🧷ES过滤 Filter</h2><p>ES中的查询操作分为2种： <strong>查询(query)</strong> 和 <strong>过滤(filter)</strong></p><p>查询即是之前提到的query查询，它（查询）默认会计算每个返回文档的得分，然后根据得分排序。而过滤（filter）只会筛选出符合的文档，并不计算得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快。</p><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。<br><img src="/Resources/Pasted%20image%2020220726192122.png"></p><p>官网说明：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-filter-context.html">Query and filter context</a></p><h3 id="过滤语法"><a href="#过滤语法" class="headerlink" title="过滤语法"></a>过滤语法</h3><p><strong>NOTE:</strong></p><ul><li>在执行filter和query时，<strong>先执行filter在执行query</strong></li><li>Elasticsearch会<strong>自动缓存经常使用的过滤器</strong>，以加快性能</li><li>使用过滤查询<strong>必须使用bool查询</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;must&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;框架&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 0,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 20<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行过程： 先从ES从执行过滤查询，找到符合年龄范围在<code>[0,20]</code>的文档，这个过程不会计算得分，然后再执行查询操作，从满足条件的这些文档中又去查找”content”属性的值为”框架”的文档，并将可能的文档计算的得分。</p><hr><h3 id="常见的过滤器类型"><a href="#常见的过滤器类型" class="headerlink" title="常见的过滤器类型"></a>常见的过滤器类型</h3><h4 id="term-Filter"><a href="#term-Filter" class="headerlink" title="term Filter"></a>term Filter</h4><p>term 用在过滤中查询，表示查询指定字段含有该词的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="terms-Filter"><a href="#terms-Filter" class="headerlink" title="terms Filter"></a>terms Filter</h4><p>term只能匹配一个字段，要想过滤多个字段，使用terms</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: [<span class="hljs-string">&quot;spring&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="range-Filter"><a href="#range-Filter" class="headerlink" title="range Filter"></a>range Filter</h4><p>顾名思义：就是先查找满足某个指定范围的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>         <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>             <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>           &#125;<br>         &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 1,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 10<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="exists-Filter"><a href="#exists-Filter" class="headerlink" title="exists Filter"></a>exists Filter</h4><p>先过滤掉不存在指定字段的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;exists&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;age&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><h4 id="ids-Filter"><a href="#ids-Filter" class="headerlink" title="ids Filter"></a>ids Filter</h4><p>查找含有指定字段的索引记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;values&quot;</span>: [<br>              <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;OY0TqnYB5vZ1Et4zupDf&quot;</span><br>            ]<br>          &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><hr><h2 id="☕Java-操作ElasticSearch"><a href="#☕Java-操作ElasticSearch" class="headerlink" title="☕Java 操作ElasticSearch"></a>☕Java 操作ElasticSearch</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="初始化SpringBoot项目"><a href="#初始化SpringBoot项目" class="headerlink" title="初始化SpringBoot项目"></a>初始化SpringBoot项目</h4><p>选择依赖：devtools lombok springweb<br>更改springboot版本为2.3.7.RELEASE</p><h4 id="引入Es相关依赖："><a href="#引入Es相关依赖：" class="headerlink" title="引入Es相关依赖："></a>引入Es相关依赖：</h4><p><strong>版本必须与es版本一致</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport-netty4-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.70<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h3><p>快捷键：ctrl + shift + t</p><h3 id="测试Java连接Es客户端"><a href="#测试Java连接Es客户端" class="headerlink" title="测试Java连接Es客户端"></a>测试Java连接Es客户端</h3><p>#tips 小技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例如</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">xxx</span>?<br><span class="hljs-comment">// TransportClient 点进去看源码发现是抽象类，不能直接new，对着TransportClient按下crtl+h，查看实现类即可</span><br><span class="hljs-comment">// 这里我们查看可以发现，下面有一个PreBuiltTransportClient实现类</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>      <span class="hljs-comment">// 创建ES客户端对象</span><br>      <span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>      <span class="hljs-comment">// 设置操作ES服务主机和端口</span><br>      transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><span class="hljs-comment">// 为什么是9300，kibana是9200，因为TransportClient底层走的是TCP协议，而ES开放的TCP协议端口是9300，kibana走的是RESTFUL协议，ES开放的REST协议端口是9300。</span><br><br>      <span class="hljs-comment">// 操作</span><br><br>      <span class="hljs-comment">// 释放资源</span><br>      transportClient.close();<br>  &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><blockquote><p>下面的代码有问题，没问题的代码见后面！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestIndexAndTypeMapping</span> &#123;<br>    <span class="hljs-keyword">private</span> TransportClient transportClient;<br><br>    <span class="hljs-comment">//@Before</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>        <span class="hljs-comment">// 创建ES客户端对象</span><br>        <span class="hljs-built_in">this</span>.transportClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>        <span class="hljs-comment">// 设置操作ES服务主机和端口 http://192.168.153.133/</span><br>        transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><br>        <span class="hljs-comment">// 操作</span><br>    &#125;<br>    <span class="hljs-comment">//@After</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>        <span class="hljs-comment">// 释放资源</span><br>        transportClient.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建一个索引</span><br>        <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">createIndexResponse</span> <span class="hljs-operator">=</span> transportClient.admin().indices().prepareCreate(<span class="hljs-string">&quot;dangdang5&quot;</span>).get();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acknowledged</span> <span class="hljs-operator">=</span> createIndexResponse.isAcknowledged();<br>        System.out.println(acknowledged);<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>第一个：<br>问题：执行@Test方法报空指针异常，打断点发现是@before方法没有执行。<br>原因：junit4中是@before和@after，在junit5中用@BeforeEach和@AfterEach取代了。<br>解决：用新的注解取代旧注解<br>第二个：<br>问题：报错&#96;NoNodeAvailableException[None of the configured nodes are available: [</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/Resources/elast</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/categories/Database/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://conquers.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装容器合集</title>
    <link href="http://conquers.github.io/posts/dcb3f659.html"/>
    <id>http://conquers.github.io/posts/dcb3f659.html</id>
    <published>2022-07-11T13:45:45.000Z</published>
    <updated>2023-07-18T06:45:57.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="left">名称</th><th>版本号</th></tr></thead><tbody><tr><td align="left"><a href="#Portainer">Portainer</a></td><td><code>Docker version 24.0.2, build cb74dfc</code></td></tr><tr><td align="left"><code>Aliyun CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>VMware CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>FinalShell</code></td><td><code>3.9.8.2</code></td></tr><tr><td align="left"><code>Redis</code></td><td><code>latest</code> &#x3D; <code>6.2.6</code></td></tr><tr><td align="left"><a href="#MySQL%205.7">MySQL 5.7</a></td><td><code>5.7</code></td></tr><tr><td align="left"><a href="#MySQL%208">MySQL 8</a></td><td><code>8</code></td></tr><tr><td align="left"><code>Docker Hub</code></td><td><a href="https://hub.docker.com/">Docker Hub</a></td></tr><tr><td align="left"><a href="#Elasticsearch">Elasticsearch</a></td><td><code>6.8.23</code></td></tr><tr><td align="left"><a href="#Kibana">Kibana</a></td><td><code>6.8.23</code></td></tr><tr><td align="left"><a href="#Redis">Redis</a></td><td><code>6.X</code></td></tr><tr><td align="left"><a href="#RabbitMQ">RabbitMQ</a></td><td><code>latest</code></td></tr><tr><td align="left"><a href="#nacos">nacos</a></td><td><code>latest</code></td></tr><tr><td align="left"><a href="#XXL-JOB">XXL-JOB</a></td><td><code>2.3.1</code></td></tr><tr><td align="left"><a href="#Nginx">Nginx</a></td><td><code>1.19.10</code></td></tr><tr><td align="left"><code>...</code></td><td><code>...</code></td></tr></tbody></table><blockquote><p>说明：如果使用云服务器，创建容器后，需要在安全策略组中开放端口。</p></blockquote><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><h3 id="1、搜索镜像"><a href="#1、搜索镜像" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本"><a href="#2、安装指定版本" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull portainer/portainer<br></code></pre></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>如果需要使用 <code>minio</code>，那么可以将端口映射修改为9002</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 9002:9000 \<br>--restart=always \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>--name prtainer \<br>docker.io/portainer/portainer<br></code></pre></td></tr></table></figure><p>打开网址：<a href="http://ip:9002/">http://ip:9002/</a></p><p>首次登陆设置账号密码：admin:admin123</p><p><img src="/Resources/image-20230519142302931.png" alt="image-20230519142302931"></p><p>选择本地模式</p><p><img src="/Resources/image-20230519142344326.png" alt="image-20230519142344326"></p><p><img src="/Resources/image-20230519142426575.png" alt="image-20230519142426575"></p><p><img src="/Resources/image-20230519142741905.png" alt="image-20230519142741905"></p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="1、搜索镜像-1"><a href="#1、搜索镜像-1" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-1"><a href="#2、安装指定版本-1" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像"><a href="#3、查看已安装的镜像" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动"><a href="#4、创建实例并启动" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="5、查看启动的服务"><a href="#5、查看启动的服务" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试ElaticSearch"><a href="#6、测试ElaticSearch" class="headerlink" title="6、测试ElaticSearch"></a>6、测试ElaticSearch</h3><p>浏览器访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost:9200<br></code></pre></td></tr></table></figure><p>使用curl模拟请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost:9200<br></code></pre></td></tr></table></figure><hr><h3 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h3><p>以下使用Docker安装ElasticSearch集群</p><blockquote><p>注意虚拟机的内存不能太小，不然起3个ES服务就要崩（一开始给了4个G，后面给了8个G）</p></blockquote><h4 id="在虚拟机中创建配置文件映射Es容器中的配置文件"><a href="#在虚拟机中创建配置文件映射Es容器中的配置文件" class="headerlink" title="在虚拟机中创建配置文件映射Es容器中的配置文件"></a>在虚拟机中创建配置文件映射Es容器中的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data3<br><br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins3<br><br><br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data1<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data2<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data3<br><br>vim software/elasticsearch/config/es1.yml<br>vim software/elasticsearch/config/es2.yml<br>vim software/elasticsearch/config/es3.yml<br><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node1                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9201                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9301                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node2                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9202                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9302                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node3                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9203                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9303                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br></code></pre></td></tr></table></figure><h4 id="调高JVM线程数限制数量"><a href="#调高JVM线程数限制数量" class="headerlink" title="调高JVM线程数限制数量"></a>调高JVM线程数限制数量</h4><p><a href="https://conquers.github.io/posts/dcb3f659.html#elasticsearch">Docker安装ElasticSearch</a> 没有报错是因为指明了单机模式运行，因此不会报错，只要是以集群方法启动，就必须调高 <code>JVM</code> 线程数限制数量。</p><blockquote><p>必须做这个，不然会报错，显示# ERROR: [1] bootstrap checks failed [1]: max virtual memory areas vm.max_map_count [65530] is too low</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf<br>添加如下配置<br>-&gt;&gt;<br>vm.max_map_count=262144 <br><br><span class="hljs-comment"># 刷新配置</span><br>sysctl -p<br></code></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">官网说明</a>：<br><img src="/Resources/Pasted%20image%2020220731202851.png"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9201</span>:<span class="hljs-number">9201</span> -p <span class="hljs-number">9301</span>:<span class="hljs-number">9301</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es1.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES01 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9202</span>:<span class="hljs-number">9202</span> -p <span class="hljs-number">9302</span>:<span class="hljs-number">9302</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es2.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES02 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9203</span>:<span class="hljs-number">9203</span> -p <span class="hljs-number">9303</span>:<span class="hljs-number">9303</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es3.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES03 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>浏览器分别访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9201</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9202</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9203</span>/<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220729142408.png"><br><code>http://192.168.153.135:9201/_cat/nodes?pretty</code><br><img src="/Resources/Pasted%20image%2020220729143126.png"></p><h4 id="查看集群健康"><a href="#查看集群健康" class="headerlink" title="查看集群健康"></a>查看集群健康</h4><p><code>http://192.168.153.135:9201/_cat/health?v</code><br><img src="/Resources/Pasted%20image%2020220729143530.png"><br>由于现在还没有用kibana连接ES，也没有自己创建索引，因此这里的分片数量为0</p><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><h4 id="Kibana-连接-ES集群"><a href="#Kibana-连接-ES集群" class="headerlink" title="Kibana 连接 ES集群"></a>Kibana 连接 ES集群</h4><p>如果你之前连接过一台ES集群（为什么说一台也是集群呢？因为ES启动方式就是集群启动，只是集群数量为一台），其实需要修改的地方都差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.135:9201 -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><p>进入kibana配置文件：<br>修改连接ES的地址为集群中的任意一台：<br><a href="https://conquers.github.io/posts/dcb3f659.html#6%E3%80%81%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">kibana 连接 ES集群-编写配置</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://192.168.153.135:9201&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="SpringBoot-连接ES集群"><a href="#SpringBoot-连接ES集群" class="headerlink" title="SpringBoot 连接ES集群"></a>SpringBoot 连接ES集群</h4><p>如果你之前有用 <code>SpringBoot</code> 连接 <code>ES</code> ，这里的配置差不多，只是需要将连接地址改为所有的节点地址（防止其中某一台断掉不可用）<br><a href="SpringData%E6%93%8D%E4%BD%9CElasticSearch.md#%E7%BC%96%E5%86%99yml%E9%85%8D%E7%BD%AE">SpringBoot连接ES-编写配置</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来替换 transportClient对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(<span class="hljs-string">&quot;192.168.153.135:9201&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9202&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9203&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Head-集群可视化"><a href="#Head-集群可视化" class="headerlink" title="Head 集群可视化"></a>Head 集群可视化</h3><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>创建容器并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name=elasticsearch-head \<br>  -p 9100:9100 \<br>  mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>解决跨域</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim software<span class="hljs-regexp">/elasticsearch/</span>config/es1.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es2.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es3.yml<br><span class="hljs-comment"># 分别添加如下内容</span><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>重启es集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart $(docker ps -a | awk <span class="hljs-string">&#x27;&#123; print $1 &#125;&#x27;</span> | <span class="hljs-built_in">tail</span> -n +2)<br></code></pre></td></tr></table></figure><p>访问页面<br><code>http://192.168.153.135:9100/</code><br><img src="/Resources/Pasted%20image%2020220729150733.png"></p><p>创建索引<br><img src="/Resources/Pasted%20image%2020220729150822.png"></p><p><strong>查看集群状态</strong><br>ElasticSearch6.X 默认为分片5和1复制：<br><img src="/Resources/Pasted%20image%2020220729151207.png"><br>可以看到主分片和副本分片分布在不同的节点，同时保证主副分片不在同一节点（保证节点发生故障时可用）</p><p><strong>现在我们停掉node1节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151637.png"><br>可以看到集群仍然可用，虽然有些副本失效了，但是还是保证了5个主分片可用（即保证了数据的完整性）</p><p><strong>现在我们停掉node2节点：</strong><br>集群仍然可用，只是集群数量现在只有一台，主分片依然完整。<br><img src="/Resources/Pasted%20image%2020220729151832.png"></p><p><strong>现在我们重启node2节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151859.png"><br>发现集群慢慢同步了数据，去分担node1节点的压力，此时完整的主副分片都分布在者&#x3D;这两个节点中，所以健康状态为：green</p><p><strong>现在我们重启node1节点：</strong><br>我们发现分片又重新分布在了不同的节点，健康状态为：green<br><img src="/Resources/Pasted%20image%2020220729151929.png"><br><img src="/Resources/Pasted%20image%2020220729151938.png"></p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><h3 id="1、搜索镜像-2"><a href="#1、搜索镜像-2" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-2"><a href="#2、安装指定版本-2" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull kibana:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像-1"><a href="#3、查看已安装的镜像-1" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动-1"><a href="#4、创建实例并启动-1" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#运行kibana 注意IP一定不要写错，与后面配置文件的ip一定要对应</span><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132:9200 -p 5601:5601 -d kibana:6.8.23<br><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132/:9200 -v /mydata/ElasticStackAll/Kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><blockquote><p>虚拟机的ip会更换会导致ElasticSearchIp的更换，从而导致kibana启动不了！就只能重装kabina容器<br>解决：后面用java去连接es，不需要kibana了<br>解决：<a href="%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9B%BA%E5%AE%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84ip">固定虚拟机的ip</a></p><p>启动时报错：<code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code><br>解决办法：</p><ol><li>修改配置文件：</li><li><code>vi /usr/lib/sysctl.d/00-system.conf</code></li><li>添加<code>net.ipv4.ip_forward=1</code></li><li>重启网络<code>systemctl restart network</code></li><li>停止容器<code>docker stop kibana</code></li><li>删掉启动失败的容器<code>docker rm kibana</code></li><li>重启docker<code>systemctl restart docker</code></li><li>重新启动kibana</li></ol></blockquote><h3 id="5、进入kibana容器"><a href="#5、进入kibana容器" class="headerlink" title="5、进入kibana容器"></a>5、进入kibana容器</h3><p>使用docker命令进入到kibana容器里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it kibana /bin/sh<br></code></pre></td></tr></table></figure><p>进入容器中找到<code>/usr/share/kibana/config/kibana.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用vi 修改文件内容</span><br>vi /usr/share/kibana/config/kibana.yml <br></code></pre></td></tr></table></figure><h3 id="6、覆盖配置文件"><a href="#6、覆盖配置文件" class="headerlink" title="6、覆盖配置文件"></a>6、覆盖配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.name:</span> <span class="hljs-string">kibana</span><br><span class="hljs-comment"># 只能写0，不然会报错Error: listen EADDRNOTAVAIL: address not available</span><br><span class="hljs-comment">#server.host: &quot;192.168.153.132&quot;</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-comment">#elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [ <span class="hljs-string">&quot;http://192.168.153.132:9200&quot;</span> ]<br><span class="hljs-attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#设置kibana中文显示</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><h3 id="7、重新启动kibana"><a href="#7、重新启动kibana" class="headerlink" title="7、重新启动kibana"></a>7、重新启动kibana</h3><p><code>docker restart kibana</code></p><h3 id="8、测试Kibana"><a href="#8、测试Kibana" class="headerlink" title="8、测试Kibana"></a>8、测试Kibana</h3><p><code>http://自己的IP地址:5601</code><br><code>http://192.168.153.132:5601</code><br>浏览器访问：<br><img src="/Resources/Pasted%20image%2020220721101717.png" alt="Develop/开发虚拟机/Resources/Pasted image 20220721101717.png"></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-单机"><a href="#Redis-单机" class="headerlink" title="Redis 单机"></a>Redis 单机</h3><p>使用云服务器需要开放端口6379-6384及16379-16384，具体根据需求，以下使用云服务器进行操作</p><p><img src="/Resources/image-20230602110426224.png" alt="image-20230602110426224"></p><p><img src="/Resources/image-20230602110742631.png" alt="image-20230602110742631"></p><p>说明：16379-16384的作用：<a href="https://redis.io/docs/management/scaling/">https://redis.io/docs/management/scaling/</a></p><p><img src="/Resources/image-20230602143938312.png" alt="image-20230602143938312"></p><p>使用虚拟机需要关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis:latest<br></code></pre></td></tr></table></figure><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><blockquote><p>创建配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在虚拟机中或者云服务器中</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 6379:6379 --name redis \<br>-v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>查看容器版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis redis-server -v<br><br><span class="hljs-comment"># Redis server v=6.2.6 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=b61f37314a089f19</span><br></code></pre></td></tr></table></figure><blockquote><p>下载配置文件</p></blockquote><p>根据上面查询到的版本下载配置文件：<a href="https://redis.io/docs/management/config/%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF6.2%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E4%B8%8B%E8%BD%BD6.2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6https://raw.githubusercontent.com/redis/redis/6.2/redis.conf">https://redis.io/docs/management/config/，这里的版本是6.2，那么就下载6.2的配置文件https://raw.githubusercontent.com/redis/redis/6.2/redis.conf</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">requirepass</span> redis<br><span class="hljs-comment"># bind 127.0.0.1 -::1</span><br>protected-mode <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><blockquote><p>重启Redis容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart redis<br></code></pre></td></tr></table></figure><h4 id="进入Redis容器"><a href="#进入Redis容器" class="headerlink" title="进入Redis容器"></a>进入Redis容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接进去redis客户端。</span><br>docker <span class="hljs-built_in">exec</span> -it redis redis-cli -a redis<br><br><span class="hljs-comment"># 不然的话，就需要以下两条命令才能进入redis客户端</span><br>docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<br>redis-cli -a redis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602142724660.png" alt="image-20230602142724660"></p><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><p>默认持久化方式是快照持久化，修改配置文件，AOF持久化</p><blockquote><p>参考Redis的持久化：<a href="https://conquers.github.io/posts//posts/bae4ff13.html#9%E3%80%81Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6">Redis的持久化机制</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /mydata/redis/conf/redis.conf<br><br><span class="hljs-comment"># 修改的下面内容</span><br>appendonly <span class="hljs-built_in">yes</span><br>保存<br> <br>docker restart redis<br></code></pre></td></tr></table></figure><h3 id="Redis分片集群（海量存储-高并发写）"><a href="#Redis分片集群（海量存储-高并发写）" class="headerlink" title="Redis分片集群（海量存储+高并发写）"></a>Redis分片集群（海量存储+高并发写）</h3><h4 id="下载镜像-1"><a href="#下载镜像-1" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node1/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node2/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node3/data<br></code></pre></td></tr></table></figure><h4 id="创建集群节点"><a href="#创建集群节点" class="headerlink" title="创建集群节点"></a>创建集群节点</h4><p>创建集群节点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node1 -v /mydata/redis/cluster/node1/data:/data  \<br>-p 6380:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node1.conf<br></code></pre></td></tr></table></figure><ul><li><p>部分参数解释：</p><ul><li><p><code>--cluster-enabled</code>：是否启动集群，选值：yes 、no</p></li><li><p><code>--cluster-config-file 配置文件.conf </code>：指定节点信息，自动生成</p></li><li><p><code>--cluster-node-timeout 毫秒值</code>： 配置节点连接超时时间</p></li><li><p><del><code>--appendonly</code>：是否开启持久化，选值：yes、no</del></p></li></ul></li></ul><p>启动集群点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node1<br></code></pre></td></tr></table></figure><p>创建集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node2 -v /mydata/redis/cluster/node2/data:/data  \<br>-p 6381:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node2.conf<br></code></pre></td></tr></table></figure><p>启动集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node2<br></code></pre></td></tr></table></figure><p>创建集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node3 -v /mydata/redis/cluster/node3/data:/data  \<br>-p 6382:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node3.conf<br></code></pre></td></tr></table></figure><p>启动集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node3<br><br><span class="hljs-comment"># 全部启动</span><br>docker start redis-node1 redis-node2 redis-node3<br></code></pre></td></tr></table></figure><p>查看集群信息</p><p><img src="/Resources/image-20230601152728965.png" alt="image-20230601152728965"></p><p>查看 <code>redis-node1 </code>、<code>redis-node2</code>、<code>redis-node3</code>容器被分配的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect redis-node1 // 172.17.0.2<br>docker inspect redis-node2 // 172.17.0.3<br>docker inspect redis-node3 // 172.17.0.4<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601152829433.png" alt="image-20230601152829433"></p><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以redis-node1为例，进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 创建集群</span><br>redis-cli --cluster create 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 --cluster-replicas 0<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601154142373.png" alt="image-20230601154142373"></p><ul><li>部分参数解释：<ul><li><code>--cluster-replicas</code> ：主从比例， 1 个主节点对应几个从节点，这里是0个</li></ul></li></ul><h4 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 进入redis-node2的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node2 /bin/bash<br><span class="hljs-comment"># 进入redis-node3的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node3 /bin/bash<br><br><span class="hljs-comment"># redis</span><br>redis-cli<br><span class="hljs-comment"># 查看集群信息</span><br>127.0.0.1:6379&gt; cluster nodes<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601155821525.png" alt="image-20230601155821525"></p><p>此时，由于之前创建集群的时候 <code>--cluster-replicas 0</code> ，因此每一个节点都是主节点</p><h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><p>尝试写入数据，发现只有 <code>node3</code> 可以查看或者写入数据，其他节点都会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(error) MOVED 15495 172.17.0.4:6379`<br>MOVED 指令的第一个参数 15495 是 key 对应的槽位编号，后面是目标节点地址。<br><br>槽位：<br>Redis 集群把所有的物理节点（向外提供服务的 master）映射到 [0 - 16383] slot 上，即所有 master 均分 16384 大小的 slot 空间，每个 master 占有一定的 slot 空间<br><br>当存储数据时，首先会对 key 使用 CRC16 算法进行加密，将得到的值 mod 16384，这样一来 key 的值始终在 0-16383 之间，Redis 则根据 key 值将其放入对应范围的节点，比如算出来的 key 值是 3000，节点1的 slot 空间是 [0 - 5460]，那么就会放到节点1，平均集群的压力<br><br>同理，当获取数据时，也会对 Key 进行同样的计算，根据得到的值去对应的节点获取数据<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601160012575.png" alt="image-20230601160012575"></p><p>错误原因：启动 <code>redis</code> 时，没有使用集群模式</p><p>解决办法：使用 <code>redis-cli</code>时要加上 <code>-c</code>参数</p><p>集群演示：每个容器中都用<code>redis-cli -c</code>启动，这样，每个节点都可以写入或者查看了</p><p><img src="/Resources/image-20230601164027890.png" alt="image-20230601164027890"></p><p>现在 <code>&#123;key : a, value : b&#125;</code>存放在 <code>node3</code> 中，此时停掉 <code>node3</code> 容器，其他节点就拿不到 <code>node3</code> 存储的数据了，重新启动 <code>node3</code> 容器，即可拿到值。</p><p><img src="/Resources/image-20230601164219994.png" alt="image-20230601164219994"></p><h4 id="集群修复"><a href="#集群修复" class="headerlink" title="集群修复"></a>集群修复</h4><p>像上面如果集群中有一个节点挂掉了，那么存储值也不可行了，因为分配的slot没有变，修复命令主要是用来新加入的集群没有slot，需要重新分配</p><p><img src="/Resources/image-20230601164631241.png" alt="image-20230601164631241"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用下面的命令可以重新分配slot，并让该集群剔除挂掉的节点</span><br>redis-cli --cluster fix 172.17.0.2:6379 --cluster-fix-with-unreachable-masters<br></code></pre></td></tr></table></figure><h3 id="Redis主从集群（海量存储-高并发写-高并发读）"><a href="#Redis主从集群（海量存储-高并发写-高并发读）" class="headerlink" title="Redis主从集群（海量存储+高并发写+高并发读）"></a>Redis主从集群（海量存储+高并发写+高并发读）</h3><h4 id="下载镜像-2"><a href="#下载镜像-2" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="删除之前创建的配置文件"><a href="#删除之前创建的配置文件" class="headerlink" title="删除之前创建的配置文件"></a>删除之前创建的配置文件</h4><p>停止redis容器，删除redis容器，删除对应的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除三个redis容器</span><br>docker stop redis-node1 redis-node2 redis-node3<br>docker <span class="hljs-built_in">rm</span> redis-node1 redis-node2 redis-node3<br><br><span class="hljs-comment"># 删除配置文件</span><br><span class="hljs-built_in">rm</span> -rf /mydata/redis/cluster/<br></code></pre></td></tr></table></figure><h4 id="创建虚拟网卡"><a href="#创建虚拟网卡" class="headerlink" title="创建虚拟网卡"></a>创建虚拟网卡</h4><p>主要是用于redis-cluster能于外界进行网络通信，一般常用桥接模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网卡</span><br>docker network create myredis<br><span class="hljs-comment"># 查看所有网卡</span><br>docker network <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143457332.png" alt="image-20230602143457332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看网卡详细信息</span><br>docker network inspect myredis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143532310.png" alt="image-20230602143532310"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除网卡命令 多个中间 空格隔开(补充)</span><br>docker network <span class="hljs-built_in">rm</span> myredis <br><span class="hljs-comment"># --help </span><br>docker network --<span class="hljs-built_in">help</span> <br></code></pre></td></tr></table></figure><h4 id="批量创建配置文件"><a href="#批量创建配置文件" class="headerlink" title="批量创建配置文件"></a>批量创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf<br><span class="hljs-built_in">cat</span>  &lt;&lt; <span class="hljs-string">EOF &gt; /mydata/redis/cluster/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="hljs-string">port $&#123;port&#125;</span><br><span class="hljs-string">requirepass redis</span><br><span class="hljs-string">bind 0.0.0.0</span><br><span class="hljs-string">protected-mode no</span><br><span class="hljs-string">daemonize no</span><br><span class="hljs-string">appendonly yes</span><br><span class="hljs-string">cluster-enabled yes </span><br><span class="hljs-string">cluster-config-file nodes.conf</span><br><span class="hljs-string">cluster-node-timeout 5000</span><br><span class="hljs-string">cluster-announce-ip  公网ip或者docker容器内部分配的ip</span><br><span class="hljs-string">cluster-announce-port $&#123;port&#125;</span><br><span class="hljs-string">cluster-announce-bus-port 1$&#123;port&#125;</span><br><span class="hljs-string">masterauth redis</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><p><code>port</code>：节点端口；</p><p><code>requirepass</code>：设置密码，访问时需要验证</p><p><code>protected-mode</code>：保护模式，默认值 yes，即开启。开启保护模式以后，需配置 <code>bind ip</code> 或者设置访问密码；关闭保护模式，外部网络可以直接访问；</p><p><code>daemonize</code>：是否以守护线程的方式启动（后台启动），默认 no；</p><p><code>appendonly</code>：是否开启 AOF 持久化模式，默认 no；</p><p><code>cluster-enabled</code>：是否开启集群模式，默认 no；</p><p><code>cluster-config-file</code>：集群节点信息文件；</p><p><code>cluster-node-timeout</code>：集群节点连接超时时间；</p><p><code>cluster-announce-ip</code>：集群节点 IP</p><ul><li><code>注意：</code> 如果你想要你的redis集群可以供外网访问，这里直接填 服务器的IP 地址即可</li><li>如若为了安全，只是在服务器内部进行访问，这里还需要做一些修改。</li></ul><p><code>cluster-announce-port</code>：集群节点映射端口；</p><p><code>cluster-announce-bus-port</code>：集群节点总线端口。</p><p>目录结构：（如果没有 <code>tree</code> 命令先安装 <code>yum install -y tree</code>）</p><p><img src="/Resources/image-20230602144300924.png" alt="image-20230602144300924"></p><h4 id="批量启动容器"><a href="#批量启动容器" class="headerlink" title="批量启动容器"></a>批量启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); \<br><span class="hljs-keyword">do</span> \<br>   docker run -it -d -p <span class="hljs-variable">$&#123;port&#125;</span>:<span class="hljs-variable">$&#123;port&#125;</span> -p 1<span class="hljs-variable">$&#123;port&#125;</span>:1<span class="hljs-variable">$&#123;port&#125;</span> \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf:/usr/local/etc/redis/redis.conf \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/data:/data \<br>  --restart always --name redis-<span class="hljs-variable">$&#123;port&#125;</span> --net myredis \<br>  --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-it</code>：交互</li><li><code>-d</code>：后台运行，容器启动完成后打印容器</li><li><code>--privileged</code>：是否让docker 应用容器 获取宿主机root权限（特殊权限-）</li><li><code>-p</code> :端口映射</li><li><code>-v</code>：文件挂载</li><li><code>--sysctl</code>：参数来设置系统参数，通过这些参数来调整系统性能</li><li><code>--restart always</code>：在容器退出时总是重启容器</li><li><code>--name</code>：给容器取名</li><li><code>--net myredis</code>：使用我们创建的虚拟网卡 （想详细了解，可以去看看Docker 网络方面知识）</li></ul><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps <br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144454028.png" alt="image-20230602144454028"></p><h4 id="创建Redis-Cluster集群"><a href="#创建Redis-Cluster集群" class="headerlink" title="创建Redis Cluster集群"></a>创建Redis Cluster集群</h4><p>可随意选择一个节点进入，创建Redis集群</p><p>以redis-6379容器为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器命令行</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6379 /bin/bash<br><br><span class="hljs-comment"># 创建集群</span><br>redis-cli  -a redis --cluster create ip:6379 ip:6380 ip:6381 ip:6382 ip:6383 ip:6384   --cluster-replicas 1<br><br><span class="hljs-comment"># 输入yes</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144851659.png" alt="image-20230602144851659"></p><p><img src="/Resources/image-20230602144912764.png" alt="image-20230602144912764"></p><h4 id="查看集群信息-1"><a href="#查看集群信息-1" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis客户端</span><br>redis-cli -c -a redis<br><br><span class="hljs-comment"># 查看信息</span><br>cluster info<br><br><span class="hljs-comment"># 查看信息</span><br>cluster nodes<br><br><span class="hljs-comment"># 退出redis 和 退出容器</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145031973.png" alt="image-20230602145031973"></p><p><img src="/Resources/image-20230602145107211.png" alt="image-20230602145107211"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>打开两个连接，分别进入6379和8381容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-6379 redis-cli -c -a redis<br><span class="hljs-comment"># 除了端口为6379的容器，其他容器都需要加上 -p xxxx，因为容器内部的端口不是6379，必须指定参数</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6380 redis-cli -c -a redis -p 6380<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145439120.png" alt="image-20230602145439120"></p><h4 id="外网测试"><a href="#外网测试" class="headerlink" title="外网测试"></a>外网测试</h4><p>使用 <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">Another Redis Desktop Manager </a>连接redis</p><blockquote><p>单个连接</p></blockquote><p><img src="/Resources/image-20230602145709520.png" alt="image-20230602145709520"></p><blockquote><p>连接集群</p></blockquote><p><img src="/Resources/image-20230602145936243.png" alt="image-20230602145936243"></p><p><img src="/Resources/image-20230602150008387.png" alt="image-20230602150008387"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>连接ARDM连接6382端口的redis，6382中没有数据，且使用<code> info replication</code> 显示从节点连接数为0</p><p><img src="/Resources/image-20230602152054362.png" alt="image-20230602152054362"></p><p>查看6382的信息能看到主节点的ip，但是master_link_status:down 表示没有连接上主节点</p><p><img src="/Resources/image-20230602152212215.png" alt="image-20230602152212215"></p><p>解决：所有的配置文件加上这一句话，redis的连接密码，已修改之前的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">masterauth redis<br></code></pre></td></tr></table></figure><p>重启之后6379中的数据在6382中出现了</p><p><img src="/Resources/image-20230602153239637.png" alt="image-20230602153239637"></p><p>主节点中，从节点的连接数也变成1</p><p><img src="/Resources/image-20230602153749398.png" alt="image-20230602153749398"></p><p>从节点中master_link_status:up</p><p><img src="/Resources/image-20230602153736068.png" alt="image-20230602153736068"></p><p>并且master_replid也一致了</p><h4 id="批量停止容器（补充）"><a href="#批量停止容器（补充）" class="headerlink" title="批量停止容器（补充）"></a>批量停止容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker stop redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量删除容器（补充）"><a href="#批量删除容器（补充）" class="headerlink" title="批量删除容器（补充）"></a>批量删除容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker <span class="hljs-built_in">rm</span> redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量重启容器（补充）"><a href="#批量重启容器（补充）" class="headerlink" title="批量重启容器（补充）"></a>批量重启容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker restart redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）"><a href="#Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）" class="headerlink" title="Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）"></a>Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）</h3><p>基于第二步的主从集群，继续搭建主从集群+哨兵：这里搭建的是3主3从3哨兵</p><p>待完成：云服务器+Docker实现</p><h3 id="Redis主从集群-哨兵（虚拟机-Docker-compose实现）"><a href="#Redis主从集群-哨兵（虚拟机-Docker-compose实现）" class="headerlink" title="Redis主从集群+哨兵（虚拟机+Docker-compose实现）"></a>Redis主从集群+哨兵（虚拟机+Docker-compose实现）</h3><h4 id="Docker-compose搭建Redis-Sentinel"><a href="#Docker-compose搭建Redis-Sentinel" class="headerlink" title="Docker-compose搭建Redis Sentinel"></a>Docker-compose搭建Redis Sentinel</h4><p>文件组织格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-cluster<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">redis-sentinel</span><br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h5 id="1-Master-x2F-Slave"><a href="#1-Master-x2F-Slave" class="headerlink" title="1. Master&#x2F;Slave"></a>1. Master&#x2F;Slave</h5><p>进入<code>redis-cluster</code>文件夹，创建<code>docker-compose.yml</code>文件，<br>下面的Compose文件设置了1Master 2Slave</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-master</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/master:/data</span><br><br>  <span class="hljs-attr">slave1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6380</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave1:/data</span><br><br><br>  <span class="hljs-attr">slave2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6381</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave2:/data</span><br></code></pre></td></tr></table></figure><blockquote><p><code>--slaveof</code>可以换成<code>-replicaof</code><br>注意，如果设置了Redis客户端访问密码requirepass， 那么也要设置相同的副本集同步密码masterauth。</p></blockquote><p>另外我们后面使用哨兵模式能够完成故障转移，现有的Master可能会变成Slave，故在当前Master容器中也要携带masterauth参数。</p><h6 id="启动并查看容器"><a href="#启动并查看容器" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>会产生3个Redis容器，分别映射到宿主机6379、6380、6381端口， 默认连接在 <strong><code>redis-cluster-default</code>网桥</strong>（这个后面会用到，网桥的名字可以在执行<code>docker-compose up -d</code>中看到，见下图）。<br><img src="/Resources/Pasted%20image%2020220922163825.png"><br><img src="/Resources/Pasted%20image%2020220922163938.png"></p><blockquote><p>使用工具连接Redis时需要使用密码redispwd</p></blockquote><h5 id="2-Redis-Sentinel"><a href="#2-Redis-Sentinel" class="headerlink" title="2. Redis Sentinel"></a>2. Redis Sentinel</h5><p>很明显我们即将搭建的Sentinel容器需要能访问到以上3个容器，故需要在形成Sentinel容器时使用外置的 <strong><code>redis-cluster-default</code>网桥</strong></p><h6 id="进入redis-sentinel文件夹，创建docker-compose-yml文件，"><a href="#进入redis-sentinel文件夹，创建docker-compose-yml文件，" class="headerlink" title="进入redis-sentinel文件夹，创建docker-compose.yml文件，"></a>进入redis-sentinel文件夹，创建docker-compose.yml文件，</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">sentinel1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26379</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26380</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-3</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26381</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">redis-cluster_default</span><br></code></pre></td></tr></table></figure><h6 id="创建哨兵文件，将如下内容拷贝进去"><a href="#创建哨兵文件，将如下内容拷贝进去" class="headerlink" title="创建哨兵文件，将如下内容拷贝进去"></a>创建哨兵文件，将如下内容拷贝进去</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs conf">port 26379  <br>dir /tmp  <br>sentinel monitor mymaster 192.168.153.135 6379 2  <br>sentinel down-after-milliseconds mymaster 30000  <br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><p>带注释版</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 自定义集群名，其中192.168.153.135为 redis-master 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2）  </span><br><span class="hljs-section"># sentinel通讯端口  </span><br>port 26379  <br>dir /tmp  <br><span class="hljs-section"># sentinel需要监控的master/slaver信息，格式为sentinel monitor <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterIP</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterPort</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>  </span><br><span class="hljs-section"># 其中<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>应该小于集群中slave的个数，当失效的节点数超过了<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>,则认为整个体系结构失效  </span><br>sentinel monitor mymaster 192.168.153.135 6379 2  <br><span class="hljs-section"># master被当前sentinel实例认定为失效的间隔时间，格式为sentinel down-after-milliseconds <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">milliseconds</span>&gt;</span></span>  </span><br>sentinel down-after-milliseconds mymaster 30000  <br><span class="hljs-section"># 当新master产时，同时进行“slaveof”到新master并进行同步复制的slave个数  </span><br><span class="hljs-section"># 在salve执行salveof同步时，将会终止客户端请求。  </span><br><span class="hljs-section"># 此值较大,意味着“集群”终止客户端请求的时间总和和较大。  </span><br><span class="hljs-section"># 此值较小,意味着“集群”在故障转移期间，多个salve向客户端提供服务时仍然使用旧数据。  </span><br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br><span class="hljs-section"># failover过期时间。当failover开始后，在此时间内仍然没有触发任何failover操作，当前sentinel将会认为此次failoer失败。  </span><br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><h6 id="将哨兵文件复制三份到docker-compose同一目录下"><a href="#将哨兵文件复制三份到docker-compose同一目录下" class="headerlink" title="将哨兵文件复制三份到docker-compose同一目录下"></a>将哨兵文件复制三份到docker-compose同一目录下</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-sentinel<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h6 id="启动并查看容器-1"><a href="#启动并查看容器-1" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>生成3个Sentinel容器。<br><img src="/Resources/Pasted%20image%2020220922163916.png"></p><h5 id="3-运行测试"><a href="#3-运行测试" class="headerlink" title="3. 运行测试"></a>3. 运行测试</h5><h6 id="测试Master-x2F-Slave"><a href="#测试Master-x2F-Slave" class="headerlink" title="测试Master&#x2F;Slave"></a>测试Master&#x2F;Slave</h6><p>使用可视化工具对6379（master节点）添加数据后，其他节点同步数据如图：<br><img src="/Resources/Pasted%20image%2020220921161453.png"></p><p>使用springboot应用添加数据后（添加的数据是<code>com.cqupt.dao.UserDao</code>），其他节点同步数据如图：（需要在<code>application.yml</code>中配置密码）<br><img src="/Resources/Pasted%20image%2020220921162153.png"></p><h6 id="测试Sentinel"><a href="#测试Sentinel" class="headerlink" title="测试Sentinel"></a>测试Sentinel</h6><p>查看哨兵的日志：<br><img src="/Resources/Pasted%20image%2020220922164106.png"></p><blockquote><p>上述日志中可以看出，哨兵监听master和slave节点</p></blockquote><p>等待30s后（防止其他错误发生，例如问题1等）停止redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164132.png"></p><p>通过redis可视化工具查看redis集群信息<br><img src="/Resources/Pasted%20image%2020220922142732.png"></p><blockquote><p>6380写入数据，同样可以在6381查看数据，另外6381不能写入数据，符合从节点的属性，因此在6379主节点挂掉后，6380成为了新的主节点，6381依然是从节点。</p></blockquote><p>打开redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164250.png"></p><blockquote><p>上述日志表明哨兵检测到原master重新启动，将原master节点变成新master的从节点<br>此时，6380写入数据，同样可以在6381，6379查看数据。<br>测试省略！</p></blockquote><h6 id="验证Sentinel"><a href="#验证Sentinel" class="headerlink" title="验证Sentinel"></a>验证Sentinel</h6><p>进入redis-slave-1发现已经变成了主节点<br><img src="/Resources/Pasted%20image%2020220922164945.png"></p><p>进入redis-master发现已经变成了从节点<br><img src="/Resources/Pasted%20image%2020220922165048.png"></p><h4 id="可能遇到的错误信息"><a href="#可能遇到的错误信息" class="headerlink" title="可能遇到的错误信息"></a>可能遇到的错误信息</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h5><p>在启动之后查看哨兵的日志可能出现如图所示（没有关闭master，但是检测到了master关闭）<br><img src="/Resources/Pasted%20image%2020220922143955.png"><br><strong>这就需要开放端口访问，见虚拟机关闭防火墙</strong></p><h5 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h5><p>但是经过测试后发现6380和6381可以同步数据，79获取不到在80新添加的数据，查看6379的日志发现连接不上master<br><img src="/Resources/Pasted%20image%2020220922144318.png"></p><p><strong>检查<code>docker-compose.yml</code>文件中是否每个节点都添加了<code>masterauth redispwd</code> 选项，当时在主节点中添加导致错误</strong><br><img src="/Resources/Pasted%20image%2020220922153640.png"></p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL-5-7"><a href="#MySQL-5-7" class="headerlink" title="MySQL 5.7"></a>MySQL 5.7</h3><h4 id="1、搜索镜像-3"><a href="#1、搜索镜像-3" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214516.png" alt="Pasted image 20220711214516.png"></p><h4 id="2、安装指定版本-3"><a href="#2、安装指定版本-3" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><p><img src="/Resources/Pasted%20image%2020220711214709.png" alt="Pasted image 20220711214709.png"><br><img src="/Resources/Pasted%20image%2020220711214718.png" alt="Pasted image 20220711214718.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-2"><a href="#3、查看已安装的镜像-2" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214829.png" alt="Pasted image 20220711214829.png"></p><h4 id="4、创建挂载的配置文件"><a href="#4、创建挂载的配置文件" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/conf<br><br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/&#123;data,conf,init&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动"><a href="#5、创建实例并启动" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3307:3306 --name mysql -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题，QWEIOP1234</span><br><br>部分参数说明<br>-p 3306:3306:将容器的3306端口映射到主机的3306端口<br><br>: 冒号前是宿主机的路径，冒号后是容器的路径<br>-v /mydata/mysql/conf:/etc/mysql:将配置文件夹挂载到主机<br>-v /mydata/mysql/log:/var/log/mysql:将日志文件夹挂载到主机<br>-v /mydata/mysql/data:/var/lib/mysql/:将配置文件夹挂载到主机<br>-e MYSQL_ROOT_PASSWORD=root:初始化root用户的密码<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220711215847.png" alt="Pasted image 20220711215847.png"></p><p>查看进程<code>docker ps</code><br><img src="/Resources/Pasted%20image%2020220712093152.png" alt="Pasted image 20220712093152.png"></p><p><code>docker exec -it mysql /bin/bash</code> 进入装载mysql的容器<br><img src="/Resources/Pasted%20image%2020220712093710.png" alt="Pasted image 20220712093710.png"><br><code>exit</code>退出装载mysql的容器</p><h4 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h4><h5 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mydata/mysql/conf<br></code></pre></td></tr></table></figure><h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><blockquote><p>按i进入编辑模式，按esc退出编辑模式，输入:wq保存退出</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi my.cnf<br></code></pre></td></tr></table></figure><p><code>my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[client]<br>default-character-set=utf8<br>[mysql]<br>default-character-set=utf8<br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></td></tr></table></figure><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql<br></code></pre></td></tr></table></figure><h5 id="进入交互模式"><a href="#进入交互模式" class="headerlink" title="进入交互模式"></a>进入交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql /bin/bash<br></code></pre></td></tr></table></figure><h5 id="查看容器的配置文件"><a href="#查看容器的配置文件" class="headerlink" title="查看容器的配置文件"></a>查看容器的配置文件</h5><p><img src="/Resources/Pasted%20image%2020220712102635.png" alt="Pasted image 20220712102635.png"></p><h5 id="退出交互模式"><a href="#退出交互模式" class="headerlink" title="退出交互模式"></a>退出交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="7、使用可视化数据库连接MySQL"><a href="#7、使用可视化数据库连接MySQL" class="headerlink" title="7、使用可视化数据库连接MySQL"></a>7、使用可视化数据库连接MySQL</h4><blockquote><p>注意，ip可能会改变，可以在虚拟机中使用<code>ip a</code>查看</p></blockquote><p><img src="/Resources/Pasted%20image%2020220711220215.png" alt="Pasted image 20220711220215.png"></p><blockquote><p>如果用的服务器的数据库，有可能被拒绝链接</p></blockquote><p>解决办法：<a href="https://blog.csdn.net/iiiiiilikangshuai/article/details/100905996">is not allowed to connect to this mysql server_可行的code的博客-CSDN博客</a></p><blockquote><p>如果用的虚拟机，有可能timed out: connect</p></blockquote><p>解决办法：关闭虚拟机的防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="MySQL-8"><a href="#MySQL-8" class="headerlink" title="MySQL 8"></a>MySQL 8</h3><h4 id="1、搜索镜像-4"><a href="#1、搜索镜像-4" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><h4 id="2、安装指定版本-4"><a href="#2、安装指定版本-4" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:latest 为<br><span class="hljs-comment"># 此时的latest 为8.0.27</span><br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-3"><a href="#3、查看已安装的镜像-3" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><h4 id="4、创建挂载的配置文件-1"><a href="#4、创建挂载的配置文件-1" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bask">mkdir -p /mydata/mysql8/data<br>mkdir -p /mydata/mysql8/log<br>mkdir -p /mydata/mysql8/conf<br>mkdir -p /mydata/mysql8/mysql-files<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># 设置3306端口</span><br>port=3306<br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=1000<br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br>max_connect_errors=100<br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br>character-set-server=utf8mb4<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br>default_authentication_plugin=mysql_native_password<br><span class="hljs-comment">#是否对sql语句大小写敏感，1表示不敏感</span><br>lower_case_table_names = 1<br><span class="hljs-comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span><br><span class="hljs-comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span><br>interactive_timeout = 1800<br>wait_timeout = 1800<br><span class="hljs-comment">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span><br><span class="hljs-comment">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span><br>lock_wait_timeout = 3600<br><span class="hljs-comment">#内部内存临时表的最大值。</span><br><span class="hljs-comment">#比如大数据量的group by ,order by时可能用到临时表，</span><br><span class="hljs-comment">#超过了这个值将写入磁盘，系统IO压力增大</span><br>tmp_table_size = 64M<br>max_heap_table_size = 64M<br>[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default-character-set=utf8mb4<br>[client]<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br>port=3306<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动-1"><a href="#5、创建实例并启动-1" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8 \<br>-v /mydata/mysql8/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8/data:/var/lib/mysql \<br>-v /mydata/mysql8/log:/var/log \<br>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \<br>-p 3307:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题</span><br><br><span class="hljs-comment"># 如果启动报错，确保data目录为空，再排查其他错误</span><br></code></pre></td></tr></table></figure><h3 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h3><p>以 <code>MySQL 8</code> 为例</p><p>安装好一台后，再以相同方式安装另一台如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/conf<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/mysql-files<br><br><span class="hljs-comment"># 配置文件复制 mysql8 的</span><br><br>docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8_slave \<br>-v /mydata/mysql8_slave/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8_slave/data:/var/lib/mysql \<br>-v /mydata/mysql8_slave/log:/var/log \<br>-v /mydata/mysql8_slave/mysql-files:/var/lib/mysql-files \<br>-p 3308:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br></code></pre></td></tr></table></figure><p>两台 <code>MySQL</code> 服务器如下：</p><p><img src="/Resources/image-20230629094614377.png" alt="image-20230629094614377"></p><p>修改 <code>mysql8</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]主服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#[必须]启用二进制日志,指名路径。</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">/var/log/mysql/binlog/atguigu-bin</span><br></code></pre></td></tr></table></figure><p>修改 <code>mysql8_slave</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]从服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 这里应该要启用二进制日志，但仅作演示，所以就省略了</span><br></code></pre></td></tr></table></figure><p>修改 <code>binlog</code> 文件夹权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exit</span> -it mysql8 /bin/bash<br><span class="hljs-built_in">cd</span> /var/log<br><span class="hljs-built_in">mkdir</span> -p mysql/binlog<br><span class="hljs-built_in">chown</span> -R -v mysql:mysql binlog<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql8 mysql8_slave<br></code></pre></td></tr></table></figure><p>使用可视化软件连接两个容器或者分别进入容器中的 <code>MySQL</code> </p><p>在 主机：<code>mysql8</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;主机密码&#x27;;<br><br>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;<br><br>mysql&gt; show master status;<br># 保存File和Position，下一步会用到<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230629100530400.png" alt="image-20230629100530400"></p><p>在从机：<code>mysql8_slave</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; change master to master_host=&#x27;主机ip&#x27;, master_user=&#x27;slave&#x27;, master_password=&#x27;主机密码&#x27;, master_port=主机端口, master_log_file=&#x27;atguigu-bin.000001&#x27;, master_log_pos=1531, master_connect_retry=30;<br># master_log_file 是上面的File<br># master_log_pos  是上面的Position<br><br><br>mysql&gt; show slave status;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|NO              |NO               |<br>+----------------+-----------------+<br><br>mysql&gt; start slave;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|Yes             |Yes              |<br>+----------------+-----------------+<br># Yes 说明启动数据同步成功<br></code></pre></td></tr></table></figure><p>验证测试：</p><p>主机创建数据库 <code>test_bck</code></p><p>创建数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE account(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>NAME VARCHAR(15),<br>balance DECIMAL(10,2)<br>);<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO test_bck.account (id, NAME, balance) VALUES (1, &#x27;wtt&#x27;, 100.00)<br></code></pre></td></tr></table></figure><p>刷新从数据库的连接，并进行查询，可以发现数据已经同步了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from test_bck.account;<br>+--+----+-------+<br>|id|NAME|balance|<br>+--+----+-------+<br>|1 |wtt |100.00 |<br>+--+----+-------+<br></code></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 从机执行<br># 停止同步<br>mysql&gt; stop slave;<br># 如果再次使用数据同步，需要重新配置主从<br>mysql&gt; reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)<br></code></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="1、搜索镜像-5"><a href="#1、搜索镜像-5" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-5"><a href="#2、安装指定版本-5" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx:1.19.10<br></code></pre></td></tr></table></figure><blockquote><p><img src="/./Resources/image-20230718113454570.png" alt="image-20230718113454570"><br>问题：报错<br>原因：没有配置DNS<br>解决：配置DNS解析服务器<a href="%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1">配置虚拟机网卡</a><br>添加DNS1&#x3D;114.114.114.114, DNS2&#x3D;8.8.8.8</p></blockquote><h3 id="3、查看已安装的镜像-4"><a href="#3、查看已安装的镜像-4" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="3-5、创建挂载的配置文件"><a href="#3-5、创建挂载的配置文件" class="headerlink" title="3.5、创建挂载的配置文件"></a>3.5、创建挂载的配置文件</h3><blockquote><p>映射文件前，首先要<strong>先创建好</strong>才可以映射！<br>如果没有创建就执行的话，docker会默认映射文件夹的类型📂（并且会自动创建相应的文件夹），这里就会自动创建software下的nginx文件夹📂和nginx.conf文件夹📂<br> <img src="/./Resources/image-20230718113501876.png" alt="image-20230718113501876"></p></blockquote><p>配置<code>nginx.conf</code>有两种方法：<br>第一种：网上找<br><strong>第二种：复制容器内的<code>nginx.conf</code></strong></p><ul><li>删除刚刚<code>docker</code>自动创建的<code>nginx.conf</code>📂  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf nginx.conf<br></code></pre></td></tr></table></figure></li><li>复制  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nginx:/etc/nginx/nginx.conf /root/software/nginx/nginx.conf<br></code></pre></td></tr></table></figure></li></ul><h3 id="4、创建实例并启动-2"><a href="#4、创建实例并启动-2" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 80:80 --name nginx -d -v /root/software/nginx/nginx.conf:/etc/nginx/nginx.conf nginx:1.19.10 <br><br>docker run -p 80:80 --name nginx -d -v /root/html:/usr/share/nginx/html nginx:1.19.10 <br></code></pre></td></tr></table></figure><blockquote><p>当挂载配置文件时：使用nginx的代理服务器功能，实现反向代理，负载均衡功能<br>当挂载nginx家目录时（家目录的位置在第8部分）：使用nginx的服务器功能<br><strong>也可以都挂载，两个-v</strong></p></blockquote><blockquote><p>这里没有映射整个目录，而仅仅是单个文件，说明该目录还有其他文件不能被覆盖！<br><img src="/./Resources/image-20230718113520721.png" alt="image-20230718113520721"></p></blockquote><h3 id="5、查看启动的服务-1"><a href="#5、查看启动的服务-1" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试Nginx"><a href="#6、测试Nginx" class="headerlink" title="6、测试Nginx"></a>6、测试Nginx</h3><p><img src="/./Resources/image-20230718113526938.png" alt="image-20230718113526938"></p><h3 id="7、进入容器"><a href="#7、进入容器" class="headerlink" title="7、进入容器"></a>7、进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="8、修改页面"><a href="#8、修改页面" class="headerlink" title="8、修改页面"></a>8、修改页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name index.html<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718113533242.png" alt="image-20230718113533242"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/nginx/html<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;i love docker&quot;</span> &gt; index.html<br></code></pre></td></tr></table></figure><p><img src="/./Resources/image-20230718113539596.png" alt="image-20230718113539596"></p><h3 id="9、挂载配置文件"><a href="#9、挂载配置文件" class="headerlink" title="9、挂载配置文件"></a>9、挂载配置文件</h3><p>首先查找nginx是否有配置文件<br><img src="/./Resources/image-20230718113547625.png" alt="image-20230718113547625"><br>所以应该在宿主机中创建配置文件以映射到这个文件</p><p>官网确认：</p><blockquote><p><code>:ro</code> ：只读<br><img src="/./Resources/image-20230718113552193.png" alt="image-20230718113552193"></p></blockquote><p><strong>简易版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br><br>docker run --name nginx-test -p 80:80 -d nginx<br><br><span class="hljs-built_in">mkdir</span> -p /mydata/nginx/&#123;conf,html,logs&#125;<br><br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/nginx.conf /mydata/nginx/conf/nginx.conf<br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/conf.d /mydata/nginx/conf/conf.d<br>docker <span class="hljs-built_in">cp</span> nginx-test:/usr/share/nginx/html/ /mydata/nginx/<br><br>docker stop nginx-test<br>docker <span class="hljs-built_in">rm</span> nginx-test<br><br><br><br>docker run \<br>-p 80:80 \<br>--name nginx \<br>-v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v /mydata/nginx/conf/conf.d:/etc/nginx/conf.d \<br>-v /mydata/nginx/log:/var/log/nginx \<br>-v /mydata/nginx/html:/usr/share/nginx/html \<br>-d nginx<br></code></pre></td></tr></table></figure><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="1、下载-RabbitMQ-镜像"><a href="#1、下载-RabbitMQ-镜像" class="headerlink" title="1、下载 RabbitMQ 镜像"></a>1、下载 RabbitMQ 镜像</h3><p>下载最新版本的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p>更多版本的镜像可以访问 Docker 官网：<code>https://hub.docker.com/_/rabbitmq?tab=tags</code></p><h3 id="2、创建并运行-RabbitMQ-容器"><a href="#2、创建并运行-RabbitMQ-容器" class="headerlink" title="2、创建并运行 RabbitMQ 容器"></a>2、创建并运行 RabbitMQ 容器</h3><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 15672:15672 -p 5672:5672 \<br>-e RABBITMQ_DEFAULT_USER=admin \<br>-e RABBITMQ_DEFAULT_PASS=admin \<br>--hostname myRabbit \<br>--name rabbitmq \<br>rabbitmq:management<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d：表示在后台运行容器；</li><li>-p：将容器的端口 5672（应用访问端口）和 15672 （控制台Web端口号）映射到主机中；</li><li>-e：指定环境变量：<ul><li>RABBITMQ_DEFAULT_VHOST：默认虚拟机名；</li><li>RABBITMQ_DEFAULT_USER：默认的用户名；</li><li>RABBITMQ_DEFAULT_PASS：默认的用户密码；</li></ul></li><li>–hostname：指定主机名（RabbitMQ 的一个重要注意事项是它根据所谓的 节点名称 存储数据，默认为主机名）；</li><li>–name rabbitmq：设置容器名称；</li><li>rabbitmq：容器使用的镜像名称；</li></ul><h4 id="查看启动情况："><a href="#查看启动情况：" class="headerlink" title="查看启动情况："></a>查看启动情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -l<br>------------<br>CONTAINER ID   IMAGE                 COMMAND                  CREATED              STATUS              PORTS                                                                                                                                                 NAMES<br>5df031b58d0f   rabbitmq:management   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbitmq<br></code></pre></td></tr></table></figure><p>设置 docker 启动的时候自动启动（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update rabbitmq --restart=always<br></code></pre></td></tr></table></figure><h3 id="3、访问-RabbitMQ-后台管理"><a href="#3、访问-RabbitMQ-后台管理" class="headerlink" title="3、访问 RabbitMQ 后台管理"></a>3、访问 RabbitMQ 后台管理</h3><p>浏览器输入地址：<a href="http://ip:15672/">http://ip:15672</a> 即可访问后台管理页面，这里的 ip 为运行 RabbitMQ 所在的服务器的 IP 地址；<br>默认的用户名和密码都是 guest（如果没有在容器创建的时候指定用户名密码）；<br>但由于我们启动的时候设置了默认的用户名和密码，所以我们可以使用设置的用户名和密码登录。(admin.admin)<br><img src="/Resources/Pasted%20image%2020220713154424.png" alt="Pasted image 20220713154424.png"><br><img src="/Resources/Pasted%20image%2020220713154355.png" alt="Pasted image 20220713154355.png"></p><p>提示： 如果无法访问可以尝试开启防火墙 15672 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=15672/tcp --permanent　　　　　　　　<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>安装之前你需要准备一个mysql，当前安装方式是将数据持久化到数据库中的，这里的部署是单机模式</p><h3 id="1、Docker-拉取镜像"><a href="#1、Docker-拉取镜像" class="headerlink" title="1、Docker 拉取镜像"></a>1、Docker 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nacos/nacos-server<br></code></pre></td></tr></table></figure><h3 id="2、挂载目录"><a href="#2、挂载目录" class="headerlink" title="2、挂载目录"></a>2、挂载目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#新建nacos目录</span><br>mkdir -p <span class="hljs-regexp">/mydata/</span>nacos<br></code></pre></td></tr></table></figure><h3 id="3、启动nacos并复制文件到宿主机，关闭容器"><a href="#3、启动nacos并复制文件到宿主机，关闭容器" class="headerlink" title="3、启动nacos并复制文件到宿主机，关闭容器"></a>3、启动nacos并复制文件到宿主机，关闭容器</h3><p>这一步启动nacos是为了将nacos里面的文件拷贝出到挂载目录中，这样我们就可以直接修改挂载目录中文件来映射到容器里面去了</p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 8848:8848 --name nacos -d nacos/nacos-server<br></code></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/logs/ /mydata/nacos/logs/<br>docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/conf/ /mydata/nacos/conf/<br></code></pre></td></tr></table></figure><h4 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> -f nacos<br></code></pre></td></tr></table></figure><h3 id="4、mysql中创建nacos所需的表"><a href="#4、mysql中创建nacos所需的表" class="headerlink" title="4、mysql中创建nacos所需的表"></a>4、mysql中创建nacos所需的表</h3><ul><li>mysql中新建一个库，名字可自定义，这里就用nacos-config</li><li>从 <a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">nacos&#x2F;nacos-db.sql</a> 复制sql语句，在nacos-config库中执行，创建所需的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="5、再次启动nacos"><a href="#5、再次启动nacos" class="headerlink" title="5、再次启动nacos"></a>5、再次启动nacos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name nacos -p 8848:8848  -p 9848:9848 -p 9849:9849 --privileged=<span class="hljs-literal">true</span> -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -v /mydata/nacos/logs/:/home/nacos/logs -v /mydata/nacos/conf/:/home/nacos/conf/ --restart=always nacos/nacos-server<br></code></pre></td></tr></table></figure><ul><li>docker run -d ： 启动容器 -d是后台启动并返回容器id的意思</li><li>-name nacos ：为容器指定一个名称</li><li>-p 8848:8848 -p 9848:9848 -p 9849:9849 ： 指定端口映射，注意这里的p不能大写，大写是随机端口映射</li><li>–privileged&#x3D;true ： 扩大容器内的权限，将容器内的权限变为root权限，不加的话就是普通用户权限，可能会出现cannot open directory</li><li>-e JVM_XMS&#x3D;256m ： 为jvm启动时分配的内存</li><li>-e JVM_XMX&#x3D;256m ： 为jvm运行过程中分配的最大内存</li><li>-e MODE&#x3D;standalone ： 使用 standalone模式（单机模式）,MODE值有cluster（集群）模式&#x2F;standalone模式两种，MODE必须大写</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;logs&#x2F;:&#x2F;home&#x2F;nacos&#x2F;logs : 将容器的&#x2F;home&#x2F;nacos&#x2F;logs目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;logs</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;conf&#x2F;:&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;： 将容器的&#x2F;home&#x2F;nacos&#x2F;conf目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;conf</li><li>–restart&#x3D;always ：重启docker时，自动启动相关容器</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要在防火墙开放相关端口，如果你是云服务器，开放安全组，下面提供相关语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 开放端口8848 9848 9849</span><br>firewall-cmd --zone=public --add-port=8848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9849/tcp --permanent<br><br><span class="hljs-comment">## 重启防火墙</span><br>firewall-cmd --reload<br><br><span class="hljs-comment">## 查看所有开启的端口</span><br>firewall-cmd --zone=public --list-ports<br><br><span class="hljs-comment">## 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件-1"><a href="#6、修改配置文件-1" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://192.168.153.135:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br><span class="hljs-comment"># 上面的 192.168.153.135 写你的 MySQL 数据库的 IP</span><br></code></pre></td></tr></table></figure><h3 id="7、验证（可选）"><a href="#7、验证（可选）" class="headerlink" title="7、验证（可选）"></a>7、验证（可选）</h3><p>验证配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 因为我们在第三步已经复制了logs和conf到了我们的宿主机里面，那么我们可以直接修改application.properties文件映射到容器里，可以通过下面的语句来查看</span><br><br><span class="hljs-comment">## 进入到nacos容器里</span><br>docker <span class="hljs-built_in">exec</span> -it nacos /bin/bash<br><br><span class="hljs-comment">## 查看application.properties文件</span><br><span class="hljs-built_in">cat</span> /home/nacos/conf/application.properties<br><br><span class="hljs-comment">## 退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>验证数据库是否连接成功：</p><p>进入nacos，新建命名空间，查看表tenant_info是否有对应的信息</p><h3 id="8、问题"><a href="#8、问题" class="headerlink" title="8、问题"></a>8、问题</h3><p>第六步修改配置文件，最初的版本为：数据库ip为localhost</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://localhost:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br></code></pre></td></tr></table></figure><p>第一次可以运行，但是当虚拟机重启时，就连不上console了，经过一顿百度，可能是因为这个配置文件是错误的，nacos自动使用了内置的数据源，内置数据源是基于内存的，断电消失，因此重启之后，数据也没有了，导致进不去了，之后有时间使用docker 重新建一个实例化一个容器，然后再试试</p><h2 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull minio/minio<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/minio/config<br><span class="hljs-built_in">mkdir</span> -p /mydata/minio/data<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--name minio \<br>-p 9000:9000 \<br>-p 9001:9001 \<br>-e <span class="hljs-string">&quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \<br>-v /mydata/minio/data:/data \<br>-v /mydata/minio/config:/root/.minio \<br>-d minio/minio server /data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[MinIO Console](http://192.168.153.135:9001/login)<br></code></pre></td></tr></table></figure><h2 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h2><p>一、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><p>二、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p -m 777 /mydata/xxl-job/data/applogs<br></code></pre></td></tr></table></figure><p>三、创建application.properties文件，<strong>修改数据库相关信息</strong>然后放入到&#x2F;mydata&#x2F;xxl-job目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">### web</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/xxl-job-admin</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### actuator</span><br><span class="hljs-attr">management.server.servlet.context-path</span>=<span class="hljs-string">/actuator</span><br><span class="hljs-attr">management.health.mail.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### resources</span><br><span class="hljs-attr">spring.mvc.servlet.load-on-startup</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/static/</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### freemarker</span><br><span class="hljs-attr">spring.freemarker.templateLoaderPath</span>=<span class="hljs-string">classpath:/templates/</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.request-context-attribute</span>=<span class="hljs-string">request</span><br><span class="hljs-attr">spring.freemarker.settings.number_format</span>=<span class="hljs-string">0.##########</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="hljs-comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, datasource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://192.168.153.135:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### datasource-pool</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.datasource.hikari.minimum-idle</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">spring.datasource.hikari.auto-commit</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.hikari.idle-timeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">spring.datasource.hikari.pool-name</span>=<span class="hljs-string">HikariCP</span><br><span class="hljs-attr">spring.datasource.hikari.max-lifetime</span>=<span class="hljs-string">900000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-timeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-test-query</span>=<span class="hljs-string">SELECT 1</span><br><span class="hljs-attr">spring.datasource.hikari.validation-timeout</span>=<span class="hljs-string">1000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, email</span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-attr">spring.mail.port</span>=<span class="hljs-string">25</span><br><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.from</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, access token</span><br><span class="hljs-attr">xxl.job.accessToken</span>=<span class="hljs-string">default_token</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span><br><span class="hljs-attr">xxl.job.i18n</span>=<span class="hljs-string">zh_CN</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">## xxl-job, triggerpool max size</span><br><span class="hljs-attr">xxl.job.triggerpool.fast.max</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">xxl.job.triggerpool.slow.max</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, log retention days</span><br><span class="hljs-attr">xxl.job.logretentiondays</span>=<span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>四、导入mysql数据库，执行tables_xxl_job.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<br># XXL<span class="hljs-operator">-</span>JOB v2<span class="hljs-number">.3</span><span class="hljs-number">.1</span><br># Copyright (c) <span class="hljs-number">2015</span><span class="hljs-operator">-</span>present, xuxueli.<br> <br><span class="hljs-keyword">CREATE</span> database if <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `xxl_job` <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci;<br>use `xxl_job`;<br> <br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_info` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;作者&#x27;</span>,<br>  `alarm_email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;报警邮件&#x27;</span>,<br>  `schedule_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;NONE&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度类型&#x27;</span>,<br>  `schedule_conf` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度配置，值含义取决于调度类型&#x27;</span>,<br>  `misfire_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度过期策略&#x27;</span>,<br>  `executor_route_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器路由策略&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_block_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;阻塞处理策略&#x27;</span>,<br>  `executor_timeout` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;任务执行超时时间，单位秒&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `glue_updatetime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE更新时间&#x27;</span>,<br>  `child_jobid` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;子任务ID，多个逗号分隔&#x27;</span>,<br>  `trigger_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度状态：0-停止，1-运行&#x27;</span>,<br>  `trigger_last_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;上次调度时间&#x27;</span>,<br>  `trigger_next_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;下次调度时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `executor_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器地址，本次执行的地址&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_sharding_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务分片参数，格式如 1/2&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `trigger_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `trigger_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-结果&#x27;</span>,<br>  `trigger_msg` text COMMENT <span class="hljs-string">&#x27;调度-日志&#x27;</span>,<br>  `handle_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-时间&#x27;</span>,<br>  `handle_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-状态&#x27;</span>,<br>  `handle_msg` text COMMENT <span class="hljs-string">&#x27;执行-日志&#x27;</span>,<br>  `alarm_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `I_trigger_time` (`trigger_time`),<br>  KEY `I_handle_code` (`handle_code`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log_report` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `trigger_day` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `running_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;运行中-日志数量&#x27;</span>,<br>  `suc_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行成功-日志数量&#x27;</span>,<br>  `fail_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行失败-日志数量&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_trigger_day` (`trigger_day`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_logglue` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_registry` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `registry_group` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_value` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_group` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器AppName&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器名称&#x27;</span>,<br>  `address_type` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;</span>,<br>  `address_list` text COMMENT <span class="hljs-string">&#x27;执行器地址列表，多地址逗号分隔&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_user` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;账号&#x27;</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  `role` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色：0-普通用户、1-管理员&#x27;</span>,<br>  `permission` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;权限：执行器ID列表，多个逗号分割&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_username` (`username`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_lock` (<br>  `lock_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;锁名称&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`lock_name`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;xxl-job-executor-sample&#x27;</span>, <span class="hljs-string">&#x27;示例执行器&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;测试任务1&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;XXL&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;CRON&#x27;</span>, <span class="hljs-string">&#x27;0 0 0 * * ? *&#x27;</span>, <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span>, <span class="hljs-string">&#x27;FIRST&#x27;</span>, <span class="hljs-string">&#x27;demoJobHandler&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;SERIAL_EXECUTION&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;BEAN&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;GLUE代码初始化&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_lock` ( `lock_name`) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">&#x27;schedule_lock&#x27;</span>);<br> <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>五、执行docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  -p 18080:8080 -d --name=xxl-job-admin --restart=always -v /mydata/xxl-job/application.properties:/application.properties  -e PARAMS=<span class="hljs-string">&#x27;--spring.config.location=/application.properties&#x27;</span> xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>0、每次挂起再启动，ssh可以正常连接，mysql这些就连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>1、虚拟机没有网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br><span class="hljs-comment"># 显示未知的名称或服务</span><br></code></pre></td></tr></table></figure><p>解决：配置dns(在网卡的配置文件添加如下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">DNS1=8.8.8.8                <span class="hljs-comment">#手动添加DNS1</span><br>DNS2=114.114.114.114        <span class="hljs-comment">#手动添加DNS2</span><br><br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>2、如果安装镜像报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error response from daemon: Get <span class="hljs-string">&quot;https://registry-1.docker.io/v2/&quot;</span>: dial tcp: lookup registry-1.dock<br></code></pre></td></tr></table></figure><p>解决：可能是没网络，参考1，如果没问题，检查镜像加速是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker info<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker.service<br></code></pre></td></tr></table></figure><p>3、连接不上虚拟机</p><p>shell连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>service network restart<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>mysql等容器连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;名称&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;</summary>
      
    
    
    
    <category term="Docker" scheme="http://conquers.github.io/categories/Docker/"/>
    
    
    <category term="Portainer" scheme="http://conquers.github.io/tags/Portainer/"/>
    
    <category term="Elasitc" scheme="http://conquers.github.io/tags/Elasitc/"/>
    
    <category term="Mysql" scheme="http://conquers.github.io/tags/Mysql/"/>
    
    <category term="Redis" scheme="http://conquers.github.io/tags/Redis/"/>
    
    <category term="Nginx" scheme="http://conquers.github.io/tags/Nginx/"/>
    
    <category term="RabbitMQ" scheme="http://conquers.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Shiro实战教程</title>
    <link href="http://conquers.github.io/posts/9cde3973.html"/>
    <id>http://conquers.github.io/posts/9cde3973.html</id>
    <published>2022-06-19T06:07:08.000Z</published>
    <updated>2023-07-18T07:11:59.244Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://shiro.apache.org/">Apache Shiro | Simple. Java. Security.</a></p><h2 id="一-权限的管理"><a href="#一-权限的管理" class="headerlink" title="一. 权限的管理"></a>一. 权限的管理</h2><h3 id="1-1-什么是权限管理"><a href="#1-1-什么是权限管理" class="headerlink" title="1.1 什么是权限管理"></a>1.1 什么是权限管理</h3><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现 &#x3D;&#x3D;对用户访问系统的控制&#x3D;&#x3D; ，按照安全规则或者安全策略控制用户可以访问而且只能访问自己被授权的资源。</p><p>权限管理包括用户 &#x3D;&#x3D;身份认证&#x3D;&#x3D; 和&#x3D;&#x3D;授权&#x3D;&#x3D; 两部分，简称<code>认证授权</code>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-2-什么是身份认证"><a href="#1-2-什么是身份认证" class="headerlink" title="1.2 什么是身份认证"></a>1.2 什么是身份认证</h3><p>&#x3D;&#x3D;身份认证&#x3D;&#x3D;，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用指纹等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p>&#x3D;&#x3D;授权，即访问控制&#x3D;&#x3D; ，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><h2 id="二、什么是shiro"><a href="#二、什么是shiro" class="headerlink" title="二、什么是shiro"></a>二、什么是shiro</h2><p><img src="/Resources/Pasted%20image%2020220619141355.png" alt="Pasted image 20220619141355"></p><blockquote><p>Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p><p>Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><p>&#x3D;&#x3D;Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。&#x3D;&#x3D;</p><h2 id="三、shiro的核心架构"><a href="#三、shiro的核心架构" class="headerlink" title="三、shiro的核心架构"></a>三、shiro的核心架构</h2><p><a href="https://shiro.apache.org/architecture.html">Apache Shiro Architecture | Apache Shiro</a></p><p><img src="/Resources/Pasted%20image%2020220619142030.png" alt="Pasted image 20220619142030"></p><h3 id="3-1-Subject-org-apache-shiro-subject-Subject"><a href="#3-1-Subject-org-apache-shiro-subject-Subject" class="headerlink" title="3.1 Subject (org.apache.shiro.subject.Subject)"></a>3.1 <strong>Subject</strong> (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/subject/Subject.html"><code>org.apache.shiro.subject.Subject</code></a>)</h3><p>&#x3D;&#x3D;Subject&#x3D;&#x3D;即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。</p><p>Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="3-2-SecurityManager-org-apache-shiro-mgt-SecurityManager"><a href="#3-2-SecurityManager-org-apache-shiro-mgt-SecurityManager" class="headerlink" title="3.2 SecurityManager (org.apache.shiro.mgt.SecurityManager)"></a>3.2 <strong>SecurityManager</strong> (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/mgt/SecurityManager.html"><code>org.apache.shiro.mgt.SecurityManager</code></a>)</h3><p>&#x3D;&#x3D;SecurityManager&#x3D;&#x3D;即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</p><h3 id="3-3-Authenticator-org-apache-shiro-authc-Authenticator"><a href="#3-3-Authenticator-org-apache-shiro-authc-Authenticator" class="headerlink" title="3.3 Authenticator(org.apache.shiro.authc.Authenticator)"></a>3.3 Authenticator(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/Authenticator.html"><code>org.apache.shiro.authc.Authenticator</code></a>)</h3><p>&#x3D;&#x3D;uthenticator即认证器&#x3D;&#x3D;，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p><h3 id="3-4-Authorizer-org-apache-shiro-authz-Authorizer"><a href="#3-4-Authorizer-org-apache-shiro-authz-Authorizer" class="headerlink" title="3.4 Authorizer (org.apache.shiro.authz.Authorizer)"></a>3.4 Authorizer (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/Authorizer.html"><code>org.apache.shiro.authz.Authorizer</code></a>)</h3><p>&#x3D;&#x3D;Authorizer即授权器&#x3D;&#x3D;，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="3-5-Realm-org-apache-shiro-realm-Realm"><a href="#3-5-Realm-org-apache-shiro-realm-Realm" class="headerlink" title="3.5 Realm (org.apache.shiro.realm.Realm)"></a>3.5 Realm (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html"><code>org.apache.shiro.realm.Realm</code></a>)</h3><p>Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><p>&#x3D;&#x3D;注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。&#x3D;&#x3D;</p><h3 id="3-6-SessionManager-org-apache-shiro-session-mgt-SessionManager"><a href="#3-6-SessionManager-org-apache-shiro-session-mgt-SessionManager" class="headerlink" title="3.6 SessionManager(org.apache.shiro.session.mgt.SessionManager)"></a>3.6 SessionManager(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/session/mgt/SessionManager.html"><code>org.apache.shiro.session.mgt.SessionManager</code></a>)</h3><p>&#x3D;&#x3D;SessionManager即会话管理&#x3D;&#x3D;，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p><h3 id="3-7-SessionDAO-org-apache-shiro-session-mgt-eis-SessionDAO"><a href="#3-7-SessionDAO-org-apache-shiro-session-mgt-eis-SessionDAO" class="headerlink" title="3.7 SessionDAO (org.apache.shiro.session.mgt.eis.SessionDAO)"></a>3.7 SessionDAO (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/session/mgt/eis/SessionDAO.html"><code>org.apache.shiro.session.mgt.eis.SessionDAO</code></a>)</h3><p>&#x3D;&#x3D;SessionDAO即会话dao&#x3D;&#x3D;，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p><h3 id="3-8-CacheManager-org-apache-shiro-cache-CacheManager"><a href="#3-8-CacheManager-org-apache-shiro-cache-CacheManager" class="headerlink" title="3.8 CacheManager (org.apache.shiro.cache.CacheManager)"></a>3.8 CacheManager (<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/cache/CacheManager.html"><code>org.apache.shiro.cache.CacheManager</code></a>)</h3><p>&#x3D;&#x3D;CacheManager即缓存管理&#x3D;&#x3D;，将用户权限数据存储在缓存，这样可以提高性能。</p><h3 id="3-9-Cryptography-org-apache-shiro-crypto"><a href="#3-9-Cryptography-org-apache-shiro-crypto" class="headerlink" title="3.9 Cryptography(org.apache.shiro.crypto.*)"></a>3.9 Cryptography(<a href="https://shiro.apache.org/static/current/apidocs/org/apache/shiro/crypto/package-summary.html"><code>org.apache.shiro.crypto.*</code></a>)</h3><p>&#x3D;&#x3D;Cryptography即密码管理&#x3D;&#x3D;，shiro提供了一套加密&#x2F;解密的组件，方便开发。比如提供常用的散列、加&#x2F;解密等功能。</p><h2 id="四、shiro中的认证"><a href="#四、shiro中的认证" class="headerlink" title="四、shiro中的认证"></a>四、shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p><h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul><li><p>Subject：主体<br>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体；</p></li><li><p>Principal：身份信息<br>是主体（subject）进行身份认证的标识，标识必须具有 &#x3D;&#x3D;唯一性&#x3D;&#x3D;，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p></li><li><p>Credential：凭证信息<br>是只有主体自己知道的安全信息，如密码、证书等。</p></li></ul><h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="/Resources/Pasted%20image%2020220619144311.png" alt="Pasted image 20220619144311"></p><h3 id="4-4-认证的开发"><a href="#4-4-认证的开发" class="headerlink" title="4.4 认证的开发"></a>4.4 认证的开发</h3><h4 id="1-创建项目并引入依赖"><a href="#1-创建项目并引入依赖" class="headerlink" title="1. 创建项目并引入依赖"></a>1. 创建项目并引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-引入shiro配置文件"><a href="#2-引入shiro配置文件" class="headerlink" title="2. 引入shiro配置文件"></a>2. 引入shiro配置文件</h4><p>配置文件：名称随意，以 .ini 结尾，放在 resources 目录下</p><blockquote><p>注意：在实际的项目开发中并不会使用这种方式，这种方法可以用来初学时练手</p></blockquote><p><code>shiro.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-attr">wtt</span>=<span class="hljs-number">123</span><br><span class="hljs-attr">ttw</span>=<span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><h4 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h4><p><code>TestAuthenticator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestAuthenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 14:53&lt;br/&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAuthenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 给安全管理器设置realm</span><br>        securityManager.setRealm(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IniRealm</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>));<br>        <span class="hljs-comment">//3. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//4. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//5. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wt&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>);<br>        <span class="hljs-comment">// 用户认证</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>output:<br>认证之前:<span class="hljs-literal">false</span><br>认证之后:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-常见的异常类型"><a href="#4-常见的异常类型" class="headerlink" title="4.常见的异常类型"></a>4.常见的异常类型</h4><h5 id="IncorrectCredentialsException（密码错误）"><a href="#IncorrectCredentialsException（密码错误）" class="headerlink" title="IncorrectCredentialsException（密码错误）"></a>IncorrectCredentialsException（密码错误）</h5><p>![[Pasted image 20220619151535.png|400]]</p><h5 id="UnknownAccountException（用户不存在）"><a href="#UnknownAccountException（用户不存在）" class="headerlink" title="UnknownAccountException（用户不存在）"></a>UnknownAccountException（用户不存在）</h5><p>![[Pasted image 20220619151629.png|400]]</p><h5 id="DisabledAccountException（帐号被禁用）"><a href="#DisabledAccountException（帐号被禁用）" class="headerlink" title="DisabledAccountException（帐号被禁用）"></a>DisabledAccountException（帐号被禁用）</h5><h5 id="LockedAccountException（帐号被锁定）"><a href="#LockedAccountException（帐号被锁定）" class="headerlink" title="LockedAccountException（帐号被锁定）"></a>LockedAccountException（帐号被锁定）</h5><h5 id="ExcessiveAttemptsException（登录失败次数过多）"><a href="#ExcessiveAttemptsException（登录失败次数过多）" class="headerlink" title="ExcessiveAttemptsException（登录失败次数过多）"></a>ExcessiveAttemptsException（登录失败次数过多）</h5><h5 id="ExpiredCredentialsException（凭证过期）"><a href="#ExpiredCredentialsException（凭证过期）" class="headerlink" title="ExpiredCredentialsException（凭证过期）"></a>ExpiredCredentialsException（凭证过期）</h5><h5 id="等"><a href="#等" class="headerlink" title="等"></a>等</h5><h4 id="5-自定义Realm"><a href="#5-自定义Realm" class="headerlink" title="5.  自定义Realm"></a>5.  自定义Realm</h4><blockquote><p>通过分析源码可得：<br>认证：<br>1.最终执行用户名比较 是在<code>SimpleAccountRealm</code>类的<code>doGetAuthenticationInfo</code> 方法中完成用户名校验<br>2.最终密码校验是在 <code>AuthenticatingRealm</code>类 的 <code>assertCredentialsMatch</code>方法 中<br>总结：<br><code>AuthenticatingRealm</code> （认证realm） <code>doGetAuthenticationInfo</code><br><code>AuthorizingRealm</code> （授权realm） <code>doGetAuthorizationInfo</code></p></blockquote><p>自定义Realm的作用：放弃使用.ini文件，使用数据库查询</p><p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p><h5 id="5-1-shiro提供的Realm"><a href="#5-1-shiro提供的Realm" class="headerlink" title="5.1 shiro提供的Realm"></a>5.1 shiro提供的Realm</h5><p><img src="/Resources/Pasted%20image%2020220619154953.png" alt="Pasted image 20220619154953"><br>右键<br><img src="/Resources/Pasted%20image%2020220619155013.png" alt="Pasted image 20220619155013"><br><img src="/Resources/Pasted%20image%2020220619160248.png" alt="Pasted image 20220619160248"></p><h5 id="5-2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#5-2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="5.2 根据认证源码认证使用的是SimpleAccountRealm"></a>5.2 根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="/Resources/Pasted%20image%2020220619160233.png" alt="Pasted image 20220619160233"></p><blockquote><p>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权,</p></blockquote><p>源码部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleAccountRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br><span class="hljs-comment">//.......省略</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) token;<br>        <span class="hljs-type">SimpleAccount</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> getUser(upToken.getUsername());<br><br>        <span class="hljs-keyword">if</span> (account != <span class="hljs-literal">null</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (account.isLocked()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockedAccountException</span>(<span class="hljs-string">&quot;Account [&quot;</span> + account + <span class="hljs-string">&quot;] is locked.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (account.isCredentialsExpired()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;The credentials for account [&quot;</span> + account + <span class="hljs-string">&quot;] are expired&quot;</span>;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpiredCredentialsException</span>(msg);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsername(principals);<br>        USERS_LOCK.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.users.get(username);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            USERS_LOCK.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-3-自定义realm"><a href="#5-3-自定义realm" class="headerlink" title="5.3 自定义realm"></a>5.3 自定义realm</h5><p>![[Pasted image 20220619161700.png|400]]<br>通过上一部分可知，我们需要自己实现抽象类<code>AuthorizingRealm</code>的<code>doGetAuthorizationInfo</code>和<code>AuthenticatingRealm</code>中的<code>doGetAuthenticationInf</code><br>但是通过上图可知，我们只需要实现一个类继承<code>AuthorizingRealm</code>即可（因为<code>AuthorizingRealm</code>继承了<code>AuthenticatingRealm</code>）</p><hr><p>在编写自定义realm的类中的doGetAuthenticationInfo方法时，该方法返回的对象是AuthenticationInfo，通过查看下图，可以发现可以用两个实现类返回。<br><img src="/Resources/Pasted%20image%2020220619162838.png" alt="Pasted image 20220619162838"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerRealm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 自定义realm实现,将认证/授权数据的来源转为数据库的实现</span><br><span class="hljs-comment"> * date: 2022/6/19 16:12&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-comment">//授权</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 密码是在父类校验的</span><br>        <span class="hljs-comment">// 在token中获取用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br>        System.out.println(principal);<br>        <span class="hljs-comment">// 实际开发中应当 根据身份信息使用jdbc mybatis查询相关数据库</span><br>        <span class="hljs-comment">// 在这里只做简单的演示</span><br>        <span class="hljs-comment">// 假设username,password是从数据库获得的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">// 参数1:返回数据库中正确的用户名</span><br>            <span class="hljs-comment">// 参数2:返回数据库中正确密码</span><br>            <span class="hljs-comment">// 参数3:提供当前realm的名字 this.getName();</span><br>            <span class="hljs-type">SimpleAuthenticationInfo</span> <span class="hljs-variable">simpleAuthenticationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal, password, <span class="hljs-built_in">this</span>.getName());<br>            <span class="hljs-keyword">return</span> simpleAuthenticationInfo;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-4-使用自定义Realm认证"><a href="#5-4-使用自定义Realm认证" class="headerlink" title="5.4 使用自定义Realm认证"></a>5.4 使用自定义Realm认证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.text.IniRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerRealm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerAuthenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义Realm</span><br><span class="hljs-comment"> * date: 2022/6/19 16:19&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerAuthenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 给安全管理器设置realm</span><br>        securityManager.setRealm(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRealm</span>());<br>        <span class="hljs-comment">//3. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//4. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//5. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-使用MD5-Salt-Hash"><a href="#6-使用MD5-Salt-Hash" class="headerlink" title="6 使用MD5+Salt+Hash"></a>6 使用MD5+Salt+Hash</h4><p>实际应用是将盐和散列后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p><blockquote><p>补充：MD5算法</p><p>作用：一般用来加密或者签名（校验和）。<br>生成结果：始终是一个16进制32位长度字符串。</p><h2 id="特点：1-MD5算法不可逆。2-如果内容相同无论执行多少次md5生成结果始终是一致。"><a href="#特点：1-MD5算法不可逆。2-如果内容相同无论执行多少次md5生成结果始终是一致。" class="headerlink" title="特点：1. MD5算法不可逆。2. 如果内容相同无论执行多少次md5生成结果始终是一致。"></a>特点：<br>1. MD5算法不可逆。<br>2. 如果内容相同无论执行多少次md5生成结果始终是一致。</h2><p>网络上提供的MD5在线解密一般是用穷举的方法。<br>盐（Salt）：如密码是123456，加盐之后，变成了123456a*qz。</p></blockquote><h6 id="Shiro中的MD5-Salt-Hash"><a href="#Shiro中的MD5-Salt-Hash" class="headerlink" title="Shiro中的MD5,Salt,Hash"></a>Shiro中的MD5,Salt,Hash</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestShiroMD5 &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 17:18&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestShiroMD5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个md5算法</span><br><span class="hljs-comment">//        Md5Hash md5Hash = new Md5Hash();</span><br><span class="hljs-comment">//        md5Hash.setBytes(&quot;1234&quot;.getBytes());</span><br><span class="hljs-comment">//        System.out.println(md5Hash.toHex());</span><br><br>        <span class="hljs-comment">//使用md5，构造函数</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;X0*7ps123&quot;</span>);<br>        System.out.println(md5Hash.toHex());<br><br>        <span class="hljs-comment">//使用MD5 + salt处理</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;X0*7ps&quot;</span>);<br>        System.out.println(md5Hash1.toHex());<br><br>        <span class="hljs-comment">// 由第一种和第一种的结果可知，Salt默认加在前面的</span><br><br>        <span class="hljs-comment">//使用md5 + salt + hash散列（参数代表要散列多少次，一般是 1024或2048）</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">md5Hash2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;X0*7ps&quot;</span>, <span class="hljs-number">1024</span>);<br>        System.out.println(md5Hash2.toHex());<br>    &#125;<br>&#125;<br><br><br>output:<br>8a83592a02263bfe6752b2b5b03a4799<br>8a83592a02263bfe6752b2b5b03a4799<br>e4f9bf3e0c58f045e62c23c533fcf633<br></code></pre></td></tr></table></figure><h6 id="自定义md5-salt的realm"><a href="#自定义md5-salt的realm" class="headerlink" title="自定义md5+salt的realm"></a>自定义md5+salt的realm</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerMd5Realm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义realm 加入 md5 十 salt + hash</span><br><span class="hljs-comment"> * date: 2022/6/19 18:00&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">//获取 token中的 用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br><br>        <span class="hljs-comment">//假设这是从数据库查询到的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e4f9bf3e0c58f045e62c23c533fcf633&quot;</span>;<span class="hljs-comment">//加密后</span><br><br>        <span class="hljs-comment">//根据用户名查询数据库</span><br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">//参数1:数据库用户名</span><br>            <span class="hljs-comment">//参数2:数据库md5+salt之后的密码</span><br>            <span class="hljs-comment">//参数3:注册时的随机盐</span><br>            <span class="hljs-comment">//参数4:realm的名字</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal,<br>                    password,<br>                    ByteSource.Util.bytes(<span class="hljs-string">&quot;X0*7ps&quot;</span>),<br>                    <span class="hljs-built_in">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="使用md5-salt认证"><a href="#使用md5-salt认证" class="headerlink" title="使用md5+salt认证"></a>使用md5+salt认证</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerMd5Realm;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerRealm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerMd5Authenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 18:01&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerMd5Authenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 创建md5Realm对象</span><br>        <span class="hljs-type">CustomerMd5Realm</span> <span class="hljs-variable">md5Realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerMd5Realm</span>();<br><br>        <span class="hljs-comment">//------------------------------------------------------</span><br>        <span class="hljs-comment">//新增步骤</span><br>        <span class="hljs-comment">//3. 创建hash凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">//4. 设置hash算法的名字</span><br>        credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>        <span class="hljs-comment">//5. 给当前的realm设定新的凭证匹配器</span><br>        md5Realm.setCredentialsMatcher(credentialsMatcher);<br>        <span class="hljs-comment">//------------------------------------------------------</span><br><br>        <span class="hljs-comment">//6. 给安全管理器设置realm</span><br>        securityManager.setRealm(md5Realm);<br>        <span class="hljs-comment">//7. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//8. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//9. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="如果有散列，则需要在上述代码中给凭证匹配器setHashIterations"><a href="#如果有散列，则需要在上述代码中给凭证匹配器setHashIterations" class="headerlink" title="如果有散列，则需要在上述代码中给凭证匹配器setHashIterations"></a>如果有散列，则需要在上述代码中给凭证匹配器<code>setHashIterations</code></h6><p><code>credentialsMatcher.setHashIterations(&#39;散列的次数&#39;);</code></p><blockquote><p>加密算法和散列次数均是使用<code>credentialsMatcher</code>的<code>setxxxxx</code>方法</p></blockquote><p>认证逻辑：<br>![[Pasted image 20220619183827.png]]</p><h2 id="五、shiro中的授权"><a href="#五、shiro中的授权" class="headerlink" title="五、shiro中的授权"></a>五、shiro中的授权</h2><h3 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h3><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><h3 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h3><p>&#x3D;&#x3D;授权可简单理解为who对what(which)进行How操作：&#x3D;&#x3D;</p><p>&#x3D;&#x3D;Who，即主体（Subject）&#x3D;&#x3D;，主体需要访问系统中的资源。</p><p>&#x3D;&#x3D;What，即资源（Resource)&#x3D;&#x3D;，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括&#x3D;&#x3D;资源类型&#x3D;&#x3D;和&#x3D;&#x3D;资源实例&#x3D;&#x3D;，比如商品信息为资源类型，类型为t01的商品为资源实例，编号为001的商品信息也属于资源实例。</p><p>&#x3D;&#x3D;How，权限&#x2F;许可（Permission)&#x3D;&#x3D;，规定了主体对资源的操作许可，&#x3D;&#x3D;权限离开资源没有意义&#x3D;&#x3D;，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h3 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h3><p><img src="/Resources/Pasted%20image%2020220619185305.png" alt="Pasted image 20220619185305"></p><h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><ul><li><p>基于角色的访问控制&#x3D;&#x3D;<br>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<br> <span class="hljs-comment">//操作什么资源</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;基于资源的访问控制&#x3D;&#x3D;<br>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(subject.isPermission(<span class="hljs-string">&quot;user:update:01&quot;</span>))&#123;<br><span class="hljs-comment">//主体 对 资源（01）具有修改的权限</span><br>&#125;<br><span class="hljs-keyword">if</span>(subject.isPermission(<span class="hljs-string">&quot;user:update:*&quot;</span>))&#123;<br><span class="hljs-comment">//主体 对 所有的资源 具有更新的权限</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h3><p>权限字符串的规则是：资源标识符 : 操作 : 资源实例标识符&#x3D;&#x3D;，意思是对哪个资源的哪个实例具有什么操作，”:”是资源&#x2F;操作&#x2F;实例的分割符，权限字符串也可以使<code>*</code>通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user : * : 001</li></ul><h3 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h3><p>编程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br><span class="hljs-keyword">if</span>(subject.hasRole(“admin”)) &#123;<br><span class="hljs-comment">//有权限</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//无权限</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注解式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//有权限</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>标签式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;admin&quot;</span>&gt;<br>&lt;!— 有权限—&gt;<br>&lt;/shiro:hasRole&gt;<br>注意: Thymeleaf 中使用shiro需要额外集成!<br><br></code></pre></td></tr></table></figure><h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h4 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h4><p>主要是看上面的<code>doGetAuthorizationInfo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.realm;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CustomerMd5Realm &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: 使用自定义realm 加入 md5 十 salt + hash</span><br><span class="hljs-comment"> * date: 2022/6/19 18:00&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerMd5Realm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-comment">//System.out.println(&quot;----&quot;);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">primaryPrincipal</span> <span class="hljs-operator">=</span> (String) principals.getPrimaryPrincipal();<br>        System.out.println(<span class="hljs-string">&quot;身份信息:&quot;</span> + primaryPrincipal);<br>        <span class="hljs-comment">//根据身份信息 用户名，获取当前用户的角色信息和权限信息</span><br>        <span class="hljs-comment">//假设现在只有admin和user</span><br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">simpleAuthorizationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        <span class="hljs-comment">//将数据库中的角色信息赋值给权限对象</span><br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;admin&quot;</span>);<br>        simpleAuthorizationInfo.addRole(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//将数据库中的权限信息赋值给权限对象</span><br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:*:*&quot;</span>);<br>        simpleAuthorizationInfo.addStringPermission(<span class="hljs-string">&quot;product:create&quot;</span>);<br>        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">//获取 token中的 用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) token.getPrincipal();<br><br>        <span class="hljs-comment">//假设这是从数据库查询到的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;wtt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e4f9bf3e0c58f045e62c23c533fcf633&quot;</span>;<span class="hljs-comment">//加密后</span><br><br>        <span class="hljs-comment">//根据用户名查询数据库</span><br>        <span class="hljs-keyword">if</span> (username.equals(principal)) &#123;<br>            <span class="hljs-comment">//参数1:数据库用户名</span><br>            <span class="hljs-comment">//参数2:数据库md5+salt之后的密码</span><br>            <span class="hljs-comment">//参数3:注册时的随机盐</span><br>            <span class="hljs-comment">//参数4:realm的名字</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(principal,<br>                    password,<br>                    ByteSource.Util.bytes(<span class="hljs-string">&quot;X0*7ps&quot;</span>),<br>                    <span class="hljs-built_in">this</span>.getName());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h4><p>主要是看<code>-------------------------------------------</code>下面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.example.realm.CustomerMd5Realm;<br><br><span class="hljs-keyword">import</span> javax.sound.midi.Soundbank;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestCustomerMd5Authenticator &lt;br/&gt;</span><br><span class="hljs-comment"> * Description: &lt;br/&gt;</span><br><span class="hljs-comment"> * date: 2022/6/19 18:01&lt;br/&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> wangtaotao &lt;br/&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCustomerMd5Authenticator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建安全管理器对象</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        <span class="hljs-comment">//2. 创建md5Realm对象</span><br>        <span class="hljs-type">CustomerMd5Realm</span> <span class="hljs-variable">md5Realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerMd5Realm</span>();<br><br>        <span class="hljs-comment">//------------------------------------------------------</span><br>        <span class="hljs-comment">//新增步骤</span><br>        <span class="hljs-comment">//3. 创建hash凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">//4. 设置hash算法的名字</span><br>        credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>        <span class="hljs-comment">//5. 给当前的realm设定新的凭证匹配器</span><br>        md5Realm.setCredentialsMatcher(credentialsMatcher);<br>        <span class="hljs-comment">// 散列:</span><br>        credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>        <span class="hljs-comment">//------------------------------------------------------</span><br><br>        <span class="hljs-comment">//6. 给安全管理器设置realm</span><br>        securityManager.setRealm(md5Realm);<br>        <span class="hljs-comment">//7. securityUtils 给全局安全工具类设置安全管理器</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//8. 关键对象 subject 主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">//9. 创建令牌</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;认证之前:&quot;</span> + subject.isAuthenticated());<br>            subject.login(usernamePasswordToken);<br>            System.out.println(<span class="hljs-string">&quot;认证之后:&quot;</span> + subject.isAuthenticated());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//-------------------------------------------</span><br>        <span class="hljs-comment">//对认证的用户进行授权</span><br>        <span class="hljs-keyword">if</span> (subject.isAuthenticated()) &#123;<br>            <span class="hljs-comment">//1.基于角色的权限控制 调用doGetAuthorizationInfo方法</span><br>            System.out.println(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>));<br>            <span class="hljs-comment">//2.基于多角色的权限控制 有几个角色，调用几次doGetAuthorizationInfo方法</span><br>            System.out.println(subject.hasAllRoles(Arrays.asList(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;super&quot;</span>)));<br>            System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);<br>            <span class="hljs-comment">//3.是否具有其中一个角色</span><br>            <span class="hljs-type">boolean</span>[] hasRoles = subject.hasRoles(Arrays.asList(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;super&quot;</span>));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> is : hasRoles) &#123;<br>                System.out.println(is);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;==============================&quot;</span>);<br>            <span class="hljs-comment">//4.基于单个权限字符串的访问控制    资源标识符：操作：资源类型</span><br>            System.out.println(subject.isPermitted(<span class="hljs-string">&quot;user:update:*&quot;</span>));<br>            System.out.println(subject.isPermitted(<span class="hljs-string">&quot;product:create:02&quot;</span>));<br>            <span class="hljs-comment">//5.基于多个权限字符串的访问控制    资源标识符：操作：资源类型</span><br>            <span class="hljs-type">boolean</span>[] permitted = subject.isPermitted(<span class="hljs-string">&quot;user:*:01&quot;</span>, <span class="hljs-string">&quot;order:*:10&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : permitted) &#123;<br>                System.out.println(b);<br>            &#125;<br>            <span class="hljs-comment">//6.同时具有哪些权限</span><br>            System.out.println(subject.isPermittedAll(<span class="hljs-string">&quot;user:*:01&quot;</span>,<span class="hljs-string">&quot;product:create:02&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="六、整合SpringBoot项目实战"><a href="#六、整合SpringBoot项目实战" class="headerlink" title="六、整合SpringBoot项目实战"></a>六、整合SpringBoot项目实战</h2><h3 id="6-1-整合思路"><a href="#6-1-整合思路" class="headerlink" title="6.1 整合思路"></a>6.1 整合思路</h3><p><img src="/Resources/Pasted%20image%2020220620085152.png" alt="Pasted image 20220620085152"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;Apache Shiro | Simple. Java. Security.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-权限的管理&quot;&gt;&lt;a href=&quot;#一-权限的管理&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="Shiro" scheme="http://conquers.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://conquers.github.io/posts/bae4ff13.html"/>
    <id>http://conquers.github.io/posts/bae4ff13.html</id>
    <published>2022-06-18T08:30:15.000Z</published>
    <updated>2023-06-06T00:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p><a href="https://redis.io/">Redis - 英文官网</a><br><a href="http://www.redis.cn/">Redis - 中文网</a><br><a href="https://github.com/redis/redis">GitHub - redis&#x2F;redis</a></p><blockquote><p>参考资料<br>视频地址：<a href="https://www.bilibili.com/video/BV1jD4y1Q7tU">【编程不良人】适合后端编程人员的Redis实战教程、redis应用场景、分布式缓存、Session管理、面试相关等已完结!哔哩哔哩_bilibili</a><br>视频地址：<a href="https://www.bilibili.com/video/BV1cr4y1671t">黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目_哔哩哔哩_bilibili</a><br>参考笔记：<a href="https://blog.csdn.net/unique_perfect/article/details/105515137">从前慢-Redis_unique_perfect的博客-CSDN博客</a></p><p>代码参考：redis-study</p></blockquote><h2 id="1、Nosql的引言"><a href="#1、Nosql的引言" class="headerlink" title="1、Nosql的引言"></a>1、Nosql的引言</h2><p>NoSQL（Not Only SQL），意即不仅仅是SQL，泛指非关系型的数据库。Nosql这个技术门类，早期就有人提出，发展至2009年趋势越发高涨。</p><blockquote><p>RDBMS：关系型数据库<br>NOSQL：（泛指）非关系型数据库<br>RDBMS和NOSQL相辅相成</p></blockquote><h2 id="2、为什么是NoSQL"><a href="#2、为什么是NoSQL" class="headerlink" title="2、为什么是NoSQL"></a>2、为什么是NoSQL</h2><p>随着互联网网站的兴起，传统的关系数据库在应付动态网站，特别是超大规模和高并发的纯动态网站已经显得力不从暴露了很多难以克服的问题。如<strong>商城网站中对商品数据频繁查询</strong>、<strong>对热搜商品的排行统计</strong>、<strong>订单超时问题</strong>、以及<strong>微信朋友圈（音频，视频〉存储</strong>等相关使用传统的关系型数据库实现就显得非常复杂，虽然能实现相应功能但是在性能上却不是那么乐观。nosql这个技术门类的出现，更好的解决了这些问题，它告诉了世界不仅仅是sql。</p><h2 id="3、NoSQL的四大分类"><a href="#3、NoSQL的四大分类" class="headerlink" title="3、NoSQL的四大分类"></a>3、NoSQL的四大分类</h2><h4 id="3-1-键值-Key-Value-存储数据库"><a href="#3-1-键值-Key-Value-存储数据库" class="headerlink" title="3.1 键值(Key-Value)存储数据库"></a>3.1 键值(Key-Value)存储数据库</h4><ul><li><p>说明:<br>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。<br><code>Map&lt;key,value&gt;</code></p></li><li><p>特点<br>优点：Key&#x2F;value模型对于IT系统来说的优势在于简单、易部署。<br>缺点：如果DBA（数据库管理员）只对部分值进行查询或更新的时候，Key&#x2F;value就显得效率低下了。</p></li><li><p>相关产品</p><ul><li>Tokyo Cabinet&#x2F;Tyrant</li><li><strong>Redis</strong>  内存</li><li><strong>SSDB</strong>  硬盘</li><li>Voldemort </li><li>Oracle BDB</li></ul></li></ul><h4 id="3-2-列存储数据库"><a href="#3-2-列存储数据库" class="headerlink" title="3.2 列存储数据库"></a>3.2 列存储数据库</h4><ul><li><p>说明<br>这部分数据库通常是用来应对分布式存储的<strong>海量数据</strong>。</p></li><li><p>特点<br>键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。</p></li><li><p>相关产品<br>Cassandra、<strong>HBase</strong>、Riak。</p></li></ul><h4 id="3-3-文档型数据库（Document）"><a href="#3-3-文档型数据库（Document）" class="headerlink" title="3.3 文档型数据库（Document）"></a>3.3 文档型数据库（Document）</h4><ul><li><p>说明<br>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似，该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如<strong>JSON</strong>。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高<br><code>&#123;&quot;name&quot;:&quot;wtt&quot;,&quot;age&quot;:&quot;23&quot;&#125; -----&gt; document</code></p></li><li><p>特点<br>以文档（json）形式存储</p></li><li><p>相关产品<br><strong>MongoDB（最新版为6.x，截至2022.9.14）</strong>、CouchDB，国内也有文档型数据库SequoiaDB，已经开源。</p></li></ul><h4 id="3-4-图形-Graph-数据库"><a href="#3-4-图形-Graph-数据库" class="headerlink" title="3.4 图形(Graph)数据库"></a>3.4 图形(Graph)数据库</h4><ul><li><p>说明<br>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。</p></li><li><p>特点<br>NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。</p></li><li><p>相关产品<br>Neo4J、InfoGrid、 Infinite Graph、</p></li></ul><h2 id="4、NoSQL应用场景"><a href="#4、NoSQL应用场景" class="headerlink" title="4、NoSQL应用场景"></a>4、NoSQL应用场景</h2><ul><li><p><strong>数据模型比较简单</strong></p></li><li><p><strong>需要灵活性更强的IT系统（系统设计灵活，性能要求高）</strong></p></li><li><p><strong>对数据库性能要求较高</strong></p></li><li><p><strong>不需要高度的数据一致性 (NoSQL产品对于事务支持不是很好)</strong></p></li></ul><h2 id="5、什么是Redis"><a href="#5、什么是Redis" class="headerlink" title="5、什么是Redis"></a>5、什么是Redis</h2><p><img src="/Resources/Pasted%20image%2020220914160123.png"></p><p>Redis （<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver），远程字典服务</p><blockquote><p>The open source, in-memory data store used by millions of developers as a database, cache, streaming engine, and message broker.<br>数百万开发人员使用的开源内存数据存储作为<strong>数据库、缓存、流引擎和消息中间件</strong>。</p></blockquote><p>Q：<u>Redis使用内存作为数据库，但是为什么断电数据不会消失呢？</u><br>A：<u>持久化机制，定期将内存数据写入到磁盘中。</u></p><h2 id="6、Redis特点"><a href="#6、Redis特点" class="headerlink" title="6、Redis特点"></a>6、Redis特点</h2><ul><li><strong>Redis是一个高性能key&#x2F;value内存型数据库</strong></li><li><strong>Redis支持丰富的数据类型</strong></li><li><strong>Redis支持持久化</strong></li><li><strong>Redis单线程，单进程</strong>：6.0之前：命令单线程，网络单线程，6.0之后命令单线程，网络多线程，<a href="https://blog.csdn.net/CSDN2497242041/article/details/122659705">Redis 6.0多线程模型总结</a><ul><li>命令基于内存操作，已经很快了，不需要多线程，如果使用多线程，反而会引起一些问题。</li><li>网络多线程：因为读写网络的read&#x2F;write系统调用占用了Redis执行期间大部分CPU时间，瓶颈主要在于网络的 IO 消耗</li><li>网络多线程的实现方式：IO多路复用+多个事件处理器</li><li><img src="/Resources/Pasted%20image%2020230606160933.png"></li></ul></li></ul><h2 id="7、安装Redis"><a href="#7、安装Redis" class="headerlink" title="7、安装Redis"></a>7、安装Redis</h2><blockquote><p>参考地址：<a href="https://redis.io/docs/getting-started/installation/">Installing Redis | Redis</a><br>在CentOs中使用Docker安装Redis参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#Redis">CentOs中使用Docker安装Redis</a><br>以下仅演示在MacOS中安装Redis</p></blockquote><h2 id="8、Redis数据库相关指令"><a href="#8、Redis数据库相关指令" class="headerlink" title="8、Redis数据库相关指令"></a>8、Redis数据库相关指令</h2><blockquote><p>Redis全部命令参考<br>英文官网：<a href="https://redis.io/commands/">Commands | Redis</a><br>中文网：<a href="http://www.redis.cn/commands.html">Redis命令中心（Redis commands）</a></p></blockquote><h3 id="数据库相关指令"><a href="#数据库相关指令" class="headerlink" title="数据库相关指令"></a>数据库相关指令</h3><h4 id="Select-切换数据库"><a href="#Select-切换数据库" class="headerlink" title="Select 切换数据库"></a>Select 切换数据库</h4><p>Redis默认有16个数据库，默认使用的是第0个数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; <span class="hljs-keyword">select</span> 0<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-comment">#默认数据库后面没有&#x27;[编号]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-keyword">select</span> 3 <span class="hljs-comment">#切换数据库</span><br>OK<br></code></pre></td></tr></table></figure><h4 id="Flushdb-请空当前库"><a href="#Flushdb-请空当前库" class="headerlink" title="Flushdb 请空当前库"></a>Flushdb 请空当前库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; flushdb<br>OK<br>127.0.0.1:6379[3]&gt; keys *<br>(empty array)<br></code></pre></td></tr></table></figure><h4 id="Flushall-请空所有库"><a href="#Flushall-请空所有库" class="headerlink" title="Flushall 请空所有库"></a>Flushall 请空所有库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;wtt&quot;</span> <span class="hljs-comment">#在数据库3中新增数据</span><br>OK<br>127.0.0.1:6379[3]&gt; get name<br><span class="hljs-string">&quot;wtt&quot;</span><br>127.0.0.1:6379[3]&gt; <span class="hljs-keyword">select</span> 7 <span class="hljs-comment">#切换到数据库7</span><br>OK<br>127.0.0.1:6379[7]&gt; flushall <span class="hljs-comment">#在数据库7清空所有库</span><br>OK<br>127.0.0.1:6379[7]&gt; <span class="hljs-keyword">select</span> 3<br>OK<br>127.0.0.1:6379[3]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h3 id="key相关指令"><a href="#key相关指令" class="headerlink" title="key相关指令"></a>key相关指令</h3><h4 id="Del-删除key"><a href="#Del-删除key" class="headerlink" title="Del 删除key"></a>Del 删除key</h4><blockquote><p>同时删除多个key：DEL key1 key2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get a<br><span class="hljs-string">&quot;v&quot;</span><br>127.0.0.1:6379&gt; del a<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get a<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Exists-判断键值是否存在"><a href="#Exists-判断键值是否存在" class="headerlink" title="Exists 判断键值是否存在"></a>Exists 判断键值是否存在</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; exists name<br>(<span class="hljs-built_in">integer</span>) 1 <span class="hljs-comment"># 1 = 存在 ，0 = 不存在</span><br></code></pre></td></tr></table></figure><h4 id="Ttl-返回当前key的过期时间-过期时间为秒"><a href="#Ttl-返回当前key的过期时间-过期时间为秒" class="headerlink" title="Ttl 返回当前key的过期时间 过期时间为秒"></a>Ttl 返回当前key的过期时间 <em>过期时间为秒</em></h4><blockquote><p>当key不存在时，返回-2。<br>当key存在但没有设置剩余生存时间时，返回-1。<br>否则，以秒为单位，返回key的剩余生存时间。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; expire name 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; ttl name <span class="hljs-comment">#ttl 查看剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Pttl-返回当前key的过期时间-过期时间为毫秒"><a href="#Pttl-返回当前key的过期时间-过期时间为毫秒" class="headerlink" title="Pttl 返回当前key的过期时间 过期时间为毫秒"></a>Pttl 返回当前key的过期时间 <em>过期时间为毫秒</em></h4><h4 id="Expire-设置当前key的过期时间-过期时间为秒"><a href="#Expire-设置当前key的过期时间-过期时间为秒" class="headerlink" title="Expire 设置当前key的过期时间 过期时间为秒"></a>Expire 设置当前key的过期时间 <em>过期时间为秒</em></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; expire name 10<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379[1]&gt; ttl name <span class="hljs-comment">#ttl 查看剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379[1]&gt; get name<br>(nil)<br></code></pre></td></tr></table></figure><h4 id="Pexpire-设置当前key的过期时间-过期时间为毫秒"><a href="#Pexpire-设置当前key的过期时间-过期时间为毫秒" class="headerlink" title="Pexpire 设置当前key的过期时间 过期时间为毫秒"></a>Pexpire 设置当前key的过期时间 <em>过期时间为毫秒</em></h4><h4 id="Keys-查找所有符合给定模式的key"><a href="#Keys-查找所有符合给定模式的key" class="headerlink" title="Keys 查找所有符合给定模式的key"></a>Keys 查找所有符合给定模式的key</h4><blockquote><p>*多个，?单个，[abc]其一，类似于正则表达式</p></blockquote><ul><li>keys* 查找所有key</li><li>keys h?llo 查找hello,hallo,hxllo等</li><li>keys h*llo 查找hllo,heeeello等</li><li>Keys h[ae]llo匹配hello和hallo ,但不匹配hillo。特殊符号用”\“隔开<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>[<span class="hljs-number">3</span>]&gt; keys *<br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Move-移动键值到另外一个数据库"><a href="#Move-移动键值到另外一个数据库" class="headerlink" title="Move 移动键值到另外一个数据库"></a>Move 移动键值到另外一个数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get name<br><span class="hljs-string">&quot;xr&quot;</span><br>127.0.0.1:6379&gt; move name 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <span class="hljs-keyword">select</span> 1<br>OK<br>127.0.0.1:6379[1]&gt; get name<br><span class="hljs-string">&quot;xr&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Rename-修改当前key的名字"><a href="#Rename-修改当前key的名字" class="headerlink" title="Rename 修改当前key的名字"></a>Rename 修改当前key的名字</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> a b<br>OK<br>127.0.0.1:6379&gt; rename a aa<br>OK<br>127.0.0.1:6379&gt; get aa<br><span class="hljs-string">&quot;b&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Type-查看当前key的类型"><a href="#Type-查看当前key的类型" class="headerlink" title="Type 查看当前key的类型"></a>Type 查看当前key的类型</h4><ul><li>none (key不存在)</li><li>string (字符串)</li><li>list (列表)</li><li>set (集合)</li><li>Zset (有序集)</li><li>hash (哈希表)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[1]&gt; <span class="hljs-built_in">type</span> name<br>string<br></code></pre></td></tr></table></figure><h4 id="Dbsize-查看键总数"><a href="#Dbsize-查看键总数" class="headerlink" title="Dbsize 查看键总数"></a>Dbsize 查看键总数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379[3]&gt; dbsize <span class="hljs-comment">#查看数据库大小</span><br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><p><strong>数据类型</strong>：指的是存储的数据的类型，也就是 value 部分的类型， key 部分永远都是字符串。</p><p><strong>Redis 数据存储格式</strong>：Redis自身是一个 Map，其中所有的数据都是采用 key : value的形式存储。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><code>Map&lt;String,String&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915104123.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>set</td><td>设置一个key&#x2F;value</td><td><code>set k1 v1</code></td></tr><tr><td>get</td><td>根据key获得对应的value</td><td><code>get k1</code></td></tr><tr><td>mset</td><td>一次设置多个key&#x2F;value</td><td><code>mset k1 v1 k2 v2</code></td></tr><tr><td>mget</td><td>一次获取多个key&#x2F;value</td><td><code>mget k1 k2</code></td></tr><tr><td>strlen</td><td>获取对应key的value的长度</td><td><code>strlen k1</code></td></tr><tr><td>append</td><td>为对应的key的value追加内容（如果不存在key，那么就自动创建key）</td><td><code>append key1 &quot;this is append value&quot;</code></td></tr><tr><td>getrange（索引从0开始）</td><td>截取value的内容（0到-1代表所有内容）</td><td><code>getrange key1 0 -1</code></td></tr><tr><td>setex</td><td>设置一个key存活的有效期 <strong>秒</strong></td><td><code>setex key1 30 &quot;hello&quot;</code></td></tr><tr><td>psetex</td><td>设置一个key存活的有效期 <strong>毫秒</strong></td><td><code>psetex key1 30 &quot;hello&quot;</code></td></tr><tr><td>setnx</td><td>存在不做任何操作，不存在则添加</td><td><code> setnx key1 wtt</code></td></tr><tr><td>msetnx原子操作（只要有一个存在就不做任何操作）</td><td>同时设置多个key，只有都不存在时才保存</td><td></td></tr><tr><td>decr</td><td>进行数值类型的-1操作</td><td><code>decr key1</code></td></tr><tr><td>decrby</td><td>根据提供的数据进行减法操作</td><td><code>decrby key1 5</code></td></tr><tr><td>incr</td><td>进行数值类型的+1操作</td><td><code>incr key1</code></td></tr><tr><td>incrby</td><td>根据提供的数据进行加法操作</td><td><code>incrby key1 5</code></td></tr><tr><td>incrbyfloat</td><td>根据提供的数据加浮点数</td><td><code>incrbyfloat key1 1.5</code></td></tr></tbody></table><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><code>Map&lt;String,List&gt; map</code></p><blockquote><p>区别于Java中的List，Redis中的List可以通过lpush从左向列表放入元素，也可以通过rpush从右向列表放入元素（本质是一个双向链表）！</p></blockquote><p><img src="/Resources/Pasted%20image%2020220915104344.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>lpush</td><td>将某个值或多个值加入到一个key列表头部</td><td><code>lpush list value1 value2</code></td></tr><tr><td>lpushx</td><td>同lpush,但是必须要保证这个key存在</td><td><code>xpushx list value3 value4</code></td></tr><tr><td>rpush</td><td>将某个值或多个值加入到一个key列表末尾</td><td><code>rpush list value5</code></td></tr><tr><td>rpushx</td><td>同rpush,但是必须要保证这个key存在</td><td><code>rpush list value5</code></td></tr><tr><td>lpop</td><td>返回和移除列表的第一个元素</td><td><code>lpop list</code> (移除多个元素使用<code>lpop list n</code> n代表移除几个)</td></tr><tr><td>rpop</td><td>返回和移除列表的第一个元素</td><td><code>lpop list</code> (移除多个元素使用<code>lpop list n</code> n代表移除几个</td></tr><tr><td>lrange 0 -1</td><td>获取某一个下标区间内的元素</td><td><code>lrange list 0 -1</code></td></tr><tr><td>llen</td><td>获取列表元素个数</td><td><code>llen list</code></td></tr><tr><td>lset</td><td>设置某一个指定索引的值(索引必须存在)</td><td><code>lset list 0 value</code></td></tr><tr><td>lindex</td><td>获取某一个指定索引位置的元素</td><td><code>lindex list 0</code></td></tr><tr><td>lrem</td><td>删除重复元素</td><td><code>lrem list 2 value</code> (数字代表移除几个重复的值)</td></tr><tr><td>ltrim</td><td>保留列表中特定区间内的元素</td><td><code>ltrim list 1 2</code></td></tr><tr><td>linsert</td><td>在某一个元素之前(before)或者之后(after)插入新元素</td><td><code>linsert list before value3 value</code></td></tr></tbody></table><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Map&lt;String,Set&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915150230.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>sadd</td><td>为集合添加元素</td><td></td></tr><tr><td>smembers</td><td>显示集合中所有元素无序</td><td></td></tr><tr><td>scard</td><td>返回集合中元素的个数</td><td></td></tr><tr><td>spop</td><td>随机返回一个元素并将元素在集合中删除</td><td></td></tr><tr><td>smove</td><td>从一个集合中向另一个集合移动元素</td><td></td></tr><tr><td>srem</td><td>从集合中删除一个元素</td><td></td></tr><tr><td>sismember</td><td>判断一个集合中是否含有这个元素</td><td></td></tr><tr><td>srandmember</td><td>随机返回元素</td><td></td></tr><tr><td>sdiff</td><td>去掉第一个集合中其它集合含有的相同元素</td><td></td></tr><tr><td>sinter</td><td>求交集</td><td></td></tr><tr><td>sunion</td><td>求和集</td><td></td></tr></tbody></table><h4 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h4><p><code>Map&lt;String,ZSet&gt; map</code></p><blockquote><p>区别于Set，Zset是有序的。</p></blockquote><p><img src="/Resources/Pasted%20image%2020220915150705.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>zadd</td><td>添加一个有序集合元素</td><td></td></tr><tr><td>zcard</td><td>返回集合的元素个数</td><td></td></tr><tr><td>zrange升序 zrevrange降序</td><td>返回一个范围内的元素</td><td></td></tr><tr><td>zrangebyscore</td><td>按照分数查找一个范围内的元素</td><td></td></tr><tr><td>zrank</td><td>返回排名</td><td></td></tr><tr><td>zrevrank</td><td>倒序排名</td><td></td></tr><tr><td>zscore</td><td>显示某一个元素的分数</td><td></td></tr><tr><td>zrem</td><td>移除某一个元素</td><td></td></tr><tr><td>zincrby*</td><td>给某个特定元素加分</td><td></td></tr></tbody></table><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p><code>Map&lt;String,Map&lt;String,value&gt;&gt; map</code><br><img src="/Resources/Pasted%20image%2020220915151206.png"></p><p><strong>常用操作命令</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>范例</th></tr></thead><tbody><tr><td>hset</td><td>设置一个key&#x2F;value对</td><td></td></tr><tr><td>hget</td><td>获得一个key对应的value</td><td></td></tr><tr><td>hgetall</td><td>获得所有的key&#x2F;value对</td><td></td></tr><tr><td>hdel</td><td>删除某一个key&#x2F;value对</td><td></td></tr><tr><td>hexists</td><td>判断一个key是否存在</td><td></td></tr><tr><td>hkeys</td><td>获得所有的key</td><td></td></tr><tr><td>hvals</td><td>获得所有的value</td><td></td></tr><tr><td>hmset设置多个key&#x2F;value</td><td></td><td></td></tr><tr><td>hmget</td><td>获得多个key的value</td><td></td></tr><tr><td>hsetnx设置一个不存在的key的值</td><td></td><td></td></tr><tr><td>hincrby为value进行加法运算</td><td></td><td></td></tr><tr><td>hincrbyfloat</td><td>为value加入浮点值</td><td></td></tr></tbody></table><h2 id="9、Redis的持久化机制"><a href="#9、Redis的持久化机制" class="headerlink" title="9、Redis的持久化机制"></a>9、Redis的持久化机制</h2><blockquote><p>参考文档：<a href="https://redis.io/docs/manual/persistence/">Redis persistence | Redis</a></p></blockquote><p>Redis官方提供了两种不同的持久化方法来将数据存储到硬盘，既可以同时使用(aof)，又可以单独使用，在某种情况下也可以都不使用，具体使用那种持久化方案取决于用户的数据和应用决定。</p><blockquote><p>无论使用AOF还是快照机制持久化，将数据持久化到硬盘都是有必要的，除了持久化外，用户还应该对持久化的文件进行备份(最好备份在多个不同地方)。</p></blockquote><ul><li>ROB(Redis Database Backup file)：保存这一时刻的数据状态，也被叫做Redis数据备份文件</li><li>AOF(<strong>Append Only File</strong>)：将所有redis写命令记录到日志文件中</li><li><img src="/Resources/Pasted%20image%2020230531170507.png"></li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>这种方式可以将某一时刻的所有数据都写入硬盘中，当然这也是redis的<strong>默认持久化方式</strong>，保存的文件是以.rdb形式结尾的文件，因此这种方式也称之为RDB方式。<br><img src="/Resources/Pasted%20image%2020220915155813.png"><br><img src="/Resources/Pasted%20image%2020220915160528.png"></p><h4 id="快照生成方式"><a href="#快照生成方式" class="headerlink" title="快照生成方式"></a>快照生成方式</h4><ul><li>客户端方式：BGSAVE和SAVE指令</li><li>服务器配置自动触发</li></ul><h5 id="客户端方式"><a href="#客户端方式" class="headerlink" title="客户端方式"></a>客户端方式</h5><p><strong>BGSAVE</strong><br>客户端可以使用BGSAVE命令来创建一个快照，当接收到客户端的BGSAVE命令时，redis会调用fork来创建一个子进程，然后子进程负责将快照写入磁盘中，而父进程则继续处理命令请求。<br>疑问：当执行fork操作时，进行了redis写操作，这个时候数据拷贝了一份，对数据副本B进行了写操作，那么之后是怎么处理的<br><img src="/Resources/Pasted%20image%2020230531164423.png"></p><p><strong>SAVE</strong><br>客户端还可以使用SAVE命令来创建一个快照，接收到SAVE命令的redis服务器在快照创建完毕之前将不再响应任何其他的命令<br><img src="/Resources/Pasted%20image%2020220915162455.png"></p><p>🔔<strong>注意：SAVE命令并不常用，使用SAVE命令在快照创建完毕之前，redis处于阻塞状态,无法对外服务。</strong></p><h5 id="服务器配置自动触发"><a href="#服务器配置自动触发" class="headerlink" title="服务器配置自动触发"></a>服务器配置自动触发</h5><p>如果用户在redis.conf中设置了save配置选项，redis会在save选项条件满足之后自动触发一次BGSAVE命令，如果设置多个save配置选项，当任意一个save配置选项条件满足，redis也会触发一次BGSAVE命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 注该配置文件是redis7的<br>################################ SNAPSHOTTING  ################################<br><br># Save the DB to disk. 将数据库保存到磁盘.<br>#<br># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]<br>#<br># Redis will save the DB if the given number of seconds elapsed and it<br># surpassed the given number of write operations against the DB.<br># 如果经过了给定的秒数，并且超过了针对DB的给定写入操作数，Redis将数据库保存到磁盘.<br>#<br># Snapshotting can be completely disabled with a single empty string argument<br># as in following example:<br># 使用 save &quot;&quot; 即可禁用redis中的Snapshotting<br>#<br># save &quot;&quot;<br>#<br># Unless specified otherwise, by default Redis will save the DB:<br>#   * After 3600 seconds (an hour) if at least 1 change was performed<br>#   * After 300 seconds (5 minutes) if at least 100 changes were performed<br>#   * After 60 seconds if at least 10000 changes were performed<br># 除非另有说明，否则默认情况下Redis会保存数据库：<br>#   这里的翻译主要出自于 https://redis.io/docs/management/persistence/#snapshotting 中关于rdb的解释<br>#   You can configure Redis to have it save the dataset <br>#   every N seconds if there are at least M changes in the dataset  如果每n秒发生了m次<br>#   , or you can manually call the SAVE or BGSAVE commands.<br>#   每3600秒，1次更改<br>#   每300秒，100次更改<br>#   每60秒后，10000次更改<br># <br># You can set these explicitly by uncommenting the following line.<br># 您可以通过取消对以下行的注释来显式设置这些值。<br>#<br># save 3600 1 300 100 60 10000<br><br><br># 注该配置文件是redis6.2的，基本上跟7差不多，就不再翻译了<br>################################ SNAPSHOTTING  ################################<br><br># Save the DB to disk.<br>#<br># save &lt;seconds&gt; &lt;changes&gt;<br>#<br># Redis will save the DB if both the given number of seconds and the given<br># number of write operations against the DB occurred.<br>#<br># Snapshotting can be completely disabled with a single empty string argument<br># as in following example:<br>#<br># save &quot;&quot;<br>#<br># Unless specified otherwise, by default Redis will save the DB:<br>#   * After 3600 seconds (an hour) if at least 1 key changed<br>#   * After 300 seconds (5 minutes) if at least 100 keys changed<br>#   * After 60 seconds if at least 10000 keys changed<br>#<br># You can set these explicitly by uncommenting the three following lines.<br>#<br># save 3600 1<br># save 300 100<br># save 60 10000<br></code></pre></td></tr></table></figure><h5 id="服务器接收客户端shutdown指令"><a href="#服务器接收客户端shutdown指令" class="headerlink" title="服务器接收客户端shutdown指令"></a>服务器接收客户端shutdown指令</h5><p>当redis通过shutdown指令接收到关闭服务器的请求时，会执行一个save命令，阻塞所有的客户端，不再执行客户端执行发送的任何命令，并且在save命令执行完毕之后关闭服务器。</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>这种方式可以将所有客户端执行的写命令记录到日志文件中，AOF持久化会将被执行的写命令写到AOF的文件末尾，以此来记录数据发生的变，因此只要redis从头到尾执行一次AOF文件所包含的所有写命令，就可以恢复AOF文件的记录的数据集。</p><blockquote><p>开启AOF持久化参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#Redis%E6%8C%81%E4%B9%85%E5%8C%96">Redis持久化</a><br>开启后，多了一个<code>appendonly.aof</code>文件<br><img src="/Resources/Pasted%20image%2020220916164124.png"></p></blockquote><h4 id="日志追加频率"><a href="#日志追加频率" class="headerlink" title="日志追加频率"></a>日志追加频率</h4><p><strong>always【谨慎使用】</strong></p><ul><li>说明：每个redis写命令都要同步写入硬盘，严重降低redis速度</li><li>解释：如果用户使用了always选项，那么每个redis写命令都会被写入硬盘，从而将发生系统崩溃时出现的数据丢失减到最少；遗憾的是，因为这种同步策略需要对硬盘进行大量的写入操作，所以redis处理命令的速度会受到硬盘性能的限制；</li><li>注意：转盘式硬盘在这种频率下200左右个命令&#x2F;s；固态硬盘(SSD)几百万个命令&#x2F;s；</li><li>警告：使用SSD用户请谨慎使用always选项，这种模式不断写入少量数据的做法有可能会引发严重的<strong>写入放大</strong>（不断往磁盘写入小文件）问题，导致将固态硬盘的寿命从原来的几年降低为几个月。</li></ul><p><strong>everysec【推荐】（默认）</strong></p><ul><li>说明：每秒执行一次同步显式的将多个写命令同步到磁盘</li><li>解释：为了兼顾数据安全和写入性能，用户可以考虑使用everysec选项，让redis每秒一次的频率对AOF文件进行同步；redis每秒同步一次AOF文件时性能和不使用任何持久化特性时的性能相差无几，而通过每秒同步一次AOF文件，redis可以保证，即使系统崩溃，用户最多丢失一秒之内产生的数据。</li></ul><p><strong>no【不推荐】</strong></p><ul><li>说明：由操作系统决定何时同步</li><li>解释：最后使用no选项，将完全由操作系统决定什么时候同步AOF日志文件，这个选项不会对redis性能带来影响。但是系统崩溃时，会丢失不定数量的数据，另外如果用户硬盘处理写入操作不够快的话，当缓冲区被等待写入硬盘数据填满时，redis会处于阻塞状态，并导致redis的处理命令请求的速度变慢。</li></ul><h4 id="AOF文件的重写"><a href="#AOF文件的重写" class="headerlink" title="AOF文件的重写"></a>AOF文件的重写</h4><h5 id="AOF带来的问题"><a href="#AOF带来的问题" class="headerlink" title="AOF带来的问题"></a>AOF带来的问题</h5><p>AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100就够了。为了压缩aof的持久化文件，Redis提供了<strong>AOF重写（ReWriter）机制</strong>。</p><h5 id="AOF重写机制"><a href="#AOF重写机制" class="headerlink" title="AOF重写机制"></a>AOF重写机制</h5><p><strong>客户端方式触发重写</strong></p><ul><li>执行 <code>BGREWRITEAOF</code> 命令（该命令不会阻塞redis的服务）</li></ul><p><strong>服务器配置方式自动触发</strong></p><ul><li>配置<code>redis.conf</code>中的<code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>选项</li><li>如果设置<code>auto-aof-rewrite-percentage 100</code>和<code>auto-aof-rewrite-min-size 64mb</code>，并且启用的AOF持久化时，那么当AOF文件体积大于64M，并且AOF文件的体积比上一次重写之后体积大了至少一倍(100%)时，会自动触发。如果重写过于频繁，用户可以考虑将<code>auto-aof-rewrite-percentage</code>设置为更大。</li></ul><blockquote><p><code>auto-aof-rewrite-percentage</code>和<code>auto-aof-rewrite-min-size</code>可能解释不太对，翻看官方文档后需要查看配置文件说明<br><img src="/Resources/Pasted%20image%2020220919094207.png"></p><p>查看配置文件说明<br><img src="/Resources/Pasted%20image%2020220919094655.png"></p></blockquote><h5 id="重写原理"><a href="#重写原理" class="headerlink" title="重写原理"></a>重写原理</h5><p>注意：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，替换原有的文件。这点和快照有点类似。</p><p><strong>重写流程</strong>：</p><ul><li><ol><li>redis调用fork ，现在有父子两个进程，子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令。</li></ol></li><li><ol start="2"><li>父进程继续处理client请求，除了把写命令写入到原来的aof文件中。同时把收到的写命令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。</li></ol></li><li><ol start="3"><li>当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然后父进程把缓存的写命令也写入到临时文件。</li></ol></li><li><ol start="4"><li>现在父进程可以使用临时文件替换老的aof文件，并重命名，后面收到的写命令也开始往新的aof文件中追加。</li></ol></li></ul><p><img src="/Resources/Pasted%20image%2020220919101504.png"></p><h2 id="10、Java操作Redis"><a href="#10、Java操作Redis" class="headerlink" title="10、Java操作Redis"></a>10、Java操作Redis</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore</a><br>搜索<code>jedis</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.76<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编码测试"><a href="#编码测试" class="headerlink" title="编码测试"></a>编码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPing</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-comment">// 1. new Jedis 对象即可  </span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);  <br>        <span class="hljs-comment">// jedis 所有的命今就是我们之前学习的所有指令!  </span><br>        System.out.println(jedis.ping());  <br>    &#125;<br>&#125; <br>output:<br>PONG<br></code></pre></td></tr></table></figure><h3 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h3><h2 id="11-Springboot整合Redis"><a href="#11-Springboot整合Redis" class="headerlink" title="11. Springboot整合Redis"></a>11. Springboot整合Redis</h2><p>Spring Boot Data Redis 中提供了 RedisTemplate和StringRedisTemplate。<br>其中StringRedisTemplate是RedisTemplate的子类</p><ul><li><strong>RedisTemplate</strong><br>两个泛型都是Object，意味着存储的key和value 都可以是一个对象</li><li><strong>StringRedisTemplate</strong><br>两个泛型都是String,意味着StringRedisTemplate的key和value都只能是字符串</li></ul><blockquote><p>注意：使用RedisTemplate默认是将对象序列化到Redis中，所以放入的对象必须实现对象序列化接口</p></blockquote><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        Spring date redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-配置applicaiton-yml"><a href="#1-配置applicaiton-yml" class="headerlink" title="1. 配置applicaiton.yml"></a>1. 配置applicaiton.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># redis  </span><br><span class="hljs-attr">redis:</span>  <br>  <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <br>  <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-测试使用StringRedisTemplate"><a href="#2-测试使用StringRedisTemplate" class="headerlink" title="2. 测试使用StringRedisTemplate"></a>2. 测试使用StringRedisTemplate</h3><p><code>opsForValue()</code>就是<code>redis</code>中的<code>String</code><br><code>opsForList()</code>就是<code>redis</code>中的<code>list</code><br><code>....</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStringRedisTemplate</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入SpringRedisTemplate</span><br><span class="hljs-comment">     * SpringRedisTemplate的key和value都是String类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作redis中key相关的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKey</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 判断某个key是否存在</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> stringRedisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(hasKey);<br><br>        <span class="hljs-comment">// 删除一个key</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">aBoolean</span> <span class="hljs-operator">=</span> stringRedisTemplate.delete(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(aBoolean);<br><br>        <span class="hljs-comment">// 判断某个key是否存在</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">hasKeys</span> <span class="hljs-operator">=</span> stringRedisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(hasKeys);<br><br>        <span class="hljs-comment">// 判断key对应值的类型</span><br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> stringRedisTemplate.type(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(type);<br><br>        <span class="hljs-comment">// 判断redis中所有的key</span><br>        Set&lt;String&gt; keys = stringRedisTemplate.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-comment">// 获取key值的过期事件</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> stringRedisTemplate.getExpire(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(expire);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>        stringRedisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>        stringRedisTemplate.opsForList().leftPushAll(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-string">&quot;wttt&quot;</span>, <span class="hljs-string">&quot;wtttt&quot;</span>);<br>        <span class="hljs-comment">// 在redis-cli中查看list 使用LRANGE name 0 -1</span><br>        List&lt;String&gt; list = stringRedisTemplate.opsForList().range(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">assert</span> list != <span class="hljs-literal">null</span>;<br>        list.forEach(value -&gt; System.out.println(value));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建Set</span><br>        stringRedisTemplate.opsForSet().add(<span class="hljs-string">&quot;nameSet&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>,<span class="hljs-string">&quot;wtt&quot;</span>,<span class="hljs-string">&quot;wt&quot;</span>);<br>        <span class="hljs-comment">// 查看Set</span><br>        Set&lt;String&gt; set = stringRedisTemplate.opsForSet().members(<span class="hljs-string">&quot;nameSet&quot;</span>);<br>        <span class="hljs-keyword">assert</span> set != <span class="hljs-literal">null</span>;<br>        set.forEach(string-&gt; System.out.println(string));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建ZSet</span><br>        stringRedisTemplate.opsForZSet().add(<span class="hljs-string">&quot;zsets&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>,<span class="hljs-number">13</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建一个hash类型并放入key value</span><br>        stringRedisTemplate.opsForHash().put(<span class="hljs-string">&quot;maps&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;wtt&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作redis中字符串 opsForValue实际操作就是redis中的String类 型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置一个 key value</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>        <span class="hljs-comment">// 获取key 对应的value</span><br>        stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 设置一个 key value expireTime</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>, <span class="hljs-number">120</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 追加value</span><br>        stringRedisTemplate.opsForValue().append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;lihai&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-测试使用RedisTemplate"><a href="#3-测试使用RedisTemplate" class="headerlink" title="3. 测试使用RedisTemplate"></a>3. 测试使用RedisTemplate</h3><p>![[redistemplate 2.png]]<br><code>RedisTemplate</code>存进<code>redis</code>中的数据都是经过序列化的，所以放入的对象必须实现对象序列化接口。因此使用<code>RedisTemplate</code>拿不到通过<code>StringRedisTemplate</code>存进去的数据</p><hr><p>但是我们常常用<code>String</code>表示<code>key</code>，对象表示<code>value</code>，因此可以修改序列化的方式。<br>默认的序列化方式是<code>JdkSerializationRedisSerializer</code><br>![[Pasted image 20220705194854.png]]</p><hr><p>修改默认序列化方案<br><code>redisTemplate.setKeySerializer(new StringRedisSerializer());</code></p><blockquote><p>但是对于hashmap来说，![[Pasted image 20220705201037.png]]有两个key值，使用上述方案，只会修改第一个key的默认序列化方案，因此如果想修改第二个的默认序列化方案，还需要修改hashkey的序列化<code>redisTemplate.setHashKeySerializer(new StringRedisSerializer());</code></p></blockquote><h3 id="4-RedisTemplate和StringRedisTemplate的bound-api"><a href="#4-RedisTemplate和StringRedisTemplate的bound-api" class="headerlink" title="4. RedisTemplate和StringRedisTemplate的bound api"></a>4. RedisTemplate和StringRedisTemplate的bound api</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBound</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//spring data 为了方便我们对redis进行更友好的操作 因此提供了bound api 简化操作</span><br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    stringredisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;wtt&quot;</span>);<br>    stringredisTemplate.opsForValue().append(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;lihai!&quot;</span>);<br>    stringredisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br><br>    <span class="hljs-comment">//对字符串类型key进行绑定后续所有操作都是基于这个key的操作</span><br>    BoundValueOperations&lt;String, String&gt; name = stringredisTemplate.boundValueOps(<span class="hljs-string">&quot;name&quot;</span>);<br>    name.set(<span class="hljs-string">&quot;wtt&quot;</span>);<br>    name.append(<span class="hljs-string">&quot;lihailiahi!&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>针对于日后处理的key value 都是 String 使用 StringRedisTemplate </li><li>针对于日后处理的key value 都是对象使用 RedisTemplate </li><li>针对于同一个key多次操作可以使用boundxxxOps () Value List Set Iset Hash的api 简化书写</li></ol></blockquote><h2 id="12、Redis应用场景"><a href="#12、Redis应用场景" class="headerlink" title="12、Redis应用场景"></a>12、Redis应用场景</h2><ol><li>利用redis中字符串类型完成项目中手机<strong>验证码存储</strong>的实现</li><li>利用redis中字符串类型完成具有<strong>时效性业务</strong>功能，如订单超时，用户信息token<ul><li>12306</li><li>淘宝</li></ul></li><li>利用redis中分布式集群系统<strong>session共享</strong></li><li>利用redis中的zset类型，实现如<strong>排行榜</strong>之类功能 <ul><li>dangdang销量排行sales(zset)[商品id,商品销量]</li></ul></li><li>利用redis实现<strong>分布式缓存</strong></li><li>利用redis解决分布式集群系统中<strong>分布式锁问题</strong></li></ol><h3 id="分布式缓存（一）"><a href="#分布式缓存（一）" class="headerlink" title="分布式缓存（一）"></a>分布式缓存（一）</h3><ul><li><ol><li>缓存（Cache）：计算机内存中的一段数据</li></ol></li><li><ol start="2"><li>特点</li></ol><ul><li>读写快</li><li>断电立即丢失</li></ul></li><li><ol start="3"><li>解决问题</li></ol><ul><li>提高网站吞吐量提高网站运行效率</li><li><strong>核心解决问题</strong>：缓存的存在是用来减轻数据库访问压力</li><li>注意：使用缓存时一定是数据库中数据<strong>极少发生修改</strong>，更多用于查询这种情况（有点类似mysql中的索引）</li></ul></li><li><ol start="4"><li>本地缓存与分布式缓存</li></ol><ul><li>本地缓存（local cache）<ul><li>存在应用服务器内存中数据称之为本地缓存</li><li>本地缓存会随着应用的关闭丢失</li></ul></li><li>分布式缓存（distribute cache）<ul><li>存储在当前应用服务器内存之外数据称之为分布式缓存</li></ul></li><li>集群<ul><li>将<strong>同一种服务的多个节点</strong>放在一起共同对系统提供服务过程，称之为集群</li></ul></li><li>分布式<ul><li><strong>有多个不同服务集群</strong>功能对系统提供服务，这个系统称之为分布式系统</li></ul></li></ul></li><li><ol start="5"><li>利用mybatis自身本地缓存结合redis实现分布式缓存</li></ol><ul><li>mybatis中应用级缓存（二级缓存）  <ul><li>sqlsessionFactory级别缓存  所有会话共享</li></ul></li><li>如何开启应用级缓存（二级缓存）<ul><li>在mapper.xml中加入标签<code>&lt;cache/&gt;</code></li></ul></li></ul></li></ul><h4 id="搭建Mybatis本地缓存环境"><a href="#搭建Mybatis本地缓存环境" class="headerlink" title="搭建Mybatis本地缓存环境"></a>搭建Mybatis本地缓存环境</h4><blockquote><p>基本环境搭建参考：<a href="../../Spring/SpringBoot/SpringBoot.md#%E5%9C%A8SpringBoot%E4%B8%AD%E9%9B%86%E6%88%90Mybatis">在SpringBoot中集成Mybatis</a><br>注意：如果要使用mybatis自身本地缓存，entity对象必须实现对象序列化<code>implements Serializable</code>；</p></blockquote><ul><li><p>开启mybatis自身本地缓存前<br><img src="/Resources/Pasted%20image%2020220919161137.png"></p></li><li><p>开启mybatis自身本地缓存后（开启方式如下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mybatis二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--第一种和第二种效果相同--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220919161033.png"></p></li></ul><h4 id="搭建Redis分布式缓存环境"><a href="#搭建Redis分布式缓存环境" class="headerlink" title="搭建Redis分布式缓存环境"></a>搭建Redis分布式缓存环境</h4><p><img src="/Resources/Pasted%20image%2020220919164355.png"><br>通过查看源码发现，mybatis中的<code>PerpetualCache</code>，将缓存put到内存中，下次取得时候再get，底层使用的数据结构是<code>HashMap</code>，因此<strong>使用Redis分布式缓存只需要自定义一个Cache类实现Cache接口，并对其中的方法换成redis中的方式实现即可</strong>。</p><p>最后再把type中的类名换成自定义的Cache类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;xxxx&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="实现get-put"><a href="#实现get-put" class="headerlink" title="实现get put"></a>实现get put</h5><p>新建一个<code>RedisCache</code>实现<code>Cache</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object o, Object o1)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将type中的类名换成自定义的Cache类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cqupt.cache.RedisCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>运行报错<br><img src="/Resources/Pasted%20image%2020220919170356.png"></p><p>报错信息：需要定义一个ID和构造器（仿照mybatis的PerpetualCache的代码添加id和构造器后并运行）<br><img src="/Resources/Pasted%20image%2020220919171051.png"></p><blockquote><p>通过控制台的信息可以发现：id是mapper中的namespace</p></blockquote><p>运行报错<br><img src="/Resources/Pasted%20image%2020220919170356.png"></p><p>报错信息：name值不能为空，那么值就是id就是mapper中的namespace，所以只需要将<code>return null</code>改为<code>return this.id</code>即可。<br><img src="/Resources/Pasted%20image%2020220919172257.png"></p><p>以下不再一一举例，见代码中注释说明；<br><img src="/Resources/Pasted%20image%2020220919173357.png"></p><p><code>RedisCache</code> 自定义Cache类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前放入缓存的mapper的namespace</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 必须存在构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 当前放入缓存的mapper的namespace</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisCache</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;id======================&gt;&quot;</span> + id);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回cache唯一标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过RedisTemplate或者StringRedisTemplate把值放入redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">         * 这里不能直接使用</span><br><span class="hljs-comment">         * @autowired</span><br><span class="hljs-comment">         * private RedisTemplate redisTemplate</span><br><span class="hljs-comment">         * 是因为RedisCache这个类是由mybatis实例化的，而不是spring工厂，因此不能使用注入方式</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 使用redis hash类型作为缓存存储模型&lt;key, &lt;hashKey,value&gt;&gt;</span><br><span class="hljs-comment">         * 其中key是mapper的namespace</span><br><span class="hljs-comment">         * hashKey是具体的mapper中的某个方法</span><br><span class="hljs-comment">         * value则是某个方法的返回值</span><br><span class="hljs-comment">         */</span><br><br>        redisTemplate.opsForHash().put(id.toString(),key.toString(),value);<br><br>        System.out.println(<span class="hljs-string">&quot;key======================&gt;&quot;</span>+key.toString());<br>        System.out.println(<span class="hljs-string">&quot;value======================&gt;&quot;</span>+value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 根据key从redis获取数据</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash().get(id.toString(), key.toString());<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ApplicationContextUtils</code></p><blockquote><p>对ApplicationContextAware不够了解！且<code>因为RedisCache这个类是由mybatis实例化的，而不是spring工厂，因此不能使用注入方式</code>这句话也不太理解！Redis学完后，复习Spring5!</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Springboot创建好的工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 保留下来的工厂</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将创建好的工厂以参数的形式传递给这个类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> applicationContext 工厂</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供再工厂中获取对象的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UserServiceTest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        userService.findAll().forEach(System.out::println);<br><br>        userService.findAll().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现结果<br><img src="/Resources/Pasted%20image%2020220919193626.png"></p><h5 id="实现remove-clear"><a href="#实现remove-clear" class="headerlink" title="实现remove clear"></a>实现remove clear</h5><p>Q：<u>如果在查询的时候Redis中正好有数据，但是前一秒被修改了，那么从Redis拿出来的数据就是旧数据。类似于以下</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">find<br>modify<br>find<br></code></pre></td></tr></table></figure><p>A：<u>每当进行修改的时候，就把缓存清除，即触发下面的clear方法(不是removeObject，mybatis版本为2.1.3)</u><br><strong>特别注意的是：clear清除的是key为id（namespace）的hash，即清除这一个mapper的所有缓存</strong></p><p>完善之前没有写完的<code>removeObject</code>和<code>clear</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据指定的key删除缓存（mybatis现在还没有实现该方法，以后可能会实现）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 清空缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 清空namespace</span><br><span class="hljs-comment">     */</span><br>    redisTemplate.delete(id.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>Q：<u>为什么使用clear，不根据指定的key删除对应的value</u><br>A：<img src="/Resources/Pasted%20image%2020220919204625.png"><br><u>经过测试，不同参数对应的Key是不同的，因此应该是可以通过只删除对应的value的，也就是使用removeObject方法，但是mybatis默认却没有实现</u></p><h5 id="实现getSize"><a href="#实现getSize" class="headerlink" title="实现getSize"></a>实现getSize</h5><p>该方法用于计算缓存数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过application工具类获取redisTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>    <span class="hljs-keyword">return</span> redisTemplate.opsForHash().size(id.toString()).intValue();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="最后一点：优化获取redisTemplate"><a href="#最后一点：优化获取redisTemplate" class="headerlink" title="最后一点：优化获取redisTemplate"></a>最后一点：优化获取redisTemplate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RedisTemplate <span class="hljs-title function_">getRedisTemplate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>    redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>    <span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分布式缓存（二）"><a href="#分布式缓存（二）" class="headerlink" title="分布式缓存（二）"></a>分布式缓存（二）</h3><p>如果项目中表查询之间没有任何关联查询，使用分布式缓存（一）中的缓存方式没有任何问题。</p><p><strong>但是如果在表连接查询过程中就会存在一定的问题！</strong></p><p>解决方式：将<code>&lt;cache&gt;</code>标签换成&#96;<cache-ref namespace="xxxx"/><br>效果如图所示：<strong>UserDao和EmpDao共享UserDao的缓存</strong>，即EmpDao使用了UserDao的id（namespace）进行存储。<br><img src="/Resources/Pasted%20image%2020220920200751.png"></p><p>测试<br><img src="/Resources/Pasted%20image%2020220920203940.png"></p><h3 id="分布式缓存（三）"><a href="#分布式缓存（三）" class="headerlink" title="分布式缓存（三）"></a>分布式缓存（三）</h3><ol><li>缓存优化策略<br>对放入redis中的key（这里的key指的是hashkey，真正的key是namespace）的长度进行优化：尽可能的将key设计简洁<br><img src="/Resources/Pasted%20image%2020220920202718.png"><br><strong>使用MD5对key进行处理</strong><br>MD5相关参考：<a href="../../Shiro/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B.md#6%20%E4%BD%BF%E7%94%A8MD5%20Salt%20Hash">使用MD5 Salt Hash</a></li></ol><p>修改<code>RedisCache</code>中的代码<br><img src="/Resources/Pasted%20image%2020220920205128.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将冗长的key转为md5</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> md5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getKeyToMd5</span><span class="hljs-params">(String key)</span>&#123;<br>    <span class="hljs-keyword">return</span> DigestUtils.md5DigestAsHex(key.getBytes());<br>&#125;<br></code></pre></td></tr></table></figure><p>修改之后如下所示</p><ul><li>放<br><img src="/Resources/Pasted%20image%2020220920205226.png"></li><li>取<br><img src="/Resources/Pasted%20image%2020220920205506.png"></li></ul><h3 id="缓存穿透、缓存雪崩、缓存击穿"><a href="#缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿"></a>缓存穿透、缓存雪崩、缓存击穿</h3><blockquote><p>参考资料：<a href="https://blog.csdn.net/qq_45637260/article/details/125866738">详解缓存穿透、缓存雪崩、缓存击穿</a></p></blockquote><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>大多数情况，缓存可以减少数据库的查询，提升系统性能。</p><p>通常流程是：一个请求过来，先查询是否在缓存当中，如果缓存中存在，则直接返回。如果缓存中不存在对应的数据，则检索数据库，如果数据库中存在对应的数据，则更新缓存并返回结果。如果数据库中也不存在对应的数据，则返回空或错误。</p><p>缓存穿透（cache penetration）是用户访问的<strong>数据既不在缓存当中，也不在数据库中</strong>。出于容错的考虑，如果从底层数据库查询不到数据，则不写入缓存。这就导致<strong>每次请求都会到底层数据库进行查询，缓存也失去了意义</strong>。当高并发或有人利用不存在的Key频繁攻击时，<strong>数据库的压力骤增</strong>，甚至崩溃，这就是<strong>缓存穿透</strong>问题。<br><img src="/Resources/Pasted%20image%2020230531111802.png"></p><ul><li><p>解决方案1：缓存空数据，查询返回的数据为空，仍把这个空结果进行缓存，此时如果往数据库插入了数据，需要把redis中的数据进行更新</p><ul><li>返回值：<code>&#123;key : 1, value : null&#125;</code></li><li>更新值：<code>&#123;key : 1, value : 1&#125;</code></li><li>缺点：可能存在数据不一致问题，没有及时更新，导致数据库已经有结果了，但是redis中还是null</li></ul></li><li><p>解决方案2：<strong>布隆过滤器</strong></p><ul><li><img src="/Resources/Pasted%20image%2020230531111852.png"></li><li>实现方案<ul><li>Redisson：它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</li><li><a href="https://github.com/redisson/redisson#quick-start">Java实现方法如下</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>config.useSingleServer().setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//构造Redisson</span><br><span class="hljs-type">RedissonClient</span> <span class="hljs-variable">redisson</span> <span class="hljs-operator">=</span> Redisson.create(config);<br> <br>RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class="hljs-string">&quot;phoneList&quot;</span>);<br><span class="hljs-comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span><br>bloomFilter.tryInit(<span class="hljs-number">100000000L</span>,<span class="hljs-number">0.03</span>);<br><span class="hljs-comment">//将号码10086插入到布隆过滤器中</span><br>bloomFilter.add(<span class="hljs-string">&quot;10086&quot;</span>);<br> <br><span class="hljs-comment">//判断下面号码是否在布隆过滤器中</span><br>System.out.println(bloomFilter.contains(<span class="hljs-string">&quot;123456&quot;</span>));<span class="hljs-comment">//false</span><br>System.out.println(bloomFilter.contains(<span class="hljs-string">&quot;10086&quot;</span>));<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Guava</li></ul></li><li>缺点：布隆过滤器是通过查询hash后的值是否为1，当id1和id2将1、3、7、9、12、14的值更改为1后，id3对应的3、9、12恰好也为1，但实际上id3是不存在的<ul><li><img src="/Resources/Pasted%20image%2020230531113240.png"></li><li>存在误判</li></ul></li></ul></li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>在使用缓存时，通常会对缓存设置过期时间，一方面目的是保持缓存与数据库数据的一致性，另一方面是减少冷缓存占用过多的内存空间。</p><p>但当缓存中大量热点缓存采用了相同的实效时间，就会导致<strong>大量缓存在某一个时刻同时实效</strong>，请求全部转发到数据库，从而导致<strong>数据库压力骤增</strong>，甚至宕机。从而形成一系列的连锁反应，造成系统崩溃等情况，这就是<strong>缓存雪崩</strong>（Cache Avalanche）。</p><p><img src="/Resources/Pasted%20image%2020230531145859.png"></p><ul><li>解决方案：<ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性：哨兵模式、集群模式</li><li>给缓存业务添加降级限流策略<ul><li>ngxin、spring cloud gateway</li><li>降级可做为系统的保底策略，适用于穿透、击穿、雪崩</li></ul></li><li>给业务添加多级缓存：Guava、Caffeine</li></ul></li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存雪崩是指大量热点key同时失效的情况，如果是<strong>单个热点key</strong>，在不停的扛着大并发，在这个key失效的瞬间，持续的大并发请求就会击破缓存，直接请求到数据库，好像蛮力击穿一样。这种情况就是<strong>缓存击穿</strong>（Cache Breakdown）。</p><p><img src="/Resources/Pasted%20image%2020230531143625.png"></p><ul><li>解决方案1：互斥锁(<strong>强一致</strong>)</li><li>解决方案2：逻辑过期(<strong>高可用</strong>)</li><li><img src="/Resources/Pasted%20image%2020230531144701.png"></li></ul><p>从定义上可以看出，缓存击穿和缓存雪崩很类似，只不过是缓存击穿是一个热点key失效，而缓存雪崩是大量热点key失效。因此，可以将缓存击穿看作是缓存雪崩的一个子集。</p><h2 id="13、Redis主从"><a href="#13、Redis主从" class="headerlink" title="13、Redis主从"></a>13、Redis主从</h2><h3 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h3><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。因为根据经验，对Redis的操作大部分都是读，写操作占少数，所以在集群中采用读写分离，同时以少量主节点和大量从节点搭配，大大提升Redis的读取性能。<strong>主节点需要注意的就是数据同步如何同步给从节点。</strong></p><h3 id="主从架构图"><a href="#主从架构图" class="headerlink" title="主从架构图"></a>主从架构图</h3><p><img src="/Resources/Pasted%20image%2020230601142227.png"></p><h3 id="搭建主从架构"><a href="#搭建主从架构" class="headerlink" title="搭建主从架构"></a>搭建主从架构</h3><p>使用docker搭建redis主从架构<br>参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#1%20Master%20Slave">docker 搭建redis主从架构</a></p><p><strong>主从复制同步原理</strong></p><ul><li>主从全量同步<ul><li>Replication Id：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li>offset：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li><li><img src="/Resources/Pasted%20image%2020230601143233.png"></li></ul></li><li>主从增量同步<ul><li><img src="/Resources/Pasted%20image%2020230601143341.png"></li><li><img src="/Resources/Pasted%20image%2020230601143359.png"></li></ul></li></ul><h2 id="14、Redis哨兵机制"><a href="#14、Redis哨兵机制" class="headerlink" title="14、Redis哨兵机制"></a>14、Redis哨兵机制</h2><h3 id="哨兵Sentinel机制"><a href="#哨兵Sentinel机制" class="headerlink" title="哨兵Sentinel机制"></a>哨兵Sentinel机制</h3><p>Sentinel（哨兵）是Redis的高可用性解决方案：由一个或多个Sentinel实例组成的Sentinel系统，它可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。简单的说<strong>哨兵就是带有自动故障转移功能的主从架构</strong>。<br><img src="/Resources/Pasted%20image%2020230605095101.png"></p><p><strong>哨兵架构原理</strong><br><img src="/Resources/Pasted%20image%2020220921164320.png"></p><blockquote><p>如果最后的master被修复了之后，将成为新的slave节点继续加入redis集群（Sentinel系统）中。</p></blockquote><p><strong>哨兵监控机制</strong><br><img src="/Resources/Pasted%20image%2020220921195400.png"></p><h3 id="哨兵脑裂"><a href="#哨兵脑裂" class="headerlink" title="哨兵脑裂"></a>哨兵脑裂</h3><p>集群脑裂是由于主节点和从节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到主节点，所以通过选举的方式提升了一个从节点为主，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在老的主节点那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将老的主节点降为从节点，这时再从新master同步数据，就会导致数据丢失</p><p><img src="/Resources/Pasted%20image%2020230605100402.png"></p><p><img src="/Resources/Pasted%20image%2020230605100349.png"><br>解决办法：我们可以修改redis的配置，可以设置最少的从节点数量以及缩短主从数据同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p><p>redis中有两个配置参数：</p><p>min-replicas-to-write 1   表示最少的salve节点为1个</p><p>min-replicas-max-lag 5  表示数据复制和同步的延迟不能超过5秒</p><h3 id="搭建哨兵架构"><a href="#搭建哨兵架构" class="headerlink" title="搭建哨兵架构"></a>搭建哨兵架构</h3><p>参考：<a href="../../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%20%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%90%88%E9%9B%86.md#2%20Redis%20Sentinel">2 Redis Sentinel</a></p><h3 id="Springboot操作哨兵机制下的Redis"><a href="#Springboot操作哨兵机制下的Redis" class="headerlink" title="Springboot操作哨兵机制下的Redis"></a>Springboot操作哨兵机制下的Redis</h3><blockquote><p>主从复制模式下的只需要加一个密码就可以了，其他都不需要更改！</p></blockquote><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment">#  单节点</span><br>  <span class="hljs-comment">#  redis:</span><br>  <span class="hljs-comment">#    host: 192.168.153.135</span><br>  <span class="hljs-comment">#    password: redispwd</span><br>  <span class="hljs-comment">#  redis sentinel配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">redispwd</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-comment"># master是使用哨兵监听的那个名称</span><br>      <span class="hljs-attr">master:</span> <span class="hljs-string">mymaster</span><br>      <span class="hljs-comment"># 连接的不再是一个具体redis主机,写的是多个哨兵节点</span><br>      <span class="hljs-attr">nodes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26379</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26380</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.153</span><span class="hljs-number">.135</span><span class="hljs-string">:26381</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">redispwd</span><br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>执行查询的命令：从数据库拿数据并缓存到redis<br><img src="/Resources/Pasted%20image%2020220922201818.png"></p></li><li><p>此时停掉master服务器</p></li><li><p>再次执行查询的命令：<br>报错连不上redis（此时连接的是新的master找不到）<br><img src="/Resources/Pasted%20image%2020220923091850.png"><br>暂时不知道怎么解决，可视化工具是可以实现主节点宕机，从节点变成主节点，并能够实现主从复制，这里可能是配置文件写错了，导致出问题，之后再解决</p></li></ol><h2 id="15、Redis集群"><a href="#15、Redis集群" class="headerlink" title="15、Redis集群"></a>15、Redis集群</h2><p>Redis在3.0后开始支持Cluster（模式）模式，目前redis的集群支持节点的自动发现，支持slave-master选举和容错，支持在线分片(sharding shard )等特性。</p><h2 id="16、双写一致"><a href="#16、双写一致" class="headerlink" title="16、双写一致"></a>16、双写一致</h2><p>双写一致性：当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致</p><h3 id="一致性要求高"><a href="#一致性要求高" class="headerlink" title="一致性要求高"></a>一致性要求高</h3><p>Redisson提供的读写锁</p><h3 id="允许延迟一致"><a href="#允许延迟一致" class="headerlink" title="允许延迟一致"></a>允许延迟一致</h3><p>异步通知保证数据的最终一致性</p><p>基于MQ的异步通知：<br><img src="/Resources/Pasted%20image%2020230531153915.png"><br>基于Canal的异步通知：<br><img src="/Resources/Pasted%20image%2020230531153939.png"></p><h2 id="17、数据过期策略"><a href="#17、数据过期策略" class="headerlink" title="17、数据过期策略"></a>17、数据过期策略</h2><p>Redis对数据设置数据的有效时间，数据过期以后，就需要将数据从内存中删除掉。可以按照不同的规则进行删除，这种删除规则就被称之为数据的删除策略（数据过期策略）。</p><p>Redis的过期删除策略：惰性删除 + 定期删除两种策略进行配合使用</p><ul><li>惰性删除<ul><li>设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key</li><li>优点 ：对CPU友好，只会在使用该key时才会进行过期检查，对于很多用不到的key不用浪费时间进行过期检查</li><li>缺点 ：对内存不友好，如果一个key已经过期，但是一直没有使用，那么该key就会一直存在内存中，内存永远不会释放</li></ul></li><li>定期删除<ul><li>每隔一段时间，我们就对一些key进行检查，删除里面过期的key(从一定数量的数据库中取出一定数量的随机key进行检查，并删除其中的过期key)。</li><li>两种模式：<ul><li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件 <code>redis.conf</code> 的 hz 选项来调整这个次数<br><img src="/Resources/Pasted%20image%2020230531172213.png"></li><li>lFAST模式执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</li></ul></li><li>优点：可以通过限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响。另外定期删除，也能有效释放过期键占用的内存。</li><li>缺点：难以确定删除操作执行的时长和频率。</li></ul></li></ul><h2 id="18、数据淘汰策略"><a href="#18、数据淘汰策略" class="headerlink" title="18、数据淘汰策略"></a>18、数据淘汰策略</h2><p>数据的淘汰策略：当Redis中的内存不够用时，此时在向Redis中添加新的key，那么Redis就会按照某一种规则将内存中的数据删除掉，这种数据的删除规则被称之为内存的淘汰策略。</p><p><img src="/Resources/Pasted%20image%2020230531173256.png"></p><p>Redis支持8种不同策略来选择要删除的key：</p><ul><li>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，<strong>默认就是这种策略</strong>。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random：对全体key ，随机进行淘汰。</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。</li><li>allkeys-lru： 对全体key，基于LRU算法进行淘汰</li><li>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</li></ul><p>LRU（Least <strong>Recently</strong> Used）最近最少使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p><p>LFU（Least <strong>Frequently</strong> Used）最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高。</p><p>使用建议：<br>1.优先使用 allkeys-lru 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。</p><p>2.如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 allkeys-random，随机选择淘汰。</p><p>3.如果业务中有置顶的需求，可以使用 volatile-lru 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。</p><p>4.如果业务中有短时高频访问的数据，可以使用 allkeys-lfu 或 volatile-lfu 策略。</p><h2 id="19、分布式锁"><a href="#19、分布式锁" class="headerlink" title="19、分布式锁"></a>19、分布式锁</h2><p>分布式锁使用的场景：集群情况下的定时任务、抢单、幂等性场景</p><p>抢券场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抢购优惠券</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rushToPurchase</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//获取优惠券数量</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br><span class="hljs-comment">// 判断是否抢完</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == num || num &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;优惠券已抢完&quot;</span>);<br>&#125;<br><span class="hljs-comment">//优惠券数量减一，说明抢到了优惠券</span><br>num = num - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 重新设置优惠券的数量</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, num);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码，会导致超卖现象，如库存为1的优惠券，经过两个线程的执行后，库存就会变成-1<br><img src="/Resources/Pasted%20image%2020230601095723.png"></p><p>加锁：使用synchronized可以解决上述问题，但这种锁（本地锁）只适用于单体应用，只能在单个jvm中生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抢购优惠券</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rushToPurchase</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-comment">//获取优惠券数量</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br><span class="hljs-comment">// 判断是否抢完</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == num || num &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;优惠券已抢完&quot;</span>);<br>&#125;<br><span class="hljs-comment">//优惠券数量减一，说明抢到了优惠券</span><br>num = num - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 重新设置优惠券的数量</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用synchronized，多个tomcat任然会出现超卖问题</p><p><img src="/Resources/Pasted%20image%2020230601100459.png"></p><p>分布式锁<br><img src="/Resources/Pasted%20image%2020230601101303.png"></p><p>实现：<br>Redis实现分布式锁主要利用Redis的setnx命令。setnx是SET if not exists(如果不存在，则 SET)的简写。<br><img src="/Resources/Pasted%20image%2020230601102342.png"><br>注意：<br>Q:如果不设置时间，可能会因为业务超时或者服务宕机出现死锁，因为无法释放锁<br>Q:如果设置时间过短，业务没有结束就被自动删除了</p><p>A1:设置过期时间，但具体数值需要根据具体业务设置<br>A2:给锁续期：使用redisson实现的分布式锁</p><p>redisson实现的分布式锁:加锁和设置过期时间是基于lua脚本（Lua脚本是redis已经内置的一种轻量小巧语言，其执行是通过redis的<strong>eval</strong> &#x2F; <strong>evalsha</strong> 命令来运行，把操作封装成一个Lua脚本，<del>如论如何都是一次执行的原子操作</del>，不过，如果 Lua 脚本运行时出错并中途结束，出错之后的命令是不会被执行的。并且，出错之前执行的命令是无法被撤销的，无法实现类似关系型数据库执行失败可以回滚的那种原子性效果。即，可以看作是原子操作，<strong>但严格来说的话，不完全满足原子性。</strong>）实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisLock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 获取锁（重入锁），执行锁的名称</span><br><span class="hljs-type">RLock</span> <span class="hljs-variable">rLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(lockName);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 尝试获取锁，参数分别是:获取锁的最大等待时间（期间会重试)，锁自动释放时间，时间单位</span><br><span class="hljs-comment">// boolean isLock = lock.tryLock(10，30，TimeUnit.SECONDS) ;</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> rLock.tryLock(expireTime, TimeUnit.MILLISECONDS);<br><span class="hljs-keyword">if</span> (isLocked) &#123;<br><span class="hljs-comment">// TODO</span><br>&#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放锁</span><br>rLock.unlock();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020230601103935.png"></p><p>redisson实现的分布式锁-可重入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;heimalock&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br><span class="hljs-comment">//执行业务</span><br>add2();<br><span class="hljs-comment">//释放锁</span><br>lock.unlock();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;heimalock&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br><span class="hljs-comment">//执行业务</span><br><span class="hljs-comment">//释放锁</span><br>lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里add1创建的锁，add2也可以拿到继续用（因为是同一个线程），因为redisson实现的分布式锁是可重入的，底层维护了hash结构，当执行add1的时候，重入次数为1<br><img src="/Resources/Pasted%20image%2020230601110132.png"><br>当执行add2的时候，重入次数为2<br>当执行完成add2的时候，重入次数为1<br>当执行完成add1的时候，重入次数为0；<br>Q：为什么add1里面加锁，add2还要加锁呢？<br>A：因为add2不是只会在add1里面调用</p><p>redisson实现的分布式锁-主从一致性<br>当java应用获取锁时，master节点宕机了<br><img src="/Resources/Pasted%20image%2020230601112840.png"></p><p>此时redis会选举一个从节点作为主节点，由于之前的master宕机了，还没来得及数据同步，此时另外一个java应用获取了锁，那么现在就会有两个线程同时持有一把锁<br><img src="/Resources/Pasted%20image%2020230601112932.png"></p><p>解决：<br><img src="/Resources/Pasted%20image%2020230601113203.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis - 英文官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="Database" scheme="http://conquers.github.io/categories/Database/"/>
    
    <category term="Redis" scheme="http://conquers.github.io/categories/Database/Redis/"/>
    
    
    <category term="Redis" scheme="http://conquers.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
