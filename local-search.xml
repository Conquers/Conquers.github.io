<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Es功能实现案例</title>
    <link href="/posts/98542065.html"/>
    <url>/posts/98542065.html</url>
    
    <content type="html"><![CDATA[<h2 id="Es功能实现案例"><a href="#Es功能实现案例" class="headerlink" title="Es功能实现案例"></a>Es功能实现案例</h2><ul><li>需求：<ul><li>设置一张优惠券满足A出版社，B类别，排除id为1的商品，额外添加id为2的商品，在结果中可以继续搜索，筛选，排序等</li></ul></li><li>实现<ul><li>sql</li><li>Es</li></ul></li></ul><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">结果<span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> publisher_name <span class="hljs-operator">=</span> A <span class="hljs-keyword">and</span> class_name <span class="hljs-operator">=</span> B<br>结果<span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>结果 <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">from</span> (结果<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> 结果<span class="hljs-number">2</span>) <span class="hljs-keyword">where</span> product_id <span class="hljs-operator">!=</span> <span class="hljs-number">2</span><br><br>实现排序：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (排序条件)<br>实现使用名字再次搜索：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> title <span class="hljs-keyword">like</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%title%&#x27;</span><br>实现筛选：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (结果) <span class="hljs-keyword">where</span> (筛选条件)<br><br></code></pre></td></tr></table></figure><h3 id="Es-Java"><a href="#Es-Java" class="headerlink" title="Es(Java)"></a>Es(Java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><span class="hljs-comment">// 排除商品</span><br>boolQueryBuilder.mustNot(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, notUseGoodsIdByCouponId));<br><br><span class="hljs-comment">// 满足A出版社，B类别，额外添加id为2的商品</span><br>boolQueryBuilder.must(QueryBuilders.boolQuery()<br>        .should(QueryBuilders.boolQuery()<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>        .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>实现排序：省略<br>实现使用名字再次搜索：boolQueryBuilder.must(QueryBuilders.wildcardQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;*&quot;</span> + title + <span class="hljs-string">&quot;*&quot;</span>));<br>实现筛选：boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;筛选字段&quot;</span>, 筛选条件));<br></code></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果出版社为空，类别为空，会出现没有结果的问题<br>问题分析：查看DSL语句发现参数为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;className&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br>或者<br><span class="hljs-string">&quot;terms&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;publisherName&quot;</span> : [ ],<br>  <span class="hljs-string">&quot;boost&quot;</span> : 1.0<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>问题解决：暴力的办法，应该有更好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(classTypeByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(publisherByCoupon.isEmpty())&#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    boolQueryBuilder.must(QueryBuilders.boolQuery()<br>            .should(QueryBuilders.boolQuery()<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;className&quot;</span>, classTypeByCoupon))<br>                    .must(QueryBuilders.termsQuery(<span class="hljs-string">&quot;publisherName&quot;</span>, publisherByCoupon)))<br>            .should(QueryBuilders.termsQuery(<span class="hljs-string">&quot;productId&quot;</span>, goodsIdByCouponId)));<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL OverView</title>
    <link href="/posts/359ea42e.html"/>
    <url>/posts/359ea42e.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文使用的环境为 阿里云云服务器、<code>MySQL 5.7</code> 和 <code>MySQL 8</code>，均使用 <code>Docker</code> 安装，除非特别说明，默认使用<code>MySQL 5.7</code>。</p><p>如果出现结果不一致，使用命令行即可，因为可视化软件会自动请求一些其他内容。</p></blockquote><ul><li>基础篇<ul><li><a href="http://conquers.github.io/posts/e967e26.html">Mysql 基础篇</a></li></ul></li><li>高级篇<ul><li>架构篇<ul><li><a href="http://conquers.github.io/posts/2237bb15.html">第04章 逻辑架构</a></li><li><a href="http://conquers.github.io/posts/8d469f79.html">第05章 存储引擎</a></li></ul></li><li>索引及调优篇<ul><li>6-12</li><li><a href="http://conquers.github.io/posts/98817d56.html">第06章 索引的数据结构</a></li><li><a href="http://conquers.github.io/posts/69ea2410.html">第08章 索引的创建与设计原则</a></li><li><a href="http://conquers.github.io/posts/43d93e27.html">第09章 性能分析工具的使用</a></li><li><a href="http://conquers.github.io/posts/ada7f77e.html">第10章 索引优化与查询优化</a></li></ul></li><li>事务篇<ul><li><a href="http://conquers.github.io/posts/dfe5e713.html">第13章 事务基础知识</a></li><li><a href="http://conquers.github.io/posts/fa7ec77e.html">第14章 MySQL 日志</a></li><li><a href="http://conquers.github.io/posts/b7d439cb.html">第15章 锁</a></li><li><a href="http://conquers.github.io/posts/99914452.html">第16章 多版本并发控制</a></li></ul></li><li>日志与备份篇<ul><li><a href="http://conquers.github.io/posts/1c2dcbdd.html">第17章 其他数据库日志</a></li><li><a href="http://conquers.github.io/posts/f71f2862.html">第18章 主从复制</a></li><li><a href="http://conquers.github.io/posts/be31b856.html">第19章 数据库备份与恢复</a></li></ul></li><li>架构篇</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch 7.8实战</title>
    <link href="/posts/7b1830e5.html"/>
    <url>/posts/7b1830e5.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于在项目中使用的是ElasticSearch7.8，之前学的是6.8的视频，大部分概念性内容在ElasticSearch6.8已经写过（基本上大差不差），不再赘述，但是7的接口相较于6发生了很大的变化，因此本文主要是实践部分！</p><ul><li><p>最新的参考文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/">Spring Data Elasticsearch - Reference Documentation</a></p></li><li><p>版本对应关系：<br><img src="/Resources/Pasted%20image%2020220804165455.png"></p></li></ul><h2 id="0、环境准备"><a href="#0、环境准备" class="headerlink" title="0、环境准备"></a>0、环境准备</h2><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Java</td><td>1.8</td></tr><tr><td>SpringData-ElasticSearch</td><td>4.3.3</td></tr><tr><td>ElasticSearch</td><td>7.8（没有使用对应的7.15.2是因为7.15.2太占内存）</td></tr><tr><td>Sringboot</td><td>2.6.6</td></tr></tbody></table><hr><h2 id="1、SpringBoot集成ElasticSearch"><a href="#1、SpringBoot集成ElasticSearch" class="headerlink" title="1、SpringBoot集成ElasticSearch"></a>1、SpringBoot集成ElasticSearch</h2><blockquote><p>以热词词频统计模块为基础实践</p></blockquote><p>思路一：通过前端传输的搜索内容分词，存到redis或者其他地方进行词频统计</p><p>思路二：通过前端传输的搜索内容存到Es，根据Es的分词结果（词频和词）存到redis</p><blockquote><p>以下使用思路二为主要思路</p></blockquote><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">repositories:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">uris:</span> <span class="hljs-string">http://localhost:9200</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">elastic</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">elastic</span><br></code></pre></td></tr></table></figure><p><code>RestClientConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAndPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9200&quot;</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(hostAndPort)<br>                .withBasicAuth(<span class="hljs-string">&quot;elastic&quot;</span>, <span class="hljs-string">&quot;elastic&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ElasticsearchRestTemplate <span class="hljs-title function_">elasticsearchRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//自定义ElasticsearchRestTemplate</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchRestTemplate</span>(elasticsearchClient());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建映射对象"><a href="#2、创建映射对象" class="headerlink" title="2、创建映射对象"></a>2、创建映射对象</h4><p>和访问数据库一样，统统以对象的形式访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;searchcontent&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContent</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Text, analyzer = &quot;ik_pinyin_analyzer&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@Field(type = FieldType.Date, format = DateFormat.date_hour_minute_second)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、创建索引即映射"><a href="#3、创建索引即映射" class="headerlink" title="3、创建索引即映射"></a>3、创建索引即映射</h4><p><del>第一种：使用<code>ElasticsearchRestTemplate</code>创建索引</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br>    <span class="hljs-comment">// 如果索引已存在,删除索引</span><br>    <span class="hljs-keyword">if</span> (exists) &#123;<br>        <span class="hljs-comment">// 删除索引</span><br>        elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    &#125;<br>    <span class="hljs-comment">// 创建索引</span><br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br>    <span class="hljs-comment">// 创建映射</span><br>    <span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>    elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>    System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>补充：这里不使用这种方式，因为需要使用pinyin分词器，日常使用<code>@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</code>这种没有问题，但是涉及到自定义分词器就麻烦了</p></blockquote><p>第二种：使用<code>Kibana</code>创建索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT searchcontent<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: <span class="hljs-string">&quot;pinyin_filter&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;pinyin_filter&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pinyin&quot;</span>,<br>                    <span class="hljs-string">&quot;keep_first_letter&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_full_pinyin&quot;</span> : <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;keep_joined_full_pinyin&quot;</span>:<span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_original&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;limit_first_letter_length&quot;</span> : 16,<br>                    <span class="hljs-string">&quot;lowercase&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_none_chinese_in_first_letter&quot;</span> : <span class="hljs-literal">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>  &#125;,<br><span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;content&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_pinyin_analyzer&quot;</span>,<br><span class="hljs-string">&quot;fielddata&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br>  <span class="hljs-string">&quot;createTime&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、创建接口类"><a href="#4、创建接口类" class="headerlink" title="4、创建接口类"></a>4、创建接口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span>;<br><br>    List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实现类"><a href="#5、创建实现类" class="headerlink" title="5、创建实现类"></a>5、创建实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsSearchContentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EsSearchContentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ElasticsearchRestTemplate elasticsearchRestTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EsSearchContentServiceImpl</span><span class="hljs-params">(ElasticsearchRestTemplate elasticsearchRestTemplate, RestHighLevelClient restHighLevelClient)</span> &#123;<br>        <span class="hljs-built_in">this</span>.elasticsearchRestTemplate = elasticsearchRestTemplate;<br>        <span class="hljs-built_in">this</span>.restHighLevelClient = restHighLevelClient;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br>        <span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>        esSearchContent.setContent(message);<br>        esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        indexQuery.setObject(esSearchContent);<br>        elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getHotWords</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;String&gt; hotWords = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//创建search请求</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>();<br>        searchRequest.indices(<span class="hljs-string">&quot;searchcontent&quot;</span>);<br>        <span class="hljs-comment">//生成DSL查询语句</span><br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>        <span class="hljs-comment">//构建查询条件</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoolQueryBuilder</span>();<br><br>        <span class="hljs-comment">//时间范围的设定</span><br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">rangequerybuilder</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;createTime&quot;</span>);<br>        rangequerybuilder.gte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        rangequerybuilder.lte(<span class="hljs-string">&quot;2022-08-11T11:09:42&quot;</span>);<br>        boolQueryBuilder.filter(rangequerybuilder);<br><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        <span class="hljs-type">AggregationBuilder</span> <span class="hljs-variable">aggregation</span> <span class="hljs-operator">=</span> AggregationBuilders.terms(<span class="hljs-string">&quot;count&quot;</span>)<br>                .field(<span class="hljs-string">&quot;content&quot;</span>)<br>                .includeExclude(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IncludeExclude</span>(<span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span>, <span class="hljs-literal">null</span>))<br>                .minDocCount(<span class="hljs-number">3</span>);<br>        searchSourceBuilder.aggregation(aggregation);<br><br>        searchRequest.source(searchSourceBuilder);<br><br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>            <span class="hljs-type">Terms</span> <span class="hljs-variable">terms</span> <span class="hljs-operator">=</span> searchResponse.getAggregations().get(<span class="hljs-string">&quot;count&quot;</span>);<br>            List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; elasticBucket = terms.getBuckets();<br>            elasticBucket.forEach(hotWord -&gt; &#123;<br>                System.out.println(hotWord.getKeyAsString());<br>                hotWords.add(hotWord.getKeyAsString());<br><br>                System.out.println(hotWord.getDocCount());<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> hotWords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、插入数据"><a href="#6、插入数据" class="headerlink" title="6、插入数据"></a>6、插入数据</h4><p>这里的插入数据，即使用搜索服务（也可以使用kibana或者Springboot往里面直接插入数据）<br>分别发起三次搜索（因为上面进行分词的时候最少也要出现3次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;原装书籍&quot;</span>,<span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;publisherList&quot;</span>:[],<span class="hljs-string">&quot;classType&quot;</span>:[],<span class="hljs-string">&quot;searchType&quot;</span>:1,<span class="hljs-string">&quot;searchSortType&quot;</span>:0,<span class="hljs-string">&quot;typeInSearch&quot;</span>:-1,<span class="hljs-string">&quot;pageNo&quot;</span>:0,<span class="hljs-string">&quot;pageSize&quot;</span>:10,<span class="hljs-string">&quot;storeId&quot;</span>:<span class="hljs-string">&quot;500001&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220804195951.png"></p><p><img src="/Resources/Pasted%20image%2020220804142629.png"></p><p>在Kibana中查看存入的数据<br><img src="/Resources/Pasted%20image%2020220804142736.png"></p><hr><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><h4 id="1、使用Kibana进行词频统计"><a href="#1、使用Kibana进行词频统计" class="headerlink" title="1、使用Kibana进行词频统计"></a>1、使用Kibana进行词频统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /productindexwtt/_search<br>&#123;<br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [],<br>      <span class="hljs-string">&quot;should&quot;</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;messages&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;size&quot;</span>: 100,<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;content&quot;</span>,<br>        <span class="hljs-string">&quot;min_doc_count&quot;</span>: 3,<br>        <span class="hljs-string">&quot;include&quot;</span>: <span class="hljs-string">&quot;[\u4E00-\u9FA5][\u4E00-\u9FA5].*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试词频统计<br><img src="/Resources/Pasted%20image%2020220804142818.png"></p><h4 id="2、在Springboot中测试功能"><a href="#2、在Springboot中测试功能" class="headerlink" title="2、在Springboot中测试功能"></a>2、在Springboot中测试功能</h4><p>效果：<br><img src="/Resources/Pasted%20image%2020220804164859.png"></p><hr><h4 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h4><p>使用聚合搜索时，使用getAggregations()拿取数据时报错，排查分析后是版本问题：将Springboot版本降至2.3.3.RELEASE即可解决。</p><blockquote><p>由于项目版本不能动，因此这里不使用ElasticsearchTemplate进行聚合搜索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> searchHits.getAggregations();<br></code></pre></td></tr></table></figure><p>最后折中选择使用了RestHighLevelClient，代码见上。</p><h2 id="2、ElasticsearchTemplate的用法"><a href="#2、ElasticsearchTemplate的用法" class="headerlink" title="2、ElasticsearchTemplate的用法"></a>2、ElasticsearchTemplate的用法</h2><blockquote><p>在6.8中有<code>ElasticsearchRepository</code>和<code>RestHighLevelClient</code>的用法</p></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).exists();<br><span class="hljs-comment">// 如果索引已存在,删除索引</span><br><span class="hljs-keyword">if</span> (exists) &#123;<br><span class="hljs-comment">// 删除索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>&#125;<br><span class="hljs-comment">// 创建索引</span><br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).create();<br><br><span class="hljs-comment">// 创建映射</span><br><span class="hljs-type">Document</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).createMapping();<br>elasticsearchRestTemplate.indexOps(EsSearchContent.class).putMapping(mappings);<br>System.out.println(<span class="hljs-string">&quot;---执行成功---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除索引</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">deleted</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.indexOps(EsSearchContent.class).delete();<br>    System.out.println(<span class="hljs-string">&quot;是否删除成功 : &quot;</span> + deleted);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新增文档数据"><a href="#新增文档数据" class="headerlink" title="新增文档数据"></a>新增文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增文档数据</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">IndexQuery</span> <span class="hljs-variable">indexQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexQuery</span>();<br><span class="hljs-type">EsSearchContent</span> <span class="hljs-variable">esSearchContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsSearchContent</span>();<br>esSearchContent.setContent(<span class="hljs-string">&quot;message&quot;</span>);<br>esSearchContent.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>indexQuery.setObject(esSearchContent);<br>elasticsearchRestTemplate.index(indexQuery, IndexCoordinates.of(<span class="hljs-string">&quot;searchcontent&quot;</span>));<br><span class="hljs-comment">//这里也可以使用下面的save</span><br>elasticsearchRestTemplate.save(esSearchContent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除文档数据"><a href="#删除文档数据" class="headerlink" title="删除文档数据"></a>删除文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 删除文档数据</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDoc</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 返回被删除的数据id</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> elasticsearchRestTemplate.delete(<span class="hljs-string">&quot;IYzHaIIBQknQYDuAgCU-&quot;</span>, EsSearchContent.class);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询文档数据"><a href="#查询文档数据" class="headerlink" title="查询文档数据"></a>查询文档数据</h3><p>查询设计到很多方法，下面列举其中比较复杂的高亮查询，其他的皆可类比</p><blockquote><p>以下没有的方法可以去官网查看或者通过搜索引擎搜索得到</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> List&lt;EsProduct&gt; <span class="hljs-title function_">testSearch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 需要查询的字段</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()<br>                .must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;我是标题&quot;</span>));<br>        <br>        <span class="hljs-comment">// 分页 从第0页开始，每页10条数据</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br> <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">        构建高亮查询</span><br><span class="hljs-comment">        NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">                .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">                .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">                .withHighlightFields(</span><br><span class="hljs-comment">                        new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">                .withPageable(pageable)</span><br><span class="hljs-comment">                .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">                .build();</span><br><span class="hljs-comment">        */</span><br>        <br>    <span class="hljs-comment">//构建高亮查询</span><br>        <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>        searchQueryBuilder.withQuery(boolQueryBuilder);<br>        searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>        searchQueryBuilder.withPageable(pageable);<br>        searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 排序</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(rangeInDefined(searchSortType,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))&#123;<br>            sortByCondition(searchQueryBuilder,searchSortType);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 查询</span><br>        SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(searchQuery, EsProduct.class);<br>        <span class="hljs-comment">// 得到查询返回的内容</span><br>        List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>        <span class="hljs-comment">// 设置一个最后需要返回的实体类集合</span><br>        List&lt;EsProduct&gt; esProducts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 遍历返回的内容进行处理</span><br>        <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>            <span class="hljs-comment">// 高亮的内容</span><br>            Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>            <span class="hljs-comment">// 将高亮的内容填充到content中</span><br>            searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>            searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 放到实体类中</span><br>            esProducts.add(searchHit.getContent());<br>        &#125;<br>        <span class="hljs-keyword">return</span> esProducts;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><h5 id="问题1：should和must连用不起作用"><a href="#问题1：should和must连用不起作用" class="headerlink" title="问题1：should和must连用不起作用"></a>问题1：should和must连用不起作用</h5><p>参考文档：<a href="https://blog.csdn.net/qq_39818325/article/details/118578063">elasticsearch中的对象QueryBuilder同时使用should和must查询不成功</a><br>BoolQueryBuilder中的should和must一起用会出现问题：<br>解决问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码承接上述错误代码，新增下面一行 </span><br>boolQueryBuilder.minimumShouldMatch(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题2：rangeQuery不起作用"><a href="#问题2：rangeQuery不起作用" class="headerlink" title="问题2：rangeQuery不起作用"></a>问题2：rangeQuery不起作用</h5><p>解决问题：<br><strong>查看排序的字段是否是Integer或者其他数据类型</strong><br>创建索引的时候使用的是Keyword，修改为Integer好了</p><h5 id="问题3：有时候需要排序，有时候不需要排序"><a href="#问题3：有时候需要排序，有时候不需要排序" class="headerlink" title="问题3：有时候需要排序，有时候不需要排序"></a>问题3：有时候需要排序，有时候不需要排序</h5><p>代码替换成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   这里建议用下面的，因为可能不需要排序</span><br><span class="hljs-comment">   构建高亮查询</span><br><span class="hljs-comment">   NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="hljs-comment">           .withQuery(boolQueryBuilder)</span><br><span class="hljs-comment">           .withSorts(SortBuilders.fieldSort(&quot;id&quot;).order(SortOrder.ASC))</span><br><span class="hljs-comment">           .withHighlightFields(</span><br><span class="hljs-comment">                   new HighlightBuilder.Field(&quot;title&quot;))</span><br><span class="hljs-comment">           .withPageable(pageable)</span><br><span class="hljs-comment">           .withHighlightBuilder(new HighlightBuilder().preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;).postTags(&quot;&lt;/span&gt;&quot;))</span><br><span class="hljs-comment">           .build();</span><br><span class="hljs-comment">   */</span><br>   <br><span class="hljs-comment">//构建高亮查询</span><br>   <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>   searchQueryBuilder.withQuery(boolQueryBuilder);<br>   searchQueryBuilder.withHighlightFields( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>   searchQueryBuilder.withPageable(pageable);<br>   searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="问题4：有些关键词不需要分词"><a href="#问题4：有些关键词不需要分词" class="headerlink" title="问题4：有些关键词不需要分词"></a>问题4：有些关键词不需要分词</h5><p>使用termQuery<br><code>.must(QueryBuilders.termQuery(&quot;title&quot;, &quot;我是标题&quot;));</code><br>如果一定要使用matchQuery，加上<code>.operator(Operator.AND</code><br><code>.must(QueryBuilders.matchQuery(&quot;title&quot;, &quot;我是标题&quot;).operator(Operator.AND));</code></p><h5 id="问题5：过滤分数太低的结果"><a href="#问题5：过滤分数太低的结果" class="headerlink" title="问题5：过滤分数太低的结果"></a>问题5：过滤分数太低的结果</h5><blockquote><p><strong>不要使用for循环遍历</strong><br>使用<code>withMinScore(1)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br>searchQueryBuilder.withMinScore(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="问题6：-Test不能直接运行"><a href="#问题6：-Test不能直接运行" class="headerlink" title="问题6：@Test不能直接运行"></a>问题6：@Test不能直接运行</h5><p>类上面加了<code>@SpringBootTest</code><br>方法上面加了<code>@Test</code><br>但是不能运行，注意导包的路径应该为<code>import org.junit.jupiter.api.Test;</code><br><strong>否则不起作用</strong></p><h5 id="问题7：时间排序没数据"><a href="#问题7：时间排序没数据" class="headerlink" title="问题7：时间排序没数据"></a>问题7：时间排序没数据</h5><p>过滤最小分数的问题不知道为什么，去掉了<code>.withMinScore(1);</code>解决，但是又需要过滤最小分数。<br><img src="/Resources/Pasted%20image%2020220819164536.png"><br>但是为什么按照价格排序，却有数据返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> List&lt;SearchDto&gt; <span class="hljs-title function_">searchByKeyTitle</span><span class="hljs-params">(String title, String price, List&lt;String&gt; classType, List&lt;String&gt; publisherList, Integer typeInSearch,</span><br><span class="hljs-params">                                         String storeId, List&lt;String&gt; jointStoreList, <span class="hljs-type">int</span> searchSortType, <span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> packageType, String stockOfStore)</span> &#123;<br><br>     <span class="hljs-comment">// 构建搜索</span><br>     <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>     <span class="hljs-type">NativeSearchQueryBuilder</span> <span class="hljs-variable">searchQueryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>();<br><br>     <span class="hljs-comment">// 过滤</span><br>     conditionFilter(boolQueryBuilder, price, classType, publisherList, typeInSearch, storeId, jointStoreList, searchSortType, packageType, stockOfStore);<br>     searchQueryBuilder.withFilter(boolQueryBuilder);<br><br>     <span class="hljs-comment">// 分页</span><br>     <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(pageNo, pageSize);<br>     searchQueryBuilder.withPageable(pageable);<br><br>     <span class="hljs-comment">// 搜索</span><br>     List&lt;FunctionScoreQueryBuilder.FilterFunctionBuilder&gt; filterFunctionBuilders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">5</span>)));<br>     filterFunctionBuilders.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(QueryBuilders.matchQuery(<span class="hljs-string">&quot;author&quot;</span>, title),<br>             ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">10</span>)));<br>     FunctionScoreQueryBuilder.FilterFunctionBuilder[] builders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[filterFunctionBuilders.size()];<br>     filterFunctionBuilders.toArray(builders);<br>     <span class="hljs-type">FunctionScoreQueryBuilder</span> <span class="hljs-variable">functionScoreQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.functionScoreQuery(builders)<br>             .scoreMode(FunctionScoreQuery.ScoreMode.SUM)<br>             .setMinScore(<span class="hljs-number">2</span>);<br><br>     <span class="hljs-comment">// 排序</span><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 排序类型必须是在1-7的范围内，否则是参数错误</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-keyword">if</span> (rangeInDefined(searchSortType, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>)) &#123;<br>         sortByCondition(searchQueryBuilder, searchSortType);<br>     &#125;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 不管是什么排序类型，最后都要按照相关度二次排序</span><br><span class="hljs-comment">      */</span><br>     searchQueryBuilder.withSorts(SortBuilders.scoreSort().order(SortOrder.DESC));<br><br>     searchQueryBuilder.withQuery(functionScoreQueryBuilder);<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;title&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;author&quot;</span>));<br>     searchQueryBuilder.withHighlightFields(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;publisherName&quot;</span>));<br>     searchQueryBuilder.withHighlightBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>));<br><br>     <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> searchQueryBuilder.build();<br><br>     <span class="hljs-comment">//查询</span><br>     SearchHits&lt;EsProduct&gt; search = elasticsearchRestTemplate.search(build, EsProduct.class);<br>     <span class="hljs-comment">//得到查询返回的内容</span><br>     List&lt;SearchHit&lt;EsProduct&gt;&gt; searchHits = search.getSearchHits();<br>     <span class="hljs-comment">//设置一个最后需要返回的实体类集合</span><br>     List&lt;SearchDto&gt; accurateSearch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-comment">//遍历返回的内容进行处理</span><br>     <span class="hljs-keyword">for</span> (SearchHit&lt;EsProduct&gt; searchHit : searchHits) &#123;<br>         <span class="hljs-comment">//高亮的内容</span><br>         Map&lt;String, List&lt;String&gt;&gt; highlightFields = searchHit.getHighlightFields();<br>         <span class="hljs-comment">//将高亮的内容填充到content中</span><br>         searchHit.getContent().setTitle(highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getTitle() : highlightFields.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setAuthor(highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getAuthor() : highlightFields.get(<span class="hljs-string">&quot;author&quot;</span>).get(<span class="hljs-number">0</span>));<br>         searchHit.getContent().setPublisherName(highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>) == <span class="hljs-literal">null</span> ? searchHit.getContent().getPublisherName() : highlightFields.get(<span class="hljs-string">&quot;publisherName&quot;</span>).get(<span class="hljs-number">0</span>));<br>         <span class="hljs-comment">// 封面图片拼接</span><br>         searchHit.getContent().setCoverPage(StringUtil.urlConnect(searchHit.getContent().getCoverPage(), StringUtil.PICTURE_TYPE_200));<br>         <span class="hljs-comment">//放到实体类中</span><br>         accurateSearch.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchDto</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Search</span>(searchHit.getContent())));<br>     &#125;<br>     System.out.println(accurateSearch);<br>     <span class="hljs-keyword">return</span> accurateSearch;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>SpringData</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch 6.x使用教程</title>
    <link href="/posts/d5bb74c6.html"/>
    <url>/posts/d5bb74c6.html</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p><img src="/Resources/elastic.png"></p><h2 id="🛬全文检索"><a href="#🛬全文检索" class="headerlink" title="🛬全文检索"></a>🛬全文检索</h2><p><strong>全文检索</strong>是计算机程序通过<strong>扫描</strong>文章中的每一个词，对每一个词<strong>建立</strong>一个索引，指明该词在文章中出现的<strong>次数</strong>和<strong>位置</strong>。当用户查询时根据建立的索引查找，类似于通过字典的检索字表查字的过程。</p><p>检索：</p><ul><li>索：(<em>建立</em> 索引) </li><li>检：(<em>检索</em> 索引)</li></ul><p>全文检索（Full-Text Retrieval(检索））以文本作为检索对象，找出含有指定词汇的文本。<strong>全面、准确和快速是衡量全文检索系统的关键指标。</strong></p><p>关于全文检索，我们要知道：</p><ol><li><p>只处理<em>文本</em>。</p></li><li><p>不处理<em>语义</em>。</p></li><li><p>搜索时英文<em>不区分大小写</em>。</p></li><li><p>结果列表有<em>相关度排序</em>。</p></li></ol><hr><h2 id="🚁Elastic-Search"><a href="#🚁Elastic-Search" class="headerlink" title="🚁Elastic Search"></a>🚁Elastic Search</h2><p><img src="/Resources/Pasted%20image%2020220720115306.png" alt="Resources/Pasted image 20220720115306.png"><br>官方网站：<a href="https://www.elastic.co/cn/">免费且开放的搜索：Elasticsearch、ELK 和 Kibana 的开发者 | Elastic</a><br>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html">Elasticsearch Guide | Elastic</a></p><p><strong>ElasticSearch</strong> 简称 <em>ES</em> ，是<strong>基于Apache Lucene构建的开源搜索引擎，是当前流行的企业级搜索引擎。</strong>Lucene本身就可以被认为迄今为止性能最好的一款开源搜索引擎工具包，但是Lucene的API相对复杂，需要深厚的搜索理论。很难集成到实际的应用中去。<strong>但是ES是采用java语言编写，提供了简单易用的RestFul API，开发者可以使用其简单的RestFul API，开发相关的搜索功能，从而避免Lucene的复杂性。</strong></p><h3 id="ES的应用场景"><a href="#ES的应用场景" class="headerlink" title="ES的应用场景"></a>ES的应用场景</h3><p><strong>ES主要以轻量级JSON作为数据存储格式，这点与MongoDB有点类似，但它在读写性能上优于 MongoDB 。同时也支持地理位置查询，还方便地理位置和文本混合查询 。 以及在统计、日志类数据存储和分析、可视化这方面是引领者。</strong></p><ul><li><p>国外:<br><em>Wikipedia</em>(维基百科)使用ES提供全文搜索并高亮关键字、<em>StackOverflow</em>(IT问答网站)结合全文搜索与地理位置查询、<em>Github</em>使用Elasticsearch检索1300亿行的代码。</p></li><li><p>国内:<br>百度(在云分析、网盟、预测、文库、钱包、风控等业务上都应用了ES，单集群每天导入30TB+数据， 总共每天60TB+)、新浪 、阿里巴巴、腾讯等公司均有对ES的使用。</p></li></ul><p>&#x3D;&#x3D;使用比较广泛的平台ELK(ElasticSearch, Logstash, Kibana)。&#x3D;&#x3D;</p><hr><h2 id="🪐安装ElasticSearch"><a href="#🪐安装ElasticSearch" class="headerlink" title="🪐安装ElasticSearch"></a>🪐安装ElasticSearch</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="http://localhost:4000/posts/dcb3f659.html#elasticsearch">Docker 安装 Elasticsearch</a></p><hr><h2 id="🌌ElasticSearch-基本概念"><a href="#🌌ElasticSearch-基本概念" class="headerlink" title="🌌ElasticSearch 基本概念"></a>🌌ElasticSearch 基本概念</h2><ul><li><p><strong>1、接近实时(NRT Near Real Time)</strong><br>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟(通常是 <em>1秒内</em> )</p></li><li><p><strong>2、索引(index)</strong><br><em>一个索引就是一个拥有几分相似特征的文档的集合</em>。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。<em>索引类似于关系型数据库中 Database 的概念</em>。在一个集群中，如果你想，可以定义任意多的索引。</p></li><li><p><strong>3、类型(type)</strong><br><em>在一个索引中，你可以定义一种或多种类型</em>。一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。<em>类型类似于关系型数据库中Table的概念</em>。</p><blockquote><p>NOTE: 在5.x版本以前可以在一个索引中定义多个类型,6.x之后版本也可以使用,但是不推荐,在7~8.x版本中彻底移除一个索引中创建多个类型</p></blockquote></li><li><p><strong>4、映射(Mapping)</strong><br><em>Mapping</em>是ES中的一个很重要的内容，<em>它类似于传统关系型数据中table的schema，用于定义一个索引(index)中的类型(type)的数据的结构</em>。 在ES中，我们可以手动创建type(相当于table)和mapping(相关与schema),也可以采用默认创建方式。在默认配置下，ES可以根据插入的数据自动地创建type及其mapping。 <em>mapping中主要包括字段名、字段数据类型和字段索引类型</em></p></li></ul><p><strong>5、文档(document)</strong><br>一个文档是一个可被索引的<em>基础信息单元</em>，<em>类似于表中的一条记录</em>。比如，你可以拥有某一个员工的文档，也可以拥有某个商品的一个文档。文档以采用了轻量级的数据交换格式JSON(JavaScript Object Notation)来表示。</p><p><img src="/Resources/Pasted%20image%2020220721085020.png" alt="Resources/Pasted image 20220721085020.png"></p><h3 id="索引库底层原理分析"><a href="#索引库底层原理分析" class="headerlink" title="索引库底层原理分析"></a>索引库底层原理分析</h3><p>ElasticSearch 对于不同的服务建立了不同的索引，每个索引又创建了类型（6以后只能创建一个），同时对类型进行了约束，现在我们往ES中索引文档，它内部是怎样工作的呢？<br><img src="/Resources/Pasted%20image%2020220725114905.png"></p><ul><li><p>现在我们添加按照其类型的约束添加“张三”这条数据，ES拿到这条数据</p></li><li><p>首先把整个文档进行储存在元数据区，同时会生成对应的”_id”，比如这里为0，到时候我们拿0去查询，就可以得到这个文档；</p></li><li><p>然后按照分词器（所谓分词器就是对你输入的数据，按照一定的规则进行划分，这里以标准分词器为例）进行划分，因为name属性是”text”类型，所以需要分词，按照规则，进行单字划分，先分“张”，然后记录这个字在右边哪个文档中出现，同时出现了几次（当然这里只是简单列举一下，实际情况可能更复杂），再分“三”，一样的操作；接下来是”age”属性，因为age是”Integer”类型，所以不需要分词，直接存储，记录。一直如此操作，直到对输入的数据完成…</p></li><li><p>现在我们要插入第二条数据，同样是现在元数据区进行储存，为其分配”_id”，然后是索引区操作，现在”张”这个字不仅在0文档出现，也出现在1文档。</p></li><li><p>需求： 现在用户想要查找address为”北京”的文档，ES会进行两次搜索，先是在索引区（分词后存放的数据）找到相匹配的文档的”id”，再是按照”id”去找到元数据区对应的文档，最后按照：比如在0文档出现的次数多，就把0文档排在前面，展示给用户。</p></li><li><p><strong>总结： 索引库储存数据，分为索引区和元数据区，元数据区储存完整文档，索引区存放分词过后的数据</strong></p></li></ul><hr><h2 id="🌈Kibana"><a href="#🌈Kibana" class="headerlink" title="🌈Kibana"></a>🌈Kibana</h2><p>Kibana是一个针对Elasticsearch的开源分析及<strong>可视化平台</strong>，使用Kibana可以查询、查看并与存储在ES索引的数据进行交互操作，使用Kibana能执行高级的数据分析，并能以图表、表格和地图的形式查看数据。</p><blockquote><p>Kibana版本和ElasticSearch版本必须一致！</p></blockquote><p><a href="http://localhost:4000/posts/dcb3f659.html#Kibana">Docker 安装 Kibana</a></p><h3 id="Kibana基本操作"><a href="#Kibana基本操作" class="headerlink" title="Kibana基本操作"></a>Kibana基本操作</h3><h4 id="整体界面"><a href="#整体界面" class="headerlink" title="整体界面"></a>整体界面</h4><p><img src="/Resources/Pasted%20image%2020220721112115.png" alt="Resources/Pasted image 20220721112115.png"></p><p><strong>PUT 创建索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721112724.png" alt="Resources/Pasted image 20220721112724.png"></p><blockquote><p>弃用：在7.0.0中，默认备份数将从[5]更改为[1]；如果希望继续使用默认的[5]个备份，则必须在创建索引请求或使用索引模板进行管理</p></blockquote><p>使用下面的命令，则不会报警告🟥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: 1,<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：索引的名字必须是小写！<br><img src="/Resources/Pasted%20image%2020220721113056.png" alt="Resources/Pasted image 20220721113056.png"></p></blockquote><p><strong>DELETE 删除索引</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除单个索引</span><br>DELETE /ems<br><br><span class="hljs-comment">#删除所有索引</span><br>DELETE /*<br></code></pre></td></tr></table></figure><p><strong>GET 查看索引信息</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /_cat/indices?v<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721114628.png" alt="Resources/Pasted image 20220721114628.png"></p><blockquote><p>red -&gt; 索引不可用<br>yellow -&gt;索引不健壮<br>green -&gt;索引健壮</p></blockquote><hr><h4 id="类型Type-和-映射Mapping"><a href="#类型Type-和-映射Mapping" class="headerlink" title="类型Type 和 映射Mapping"></a>类型Type 和 映射Mapping</h4><p><strong>创建索引时并创建类型</strong><br>其中emp是类型，id，name，age，bir是emp类型的四个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /ems <br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;id&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125; <br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721141543.png" alt="Resources/Pasted image 20220721141543.png"></p><blockquote><p>Mapping Type：<strong>text, keyword, date, integer, long, double, boolean or ip</strong></p></blockquote><p><strong>查看创建索引以及索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142029.png" alt="Resources/Pasted image 20220721142029.png"></p><p><strong>只查看索引中的映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/_mapping<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142144.png" alt="Resources/Pasted image 20220721142144.png"></p><hr><h4 id="文档Document"><a href="#文档Document" class="headerlink" title="文档Document"></a>文档Document</h4><p><strong>插入一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档操作：</span><br><span class="hljs-comment"># 插入一条文档 PUT /索引/类型/1</span><br>PUT /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>:23,<br>  <span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142647.png" alt="Resources/Pasted image 20220721142647.png"></p><p><strong>查询一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721142717.png" alt="Resources/Pasted image 20220721142717.png"></p><p><strong>删除一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 根据id查询文档中一条记录 GET /索引/类型/文档id</span><br>DELETE /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721143532.png" alt="Resources/Pasted image 20220721143532.png"></p><p><strong>更新一条文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721152834.png" alt="Resources/Pasted image 20220721152834.png"><br><img src="/Resources/Pasted%20image%2020220721152918.png" alt="Resources/Pasted image 20220721152918.png"></p><blockquote><p>如果像这样更新的话，不会保留原始数据（<strong>先删除，再插入</strong>）<br>可以使用下面的方式，保留原始数据！而且还可以新添加新的字段！（缺点是会自动匹配字段类型，不太准确）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan2&quot;</span><br>  &#125;<br>&#125;<br><br>GET /ems/emp/1<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721153237.png" alt="Resources/Pasted image 20220721153237.png"><br><img src="/Resources/Pasted%20image%2020220721153251.png" alt="Resources/Pasted image 20220721153251.png"></p><p><strong>使用脚本更新</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每次给age+5</span><br>POST /ems/emp/1/_update<br>&#123;<br>  <span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;ctx._source.age+=5&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><blockquote><p>批量时不会因为一个失败而全部失败,而是继续执行后续操作,批量在返回时按照执行的状态开始返回</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 文档批量操作 _bulk</span><br><span class="hljs-comment"># 添加(index) 删除(delete) 更新(update)</span><br>PUT /ems/emp/_bulk<br>&#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhang&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2011-11-11&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;delete&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;update&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;doc&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:18,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-11-12&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220721154934.png" alt="Resources/Pasted image 20220721154934.png"></p><hr><h2 id="🌋ES高级检索Query"><a href="#🌋ES高级检索Query" class="headerlink" title="🌋ES高级检索Query"></a>🌋ES高级检索Query</h2><p>ES官方提供了两中检索方式：</p><ul><li><ol><li>通过 URL 参数进行搜索<br><code>GET /索引/类型/_search ?参数</code></li></ol></li><li><ol start="2"><li>通过 DSL(Domain Specified Language) 进行搜索<br><code>GET /索引/类型/_search &#123;&#125;</code></li></ol></li></ul><p>官方更推荐使用<strong>第二种方式</strong>，第二种方式是基于传递JSON作为请求体(request body)格式与ES进行交互，这种方式更强大，更简洁。<br><img src="/Resources/Pasted%20image%2020220725095720.png"></p><p>以下只展示大部分的命令，更多请查看官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-dsl.html">Query DSL | Elasticsearch Guide [6.8] | Elastic</a></p><h4 id="构建测试数据"><a href="#构建测试数据" class="headerlink" title="构建测试数据"></a>构建测试数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.删除索引</span><br>DELETE /ems<br><br><span class="hljs-comment"># 2.创建索引并指定类型</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 3.插入测试数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="URL检索"><a href="#URL检索" class="headerlink" title="URL检索"></a>URL检索</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /ems/emp/_search?<span class="hljs-attribute">q</span>=*&amp;sort=age:desc&amp;size=5&amp;from=0&amp;_source=name,age,bir<br><br>_search：搜索的API<br><br><span class="hljs-attribute">q</span>=* ：匹配所有文档<br><br><span class="hljs-attribute">sort</span>=age：按照指定字段进行排序，默认为升序，:desc 降序排列<br><br>size：展示多少条数据<br><br><span class="hljs-keyword">from</span>：展示第几页<br><br>_source：只匹配哪些字段<br></code></pre></td></tr></table></figure><h4 id="DSL检索"><a href="#DSL检索" class="headerlink" title="DSL检索"></a>DSL检索</h4><h5 id="1-查询所有-match-all"><a href="#1-查询所有-match-all" class="headerlink" title="1. 查询所有(match_all)"></a>1. 查询所有(match_all)</h5><p><strong>match_all关键字</strong>：返回索引中的全部文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-对查询结果进行排序-sort"><a href="#2-对查询结果进行排序-sort" class="headerlink" title="2. 对查询结果进行排序(sort)"></a>2. 对查询结果进行排序(sort)</h5><blockquote><p>keyword类型不能作为排序依据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果以keyword类型的进行排序则会出现错误</span><br>GET /ems/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-查询结果中返回指定条数-size"><a href="#3-查询结果中返回指定条数-size" class="headerlink" title="3. 查询结果中返回指定条数(size)"></a>3. 查询结果中返回指定条数(size)</h5><p><strong>size 关键字</strong>：指定查询结果中返回指定条数。 <strong>默认返回值10条</strong><br>是对查询的结果进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-分页查询-from"><a href="#4-分页查询-from" class="headerlink" title="4. 分页查询(from)"></a>4. 分页查询(from)</h5><p><strong>from 关键字</strong>：用来指定起始返回位置，和size关键字连用可实现分页效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5,<br>  <span class="hljs-string">&quot;from&quot;</span>: 0<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-查询结果中返回指定字段-source"><a href="#5-查询结果中返回指定字段-source" class="headerlink" title="5. 查询结果中返回指定字段(_source)"></a>5. 查询结果中返回指定字段(_source)</h5><p><strong>_source 关键字</strong>：是一个数组,在数组中用来指定展示那些字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 展示单个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: <span class="hljs-string">&quot;name&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 展示多个字段</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-关键词查询-term"><a href="#6-关键词查询-term" class="headerlink" title="6. 关键词查询(term)"></a>6. 关键词查询(term)</h5><p><strong>term 关键字</strong>：用来使用关键词查询</p><blockquote><p> 还有一个terms，多关键词查询</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># name 是text类型，会进行分词，所以name包含“张”的文档都行</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># bir 是date类型，不会进行分词，所以只能输入全部进行查询</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;bir&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;2012-12&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：<br><strong>NOTE1</strong>：通过使用term查询得知ES中默认使用分词器为标准分词器(Standard Analyzer),标准分词器对于<strong>英文单词分词</strong>，对于<strong>中文单字分词</strong>。<br>（标准分词器不适合中文）</p><p><strong>NOTE2</strong>：通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词，只有<strong>text类型分词</strong>。<br>（查看分词的效果逻辑使用 <code>GET /_analyze &#123;&quot;text&quot;:&quot;redis is open source db&quot;&#125;</code><br><code>GET /_analyze &#123;&quot;text&quot;:&quot;Java 是一个跨平台的产品&quot;&#125;</code>)</p></blockquote><h5 id="7-范围查询-range"><a href="#7-范围查询-range" class="headerlink" title="7. 范围查询(range)"></a>7. 范围查询(range)</h5><p><strong>range 关键字</strong>：用来指定查询指定范围内的文档</p><blockquote><p>只是针对一些特殊的字段比如age等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查询age&gt;=5,&lt;=10的文档</span><br><span class="hljs-comment"># gte &gt;=</span><br><span class="hljs-comment"># lte &lt;=</span><br><span class="hljs-comment"># gt &gt;</span><br><span class="hljs-comment"># le &lt;</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>        <span class="hljs-string">&quot;lte&quot;</span>: 10<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-前缀查询-prefix"><a href="#8-前缀查询-prefix" class="headerlink" title="8. 前缀查询(prefix)"></a>8. 前缀查询(prefix)</h5><p><strong>prefix 关键字</strong>：用来检索含有指定前缀的关键词的相关文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 指定的前缀并不是说元数据文档中name属性以”张”为前缀的，而是匹配的经过分词器分词后索引区的数据，这里”张无忌”经过分词后为：“张”,“无”,“忌”，无论匹配到哪个都会指向那份文档</p></blockquote><h5 id="9-通配符查询-wildcard"><a href="#9-通配符查询-wildcard" class="headerlink" title="9. 通配符查询(wildcard)"></a>9. 通配符查询(wildcard)</h5><p><strong>wildcard 关键字</strong>：通配符查询 ? 用来匹配一个任意字符 * 用来匹配多个任意字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;wildcard&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;张*&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的匹配也是针对索引区里面的数据</p></blockquote><h5 id="10-多id查询-ids"><a href="#10-多id查询-ids" class="headerlink" title="10. 多id查询(ids)"></a>10. 多id查询(ids)</h5><p><strong>ids 关键字</strong>：值为数组类型,用来根据一组id获取多个对应的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;values&quot;</span>: [<span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<span class="hljs-string">&quot;BVSspHYBh-o7eO8i7bUf&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="11-模糊查询-fuzzy"><a href="#11-模糊查询-fuzzy" class="headerlink" title="11. 模糊查询(fuzzy)"></a>11. 模糊查询(fuzzy)</h5><p><strong>fuzzy 关键字</strong>: 用来模糊查询含有指定关键字的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;fuzzy&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;sprin&quot;</span><br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment"># 这里搜索的关键词长度为5，允许一次模糊，索引区的数据为spring能相应匹配，刚好差1</span><br></code></pre></td></tr></table></figure><blockquote><p>模糊查询的规则： fuzzy 模糊查询 <strong>最大模糊错误 必须在0-2之间</strong><br>搜索关键词长度 <strong>小于2</strong> 不允许存在模糊（必须精确匹配，不允许错误）<br>搜索关键词长度为<strong>3-5</strong> 允许一次模糊（最多一次错误）<br>搜索关键词长度 <strong>大于5</strong> 允许两次模糊（最多两次错误））</p></blockquote><h5 id="12-布尔查询-bool"><a href="#12-布尔查询-bool" class="headerlink" title="12. 布尔查询(bool)"></a>12. 布尔查询(bool)</h5><p><strong>bool 关键字</strong>：用来组合多个条件实现复杂查询</p><ul><li><p>must: 相当于&amp;&amp;同时成立（and）</p></li><li><p>should: 相当于|| 成立一个就行（or）</p></li><li><p>must_not: 相当于! 不能满足任何一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: 5,<br>              <span class="hljs-string">&quot;lte&quot;</span>: 10<br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;南&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="13-高亮查询-highlight"><a href="#13-高亮查询-highlight" class="headerlink" title="13. 高亮查询(highlight)"></a>13. 高亮查询(highlight)</h5><p><strong>highlight 关键字</strong>：可以让符合条件的文档中的关键词高亮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果中：<br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;oGsdM4IBp8eFhO_IzLHc&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;em&gt;五&lt;/em&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br><br><span class="hljs-comment"># &quot;*&quot;:&#123;&#125;    代表所有地方只要包含查询的词都高亮</span><br><span class="hljs-comment"># &quot;name&quot;:&#123;&#125; 只有name包含查询的词高亮</span><br></code></pre></td></tr></table></figure><blockquote><p>highlight 是对查询后的结果进行高亮，所以要放在”query”之后进行，同时，并不是在原数据上进行操作，而是新增了一段highlight，并为需要高亮的地方增加标签。（默认是<code>&lt;em&gt;斜体&lt;/em&gt;</code>）</p></blockquote><blockquote><p>自定义高亮html标签: 可以在highlight中使用pre_tags和post_tags</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;五&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>], <br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-string">&quot;hits&quot;</span> : [<br>  &#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;ems&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;emp&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;AlSspHYBh-o7eO8i7bUf&quot;</span>,<br><span class="hljs-string">&quot;_score&quot;</span> : 0.2876821,<br><span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;张小五&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 8,<br>  <span class="hljs-string">&quot;bir&quot;</span> : <span class="hljs-string">&quot;2012-12-12&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span> : <span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;无锡&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;highlight&quot;</span> : &#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : [<br><span class="hljs-string">&quot;张小&lt;span style=&#x27;color:red&#x27;&gt;五&lt;/span&gt;&quot;</span><br>  ]<br>&#125;<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h5 id="14-多字段查询-multi-match"><a href="#14-多字段查询-multi-match" class="headerlink" title="14. 多字段查询(multi_match)"></a>14. 多字段查询(multi_match)</h5><p>有时候光进行一项字段匹配体验效果并不是很好，所以可以同时多字段匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国&quot;</span>,              <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>]  <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h5 id="15-多字段分词查询-query-string"><a href="#15-多字段分词查询-query-string" class="headerlink" title="15. 多字段分词查询(query_string)"></a>15. 多字段分词查询(query_string)</h5><p>该关键词可以增加分词器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /dangdang/book/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;query_string&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;中国声音&quot;</span>,          <span class="hljs-comment"># 关键词</span><br>      <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,   <span class="hljs-comment"># 分词器</span><br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>] <span class="hljs-comment">#这里写要检索的指定字段</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 检索的关键词是否需要拆开来检索还需要看指定的字段是否有分词<br>即 1. 如果搜索的字段分词，会对query进行先分词在搜索<br>       2. 如果搜索的字段不分词，会直接使用query整体进行该字段搜索</p></blockquote><h2 id="🌄IK分词器"><a href="#🌄IK分词器" class="headerlink" title="🌄IK分词器"></a>🌄IK分词器</h2><p>默认ES中采用标准分词器进行分词，这种方式并不适用于中文网站，因此需要修改ES对中文友好分词,从而达到更佳的搜索的效果。<br>官方网站：<a href="https://github.com/medcl/elasticsearch-analysis-ik">GitHub - medcl&#x2F;elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary.</a></p><h3 id="在线安装IK"><a href="#在线安装IK" class="headerlink" title="在线安装IK"></a>在线安装IK</h3><p>v5.5.1版本后开始支持在线安装 </p><h4 id="0、进入elasticsearch目录"><a href="#0、进入elasticsearch目录" class="headerlink" title="0、进入elasticsearch目录"></a>0、进入elasticsearch目录</h4><p><code>docker exec -it elasticsearch bash</code></p><h4 id="1、删除ES原始数据"><a href="#1、删除ES原始数据" class="headerlink" title="1、删除ES原始数据"></a>1、删除ES原始数据</h4><p>因为之前可能使用的标准分词器，如果存在数据，现在又使用IK分词器会出现冲突<br>进入es安装目录中将data目录数据删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf data<br></code></pre></td></tr></table></figure><h4 id="2、安装IK"><a href="#2、安装IK" class="headerlink" title="2、安装IK"></a>2、安装IK</h4><p>在es安装的bin目录中执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.23/elasticsearch-analysis-ik-6.8.23.zip<br><br></code></pre></td></tr></table></figure><blockquote><p>NOTE: 要求版本严格与当前使用版本一致,如需使用其他版本替换 6.8.0 为使用的版本号</p></blockquote><h4 id="3、查看IK"><a href="#3、查看IK" class="headerlink" title="3、查看IK"></a>3、查看IK</h4><p>安装完成后会在plugins目录下，生成IK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@linux elasticsearch-6.8.0]$ <span class="hljs-built_in">ls</span> plugins/<br>analysis-ik<br></code></pre></td></tr></table></figure><h4 id="4、重启es"><a href="#4、重启es" class="headerlink" title="4、重启es"></a>4、重启es</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h4 id="5、测试分词安装成功"><a href="#5、测试分词安装成功" class="headerlink" title="5、测试分词安装成功"></a>5、测试分词安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.153.132:5601/ -&gt; devtools<br><br>GET /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;中华人民共和国国歌&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 结果</span><br>&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;中华人民共和国&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 0<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : <span class="hljs-string">&quot;国歌&quot;</span>,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 7,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 9,<br>      <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-string">&quot;position&quot;</span> : 1<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>IK分词器提供了两种mapping类型用来做文档的分词分别是 ik_max_word 和 ik_smart<br>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</p><p>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</p></blockquote><h3 id="本地安装IK"><a href="#本地安装IK" class="headerlink" title="本地安装IK"></a>本地安装IK</h3><h4 id="1、下载IK安装包"><a href="#1、下载IK安装包" class="headerlink" title="1、下载IK安装包"></a>1、下载IK安装包</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2">https://github.com/medcl/elasticsearch-analysis-ik/releases?after=v6.8.2</a></p><h4 id="2、安装unzip"><a href="#2、安装unzip" class="headerlink" title="2、安装unzip"></a>2、安装unzip</h4><p>由于安装包是zip格式的，所以需要unzip方式解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y unzip<br></code></pre></td></tr></table></figure><h4 id="3、创建IK目录"><a href="#3、创建IK目录" class="headerlink" title="3、创建IK目录"></a>3、创建IK目录</h4><p>本地方式不像在线安装方式会自己生成一个目录，所以我们需要自己创建一个目录，把ik解压在里面<br>这里我们就在plugins下新建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> IK<br></code></pre></td></tr></table></figure><h4 id="4、移动到es安装目录的plugins目录中"><a href="#4、移动到es安装目录的plugins目录中" class="headerlink" title="4、移动到es安装目录的plugins目录中"></a>4、移动到es安装目录的plugins目录中</h4><p><code>mv elasticsearch-analysis-ik-6.8.0.zip elasticsearch-6.8.0/plugins/IK</code></p><h4 id="5、解压IK"><a href="#5、解压IK" class="headerlink" title="5、解压IK"></a>5、解压IK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip elasticsearch-analysis-ik-6.8.0.zip<br></code></pre></td></tr></table></figure><h4 id="6、重启ES"><a href="#6、重启ES" class="headerlink" title="6、重启ES"></a>6、重启ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart elasticsearch<br></code></pre></td></tr></table></figure><h3 id="卸载IK"><a href="#卸载IK" class="headerlink" title="卸载IK"></a>卸载IK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> plugins <br><span class="hljs-built_in">rm</span> -rf analysis-ik/<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除原有的ems索引数据</span><br>DELETE /ems<br><br><span class="hljs-comment"># 新建索引/类型/约束</span><br><span class="hljs-comment"># 同时针对属性增加了使用IK分词器</span><br>PUT /ems<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;emp&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>           <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>           <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>     <span class="hljs-comment">#可写可不写</span><br>        &#125;,<br>        <span class="hljs-string">&quot;age&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;bir&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;content&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;address&quot;</span>:&#123;<br>          <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 添加数据</span><br>PUT /ems/emp/_bulk<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:23,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:24,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:8,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:9,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:43,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;<br>  &#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;&#125;&#125;<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:59,<span class="hljs-string">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;<br><br><br><span class="hljs-comment"># 测试</span><br>GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;term&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;框架&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;highlight&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>],<br>    <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;*&quot;</span>:&#123;&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置扩展词"><a href="#配置扩展词" class="headerlink" title="配置扩展词"></a>配置扩展词</h3><p><strong>扩展词典：</strong> 就是有些词并不是关键词,但是也希望被ES用来作为检索的关键词,可以将这些词加入扩展词典。</p><p><strong>停用词典：</strong> 就是有些词是关键词,但是出于业务场景不想使用这些关键词被检索到，可以将这些词放入停用词典。</p><h4 id="配置本地词典"><a href="#配置本地词典" class="headerlink" title="配置本地词典"></a>配置本地词典</h4><p>查看配置文件的位置：</p><blockquote><p>在线安装的配置文件和本地安装的配置文件地址不同分别在以下目录：<br> <code>&#123;conf&#125;/analysis-ik/config/IKAnalyzer.cfg.xml</code> <code>&#123;plugins&#125;/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml</code></p></blockquote><p>在配置文件同目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入配置文件同目录（此次配置文件目录是第一种）</span><br><span class="hljs-built_in">cd</span> config/analysis-ik/<br><span class="hljs-built_in">cp</span> main.dic ext_dic<br>vim ext_dic<br><span class="hljs-comment"># 输入ggdG删除所有内容</span><br>insert -&gt; 碰瓷 -&gt; <span class="hljs-built_in">shift</span> ZZ<br>保存<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> config/analysis-ik/<br>vim IKAnalyzer.cfg.xml<br><span class="hljs-comment"># 如果打开中文是乱码的话</span><br>vim ~/.vimrc<br>加入以下配置即可<br><span class="hljs-built_in">set</span> encoding=utf-8set fileencoding=utf-8<br><br>再配置刚刚配置好的拓展词典<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726095647.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><p>配置完成后：<br><img src="/Resources/Pasted%20image%2020220726100547.png"></p><blockquote><p>新增的拓展词只能对之后的词构建索引，对于之前已经构建过索引的文档，则没有效果。如果需要对所有的文档适配所有的拓展词，必须重建所有文档的索引。</p></blockquote><h4 id="配置远程词典"><a href="#配置远程词典" class="headerlink" title="配置远程词典"></a>配置远程词典</h4><p>本地词典写入的词一旦写入，后面再想去填入或者停用，比较麻烦</p><p>比如，我这个博客网站我想根据用户输入的词的搜索达到多少后将其认定为热词添加到词典中，并且一段时间后进行一定的更新。</p><p><img src="/Resources/Pasted%20image%2020220726110610.png"><br>EMS这个应用就相当于我们的博客，在这个下面我们创建了一个文件ext.txt，专门用于存放热词，而这个热词具体怎么来，我们可以结合redis，当用户搜索词的次数达到多少，我们通过IO写入这个文件中，然后ES通过监听url这个地址上的数据发生了变化，就进行相应的更新。</p><h5 id="新建一个Springboot应用"><a href="#新建一个Springboot应用" class="headerlink" title="新建一个Springboot应用"></a>新建一个Springboot应用</h5><p>项目结构及相关内容如下</p><p><img src="/Resources/Pasted%20image%2020220726111721.png"></p><h5 id="配置访问静态资源"><a href="#配置访问静态资源" class="headerlink" title="配置访问静态资源"></a>配置访问静态资源</h5><p><img src="/Resources/Pasted%20image%2020220726112240.png"></p><h5 id="测试访问项目"><a href="#测试访问项目" class="headerlink" title="测试访问项目"></a>测试访问项目</h5><p><img src="/Resources/Pasted%20image%2020220726111748.png"></p><blockquote><p>如果遇到中文乱码，可以下载一个chrome拓展Charset更换编码格式即可<br>不改也是可以的，只要文本时utf-8即可。</p></blockquote><h5 id="改ES配置文件"><a href="#改ES配置文件" class="headerlink" title="改ES配置文件"></a>改ES配置文件</h5><p>查看自己的ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726112411.png"></p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim IKAnalyzer.cfg.xml<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220726113032.png"></p><blockquote><p>本次只演示了扩展词一样，停用词和拓展词操作一致，只是文件名在IKAnalyzer.cfg.xml中填入的位置不一样</p></blockquote><h5 id="重启ES"><a href="#重启ES" class="headerlink" title="重启ES"></a>重启ES</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><blockquote><p>bug：kibana崩掉了，把远程词典注释了还是不行<br>重启后查看日志显示<code>index_closed_exception</code><br><img src="/Resources/Pasted%20image%2020220726143113.png"><br>排错ing<br>使用postman 发送post请求解决了，<del>不知道为啥</del><code>http://localhost:9200/.kibana/_open</code><br><strong>因为kibana的索引被关闭了（莫名其妙被关闭？不知道什么原因被关闭了，但是就是这个原因！）</strong></p></blockquote><blockquote><p>错误复现：使用postman 发送post请求<code>http://192.168.153.132:9200/.kibana/_close</code><br>关闭索引再次出现错误400，然后重启了之后就再启动自动退出报exit(1)。<br><img src="/Resources/Pasted%20image%2020220726154820.png"><br>重新发送打开索引的请求即可解决</p></blockquote><p><em>测试使用的时候如果新加了拓展词，那么测试的时候需要新增文档以测试，不然旧文档会以之前的分词模型来建立索引，就会出现查不到的情况。</em></p><blockquote><p><strong>即新加了拓展词只对之后加入的文档有效！</strong></p></blockquote><hr><h2 id="🧷ES过滤-Filter"><a href="#🧷ES过滤-Filter" class="headerlink" title="🧷ES过滤 Filter"></a>🧷ES过滤 Filter</h2><p>ES中的查询操作分为2种： <strong>查询(query)</strong> 和 <strong>过滤(filter)</strong></p><p>查询即是之前提到的query查询，它（查询）默认会计算每个返回文档的得分，然后根据得分排序。而过滤（filter）只会筛选出符合的文档，并不计算得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快。</p><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。<br><img src="/Resources/Pasted%20image%2020220726192122.png"></p><p>官网说明：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.8/query-filter-context.html">Query and filter context</a></p><h3 id="过滤语法"><a href="#过滤语法" class="headerlink" title="过滤语法"></a>过滤语法</h3><p><strong>NOTE:</strong></p><ul><li>在执行filter和query时，<strong>先执行filter在执行query</strong></li><li>Elasticsearch会<strong>自动缓存经常使用的过滤器</strong>，以加快性能</li><li>使用过滤查询<strong>必须使用bool查询</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;must&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;框架&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 0,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 20<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行过程： 先从ES从执行过滤查询，找到符合年龄范围在<code>[0,20]</code>的文档，这个过程不会计算得分，然后再执行查询操作，从满足条件的这些文档中又去查找”content”属性的值为”框架”的文档，并将可能的文档计算的得分。</p><hr><h3 id="常见的过滤器类型"><a href="#常见的过滤器类型" class="headerlink" title="常见的过滤器类型"></a>常见的过滤器类型</h3><h4 id="term-Filter"><a href="#term-Filter" class="headerlink" title="term Filter"></a>term Filter</h4><p>term 用在过滤中查询，表示查询指定字段含有该词的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="terms-Filter"><a href="#terms-Filter" class="headerlink" title="terms Filter"></a>terms Filter</h4><p>term只能匹配一个字段，要想过滤多个字段，使用terms</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;content&quot;</span>: [<span class="hljs-string">&quot;spring&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="range-Filter"><a href="#range-Filter" class="headerlink" title="range Filter"></a>range Filter</h4><p>顾名思义：就是先查找满足某个指定范围的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>         <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>             <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小五&quot;</span><br>           &#125;<br>         &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: 1,<br>            <span class="hljs-string">&quot;lte&quot;</span>: 10<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="exists-Filter"><a href="#exists-Filter" class="headerlink" title="exists Filter"></a>exists Filter</h4><p>先过滤掉不存在指定字段的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;exists&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;age&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><h4 id="ids-Filter"><a href="#ids-Filter" class="headerlink" title="ids Filter"></a>ids Filter</h4><p>查找含有指定字段的索引记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /ems/emp/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;ids&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;values&quot;</span>: [<br>              <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;OY0TqnYB5vZ1Et4zupDf&quot;</span><br>            ]<br>          &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><hr><h2 id="☕Java-操作ElasticSearch"><a href="#☕Java-操作ElasticSearch" class="headerlink" title="☕Java 操作ElasticSearch"></a>☕Java 操作ElasticSearch</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="初始化SpringBoot项目"><a href="#初始化SpringBoot项目" class="headerlink" title="初始化SpringBoot项目"></a>初始化SpringBoot项目</h4><p>选择依赖：devtools lombok springweb<br>更改springboot版本为2.3.7.RELEASE</p><h4 id="引入Es相关依赖："><a href="#引入Es相关依赖：" class="headerlink" title="引入Es相关依赖："></a>引入Es相关依赖：</h4><p><strong>版本必须与es版本一致</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport-netty4-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.8.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.70<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h3><p>快捷键：ctrl + shift + t</p><h3 id="测试Java连接Es客户端"><a href="#测试Java连接Es客户端" class="headerlink" title="测试Java连接Es客户端"></a>测试Java连接Es客户端</h3><p>#tips 小技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例如</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">xxx</span>?<br><span class="hljs-comment">// TransportClient 点进去看源码发现是抽象类，不能直接new，对着TransportClient按下crtl+h，查看实现类即可</span><br><span class="hljs-comment">// 这里我们查看可以发现，下面有一个PreBuiltTransportClient实现类</span><br><span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>      <span class="hljs-comment">// 创建ES客户端对象</span><br>      <span class="hljs-type">TransportClient</span> <span class="hljs-variable">transportClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>      <span class="hljs-comment">// 设置操作ES服务主机和端口</span><br>      transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><span class="hljs-comment">// 为什么是9300，kibana是9200，因为TransportClient底层走的是TCP协议，而ES开放的TCP协议端口是9300，kibana走的是RESTFUL协议，ES开放的REST协议端口是9300。</span><br><br>      <span class="hljs-comment">// 操作</span><br><br>      <span class="hljs-comment">// 释放资源</span><br>      transportClient.close();<br>  &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><blockquote><p>下面的代码有问题，没问题的代码见后面！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestIndexAndTypeMapping</span> &#123;<br>    <span class="hljs-keyword">private</span> TransportClient transportClient;<br><br>    <span class="hljs-comment">//@Before</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);<br>        <span class="hljs-comment">// 创建ES客户端对象</span><br>        <span class="hljs-built_in">this</span>.transportClient = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreBuiltTransportClient</span>(Settings.EMPTY);<br>        <span class="hljs-comment">// 设置操作ES服务主机和端口 http://192.168.153.133/</span><br>        transportClient.addTransportAddress(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransportAddress</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.153.133&quot;</span>),<span class="hljs-number">9300</span>));<br><br>        <span class="hljs-comment">// 操作</span><br>    &#125;<br>    <span class="hljs-comment">//@After</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);<br>        <span class="hljs-comment">// 释放资源</span><br>        transportClient.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 创建一个索引</span><br>        <span class="hljs-type">CreateIndexResponse</span> <span class="hljs-variable">createIndexResponse</span> <span class="hljs-operator">=</span> transportClient.admin().indices().prepareCreate(<span class="hljs-string">&quot;dangdang5&quot;</span>).get();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acknowledged</span> <span class="hljs-operator">=</span> createIndexResponse.isAcknowledged();<br>        System.out.println(acknowledged);<br>        <span class="hljs-comment">//</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>第一个：<br>问题：执行@Test方法报空指针异常，打断点发现是@before方法没有执行。<br>原因：junit4中是@before和@after，在junit5中用@BeforeEach和@AfterEach取代了。<br>解决：用新的注解取代旧注解<br>第二个：<br>问题：报错&#96;NoNodeAvailableException[None of the configured nodes are available: [</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装容器合集</title>
    <link href="/posts/dcb3f659.html"/>
    <url>/posts/dcb3f659.html</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="left">名称</th><th>版本号</th></tr></thead><tbody><tr><td align="left"><a href="#Portainer">Portainer</a></td><td><code>Docker version 24.0.2, build cb74dfc</code></td></tr><tr><td align="left"><code>Aliyun CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>VMware CentOs</code></td><td><code>CentOS 7.8 64位</code></td></tr><tr><td align="left"><code>FinalShell</code></td><td><code>3.9.8.2</code></td></tr><tr><td align="left"><code>Redis</code></td><td><code>latest</code> &#x3D; <code>6.2.6</code></td></tr><tr><td align="left"><a href="#MySQL%205.7">MySQL 5.7</a></td><td><code>5.7</code></td></tr><tr><td align="left"><a href="#MySQL%208">MySQL 8</a></td><td><code>8</code></td></tr><tr><td align="left"><code>Docker Hub</code></td><td><a href="https://hub.docker.com/">Docker Hub</a></td></tr><tr><td align="left"></td><td></td></tr></tbody></table><blockquote><p>说明：如果使用云服务器，创建容器后，需要在安全策略组中开放端口。</p></blockquote><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><h3 id="1、搜索镜像"><a href="#1、搜索镜像" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本"><a href="#2、安装指定版本" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull portainer/portainer<br></code></pre></td></tr></table></figure><h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><p>如果需要使用 minio，那么可以将端口映射修改为9002</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 9002:9000 \<br>--restart=always \<br>-v /var/run/docker.sock:/var/run/docker.sock \<br>--name prtainer \<br>docker.io/portainer/portainer<br></code></pre></td></tr></table></figure><p>打开网址：<a href="http://ip:9002/">http://ip:9002/</a></p><p>首次登陆设置账号密码：admin:admin123</p><p><img src="/Resources/image-20230519142302931.png" alt="image-20230519142302931"></p><p>选择本地模式</p><p><img src="/Resources/image-20230519142344326.png" alt="image-20230519142344326"></p><p><img src="/Resources/image-20230519142426575.png" alt="image-20230519142426575"></p><p><img src="/Resources/image-20230519142741905.png" alt="image-20230519142741905"></p><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><h3 id="1、搜索镜像-1"><a href="#1、搜索镜像-1" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-1"><a href="#2、安装指定版本-1" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像"><a href="#3、查看已安装的镜像" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动"><a href="#4、创建实例并启动" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms512m -Xmx512m&quot;</span> -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.8.23<br></code></pre></td></tr></table></figure><h3 id="5、查看启动的服务"><a href="#5、查看启动的服务" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试ElaticSearch"><a href="#6、测试ElaticSearch" class="headerlink" title="6、测试ElaticSearch"></a>6、测试ElaticSearch</h3><p>浏览器访问：<br>![[&#x2F;Resources&#x2F;Pasted image 20220720195345.png]]<br>使用curl模拟请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://localhost:9200<br></code></pre></td></tr></table></figure><p>![[Develop&#x2F;开发虚拟机&#x2F;Resources&#x2F;Pasted image 20220720200519.png]]</p><hr><h3 id="elasticsearch集群"><a href="#elasticsearch集群" class="headerlink" title="elasticsearch集群"></a>elasticsearch集群</h3><p>以下使用Docker安装ElasticSearch集群</p><blockquote><p>注意虚拟机的内存不能太小，不然起3个ES服务就要崩（一开始给了4个G，后面给了8个G）</p></blockquote><h4 id="在虚拟机中创建配置文件映射Es容器中的配置文件"><a href="#在虚拟机中创建配置文件映射Es容器中的配置文件" class="headerlink" title="在虚拟机中创建配置文件映射Es容器中的配置文件"></a>在虚拟机中创建配置文件映射Es容器中的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/data3<br><br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins1<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins2<br><span class="hljs-built_in">mkdir</span> -p software/elasticsearch/config/plugins3<br><br><br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data1<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data2<br><span class="hljs-built_in">chmod</span> 777 software/elasticsearch/config/data3<br><br>vim software/elasticsearch/config/es1.yml<br>vim software/elasticsearch/config/es2.yml<br>vim software/elasticsearch/config/es3.yml<br><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node1                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9201                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9301                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node2                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9202                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9303&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9302                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br><br>cluster.name: es                               <span class="hljs-comment">#集群名称(集群名称必须一致)</span><br>node.name: node3                               <span class="hljs-comment">#节点名称(节点名称不能一致)</span><br>network.host: 0.0.0.0                          <span class="hljs-comment">#监听地址(必须开启远程权限,并关闭防火墙)</span><br>http.port: 9203                                <span class="hljs-comment">#监听端口(在一台机器时服务端口不能一致)</span><br>discovery.zen.ping.unicast.hosts: [<span class="hljs-string">&quot;192.168.153.135:9301&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9302&quot;</span>]                <span class="hljs-comment">#另外两个节点的ip</span><br>gateway.recover_after_nodes: 3                 <span class="hljs-comment">#集群可做master的最小节点数</span><br>transport.tcp.port: 9303                       <span class="hljs-comment">#集群TCP端口(在一台机器搭建必须修改)</span><br></code></pre></td></tr></table></figure><h4 id="调高JVM线程数限制数量"><a href="#调高JVM线程数限制数量" class="headerlink" title="调高JVM线程数限制数量"></a>调高JVM线程数限制数量</h4><p><a href="Docker%E5%AE%89%E8%A3%85ElasticSearch.md">Docker安装ElasticSearch</a>没有报错是因为指明了单机模式运行，因此不会报错，只要是以集群方法启动，就必须调高JVM线程数限制数量。</p><blockquote><p>必须做这个，不然会报错，显示# ERROR: [1] bootstrap checks failed [1]: max virtual memory areas vm.max_map_count [65530] is too low</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysctl.conf<br>添加如下配置<br>-&gt;&gt;<br>vm.max_map_count=262144 <br><br><span class="hljs-comment"># 刷新配置</span><br>sysctl -p<br></code></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">官网说明</a>：<br><img src="/Resources/Pasted%20image%2020220731202851.png"></p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9201</span>:<span class="hljs-number">9201</span> -p <span class="hljs-number">9301</span>:<span class="hljs-number">9301</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es1.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins1/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES01 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9202</span>:<span class="hljs-number">9202</span> -p <span class="hljs-number">9302</span>:<span class="hljs-number">9302</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es2.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins2/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES02 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br><br><br>docker run -e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms2048m -Xmx2048m&quot;</span> \<br>        -d -p <span class="hljs-number">9203</span>:<span class="hljs-number">9203</span> -p <span class="hljs-number">9303</span>:<span class="hljs-number">9303</span> \<br>        -e ES_MIN_MEM=<span class="hljs-number">128</span>m \<br>        -e ES_MAX_MEM=<span class="hljs-number">4096</span>m \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/es3.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/data3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data/ \<br>        -v <span class="hljs-regexp">/root/</span>software<span class="hljs-regexp">/elasticsearch/</span>config<span class="hljs-regexp">/plugins3/</span>:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>plugins  \<br>        --restart=always \<br>        --name ES03 \<br>        elasticsearch:<span class="hljs-number">6.8</span>.<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>浏览器分别访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9201</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9202</span>/<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">153.135</span>:<span class="hljs-number">9203</span>/<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220729142408.png"><br><code>http://192.168.153.135:9201/_cat/nodes?pretty</code><br><img src="/Resources/Pasted%20image%2020220729143126.png"></p><h4 id="查看集群健康"><a href="#查看集群健康" class="headerlink" title="查看集群健康"></a>查看集群健康</h4><p><code>http://192.168.153.135:9201/_cat/health?v</code><br><img src="/Resources/Pasted%20image%2020220729143530.png"><br>由于现在还没有用kibana连接ES，也没有自己创建索引，因此这里的分片数量为0</p><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><h4 id="Kibana-连接-ES集群"><a href="#Kibana-连接-ES集群" class="headerlink" title="Kibana 连接 ES集群"></a>Kibana 连接 ES集群</h4><p>如果你之前连接过一台ES集群（为什么说一台也是集群呢？因为ES启动方式就是集群启动，只是集群数量为一台），其实需要修改的地方都差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.135:9201 -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><p>进入kibana配置文件：<br>修改连接ES的地址为集群中的任意一台：<br><a href="../../Develop/%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker%E5%AE%89%E8%A3%85Kibana.md#6%E3%80%81%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">kibana 连接 ES集群-编写配置</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://192.168.153.135:9201&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="SpringBoot-连接ES集群"><a href="#SpringBoot-连接ES集群" class="headerlink" title="SpringBoot 连接ES集群"></a>SpringBoot 连接ES集群</h4><p>如果你之前有用SpringBoot连接ES，这里的配置差不多，只是需要将连接地址改为所有的节点地址（防止其中某一台断掉不可用）<br><a href="SpringData%E6%93%8D%E4%BD%9CElasticSearch.md#%E7%BC%96%E5%86%99yml%E9%85%8D%E7%BD%AE">SpringBoot连接ES-编写配置</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来替换 transportClient对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义客户端配置对象</span><br><span class="hljs-comment">        端口为9200，前面说过，es开放的rest端口为9200</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(<span class="hljs-string">&quot;192.168.153.135:9201&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9202&quot;</span>, <span class="hljs-string">&quot;192.168.153.135:9203&quot;</span>)<br>                .build();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过RestClients对象创建</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Head-集群可视化"><a href="#Head-集群可视化" class="headerlink" title="Head 集群可视化"></a>Head 集群可视化</h3><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>创建容器并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name=elasticsearch-head \<br>  -p 9100:9100 \<br>  mobz/elasticsearch-head:5-alpine<br></code></pre></td></tr></table></figure><p>解决跨域</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim software<span class="hljs-regexp">/elasticsearch/</span>config/es1.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es2.yml<br>vim software<span class="hljs-regexp">/elasticsearch/</span>config/es3.yml<br><span class="hljs-comment"># 分别添加如下内容</span><br>http.cors.enabled: true<br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>重启es集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart $(docker ps -a | awk <span class="hljs-string">&#x27;&#123; print $1 &#125;&#x27;</span> | <span class="hljs-built_in">tail</span> -n +2)<br></code></pre></td></tr></table></figure><p>访问页面<br><code>http://192.168.153.135:9100/</code><br><img src="/Resources/Pasted%20image%2020220729150733.png"></p><p>创建索引<br><img src="/Resources/Pasted%20image%2020220729150822.png"></p><p><strong>查看集群状态</strong><br>ElasticSearch6.X 默认为分片5和1复制：<br><img src="/Resources/Pasted%20image%2020220729151207.png"><br>可以看到主分片和副本分片分布在不同的节点，同时保证主副分片不在同一节点（保证节点发生故障时可用）</p><p><strong>现在我们停掉node1节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151637.png"><br>可以看到集群仍然可用，虽然有些副本失效了，但是还是保证了5个主分片可用（即保证了数据的完整性）</p><p><strong>现在我们停掉node2节点：</strong><br>集群仍然可用，只是集群数量现在只有一台，主分片依然完整。<br><img src="/Resources/Pasted%20image%2020220729151832.png"></p><p><strong>现在我们重启node2节点：</strong><br><img src="/Resources/Pasted%20image%2020220729151859.png"><br>发现集群慢慢同步了数据，去分担node1节点的压力，此时完整的主副分片都分布在者&#x3D;这两个节点中，所以健康状态为：green</p><p><strong>现在我们重启node1节点：</strong><br>我们发现分片又重新分布在了不同的节点，健康状态为：green<br><img src="/Resources/Pasted%20image%2020220729151929.png"><br><img src="/Resources/Pasted%20image%2020220729151938.png"></p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><h3 id="1、搜索镜像-2"><a href="#1、搜索镜像-2" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-2"><a href="#2、安装指定版本-2" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull kibana:6.8.23<br></code></pre></td></tr></table></figure><h3 id="3、查看已安装的镜像-1"><a href="#3、查看已安装的镜像-1" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="4、创建实例并启动-1"><a href="#4、创建实例并启动-1" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#运行kibana 注意IP一定不要写错，与后面配置文件的ip一定要对应</span><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132:9200 -p 5601:5601 -d kibana:6.8.23<br><br>docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.153.132/:9200 -v /mydata/ElasticStackAll/Kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:6.8.23<br></code></pre></td></tr></table></figure><blockquote><p>虚拟机的ip会更换会导致ElasticSearchIp的更换，从而导致kibana启动不了！就只能重装kabina容器<br>解决：后面用java去连接es，不需要kibana了<br>解决：<a href="%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9B%BA%E5%AE%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84ip">固定虚拟机的ip</a></p><p>启动时报错：<code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code><br>解决办法：</p><ol><li>修改配置文件：</li><li><code>vi /usr/lib/sysctl.d/00-system.conf</code></li><li>添加<code>net.ipv4.ip_forward=1</code></li><li>重启网络<code>systemctl restart network</code></li><li>停止容器<code>docker stop kibana</code></li><li>删掉启动失败的容器<code>docker rm kibana</code></li><li>重启docker<code>systemctl restart docker</code></li><li>重新启动kibana</li></ol></blockquote><h3 id="5、进入kibana容器"><a href="#5、进入kibana容器" class="headerlink" title="5、进入kibana容器"></a>5、进入kibana容器</h3><p>使用docker命令进入到kibana容器里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it kibana /bin/sh<br></code></pre></td></tr></table></figure><p>进入容器中找到<code>/usr/share/kibana/config/kibana.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用vi 修改文件内容</span><br>vi /usr/share/kibana/config/kibana.yml <br></code></pre></td></tr></table></figure><h3 id="6、覆盖配置文件"><a href="#6、覆盖配置文件" class="headerlink" title="6、覆盖配置文件"></a>6、覆盖配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.name:</span> <span class="hljs-string">kibana</span><br><span class="hljs-comment"># 只能写0，不然会报错Error: listen EADDRNOTAVAIL: address not available</span><br><span class="hljs-comment">#server.host: &quot;192.168.153.132&quot;</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-comment">#elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [ <span class="hljs-string">&quot;http://192.168.153.132:9200&quot;</span> ]<br><span class="hljs-attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#设置kibana中文显示</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><h3 id="7、重新启动kibana"><a href="#7、重新启动kibana" class="headerlink" title="7、重新启动kibana"></a>7、重新启动kibana</h3><p><code>docker restart kibana</code></p><h3 id="8、测试Kibana"><a href="#8、测试Kibana" class="headerlink" title="8、测试Kibana"></a>8、测试Kibana</h3><p><code>http://自己的IP地址:5601</code><br><code>http://192.168.153.132:5601</code><br>浏览器访问：<br><img src="/Resources/Pasted%20image%2020220721101717.png" alt="Develop/开发虚拟机/Resources/Pasted image 20220721101717.png"></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis-单机"><a href="#Redis-单机" class="headerlink" title="Redis 单机"></a>Redis 单机</h3><p>使用云服务器需要开放端口6379-6384及16379-16384，具体根据需求，以下使用云服务器进行操作</p><p><img src="/Resources/image-20230602110426224.png" alt="image-20230602110426224"></p><p><img src="/Resources/image-20230602110742631.png" alt="image-20230602110742631"></p><p>说明：16379-16384的作用：<a href="https://redis.io/docs/management/scaling/">https://redis.io/docs/management/scaling/</a></p><p><img src="/Resources/image-20230602143938312.png" alt="image-20230602143938312"></p><p>使用虚拟机需要关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis:latest<br></code></pre></td></tr></table></figure><h4 id="创建实例并启动"><a href="#创建实例并启动" class="headerlink" title="创建实例并启动"></a>创建实例并启动</h4><blockquote><p>创建配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在虚拟机中或者云服务器中</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 6379:6379 --name redis \<br>-v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>查看容器版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis redis-server -v<br><br><span class="hljs-comment"># Redis server v=6.2.6 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=b61f37314a089f19</span><br></code></pre></td></tr></table></figure><blockquote><p>下载配置文件</p></blockquote><p>根据上面查询到的版本下载配置文件：<a href="https://redis.io/docs/management/config/%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF6.2%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E4%B8%8B%E8%BD%BD6.2%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6https://raw.githubusercontent.com/redis/redis/6.2/redis.conf">https://redis.io/docs/management/config/，这里的版本是6.2，那么就下载6.2的配置文件https://raw.githubusercontent.com/redis/redis/6.2/redis.conf</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">requirepass</span> redis<br><span class="hljs-comment"># bind 127.0.0.1 -::1</span><br>protected-mode <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><blockquote><p>重启Redis容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart redis<br></code></pre></td></tr></table></figure><h4 id="进入Redis容器"><a href="#进入Redis容器" class="headerlink" title="进入Redis容器"></a>进入Redis容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接进去redis客户端。</span><br>docker <span class="hljs-built_in">exec</span> -it redis redis-cli -a redis<br><br><span class="hljs-comment"># 不然的话，就需要以下两条命令才能进入redis客户端</span><br>docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<br>redis-cli -a redis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602142724660.png" alt="image-20230602142724660"></p><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><p>默认持久化方式是快照持久化，修改配置文件，AOF持久化</p><blockquote><p>参考Redis的持久化：<a href="../../%E4%B8%93%E4%B8%9A%E6%8A%80%E8%83%BD/Database/Redis/Redis.md#9%E3%80%81Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6">Redis的持久化机制</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /mydata/redis/conf/redis.conf<br><br><span class="hljs-comment"># 修改的下面内容</span><br>appendonly <span class="hljs-built_in">yes</span><br>保存<br> <br>docker restart redis<br></code></pre></td></tr></table></figure><h3 id="Redis分片集群（海量存储-高并发写）"><a href="#Redis分片集群（海量存储-高并发写）" class="headerlink" title="Redis分片集群（海量存储+高并发写）"></a>Redis分片集群（海量存储+高并发写）</h3><h4 id="下载镜像-1"><a href="#下载镜像-1" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node1/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node2/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node3/data<br></code></pre></td></tr></table></figure><h4 id="创建集群节点"><a href="#创建集群节点" class="headerlink" title="创建集群节点"></a>创建集群节点</h4><p>创建集群节点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node1 -v /mydata/redis/cluster/node1/data:/data  \<br>-p 6380:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node1.conf<br></code></pre></td></tr></table></figure><ul><li><p>部分参数解释：</p><ul><li><p><code>--cluster-enabled</code>：是否启动集群，选值：yes 、no</p></li><li><p><code>--cluster-config-file 配置文件.conf </code>：指定节点信息，自动生成</p></li><li><p><code>--cluster-node-timeout 毫秒值</code>： 配置节点连接超时时间</p></li><li><p><del><code>--appendonly</code>：是否开启持久化，选值：yes、no</del></p></li></ul></li></ul><p>启动集群点1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node1<br></code></pre></td></tr></table></figure><p>创建集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node2 -v /mydata/redis/cluster/node2/data:/data  \<br>-p 6381:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node2.conf<br></code></pre></td></tr></table></figure><p>启动集群节点2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node2<br></code></pre></td></tr></table></figure><p>创建集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name redis-node3 -v /mydata/redis/cluster/node3/data:/data  \<br>-p 6382:6379 redis --cluster-enabled <span class="hljs-built_in">yes</span>    \<br>--cluster-config-file redis-node3.conf<br></code></pre></td></tr></table></figure><p>启动集群节点3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start redis-node3<br><br><span class="hljs-comment"># 全部启动</span><br>docker start redis-node1 redis-node2 redis-node3<br></code></pre></td></tr></table></figure><p>查看集群信息</p><p><img src="/Resources/image-20230601152728965.png" alt="image-20230601152728965"></p><p>查看 <code>redis-node1 </code>、<code>redis-node2</code>、<code>redis-node3</code>容器被分配的IP地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect redis-node1 // 172.17.0.2<br>docker inspect redis-node2 // 172.17.0.3<br>docker inspect redis-node3 // 172.17.0.4<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601152829433.png" alt="image-20230601152829433"></p><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以redis-node1为例，进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 创建集群</span><br>redis-cli --cluster create 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 --cluster-replicas 0<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601154142373.png" alt="image-20230601154142373"></p><ul><li>部分参数解释：<ul><li><code>--cluster-replicas</code> ：主从比例， 1 个主节点对应几个从节点，这里是0个</li></ul></li></ul><h4 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis-node1的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node1 /bin/bash<br><span class="hljs-comment"># 进入redis-node2的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node2 /bin/bash<br><span class="hljs-comment"># 进入redis-node3的容器</span><br>docker <span class="hljs-built_in">exec</span> -it redis-node3 /bin/bash<br><br><span class="hljs-comment"># redis</span><br>redis-cli<br><span class="hljs-comment"># 查看集群信息</span><br>127.0.0.1:6379&gt; cluster nodes<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601155821525.png" alt="image-20230601155821525"></p><p>此时，由于之前创建集群的时候 <code>--cluster-replicas 0</code> ，因此每一个节点都是主节点</p><h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><p>尝试写入数据，发现只有 <code>node3</code> 可以查看或者写入数据，其他节点都会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(error) MOVED 15495 172.17.0.4:6379`<br>MOVED 指令的第一个参数 15495 是 key 对应的槽位编号，后面是目标节点地址。<br><br>槽位：<br>Redis 集群把所有的物理节点（向外提供服务的 master）映射到 [0 - 16383] slot 上，即所有 master 均分 16384 大小的 slot 空间，每个 master 占有一定的 slot 空间<br><br>当存储数据时，首先会对 key 使用 CRC16 算法进行加密，将得到的值 mod 16384，这样一来 key 的值始终在 0-16383 之间，Redis 则根据 key 值将其放入对应范围的节点，比如算出来的 key 值是 3000，节点1的 slot 空间是 [0 - 5460]，那么就会放到节点1，平均集群的压力<br><br>同理，当获取数据时，也会对 Key 进行同样的计算，根据得到的值去对应的节点获取数据<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230601160012575.png" alt="image-20230601160012575"></p><p>错误原因：启动 <code>redis</code> 时，没有使用集群模式</p><p>解决办法：使用 <code>redis-cli</code>时要加上 <code>-c</code>参数</p><p>集群演示：每个容器中都用<code>redis-cli -c</code>启动，这样，每个节点都可以写入或者查看了</p><p><img src="/Resources/image-20230601164027890.png" alt="image-20230601164027890"></p><p>现在 <code>&#123;key : a, value : b&#125;</code>存放在 <code>node3</code> 中，此时停掉 <code>node3</code> 容器，其他节点就拿不到 <code>node3</code> 存储的数据了，重新启动 <code>node3</code> 容器，即可拿到值。</p><p><img src="/Resources/image-20230601164219994.png" alt="image-20230601164219994"></p><h4 id="集群修复"><a href="#集群修复" class="headerlink" title="集群修复"></a>集群修复</h4><p>像上面如果集群中有一个节点挂掉了，那么存储值也不可行了，因为分配的slot没有变，修复命令主要是用来新加入的集群没有slot，需要重新分配</p><p><img src="/Resources/image-20230601164631241.png" alt="image-20230601164631241"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用下面的命令可以重新分配slot，并让该集群剔除挂掉的节点</span><br>redis-cli --cluster fix 172.17.0.2:6379 --cluster-fix-with-unreachable-masters<br></code></pre></td></tr></table></figure><h3 id="Redis主从集群（海量存储-高并发写-高并发读）"><a href="#Redis主从集群（海量存储-高并发写-高并发读）" class="headerlink" title="Redis主从集群（海量存储+高并发写+高并发读）"></a>Redis主从集群（海量存储+高并发写+高并发读）</h3><h4 id="下载镜像-2"><a href="#下载镜像-2" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>省略</p><h4 id="删除之前创建的配置文件"><a href="#删除之前创建的配置文件" class="headerlink" title="删除之前创建的配置文件"></a>删除之前创建的配置文件</h4><p>停止redis容器，删除redis容器，删除对应的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除三个redis容器</span><br>docker stop redis-node1 redis-node2 redis-node3<br>docker <span class="hljs-built_in">rm</span> redis-node1 redis-node2 redis-node3<br><br><span class="hljs-comment"># 删除配置文件</span><br><span class="hljs-built_in">rm</span> -rf /mydata/redis/cluster/<br></code></pre></td></tr></table></figure><h4 id="创建虚拟网卡"><a href="#创建虚拟网卡" class="headerlink" title="创建虚拟网卡"></a>创建虚拟网卡</h4><p>主要是用于redis-cluster能于外界进行网络通信，一般常用桥接模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网卡</span><br>docker network create myredis<br><span class="hljs-comment"># 查看所有网卡</span><br>docker network <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143457332.png" alt="image-20230602143457332"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看网卡详细信息</span><br>docker network inspect myredis<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602143532310.png" alt="image-20230602143532310"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除网卡命令 多个中间 空格隔开(补充)</span><br>docker network <span class="hljs-built_in">rm</span> myredis <br><span class="hljs-comment"># --help </span><br>docker network --<span class="hljs-built_in">help</span> <br></code></pre></td></tr></table></figure><h4 id="批量创建配置文件"><a href="#批量创建配置文件" class="headerlink" title="批量创建配置文件"></a>批量创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br><span class="hljs-built_in">mkdir</span> -p /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf<br><span class="hljs-built_in">touch</span> /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf<br><span class="hljs-built_in">cat</span>  &lt;&lt; <span class="hljs-string">EOF &gt; /mydata/redis/cluster/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="hljs-string">port $&#123;port&#125;</span><br><span class="hljs-string">requirepass redis</span><br><span class="hljs-string">bind 0.0.0.0</span><br><span class="hljs-string">protected-mode no</span><br><span class="hljs-string">daemonize no</span><br><span class="hljs-string">appendonly yes</span><br><span class="hljs-string">cluster-enabled yes </span><br><span class="hljs-string">cluster-config-file nodes.conf</span><br><span class="hljs-string">cluster-node-timeout 5000</span><br><span class="hljs-string">cluster-announce-ip  公网ip或者docker容器内部分配的ip</span><br><span class="hljs-string">cluster-announce-port $&#123;port&#125;</span><br><span class="hljs-string">cluster-announce-bus-port 1$&#123;port&#125;</span><br><span class="hljs-string">masterauth redis</span><br><span class="hljs-string">EOF</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><p><code>port</code>：节点端口；</p><p><code>requirepass</code>：设置密码，访问时需要验证</p><p><code>protected-mode</code>：保护模式，默认值 yes，即开启。开启保护模式以后，需配置 <code>bind ip</code> 或者设置访问密码；关闭保护模式，外部网络可以直接访问；</p><p><code>daemonize</code>：是否以守护线程的方式启动（后台启动），默认 no；</p><p><code>appendonly</code>：是否开启 AOF 持久化模式，默认 no；</p><p><code>cluster-enabled</code>：是否开启集群模式，默认 no；</p><p><code>cluster-config-file</code>：集群节点信息文件；</p><p><code>cluster-node-timeout</code>：集群节点连接超时时间；</p><p><code>cluster-announce-ip</code>：集群节点 IP</p><ul><li><code>注意：</code> 如果你想要你的redis集群可以供外网访问，这里直接填 服务器的IP 地址即可</li><li>如若为了安全，只是在服务器内部进行访问，这里还需要做一些修改。</li></ul><p><code>cluster-announce-port</code>：集群节点映射端口；</p><p><code>cluster-announce-bus-port</code>：集群节点总线端口。</p><p>目录结构：（如果没有 <code>tree</code> 命令先安装 <code>yum install -y tree</code>）</p><p><img src="/Resources/image-20230602144300924.png" alt="image-20230602144300924"></p><h4 id="批量启动容器"><a href="#批量启动容器" class="headerlink" title="批量启动容器"></a>批量启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); \<br><span class="hljs-keyword">do</span> \<br>   docker run -it -d -p <span class="hljs-variable">$&#123;port&#125;</span>:<span class="hljs-variable">$&#123;port&#125;</span> -p 1<span class="hljs-variable">$&#123;port&#125;</span>:1<span class="hljs-variable">$&#123;port&#125;</span> \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf:/usr/local/etc/redis/redis.conf \<br>  --privileged=<span class="hljs-literal">true</span> -v /mydata/redis/cluster/node-<span class="hljs-variable">$&#123;port&#125;</span>/data:/data \<br>  --restart always --name redis-<span class="hljs-variable">$&#123;port&#125;</span> --net myredis \<br>  --sysctl net.core.somaxconn=1024 redis redis-server /usr/local/etc/redis/redis.conf<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-it</code>：交互</li><li><code>-d</code>：后台运行，容器启动完成后打印容器</li><li><code>--privileged</code>：是否让docker 应用容器 获取宿主机root权限（特殊权限-）</li><li><code>-p</code> :端口映射</li><li><code>-v</code>：文件挂载</li><li><code>--sysctl</code>：参数来设置系统参数，通过这些参数来调整系统性能</li><li><code>--restart always</code>：在容器退出时总是重启容器</li><li><code>--name</code>：给容器取名</li><li><code>--net myredis</code>：使用我们创建的虚拟网卡 （想详细了解，可以去看看Docker 网络方面知识）</li></ul><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps <br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144454028.png" alt="image-20230602144454028"></p><h4 id="创建Redis-Cluster集群"><a href="#创建Redis-Cluster集群" class="headerlink" title="创建Redis Cluster集群"></a>创建Redis Cluster集群</h4><p>可随意选择一个节点进入，创建Redis集群</p><p>以redis-6379容器为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入容器命令行</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6379 /bin/bash<br><br><span class="hljs-comment"># 创建集群</span><br>redis-cli  -a redis --cluster create ip:6379 ip:6380 ip:6381 ip:6382 ip:6383 ip:6384   --cluster-replicas 1<br><br><span class="hljs-comment"># 输入yes</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602144851659.png" alt="image-20230602144851659"></p><p><img src="/Resources/image-20230602144912764.png" alt="image-20230602144912764"></p><h4 id="查看集群信息-1"><a href="#查看集群信息-1" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis客户端</span><br>redis-cli -c -a redis<br><br><span class="hljs-comment"># 查看信息</span><br>cluster info<br><br><span class="hljs-comment"># 查看信息</span><br>cluster nodes<br><br><span class="hljs-comment"># 退出redis 和 退出容器</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145031973.png" alt="image-20230602145031973"></p><p><img src="/Resources/image-20230602145107211.png" alt="image-20230602145107211"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>打开两个连接，分别进入6379和8381容器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-6379 redis-cli -c -a redis<br><span class="hljs-comment"># 除了端口为6379的容器，其他容器都需要加上 -p xxxx，因为容器内部的端口不是6379，必须指定参数</span><br>docker <span class="hljs-built_in">exec</span> -it redis-6380 redis-cli -c -a redis -p 6380<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230602145439120.png" alt="image-20230602145439120"></p><h4 id="外网测试"><a href="#外网测试" class="headerlink" title="外网测试"></a>外网测试</h4><p>使用 <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">Another Redis Desktop Manager </a>连接redis</p><blockquote><p>单个连接</p></blockquote><p><img src="/Resources/image-20230602145709520.png" alt="image-20230602145709520"></p><blockquote><p>连接集群</p></blockquote><p><img src="/Resources/image-20230602145936243.png" alt="image-20230602145936243"></p><p><img src="/Resources/image-20230602150008387.png" alt="image-20230602150008387"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>连接ARDM连接6382端口的redis，6382中没有数据，且使用<code> info replication</code> 显示从节点连接数为0</p><p><img src="/Resources/image-20230602152054362.png" alt="image-20230602152054362"></p><p>查看6382的信息能看到主节点的ip，但是master_link_status:down 表示没有连接上主节点</p><p><img src="/Resources/image-20230602152212215.png" alt="image-20230602152212215"></p><p>解决：所有的配置文件加上这一句话，redis的连接密码，已修改之前的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">masterauth redis<br></code></pre></td></tr></table></figure><p>重启之后6379中的数据在6382中出现了</p><p><img src="/Resources/image-20230602153239637.png" alt="image-20230602153239637"></p><p>主节点中，从节点的连接数也变成1</p><p><img src="/Resources/image-20230602153749398.png" alt="image-20230602153749398"></p><p>从节点中master_link_status:up</p><p><img src="/Resources/image-20230602153736068.png" alt="image-20230602153736068"></p><p>并且master_replid也一致了</p><h4 id="批量停止容器（补充）"><a href="#批量停止容器（补充）" class="headerlink" title="批量停止容器（补充）"></a>批量停止容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker stop redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量删除容器（补充）"><a href="#批量删除容器（补充）" class="headerlink" title="批量删除容器（补充）"></a>批量删除容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker <span class="hljs-built_in">rm</span> redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="批量重启容器（补充）"><a href="#批量重启容器（补充）" class="headerlink" title="批量重启容器（补充）"></a>批量重启容器（补充）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 6379 6384); <br><span class="hljs-keyword">do</span> <br>docker restart redis-<span class="hljs-variable">$&#123;port&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）"><a href="#Redis主从集群-哨兵（海量存储-高并发写-高并发读-高可用）" class="headerlink" title="Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）"></a>Redis主从集群+哨兵（海量存储+高并发写+高并发读+高可用）</h3><p>基于第二步的主从集群，继续搭建主从集群+哨兵：这里搭建的是3主3从3哨兵</p><p>待完成：云服务器+Docker实现</p><h3 id="Redis主从集群-哨兵（虚拟机-Docker-compose实现）"><a href="#Redis主从集群-哨兵（虚拟机-Docker-compose实现）" class="headerlink" title="Redis主从集群+哨兵（虚拟机+Docker-compose实现）"></a>Redis主从集群+哨兵（虚拟机+Docker-compose实现）</h3><h4 id="Docker-compose搭建Redis-Sentinel"><a href="#Docker-compose搭建Redis-Sentinel" class="headerlink" title="Docker-compose搭建Redis Sentinel"></a>Docker-compose搭建Redis Sentinel</h4><p>文件组织格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-cluster<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">redis-sentinel</span><br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h5 id="1-Master-x2F-Slave"><a href="#1-Master-x2F-Slave" class="headerlink" title="1. Master&#x2F;Slave"></a>1. Master&#x2F;Slave</h5><p>进入<code>redis-cluster</code>文件夹，创建<code>docker-compose.yml</code>文件，<br>下面的Compose文件设置了1Master 2Slave</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-master</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/master:/data</span><br><br>  <span class="hljs-attr">slave1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6380</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave1:/data</span><br><br><br>  <span class="hljs-attr">slave2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-slave-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--slaveof</span> <span class="hljs-string">redis-master</span> <span class="hljs-number">6379</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">redispwd</span> <span class="hljs-string">--masterauth</span> <span class="hljs-string">redispwd</span>  <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6381</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/slave2:/data</span><br></code></pre></td></tr></table></figure><blockquote><p><code>--slaveof</code>可以换成<code>-replicaof</code><br>注意，如果设置了Redis客户端访问密码requirepass， 那么也要设置相同的副本集同步密码masterauth。</p></blockquote><p>另外我们后面使用哨兵模式能够完成故障转移，现有的Master可能会变成Slave，故在当前Master容器中也要携带masterauth参数。</p><h6 id="启动并查看容器"><a href="#启动并查看容器" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>会产生3个Redis容器，分别映射到宿主机6379、6380、6381端口， 默认连接在 <strong><code>redis-cluster-default</code>网桥</strong>（这个后面会用到，网桥的名字可以在执行<code>docker-compose up -d</code>中看到，见下图）。<br><img src="/Resources/Pasted%20image%2020220922163825.png"><br><img src="/Resources/Pasted%20image%2020220922163938.png"></p><blockquote><p>使用工具连接Redis时需要使用密码redispwd</p></blockquote><h5 id="2-Redis-Sentinel"><a href="#2-Redis-Sentinel" class="headerlink" title="2. Redis Sentinel"></a>2. Redis Sentinel</h5><p>很明显我们即将搭建的Sentinel容器需要能访问到以上3个容器，故需要在形成Sentinel容器时使用外置的 <strong><code>redis-cluster-default</code>网桥</strong></p><h6 id="进入redis-sentinel文件夹，创建docker-compose-yml文件，"><a href="#进入redis-sentinel文件夹，创建docker-compose-yml文件，" class="headerlink" title="进入redis-sentinel文件夹，创建docker-compose.yml文件，"></a>进入redis-sentinel文件夹，创建docker-compose.yml文件，</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.6&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">sentinel1:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-1</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26379</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-2</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26380</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span><br>  <span class="hljs-attr">sentinel3:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-sentinel-3</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">26381</span><span class="hljs-string">:26379</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-sentinel</span> <span class="hljs-string">/usr/local/etc/redis/sentinel.conf</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">redis-cluster_default</span><br></code></pre></td></tr></table></figure><h6 id="创建哨兵文件，将如下内容拷贝进去"><a href="#创建哨兵文件，将如下内容拷贝进去" class="headerlink" title="创建哨兵文件，将如下内容拷贝进去"></a>创建哨兵文件，将如下内容拷贝进去</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs conf">port 26379  <br>dir /tmp  <br>sentinel monitor mymaster 192.168.153.135 6379 2  <br>sentinel down-after-milliseconds mymaster 30000  <br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><p>带注释版</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 自定义集群名，其中192.168.153.135为 redis-master 的 ip，6379 为 redis-master 的端口，2 为最小投票数（因为有 3 台 Sentinel 所以可以设置成 2）  </span><br><span class="hljs-section"># sentinel通讯端口  </span><br>port 26379  <br>dir /tmp  <br><span class="hljs-section"># sentinel需要监控的master/slaver信息，格式为sentinel monitor <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterIP</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">masterPort</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>  </span><br><span class="hljs-section"># 其中<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>应该小于集群中slave的个数，当失效的节点数超过了<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quorum</span>&gt;</span></span>,则认为整个体系结构失效  </span><br>sentinel monitor mymaster 192.168.153.135 6379 2  <br><span class="hljs-section"># master被当前sentinel实例认定为失效的间隔时间，格式为sentinel down-after-milliseconds <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mastername</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">milliseconds</span>&gt;</span></span>  </span><br>sentinel down-after-milliseconds mymaster 30000  <br><span class="hljs-section"># 当新master产时，同时进行“slaveof”到新master并进行同步复制的slave个数  </span><br><span class="hljs-section"># 在salve执行salveof同步时，将会终止客户端请求。  </span><br><span class="hljs-section"># 此值较大,意味着“集群”终止客户端请求的时间总和和较大。  </span><br><span class="hljs-section"># 此值较小,意味着“集群”在故障转移期间，多个salve向客户端提供服务时仍然使用旧数据。  </span><br>sentinel parallel-syncs mymaster 1  <br>sentinel auth-pass mymaster redispwd  <br><span class="hljs-section"># failover过期时间。当failover开始后，在此时间内仍然没有触发任何failover操作，当前sentinel将会认为此次failoer失败。  </span><br>sentinel failover-timeout mymaster 180000  <br>sentinel deny-scripts-reconfig yes<br></code></pre></td></tr></table></figure><h6 id="将哨兵文件复制三份到docker-compose同一目录下"><a href="#将哨兵文件复制三份到docker-compose同一目录下" class="headerlink" title="将哨兵文件复制三份到docker-compose同一目录下"></a>将哨兵文件复制三份到docker-compose同一目录下</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis-sentinel<br><span class="hljs-code">├── docker-compose.yml</span><br><span class="hljs-code">├── sentinel1.conf</span><br><span class="hljs-code">├── sentinel2.conf</span><br><span class="hljs-code">├── sentinel3.conf</span><br></code></pre></td></tr></table></figure><h6 id="启动并查看容器-1"><a href="#启动并查看容器-1" class="headerlink" title="启动并查看容器"></a>启动并查看容器</h6><p>执行<code>docker-compose up -d</code>生成3个Sentinel容器。<br><img src="/Resources/Pasted%20image%2020220922163916.png"></p><h5 id="3-运行测试"><a href="#3-运行测试" class="headerlink" title="3. 运行测试"></a>3. 运行测试</h5><h6 id="测试Master-x2F-Slave"><a href="#测试Master-x2F-Slave" class="headerlink" title="测试Master&#x2F;Slave"></a>测试Master&#x2F;Slave</h6><p>使用可视化工具对6379（master节点）添加数据后，其他节点同步数据如图：<br><img src="/Resources/Pasted%20image%2020220921161453.png"></p><p>使用springboot应用添加数据后（添加的数据是<code>com.cqupt.dao.UserDao</code>），其他节点同步数据如图：（需要在<code>application.yml</code>中配置密码）<br><img src="/Resources/Pasted%20image%2020220921162153.png"></p><h6 id="测试Sentinel"><a href="#测试Sentinel" class="headerlink" title="测试Sentinel"></a>测试Sentinel</h6><p>查看哨兵的日志：<br><img src="/Resources/Pasted%20image%2020220922164106.png"></p><blockquote><p>上述日志中可以看出，哨兵监听master和slave节点</p></blockquote><p>等待30s后（防止其他错误发生，例如问题1等）停止redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164132.png"></p><p>通过redis可视化工具查看redis集群信息<br><img src="/Resources/Pasted%20image%2020220922142732.png"></p><blockquote><p>6380写入数据，同样可以在6381查看数据，另外6381不能写入数据，符合从节点的属性，因此在6379主节点挂掉后，6380成为了新的主节点，6381依然是从节点。</p></blockquote><p>打开redis-master服务器：<br><img src="/Resources/Pasted%20image%2020220922164250.png"></p><blockquote><p>上述日志表明哨兵检测到原master重新启动，将原master节点变成新master的从节点<br>此时，6380写入数据，同样可以在6381，6379查看数据。<br>测试省略！</p></blockquote><h6 id="验证Sentinel"><a href="#验证Sentinel" class="headerlink" title="验证Sentinel"></a>验证Sentinel</h6><p>进入redis-slave-1发现已经变成了主节点<br><img src="/Resources/Pasted%20image%2020220922164945.png"></p><p>进入redis-master发现已经变成了从节点<br><img src="/Resources/Pasted%20image%2020220922165048.png"></p><h4 id="可能遇到的错误信息"><a href="#可能遇到的错误信息" class="headerlink" title="可能遇到的错误信息"></a>可能遇到的错误信息</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h5><p>在启动之后查看哨兵的日志可能出现如图所示（没有关闭master，但是检测到了master关闭）<br><img src="/Resources/Pasted%20image%2020220922143955.png"><br><strong>这就需要开放端口访问，见虚拟机关闭防火墙</strong></p><h5 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h5><p>但是经过测试后发现6380和6381可以同步数据，79获取不到在80新添加的数据，查看6379的日志发现连接不上master<br><img src="/Resources/Pasted%20image%2020220922144318.png"></p><p><strong>检查<code>docker-compose.yml</code>文件中是否每个节点都添加了<code>masterauth redispwd</code> 选项，当时在主节点中添加导致错误</strong><br><img src="/Resources/Pasted%20image%2020220922153640.png"></p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL-5-7"><a href="#MySQL-5-7" class="headerlink" title="MySQL 5.7"></a>MySQL 5.7</h3><h4 id="1、搜索镜像-3"><a href="#1、搜索镜像-3" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214516.png" alt="Pasted image 20220711214516.png"></p><h4 id="2、安装指定版本-3"><a href="#2、安装指定版本-3" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><p><img src="/Resources/Pasted%20image%2020220711214709.png" alt="Pasted image 20220711214709.png"><br><img src="/Resources/Pasted%20image%2020220711214718.png" alt="Pasted image 20220711214718.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-2"><a href="#3、查看已安装的镜像-2" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><p><img src="/Resources/Pasted%20image%2020220711214829.png" alt="Pasted image 20220711214829.png"></p><h4 id="4、创建挂载的配置文件"><a href="#4、创建挂载的配置文件" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/conf<br><br><span class="hljs-comment"># 或者</span><br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql/&#123;data,conf,init&#125;<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动"><a href="#5、创建实例并启动" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3307:3306 --name mysql -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题，QWEIOP1234</span><br><br>部分参数说明<br>-p 3306:3306:将容器的3306端口映射到主机的3306端口<br><br>: 冒号前是宿主机的路径，冒号后是容器的路径<br>-v /mydata/mysql/conf:/etc/mysql:将配置文件夹挂载到主机<br>-v /mydata/mysql/log:/var/log/mysql:将日志文件夹挂载到主机<br>-v /mydata/mysql/data:/var/lib/mysql/:将配置文件夹挂载到主机<br>-e MYSQL_ROOT_PASSWORD=root:初始化root用户的密码<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220711215847.png" alt="Pasted image 20220711215847.png"></p><p>查看进程<code>docker ps</code><br><img src="/Resources/Pasted%20image%2020220712093152.png" alt="Pasted image 20220712093152.png"></p><p><code>docker exec -it mysql /bin/bash</code> 进入装载mysql的容器<br><img src="/Resources/Pasted%20image%2020220712093710.png" alt="Pasted image 20220712093710.png"><br><code>exit</code>退出装载mysql的容器</p><h4 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h4><h5 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mydata/mysql/conf<br></code></pre></td></tr></table></figure><h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><blockquote><p>按i进入编辑模式，按esc退出编辑模式，输入:wq保存退出</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi my.cnf<br></code></pre></td></tr></table></figure><p><code>my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[client]<br>default-character-set=utf8<br>[mysql]<br>default-character-set=utf8<br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></td></tr></table></figure><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql<br></code></pre></td></tr></table></figure><h5 id="进入交互模式"><a href="#进入交互模式" class="headerlink" title="进入交互模式"></a>进入交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql /bin/bash<br></code></pre></td></tr></table></figure><h5 id="查看容器的配置文件"><a href="#查看容器的配置文件" class="headerlink" title="查看容器的配置文件"></a>查看容器的配置文件</h5><p><img src="/Resources/Pasted%20image%2020220712102635.png" alt="Pasted image 20220712102635.png"></p><h5 id="退出交互模式"><a href="#退出交互模式" class="headerlink" title="退出交互模式"></a>退出交互模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h4 id="7、使用可视化数据库连接MySQL"><a href="#7、使用可视化数据库连接MySQL" class="headerlink" title="7、使用可视化数据库连接MySQL"></a>7、使用可视化数据库连接MySQL</h4><blockquote><p>注意，ip可能会改变，可以在虚拟机中使用<code>ip a</code>查看</p></blockquote><p><img src="/Resources/Pasted%20image%2020220711220215.png" alt="Pasted image 20220711220215.png"></p><blockquote><p>如果用的服务器的数据库，有可能被拒绝链接</p></blockquote><p>解决办法：<a href="https://blog.csdn.net/iiiiiilikangshuai/article/details/100905996">is not allowed to connect to this mysql server_可行的code的博客-CSDN博客</a></p><blockquote><p>如果用的虚拟机，有可能timed out: connect</p></blockquote><p>解决办法：关闭虚拟机的防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="MySQL-8"><a href="#MySQL-8" class="headerlink" title="MySQL 8"></a>MySQL 8</h3><h4 id="1、搜索镜像-4"><a href="#1、搜索镜像-4" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h4><h4 id="2、安装指定版本-4"><a href="#2、安装指定版本-4" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:latest 为<br><span class="hljs-comment"># 此时的latest 为8.0.27</span><br></code></pre></td></tr></table></figure><h4 id="3、查看已安装的镜像-3"><a href="#3、查看已安装的镜像-3" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h4><h4 id="4、创建挂载的配置文件-1"><a href="#4、创建挂载的配置文件-1" class="headerlink" title="4、创建挂载的配置文件"></a>4、创建挂载的配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bask">mkdir -p /mydata/mysql8/data<br>mkdir -p /mydata/mysql8/log<br>mkdir -p /mydata/mysql8/conf<br>mkdir -p /mydata/mysql8/mysql-files<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># 设置3306端口</span><br>port=3306<br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=1000<br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br>max_connect_errors=100<br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br>character-set-server=utf8mb4<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br>default_authentication_plugin=mysql_native_password<br><span class="hljs-comment">#是否对sql语句大小写敏感，1表示不敏感</span><br>lower_case_table_names = 1<br><span class="hljs-comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span><br><span class="hljs-comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span><br>interactive_timeout = 1800<br>wait_timeout = 1800<br><span class="hljs-comment">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span><br><span class="hljs-comment">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span><br>lock_wait_timeout = 3600<br><span class="hljs-comment">#内部内存临时表的最大值。</span><br><span class="hljs-comment">#比如大数据量的group by ,order by时可能用到临时表，</span><br><span class="hljs-comment">#超过了这个值将写入磁盘，系统IO压力增大</span><br>tmp_table_size = 64M<br>max_heap_table_size = 64M<br>[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default-character-set=utf8mb4<br>[client]<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br>port=3306<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><h4 id="5、创建实例并启动-1"><a href="#5、创建实例并启动-1" class="headerlink" title="5、创建实例并启动"></a>5、创建实例并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8 \<br>-v /mydata/mysql8/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8/data:/var/lib/mysql \<br>-v /mydata/mysql8/log:/var/log \<br>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \<br>-p 3307:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br><br><span class="hljs-comment"># 注：如果是服务器不要使用root这种简单密码，不然容易出问题</span><br><br><span class="hljs-comment"># 如果启动报错，确保data目录为空，再排查其他错误</span><br></code></pre></td></tr></table></figure><h3 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h3><p>以 <code>MySQL 8</code> 为例</p><p>安装好一台后，再以相同方式安装另一台如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/data<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/log<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/conf<br><span class="hljs-built_in">mkdir</span> -p /mydata/mysql8_slave/mysql-files<br><br><span class="hljs-comment"># 配置文件复制 mysql8 的</span><br><br>docker run  --restart=always --privileged=<span class="hljs-literal">true</span> --name mysql8_slave \<br>-v /mydata/mysql8_slave/conf:/etc/mysql/conf.d \<br>-v /mydata/mysql8_slave/data:/var/lib/mysql \<br>-v /mydata/mysql8_slave/log:/var/log \<br>-v /mydata/mysql8_slave/mysql-files:/var/lib/mysql-files \<br>-p 3308:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;root&#x27;</span> -d mysql:latest<br></code></pre></td></tr></table></figure><p>两台 <code>MySQL</code> 服务器如下：</p><p><img src="/Resources/image-20230629094614377.png" alt="image-20230629094614377"></p><p>修改 <code>mysql8</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]主服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#[必须]启用二进制日志,指名路径。</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">/var/log/mysql/binlog/atguigu-bin</span><br></code></pre></td></tr></table></figure><p>修改 <code>mysql8_slave</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#[必须]从服务器唯一ID</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 这里应该要启用二进制日志，但仅作演示，所以就省略了</span><br></code></pre></td></tr></table></figure><p>修改 <code>binlog</code> 文件夹权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exit</span> -it mysql8 /bin/bash<br><span class="hljs-built_in">cd</span> /var/log<br><span class="hljs-built_in">mkdir</span> -p mysql/binlog<br><span class="hljs-built_in">chown</span> -R -v mysql:mysql binlog<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart mysql8 mysql8_slave<br></code></pre></td></tr></table></figure><p>使用可视化软件连接两个容器或者分别进入容器中的 <code>MySQL</code> </p><p>在 主机：<code>mysql8</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;主机密码&#x27;;<br><br>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;<br><br>mysql&gt; show master status;<br># 保存File和Position，下一步会用到<br></code></pre></td></tr></table></figure><p><img src="/Resources/image-20230629100530400.png" alt="image-20230629100530400"></p><p>在从机：<code>mysql8_slave</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; change master to master_host=&#x27;主机ip&#x27;, master_user=&#x27;slave&#x27;, master_password=&#x27;主机密码&#x27;, master_port=主机端口, master_log_file=&#x27;atguigu-bin.000001&#x27;, master_log_pos=1531, master_connect_retry=30;<br># master_log_file 是上面的File<br># master_log_pos  是上面的Position<br><br><br>mysql&gt; show slave status;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|NO              |NO               |<br>+----------------+-----------------+<br><br>mysql&gt; start slave;<br>+----------------+-----------------+<br>|Slave_IO_Running|Slave_SQL_Running|<br>+----------------+-----------------+<br>|Yes             |Yes              |<br>+----------------+-----------------+<br># Yes 说明启动数据同步成功<br></code></pre></td></tr></table></figure><p>验证测试：</p><p>主机创建数据库 <code>test_bck</code></p><p>创建数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE account(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>NAME VARCHAR(15),<br>balance DECIMAL(10,2)<br>);<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO test_bck.account (id, NAME, balance) VALUES (1, &#x27;wtt&#x27;, 100.00)<br></code></pre></td></tr></table></figure><p>刷新从数据库的连接，并进行查询，可以发现数据已经同步了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from test_bck.account;<br>+--+----+-------+<br>|id|NAME|balance|<br>+--+----+-------+<br>|1 |wtt |100.00 |<br>+--+----+-------+<br></code></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 从机执行<br># 停止同步<br>mysql&gt; stop slave;<br># 如果再次使用数据同步，需要重新配置主从<br>mysql&gt; reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)<br></code></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="1、搜索镜像-5"><a href="#1、搜索镜像-5" class="headerlink" title="1、搜索镜像"></a>1、搜索镜像</h3><h3 id="2、安装指定版本-5"><a href="#2、安装指定版本-5" class="headerlink" title="2、安装指定版本"></a>2、安装指定版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx:1.19.10<br></code></pre></td></tr></table></figure><blockquote><p><img src="/Resources/Pasted%20image%2020220731180056.png"><br>问题：报错<br>原因：没有配置DNS<br>解决：配置DNS解析服务器<a href="%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1">配置虚拟机网卡</a><br>添加DNS1&#x3D;114.114.114.114, DNS2&#x3D;8.8.8.8</p></blockquote><h3 id="3、查看已安装的镜像-4"><a href="#3、查看已安装的镜像-4" class="headerlink" title="3、查看已安装的镜像"></a>3、查看已安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="3-5、创建挂载的配置文件"><a href="#3-5、创建挂载的配置文件" class="headerlink" title="3.5、创建挂载的配置文件"></a>3.5、创建挂载的配置文件</h3><blockquote><p>映射文件前，首先要<strong>先创建好</strong>才可以映射！<br>如果没有创建就执行的话，docker会默认映射文件夹的类型📂（并且会自动创建相应的文件夹），这里就会自动创建software下的nginx文件夹📂和nginx.conf文件夹📂<br> <img src="/Resources/Pasted%20image%2020220731200319.png"></p></blockquote><p>配置<code>nginx.conf</code>有两种方法：<br>第一种：网上找<br><strong>第二种：复制容器内的<code>nginx.conf</code></strong></p><ul><li>删除刚刚<code>docker</code>自动创建的<code>nginx.conf</code>📂  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf nginx.conf<br></code></pre></td></tr></table></figure></li><li>复制  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nginx:/etc/nginx/nginx.conf /root/software/nginx/nginx.conf<br></code></pre></td></tr></table></figure></li></ul><h3 id="4、创建实例并启动-2"><a href="#4、创建实例并启动-2" class="headerlink" title="4、创建实例并启动"></a>4、创建实例并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 80:80 --name nginx -d -v /root/software/nginx/nginx.conf:/etc/nginx/nginx.conf nginx:1.19.10 <br><br>docker run -p 80:80 --name nginx -d -v /root/html:/usr/share/nginx/html nginx:1.19.10 <br></code></pre></td></tr></table></figure><blockquote><p>当挂载配置文件时：使用nginx的代理服务器功能，实现反向代理，负载均衡功能<br>当挂载nginx家目录时（家目录的位置在第8部分）：使用nginx的服务器功能<br><strong>也可以都挂载，两个-v</strong></p></blockquote><blockquote><p>这里没有映射整个目录，而仅仅是单个文件，说明该目录还有其他文件不能被覆盖！<br><img src="/Resources/Pasted%20image%2020220731195424.png"></p></blockquote><h3 id="5、查看启动的服务-1"><a href="#5、查看启动的服务-1" class="headerlink" title="5、查看启动的服务"></a>5、查看启动的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><h3 id="6、测试Nginx"><a href="#6、测试Nginx" class="headerlink" title="6、测试Nginx"></a>6、测试Nginx</h3><p><img src="/Resources/Pasted%20image%2020220731193838.png"></p><h3 id="7、进入容器"><a href="#7、进入容器" class="headerlink" title="7、进入容器"></a>7、进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="8、修改页面"><a href="#8、修改页面" class="headerlink" title="8、修改页面"></a>8、修改页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name index.html<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220731194649.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/nginx/html<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;i love docker&quot;</span> &gt; index.html<br></code></pre></td></tr></table></figure><p><img src="/Resources/Pasted%20image%2020220731194731.png"></p><h3 id="9、挂载配置文件"><a href="#9、挂载配置文件" class="headerlink" title="9、挂载配置文件"></a>9、挂载配置文件</h3><p>首先查找nginx是否有配置文件<br><img src="/Resources/Pasted%20image%2020220731194825.png"><br>所以应该在宿主机中创建配置文件以映射到这个文件</p><p>官网确认：</p><blockquote><p><code>:ro</code> ：只读<br><img src="/Resources/Pasted%20image%2020220731195038.png"></p></blockquote><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="1、下载-RabbitMQ-镜像"><a href="#1、下载-RabbitMQ-镜像" class="headerlink" title="1、下载 RabbitMQ 镜像"></a>1、下载 RabbitMQ 镜像</h3><p>下载最新版本的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p>更多版本的镜像可以访问 Docker 官网：<code>https://hub.docker.com/_/rabbitmq?tab=tags</code></p><h3 id="2、创建并运行-RabbitMQ-容器"><a href="#2、创建并运行-RabbitMQ-容器" class="headerlink" title="2、创建并运行 RabbitMQ 容器"></a>2、创建并运行 RabbitMQ 容器</h3><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 15672:15672 -p 5672:5672 \<br>-e RABBITMQ_DEFAULT_USER=admin \<br>-e RABBITMQ_DEFAULT_PASS=admin \<br>--hostname myRabbit \<br>--name rabbitmq \<br>rabbitmq:management<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d：表示在后台运行容器；</li><li>-p：将容器的端口 5672（应用访问端口）和 15672 （控制台Web端口号）映射到主机中；</li><li>-e：指定环境变量：<ul><li>RABBITMQ_DEFAULT_VHOST：默认虚拟机名；</li><li>RABBITMQ_DEFAULT_USER：默认的用户名；</li><li>RABBITMQ_DEFAULT_PASS：默认的用户密码；</li></ul></li><li>–hostname：指定主机名（RabbitMQ 的一个重要注意事项是它根据所谓的 节点名称 存储数据，默认为主机名）；</li><li>–name rabbitmq：设置容器名称；</li><li>rabbitmq：容器使用的镜像名称；</li></ul><h4 id="查看启动情况："><a href="#查看启动情况：" class="headerlink" title="查看启动情况："></a>查看启动情况：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -l<br>------------<br>CONTAINER ID   IMAGE                 COMMAND                  CREATED              STATUS              PORTS                                                                                                                                                 NAMES<br>5df031b58d0f   rabbitmq:management   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About a minute ago   Up About a minute   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbitmq<br></code></pre></td></tr></table></figure><p>设置 docker 启动的时候自动启动（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update rabbitmq --restart=always<br></code></pre></td></tr></table></figure><h3 id="3、访问-RabbitMQ-后台管理"><a href="#3、访问-RabbitMQ-后台管理" class="headerlink" title="3、访问 RabbitMQ 后台管理"></a>3、访问 RabbitMQ 后台管理</h3><p>浏览器输入地址：<a href="http://ip:15672/">http://ip:15672</a> 即可访问后台管理页面，这里的 ip 为运行 RabbitMQ 所在的服务器的 IP 地址；<br>默认的用户名和密码都是 guest（如果没有在容器创建的时候指定用户名密码）；<br>但由于我们启动的时候设置了默认的用户名和密码，所以我们可以使用设置的用户名和密码登录。(admin.admin)<br><img src="/Resources/Pasted%20image%2020220713154424.png" alt="Pasted image 20220713154424.png"><br><img src="/Resources/Pasted%20image%2020220713154355.png" alt="Pasted image 20220713154355.png"></p><p>提示： 如果无法访问可以尝试开启防火墙 15672 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=15672/tcp --permanent　　　　　　　　<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h2 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>安装之前你需要准备一个mysql，当前安装方式是将数据持久化到数据库中的，这里的部署是单机模式</p><h3 id="1、Docker-拉取镜像"><a href="#1、Docker-拉取镜像" class="headerlink" title="1、Docker 拉取镜像"></a>1、Docker 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nacos/nacos-server<br></code></pre></td></tr></table></figure><h3 id="2、挂载目录"><a href="#2、挂载目录" class="headerlink" title="2、挂载目录"></a>2、挂载目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#新建nacos目录</span><br>mkdir -p <span class="hljs-regexp">/mydata/</span>nacos<br></code></pre></td></tr></table></figure><h3 id="3、启动nacos并复制文件到宿主机，关闭容器"><a href="#3、启动nacos并复制文件到宿主机，关闭容器" class="headerlink" title="3、启动nacos并复制文件到宿主机，关闭容器"></a>3、启动nacos并复制文件到宿主机，关闭容器</h3><p>这一步启动nacos是为了将nacos里面的文件拷贝出到挂载目录中，这样我们就可以直接修改挂载目录中文件来映射到容器里面去了</p><h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 8848:8848 --name nacos -d nacos/nacos-server<br></code></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/logs/ /mydata/nacos/logs/<br>docker <span class="hljs-built_in">cp</span> nacos:/home/nacos/conf/ /mydata/nacos/conf/<br></code></pre></td></tr></table></figure><h4 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> -f nacos<br></code></pre></td></tr></table></figure><h3 id="4、mysql中创建nacos所需的表"><a href="#4、mysql中创建nacos所需的表" class="headerlink" title="4、mysql中创建nacos所需的表"></a>4、mysql中创建nacos所需的表</h3><ul><li>mysql中新建一个库，名字可自定义，这里就用nacos-config</li><li>从 <a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">nacos&#x2F;nacos-db.sql</a> 复制sql语句，在nacos-config库中执行，创建所需的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="5、再次启动nacos"><a href="#5、再次启动nacos" class="headerlink" title="5、再次启动nacos"></a>5、再次启动nacos</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name nacos -p 8848:8848  -p 9848:9848 -p 9849:9849 --privileged=<span class="hljs-literal">true</span> -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -v /mydata/nacos/logs/:/home/nacos/logs -v /mydata/nacos/conf/:/home/nacos/conf/ --restart=always nacos/nacos-server<br></code></pre></td></tr></table></figure><ul><li>docker run -d ： 启动容器 -d是后台启动并返回容器id的意思</li><li>-name nacos ：为容器指定一个名称</li><li>-p 8848:8848 -p 9848:9848 -p 9849:9849 ： 指定端口映射，注意这里的p不能大写，大写是随机端口映射</li><li>–privileged&#x3D;true ： 扩大容器内的权限，将容器内的权限变为root权限，不加的话就是普通用户权限，可能会出现cannot open directory</li><li>-e JVM_XMS&#x3D;256m ： 为jvm启动时分配的内存</li><li>-e JVM_XMX&#x3D;256m ： 为jvm运行过程中分配的最大内存</li><li>-e MODE&#x3D;standalone ： 使用 standalone模式（单机模式）,MODE值有cluster（集群）模式&#x2F;standalone模式两种，MODE必须大写</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;logs&#x2F;:&#x2F;home&#x2F;nacos&#x2F;logs : 将容器的&#x2F;home&#x2F;nacos&#x2F;logs目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;logs</li><li>-v &#x2F;mydata&#x2F;nacos&#x2F;conf&#x2F;:&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;： 将容器的&#x2F;home&#x2F;nacos&#x2F;conf目录挂载到 &#x2F;mydata&#x2F;nacos&#x2F;conf</li><li>–restart&#x3D;always ：重启docker时，自动启动相关容器</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要在防火墙开放相关端口，如果你是云服务器，开放安全组，下面提供相关语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 开放端口8848 9848 9849</span><br>firewall-cmd --zone=public --add-port=8848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9848/tcp --permanent<br>firewall-cmd --zone=public --add-port=9849/tcp --permanent<br><br><span class="hljs-comment">## 重启防火墙</span><br>firewall-cmd --reload<br><br><span class="hljs-comment">## 查看所有开启的端口</span><br>firewall-cmd --zone=public --list-ports<br><br><span class="hljs-comment">## 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="6、修改配置文件-1"><a href="#6、修改配置文件-1" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://192.168.153.135:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br><span class="hljs-comment"># 上面的 192.168.153.135 写你的 MySQL 数据库的 IP</span><br></code></pre></td></tr></table></figure><h3 id="7、验证（可选）"><a href="#7、验证（可选）" class="headerlink" title="7、验证（可选）"></a>7、验证（可选）</h3><p>验证配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 因为我们在第三步已经复制了logs和conf到了我们的宿主机里面，那么我们可以直接修改application.properties文件映射到容器里，可以通过下面的语句来查看</span><br><br><span class="hljs-comment">## 进入到nacos容器里</span><br>docker <span class="hljs-built_in">exec</span> -it nacos /bin/bash<br><br><span class="hljs-comment">## 查看application.properties文件</span><br><span class="hljs-built_in">cat</span> /home/nacos/conf/application.properties<br><br><span class="hljs-comment">## 退出容器</span><br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>验证数据库是否连接成功：</p><p>进入nacos，新建命名空间，查看表tenant_info是否有对应的信息</p><h3 id="8、问题"><a href="#8、问题" class="headerlink" title="8、问题"></a>8、问题</h3><p>第六步修改配置文件，最初的版本为：数据库ip为localhost</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在宿主机中修改application.properties文件</span><br>vim /mydata/nacos/conf/application.properties<br><br>spring.datasource.platform=mysql<br>db.num=1<br>db.url.0=jdbc:mysql://localhost:3306/nacos-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br>db.user=root<br>db.password=root<br><br></code></pre></td></tr></table></figure><p>第一次可以运行，但是当虚拟机重启时，就连不上console了，经过一顿百度，可能是因为这个配置文件是错误的，nacos自动使用了内置的数据源，内置数据源是基于内存的，断电消失，因此重启之后，数据也没有了，导致进不去了，之后有时间使用docker 重新建一个实例化一个容器，然后再试试</p><h2 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull minio/minio<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /mydata/minio/config<br><span class="hljs-built_in">mkdir</span> -p /mydata/minio/data<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--name minio \<br>-p 9000:9000 \<br>-p 9001:9001 \<br>-e <span class="hljs-string">&quot;MINIO_PROMETHEUS_AUTH_TYPE=public&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_USER=minioadmin&quot;</span> \<br>-e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=minioadmin&quot;</span> \<br>-v /mydata/minio/data:/data \<br>-v /mydata/minio/config:/root/.minio \<br>-d minio/minio server /data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[MinIO Console](http://192.168.153.135:9001/login)<br></code></pre></td></tr></table></figure><h2 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h2><p>一、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><p>二、创建映射容器的文件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p -m 777 /mydata/xxl-job/data/applogs<br></code></pre></td></tr></table></figure><p>三、创建application.properties文件，<strong>修改数据库相关信息</strong>然后放入到&#x2F;mydata&#x2F;xxl-job目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">### web</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/xxl-job-admin</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### actuator</span><br><span class="hljs-attr">management.server.servlet.context-path</span>=<span class="hljs-string">/actuator</span><br><span class="hljs-attr">management.health.mail.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### resources</span><br><span class="hljs-attr">spring.mvc.servlet.load-on-startup</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/static/</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### freemarker</span><br><span class="hljs-attr">spring.freemarker.templateLoaderPath</span>=<span class="hljs-string">classpath:/templates/</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.request-context-attribute</span>=<span class="hljs-string">request</span><br><span class="hljs-attr">spring.freemarker.settings.number_format</span>=<span class="hljs-string">0.##########</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="hljs-comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, datasource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://192.168.153.135:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### datasource-pool</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.datasource.hikari.minimum-idle</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">spring.datasource.hikari.auto-commit</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.hikari.idle-timeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">spring.datasource.hikari.pool-name</span>=<span class="hljs-string">HikariCP</span><br><span class="hljs-attr">spring.datasource.hikari.max-lifetime</span>=<span class="hljs-string">900000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-timeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-test-query</span>=<span class="hljs-string">SELECT 1</span><br><span class="hljs-attr">spring.datasource.hikari.validation-timeout</span>=<span class="hljs-string">1000</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, email</span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-attr">spring.mail.port</span>=<span class="hljs-string">25</span><br><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.from</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, access token</span><br><span class="hljs-attr">xxl.job.accessToken</span>=<span class="hljs-string">default_token</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span><br><span class="hljs-attr">xxl.job.i18n</span>=<span class="hljs-string">zh_CN</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">## xxl-job, triggerpool max size</span><br><span class="hljs-attr">xxl.job.triggerpool.fast.max</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">xxl.job.triggerpool.slow.max</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">### xxl-job, log retention days</span><br><span class="hljs-attr">xxl.job.logretentiondays</span>=<span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>四、导入mysql数据库，执行tables_xxl_job.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<br># XXL<span class="hljs-operator">-</span>JOB v2<span class="hljs-number">.3</span><span class="hljs-number">.1</span><br># Copyright (c) <span class="hljs-number">2015</span><span class="hljs-operator">-</span>present, xuxueli.<br> <br><span class="hljs-keyword">CREATE</span> database if <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `xxl_job` <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci;<br>use `xxl_job`;<br> <br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_info` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;作者&#x27;</span>,<br>  `alarm_email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;报警邮件&#x27;</span>,<br>  `schedule_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;NONE&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度类型&#x27;</span>,<br>  `schedule_conf` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度配置，值含义取决于调度类型&#x27;</span>,<br>  `misfire_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度过期策略&#x27;</span>,<br>  `executor_route_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器路由策略&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_block_strategy` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;阻塞处理策略&#x27;</span>,<br>  `executor_timeout` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;任务执行超时时间，单位秒&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `glue_updatetime` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE更新时间&#x27;</span>,<br>  `child_jobid` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;子任务ID，多个逗号分隔&#x27;</span>,<br>  `trigger_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;调度状态：0-停止，1-运行&#x27;</span>,<br>  `trigger_last_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;上次调度时间&#x27;</span>,<br>  `trigger_next_time` <span class="hljs-type">bigint</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;下次调度时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_group` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器主键ID&#x27;</span>,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `executor_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器地址，本次执行的地址&#x27;</span>,<br>  `executor_handler` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务handler&#x27;</span>,<br>  `executor_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务参数&#x27;</span>,<br>  `executor_sharding_param` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器任务分片参数，格式如 1/2&#x27;</span>,<br>  `executor_fail_retry_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;失败重试次数&#x27;</span>,<br>  `trigger_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `trigger_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-结果&#x27;</span>,<br>  `trigger_msg` text COMMENT <span class="hljs-string">&#x27;调度-日志&#x27;</span>,<br>  `handle_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-时间&#x27;</span>,<br>  `handle_code` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行-状态&#x27;</span>,<br>  `handle_msg` text COMMENT <span class="hljs-string">&#x27;执行-日志&#x27;</span>,<br>  `alarm_status` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `I_trigger_time` (`trigger_time`),<br>  KEY `I_handle_code` (`handle_code`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_log_report` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `trigger_day` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;调度-时间&#x27;</span>,<br>  `running_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;运行中-日志数量&#x27;</span>,<br>  `suc_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行成功-日志数量&#x27;</span>,<br>  `fail_count` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行失败-日志数量&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_trigger_day` (`trigger_day`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_logglue` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `job_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;任务，主键ID&#x27;</span>,<br>  `glue_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE类型&#x27;</span>,<br>  `glue_source` mediumtext COMMENT <span class="hljs-string">&#x27;GLUE源代码&#x27;</span>,<br>  `glue_remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;GLUE备注&#x27;</span>,<br>  `add_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_registry` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `registry_group` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `registry_value` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_group` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器AppName&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;执行器名称&#x27;</span>,<br>  `address_type` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;</span>,<br>  `address_list` text COMMENT <span class="hljs-string">&#x27;执行器地址列表，多地址逗号分隔&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_user` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;账号&#x27;</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>  `role` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色：0-普通用户、1-管理员&#x27;</span>,<br>  `permission` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;权限：执行器ID列表，多个逗号分割&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `i_username` (`username`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `xxl_job_lock` (<br>  `lock_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;锁名称&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`lock_name`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br> <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;xxl-job-executor-sample&#x27;</span>, <span class="hljs-string">&#x27;示例执行器&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;测试任务1&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;XXL&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;CRON&#x27;</span>, <span class="hljs-string">&#x27;0 0 0 * * ? *&#x27;</span>, <span class="hljs-string">&#x27;DO_NOTHING&#x27;</span>, <span class="hljs-string">&#x27;FIRST&#x27;</span>, <span class="hljs-string">&#x27;demoJobHandler&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;SERIAL_EXECUTION&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;BEAN&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;GLUE代码初始化&#x27;</span>, <span class="hljs-string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `xxl_job_lock` ( `lock_name`) <span class="hljs-keyword">VALUES</span> ( <span class="hljs-string">&#x27;schedule_lock&#x27;</span>);<br> <br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>五、执行docker命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  -p 18080:8080 -d --name=xxl-job-admin --restart=always -v /mydata/xxl-job/application.properties:/application.properties  -e PARAMS=<span class="hljs-string">&#x27;--spring.config.location=/application.properties&#x27;</span> xuxueli/xxl-job-admin:2.3.1<br></code></pre></td></tr></table></figure><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br><br>docker run --name nginx-test -p 80:80 -d nginx<br><br><span class="hljs-built_in">mkdir</span> -p /mydata/nginx/&#123;conf,html,logs&#125;<br><br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/nginx.conf /mydata/nginx/conf/nginx.conf<br>docker <span class="hljs-built_in">cp</span> nginx-test:/etc/nginx/conf.d /mydata/nginx/conf/conf.d<br>docker <span class="hljs-built_in">cp</span> nginx-test:/usr/share/nginx/html/ /mydata/nginx/<br><br>docker stop nginx-test<br>docker <span class="hljs-built_in">rm</span> nginx-test<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker run \<br>-p 80:80 \<br>--name nginx \<br>-v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v /mydata/nginx/conf/conf.d:/etc/nginx/conf.d \<br>-v /mydata/nginx/log:/var/log/nginx \<br>-v /mydata/nginx/html:/usr/share/nginx/html \<br>-d nginx<br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>0、每次挂起再启动，ssh可以正常连接，mysql这些就连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>1、虚拟机没有网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br><span class="hljs-comment"># 显示未知的名称或服务</span><br></code></pre></td></tr></table></figure><p>解决：配置dns(在网卡的配置文件添加如下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">DNS1=8.8.8.8                <span class="hljs-comment">#手动添加DNS1</span><br>DNS2=114.114.114.114        <span class="hljs-comment">#手动添加DNS2</span><br><br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>2、如果安装镜像报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error response from daemon: Get <span class="hljs-string">&quot;https://registry-1.docker.io/v2/&quot;</span>: dial tcp: lookup registry-1.dock<br></code></pre></td></tr></table></figure><p>解决：可能是没网络，参考1，如果没问题，检查镜像加速是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker info<br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart docker.service<br></code></pre></td></tr></table></figure><p>3、连接不上虚拟机</p><p>shell连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">service NetworkManager stop<br>service network restart<br>systemctl restart network.service<br></code></pre></td></tr></table></figure><p>mysql等容器连不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service //查看防火墙状态<br>systemctl stop firewalld.service//关闭防火墙<br>systemctl <span class="hljs-built_in">disable</span> firewalld.service//开机后也不得使用<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portainer</tag>
      
      <tag>Elasitc</tag>
      
      <tag>Mysql</tag>
      
      <tag>Redis</tag>
      
      <tag>Nginx</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
